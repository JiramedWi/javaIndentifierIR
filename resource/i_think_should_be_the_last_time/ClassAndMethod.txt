PriorityTest@!@testOffInt@!@[assertEquals, (, Integer, ., MAX_VALUE, ,, Priority, ., OFF_INT, ), ;]
PriorityTest@!@testFatalInt@!@[assertEquals, (, 50000, ,, Priority, ., FATAL_INT, ), ;]
PriorityTest@!@testErrorInt@!@[assertEquals, (, 40000, ,, Priority, ., ERROR_INT, ), ;]
PriorityTest@!@testWarnInt@!@[assertEquals, (, 30000, ,, Priority, ., WARN_INT, ), ;]
PriorityTest@!@testInfoInt@!@[assertEquals, (, 20000, ,, Priority, ., INFO_INT, ), ;]
PriorityTest@!@testDebugInt@!@[assertEquals, (, 10000, ,, Priority, ., DEBUG_INT, ), ;]
PriorityTest@!@testAllInt@!@[assertEquals, (, Integer, ., MIN_VALUE, ,, Priority, ., ALL_INT, ), ;]
PriorityTest@!@testFatal@!@[assertTrue, (, Priority, ., FATAL, instanceof, Level, ), ;]
PriorityTest@!@testERROR@!@[assertTrue, (, Priority, ., ERROR, instanceof, Level, ), ;]
PriorityTest@!@testWARN@!@[assertTrue, (, Priority, ., WARN, instanceof, Level, ), ;]
PriorityTest@!@testINFO@!@[assertTrue, (, Priority, ., INFO, instanceof, Level, ), ;]
PriorityTest@!@testDEBUG@!@[assertTrue, (, Priority, ., DEBUG, instanceof, Level, ), ;]
PriorityTest@!@testEqualsNull@!@[assertFalse, (, Priority, ., DEBUG, ., equals, (, null, ), ), ;]
PriorityTest@!@testEqualsLevel@!@[assertTrue, (, Priority, ., DEBUG, ., equals, (, Level, ., DEBUG, ), ), ;]
PriorityTest@!@testGetAllPossiblePriorities@!@[Priority, [, ], priorities, =, Priority, ., getAllPossiblePriorities, (, ), ;, assertEquals, (, 5, ,, priorities, ., length, ), ;]
PriorityTest@!@testToPriorityString@!@[assertTrue, (, Priority, ., toPriority, (, "DEBUG", ), ==, Level, ., DEBUG, ), ;]
PriorityTest@!@testToPriorityInt@!@[assertTrue, (, Priority, ., toPriority, (, Priority, ., DEBUG_INT, ), ==, Level, ., DEBUG, ), ;]
PriorityTest@!@testToPriorityStringPriority@!@[assertTrue, (, Priority, ., toPriority, (, "foo", ,, Priority, ., DEBUG, ), ==, Priority, ., DEBUG, ), ;]
PriorityTest@!@testToPriorityIntPriority@!@[assertTrue, (, Priority, ., toPriority, (, 17, ,, Priority, ., DEBUG, ), ==, Priority, ., DEBUG, ), ;]
PriorityTest@!@testDotlessLowerI@!@[Priority, level, =, Priority, ., toPriority, (, "\u0131nfo", ), ;, assertEquals, (, "INFO", ,, level, ., toString, (, ), ), ;]
PriorityTest@!@testDottedLowerI@!@[Locale, defaultLocale, =, Locale, ., getDefault, (, ), ;, Locale, turkey, =, new, Locale, (, "tr", ,, "TR", ), ;, Locale, ., setDefault, (, turkey, ), ;, Priority, level, =, Priority, ., toPriority, (, "info", ), ;, Locale, ., setDefault, (, defaultLocale, ), ;, assertEquals, (, "INFO", ,, level, ., toString, (, ), ), ;]
PropertyConfiguratorTest@!@testBadUnicodeEscape@!@[String, fileName, =, "output/badescape.properties", ;, FileWriter, writer, =, new, FileWriter, (, fileName, ), ;, writer, ., write, (, "log4j.rootLogger=\\uXX41", ), ;, writer, ., close, (, ), ;, PropertyConfigurator, ., configure, (, fileName, ), ;, File, file, =, new, File, (, fileName, ), ;, assertTrue, (, file, ., delete, (, ), ), ;, assertFalse, (, file, ., exists, (, ), ), ;]
PropertyConfiguratorTest@!@testURL@!@[File, file, =, new, File, (, "output/unclosed.properties", ), ;, FileWriter, writer, =, new, FileWriter, (, file, ), ;, writer, ., write, (, "log4j.rootLogger=debug", ), ;, writer, ., close, (, ), ;, URL, url, =, file, ., toURL, (, ), ;, PropertyConfigurator, ., configure, (, url, ), ;, assertTrue, (, file, ., delete, (, ), ), ;, assertFalse, (, file, ., exists, (, ), ), ;]
PropertyConfiguratorTest@!@testURLBadEscape@!@[File, file, =, new, File, (, "output/urlbadescape.properties", ), ;, FileWriter, writer, =, new, FileWriter, (, file, ), ;, writer, ., write, (, "log4j.rootLogger=\\uXX41", ), ;, writer, ., close, (, ), ;, URL, url, =, file, ., toURL, (, ), ;, PropertyConfigurator, ., configure, (, url, ), ;, assertTrue, (, file, ., delete, (, ), ), ;, assertFalse, (, file, ., exists, (, ), ), ;]
PropertyConfiguratorTest@!@testInputStream@!@[File, file, =, new, File, (, "input/filter1.properties", ), ;, assertTrue, (, file, ., exists, (, ), ), ;, FileInputStream, inputStream, =, new, FileInputStream, (, file, ), ;, try, {, PropertyConfigurator, ., configure, (, inputStream, ), ;, }, finally, {, inputStream, ., close, (, ), ;, }, PropertyConfigurator, ., configure, (, inputStream, ), ;, inputStream, ., close, (, ), ;, this, ., validateNested, (, ), ;, LogManager, ., resetConfiguration, (, ), ;]
PropertyConfiguratorTest@!@validateNested@!@[RollingFileAppender, rfa, =, (, RollingFileAppender, ), Logger, ., getLogger, (, "org.apache.log4j.PropertyConfiguratorTest", ), ., getAppender, (, "ROLLING", ), ;, FixedWindowRollingPolicy, rollingPolicy, =, (, FixedWindowRollingPolicy, ), rfa, ., getRollingPolicy, (, ), ;, assertEquals, (, "filterBase-test1.log", ,, rollingPolicy, ., getActiveFileName, (, ), ), ;, assertEquals, (, "filterBased-test1.%i", ,, rollingPolicy, ., getFileNamePattern, (, ), ), ;, assertEquals, (, 0, ,, rollingPolicy, ., getMinIndex, (, ), ), ;, assertTrue, (, rollingPolicy, ., isActivated, (, ), ), ;, FilterBasedTriggeringPolicy, triggeringPolicy, =, (, FilterBasedTriggeringPolicy, ), rfa, ., getTriggeringPolicy, (, ), ;, LevelRangeFilter, filter, =, (, LevelRangeFilter, ), triggeringPolicy, ., getFilter, (, ), ;, assertTrue, (, Level, ., INFO, ., equals, (, filter, ., getLevelMin, (, ), ), ), ;]
PropertyConfiguratorTest@!@testJarURL@!@[File, dir, =, new, File, (, "output", ), ;, dir, ., mkdirs, (, ), ;, File, file, =, new, File, (, "output/properties.jar", ), ;, ZipOutputStream, zos, =, new, ZipOutputStream, (, new, FileOutputStream, (, file, ), ), ;, zos, ., putNextEntry, (, new, ZipEntry, (, LogManager, ., DEFAULT_CONFIGURATION_FILE, ), ), ;, zos, ., write, (, "log4j.rootLogger=debug", ., getBytes, (, ), ), ;, zos, ., closeEntry, (, ), ;, zos, ., close, (, ), ;, URL, url, =, new, URL, (, "jar:", +, file, ., toURL, (, ), +, "!/", +, LogManager, ., DEFAULT_CONFIGURATION_FILE, ), ;, PropertyConfigurator, ., configure, (, url, ), ;, assertTrue, (, file, ., delete, (, ), ), ;, assertFalse, (, file, ., exists, (, ), ), ;]
PropertyConfiguratorTest@!@testReset@!@[VectorAppender, appender, =, new, VectorAppender, (, ), ;, appender, ., setName, (, "A1", ), ;, Logger, ., getRootLogger, (, ), ., addAppender, (, appender, ), ;, Properties, props, =, new, Properties, (, ), ;, props, ., put, (, "log4j.reset", ,, "true", ), ;, PropertyConfigurator, ., configure, (, props, ), ;, assertNull, (, Logger, ., getRootLogger, (, ), ., getAppender, (, "A1", ), ), ;, LogManager, ., resetConfiguration, (, ), ;]
PropertyConfiguratorTest@!@activateOptions@!@[activated, =, true, ;]
PropertyConfiguratorTest@!@isActivated@!@[return, activated, ;]
RewriteAppenderTest@!@setUp@!@[LogManager, ., getLoggerRepository, (, ), ., resetConfiguration, (, ), ;, Hashtable, context, =, MDC, ., getContext, (, ), ;, if, (, context, !=, null, ), {, context, ., clear, (, ), ;, }, context, ., clear, (, ), ;]
RewriteAppenderTest@!@tearDown@!@[LogManager, ., getLoggerRepository, (, ), ., shutdown, (, ), ;]
RewriteAppenderTest@!@configure@!@[InputStream, is, =, RewriteAppenderTest, ., class, ., getResourceAsStream, (, resourceName, ), ;, DocumentBuilderFactory, factory, =, DocumentBuilderFactory, ., newInstance, (, ), ;, factory, ., setNamespaceAware, (, false, ), ;, DocumentBuilder, builder, =, factory, ., newDocumentBuilder, (, ), ;, Document, doc, =, builder, ., parse, (, is, ), ;, DOMConfigurator, ., configure, (, doc, ., getDocumentElement, (, ), ), ;]
RewriteAppenderTest@!@testMapPolicy@!@[configure, (, "map.xml", ), ;, Logger, logger, =, Logger, ., getLogger, (, RewriteAppenderTest, ., class, ), ;, logger, ., info, (, "Message 0", ), ;, MDC, ., put, (, "p1", ,, "Hola", ), ;, Map, msg, =, new, TreeMap, (, ), ;, msg, ., put, (, "p1", ,, "Hello", ), ;, msg, ., put, (, "p2", ,, "World", ), ;, msg, ., put, (, "x1", ,, "Mundo", ), ;, logger, ., info, (, msg, ), ;, msg, ., put, (, "message", ,, "Message 1", ), ;, logger, ., info, (, msg, ), ;, assertTrue, (, Compare, ., compare, (, RewriteAppenderTest, ., class, ,, "temp", ,, "map.log", ), ), ;]
RewriteAppenderTest@!@getP2@!@[this, ., p2, =, p2, ;, this, ., x1, =, x1, ;, return, p2, ;]
RewriteAppenderTest@!@getX1@!@[return, x1, ;]
RewriteAppenderTest@!@toString@!@[return, "I am bean.", ;]
XLoggerTestCase@!@tearDown@!@[logger, ., getLoggerRepository, (, ), ., resetConfiguration, (, ), ;]
XLoggerTestCase@!@test1@!@[common, (, 1, ), ;]
XLoggerTestCase@!@test2@!@[common, (, 2, ), ;]
XLoggerTestCase@!@common@!@[DOMConfigurator, ., configure, (, "input/xml/customLogger", +, number, +, ".xml", ), ;, int, i, =, -, 1, ;, logger, ., trace, (, "Message ", +, ++, i, ), ;, logger, ., debug, (, "Message ", +, ++, i, ), ;, logger, ., warn, (, "Message ", +, ++, i, ), ;, logger, ., error, (, "Message ", +, ++, i, ), ;, logger, ., fatal, (, "Message ", +, ++, i, ), ;, Exception, e, =, new, Exception, (, "Just testing", ), ;, logger, ., debug, (, "Message ", +, ++, i, ,, e, ), ;, Transformer, ., transform, (, "output/temp", ,, FILTERED, ,, new, Filter, [, ], {, new, LineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/customLogger.", +, number, ), ), ;]
XLoggerTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, XLoggerTestCase, (, "test1", ), ), ;, suite, ., addTest, (, new, XLoggerTestCase, (, "test2", ), ), ;, return, suite, ;]
SMTPAppenderTest@!@tearDown@!@[LogManager, ., resetConfiguration, (, ), ;]
SMTPAppenderTest@!@isTriggeringEvent@!@[return, true, ;]
SocketServerTestCase@!@setUp@!@[System, ., out, ., println, (, "Setting up test case.", ), ;]
SocketServerTestCase@!@tearDown@!@[System, ., out, ., println, (, "Tearing down test case.", ), ;, socketAppender, =, null, ;, rootLogger, ., removeAllAppenders, (, ), ;]
SocketServerTestCase@!@test1@!@[socketAppender, =, new, SocketAppender, (, "localhost", ,, PORT, ), ;, rootLogger, ., addAppender, (, socketAppender, ), ;, common, (, "T1", ,, "key1", ,, "MDC-TEST1", ), ;, delay, (, 1, ), ;, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT1, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.1", ), ), ;]
SocketServerTestCase@!@test2@!@[socketAppender, =, new, SocketAppender, (, "localhost", ,, PORT, ), ;, rootLogger, ., addAppender, (, socketAppender, ), ;, common, (, "T2", ,, "key2", ,, "MDC-TEST2", ), ;, delay, (, 1, ), ;, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT2, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.2", ), ), ;]
SocketServerTestCase@!@test3@!@[socketAppender, =, new, SocketAppender, (, "localhost", ,, PORT, ), ;, socketAppender, ., setLocationInfo, (, true, ), ;, rootLogger, ., addAppender, (, socketAppender, ), ;, common, (, "T3", ,, "key3", ,, "MDC-TEST3", ), ;, delay, (, 1, ), ;, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT3, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.3", ), ), ;]
SocketServerTestCase@!@test4@!@[socketAppender, =, new, SocketAppender, (, "localhost", ,, PORT, ), ;, socketAppender, ., setLocationInfo, (, true, ), ;, rootLogger, ., addAppender, (, socketAppender, ), ;, NDC, ., push, (, "some", ), ;, common, (, "T4", ,, "key4", ,, "MDC-TEST4", ), ;, NDC, ., pop, (, ), ;, delay, (, 1, ), ;, if, (, !, System, ., getProperty, (, "java.version", ), ., startsWith, (, "1.1.", ), ), {, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT4, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.4", ), ), ;, }, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT4, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.4", ), ), ;]
SocketServerTestCase@!@test5@!@[socketAppender, =, new, SocketAppender, (, "localhost", ,, PORT, ), ;, socketAppender, ., setLocationInfo, (, true, ), ;, AsyncAppender, asyncAppender, =, new, AsyncAppender, (, ), ;, asyncAppender, ., setLocationInfo, (, true, ), ;, asyncAppender, ., addAppender, (, socketAppender, ), ;, rootLogger, ., addAppender, (, asyncAppender, ), ;, NDC, ., push, (, "some5", ), ;, common, (, "T5", ,, "key5", ,, "MDC-TEST5", ), ;, NDC, ., pop, (, ), ;, delay, (, 2, ), ;, if, (, !, System, ., getProperty, (, "java.version", ), ., startsWith, (, "1.1.", ), ), {, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT5, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.5", ), ), ;, }, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT5, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.5", ), ), ;]
SocketServerTestCase@!@test6@!@[socketAppender, =, new, SocketAppender, (, "localhost", ,, PORT, ), ;, socketAppender, ., setLocationInfo, (, true, ), ;, AsyncAppender, asyncAppender, =, new, AsyncAppender, (, ), ;, asyncAppender, ., setLocationInfo, (, true, ), ;, asyncAppender, ., addAppender, (, socketAppender, ), ;, rootLogger, ., addAppender, (, asyncAppender, ), ;, NDC, ., push, (, "some6", ), ;, MDC, ., put, (, "hostID", ,, "client-test6", ), ;, common, (, "T6", ,, "key6", ,, "MDC-TEST6", ), ;, NDC, ., pop, (, ), ;, MDC, ., remove, (, "hostID", ), ;, delay, (, 2, ), ;, if, (, !, System, ., getProperty, (, "java.version", ), ., startsWith, (, "1.1.", ), ), {, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT6, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.6", ), ), ;, }, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT6, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.6", ), ), ;]
SocketServerTestCase@!@test7@!@[socketAppender, =, new, SocketAppender, (, "localhost", ,, PORT, ), ;, socketAppender, ., setLocationInfo, (, true, ), ;, rootLogger, ., addAppender, (, socketAppender, ), ;, NDC, ., push, (, "some7", ), ;, MDC, ., put, (, "hostID", ,, "client-test7", ), ;, common, (, "T7", ,, "key7", ,, "MDC-TEST7", ), ;, NDC, ., pop, (, ), ;, MDC, ., remove, (, "hostID", ), ;, delay, (, 2, ), ;, if, (, !, System, ., getProperty, (, "java.version", ), ., startsWith, (, "1.1.", ), ), {, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT7, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.7", ), ), ;, }, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT7, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.7", ), ), ;]
SocketServerTestCase@!@test8@!@[socketAppender, =, new, SocketAppender, (, "localhost", ,, PORT, ), ;, socketAppender, ., setLocationInfo, (, true, ), ;, rootLogger, ., addAppender, (, socketAppender, ), ;, NDC, ., push, (, "some8", ), ;, if, (, System, ., getProperty, (, "java.vendor", ), ., indexOf, (, "Apache", ), !=, -, 1, ), {, MDC, ., put, (, "hostID", ,, "shortSocketServer", ), ;, }, MDC, ., put, (, "hostID", ,, "shortSocketServer", ), ;, common, (, "T8", ,, "key8", ,, "MDC-TEST8", ), ;, NDC, ., pop, (, ), ;, delay, (, 2, ), ;, if, (, !, System, ., getProperty, (, "java.version", ), ., startsWith, (, "1.1.", ), ), {, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT8, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.8", ), ), ;, }, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, PAT8, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/socketServer.8", ), ), ;]
SocketServerTestCase@!@common@!@[String, oldThreadName, =, Thread, ., currentThread, (, ), ., getName, (, ), ;, Thread, ., currentThread, (, ), ., setName, (, "main", ), ;, int, i, =, -, 1, ;, NDC, ., push, (, dc, ), ;, MDC, ., put, (, key, ,, o, ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, logger, ., setLevel, (, Level, ., DEBUG, ), ;, rootLogger, ., setLevel, (, Level, ., DEBUG, ), ;, logger, ., log, (, XLevel, ., TRACE, ,, "Message ", +, ++, i, ), ;, logger, ., setLevel, (, Level, ., TRACE, ), ;, rootLogger, ., setLevel, (, Level, ., TRACE, ), ;, logger, ., trace, (, "Message ", +, ++, i, ), ;, root, ., trace, (, "Message ", +, ++, i, ), ;, logger, ., debug, (, "Message ", +, ++, i, ), ;, root, ., debug, (, "Message ", +, ++, i, ), ;, logger, ., info, (, "Message ", +, ++, i, ), ;, logger, ., warn, (, "Message ", +, ++, i, ), ;, logger, ., log, (, XLevel, ., LETHAL, ,, "Message ", +, ++, i, ), ;, Exception, e, =, new, Exception, (, "Just testing", ), ;, logger, ., debug, (, "Message ", +, ++, i, ,, e, ), ;, root, ., error, (, "Message ", +, ++, i, ,, e, ), ;, NDC, ., pop, (, ), ;, MDC, ., remove, (, key, ), ;, Thread, ., currentThread, (, ), ., setName, (, oldThreadName, ), ;]
SocketServerTestCase@!@delay@!@[try, {, Thread, ., sleep, (, secs, *, 1000, ), ;, }, catch, (, Exception, e, ), {, }, Thread, ., sleep, (, secs, *, 1000, ), ;]
SocketServerTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, SocketServerTestCase, (, "test1", ), ), ;, suite, ., addTest, (, new, SocketServerTestCase, (, "test2", ), ), ;, suite, ., addTest, (, new, SocketServerTestCase, (, "test3", ), ), ;, suite, ., addTest, (, new, SocketServerTestCase, (, "test4", ), ), ;, suite, ., addTest, (, new, SocketServerTestCase, (, "test5", ), ), ;, suite, ., addTest, (, new, SocketServerTestCase, (, "test6", ), ), ;, suite, ., addTest, (, new, SocketServerTestCase, (, "test7", ), ), ;, suite, ., addTest, (, new, SocketServerTestCase, (, "test8", ), ), ;, return, suite, ;]
Last@!@test1@!@[]
Last@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, Last, (, "test1", ), ), ;, return, suite, ;]
ErrorHandlerTestCase@!@setUp@!@[root, =, Logger, ., getRootLogger, (, ), ;, logger, =, Logger, ., getLogger, (, "test", ), ;]
ErrorHandlerTestCase@!@tearDown@!@[root, ., getLoggerRepository, (, ), ., resetConfiguration, (, ), ;]
ErrorHandlerTestCase@!@test1@!@[DOMConfigurator, ., configure, (, "input/xml/fallback1.xml", ), ;, Appender, primary, =, root, ., getAppender, (, "PRIMARY", ), ;, ErrorHandler, eh, =, primary, ., getErrorHandler, (, ), ;, assertNotNull, (, eh, ), ;, common, (, ), ;, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, TEST1_PAT, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/fallback1", ), ), ;]
ErrorHandlerTestCase@!@test2@!@[PropertyConfigurator, ., configure, (, "input/fallback1.properties", ), ;, Appender, primary, =, root, ., getAppender, (, "PRIMARY", ), ;, ErrorHandler, eh, =, primary, ., getErrorHandler, (, ), ;, assertNotNull, (, eh, ), ;, common, (, ), ;, ControlFilter, cf, =, new, ControlFilter, (, new, String, [, ], {, TEST1_PAT, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf, ,, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/fallback1", ), ), ;]
ErrorHandlerTestCase@!@common@!@[int, i, =, -, 1, ;, logger, ., debug, (, "Message ", +, ++, i, ), ;, root, ., debug, (, "Message ", +, i, ), ;, logger, ., info, (, "Message ", +, ++, i, ), ;, root, ., info, (, "Message ", +, i, ), ;, logger, ., warn, (, "Message ", +, ++, i, ), ;, root, ., warn, (, "Message ", +, i, ), ;, logger, ., error, (, "Message ", +, ++, i, ), ;, root, ., error, (, "Message ", +, i, ), ;, logger, ., log, (, Level, ., FATAL, ,, "Message ", +, ++, i, ), ;, root, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, Exception, e, =, new, Exception, (, "Just testing", ), ;, logger, ., debug, (, "Message ", +, ++, i, ,, e, ), ;, root, ., debug, (, "Message ", +, i, ,, e, ), ;, logger, ., error, (, "Message ", +, ++, i, ,, e, ), ;, root, ., error, (, "Message ", +, i, ,, e, ), ;]
LevelMatchFilterTestCase@!@setUp@!@[root, =, Logger, ., getRootLogger, (, ), ;, root, ., removeAllAppenders, (, ), ;]
LevelMatchFilterTestCase@!@tearDown@!@[root, ., getLoggerRepository, (, ), ., resetConfiguration, (, ), ;]
LevelMatchFilterTestCase@!@accept@!@[Layout, layout, =, new, SimpleLayout, (, ), ;, Appender, appender, =, new, FileAppender, (, layout, ,, ACCEPT_FILE, ,, false, ), ;, LevelMatchFilter, matchFilter, =, new, LevelMatchFilter, (, ), ;, appender, ., addFilter, (, matchFilter, ), ;, appender, ., addFilter, (, new, DenyAllFilter, (, ), ), ;, root, ., addAppender, (, appender, ), ;, root, ., setLevel, (, Level, ., TRACE, ), ;, Level, [, ], levelArray, =, new, Level, [, ], {, Level, ., TRACE, ,, Level, ., DEBUG, ,, Level, ., INFO, ,, Level, ., WARN, ,, Level, ., ERROR, ,, Level, ., FATAL, }, ;, for, (, int, x, =, 0, ;, x, <, levelArray, ., length, ;, x, ++, ), {, matchFilter, ., setLevelToMatch, (, levelArray, [, x, ], ., toString, (, ), ), ;, common, (, "pass ", +, x, +, "; filter set to accept only ", +, levelArray, [, x, ], ., toString, (, ), +, " msgs", ), ;, }, matchFilter, ., setLevelToMatch, (, levelArray, [, x, ], ., toString, (, ), ), ;, common, (, "pass ", +, x, +, "; filter set to accept only ", +, levelArray, [, x, ], ., toString, (, ), +, " msgs", ), ;, Transformer, ., transform, (, ACCEPT_FILE, ,, ACCEPT_FILTERED, ,, new, LineNumberFilter, (, ), ), ;, assertTrue, (, Compare, ., compare, (, ACCEPT_FILTERED, ,, ACCEPT_WITNESS, ), ), ;]
LevelMatchFilterTestCase@!@deny@!@[Layout, layout, =, new, SimpleLayout, (, ), ;, Appender, appender, =, new, FileAppender, (, layout, ,, DENY_FILE, ,, false, ), ;, LevelMatchFilter, matchFilter, =, new, LevelMatchFilter, (, ), ;, matchFilter, ., setAcceptOnMatch, (, false, ), ;, appender, ., addFilter, (, matchFilter, ), ;, root, ., addAppender, (, appender, ), ;, root, ., setLevel, (, Level, ., TRACE, ), ;, Level, [, ], levelArray, =, new, Level, [, ], {, Level, ., TRACE, ,, Level, ., DEBUG, ,, Level, ., INFO, ,, Level, ., WARN, ,, Level, ., ERROR, ,, Level, ., FATAL, }, ;, for, (, int, x, =, 0, ;, x, <, levelArray, ., length, ;, x, ++, ), {, matchFilter, ., setLevelToMatch, (, levelArray, [, x, ], ., toString, (, ), ), ;, common, (, "pass ", +, x, +, "; filter set to deny only ", +, levelArray, [, x, ], ., toString, (, ), +, " msgs", ), ;, }, matchFilter, ., setLevelToMatch, (, levelArray, [, x, ], ., toString, (, ), ), ;, common, (, "pass ", +, x, +, "; filter set to deny only ", +, levelArray, [, x, ], ., toString, (, ), +, " msgs", ), ;, Transformer, ., transform, (, DENY_FILE, ,, DENY_FILTERED, ,, new, LineNumberFilter, (, ), ), ;, assertTrue, (, Compare, ., compare, (, DENY_FILTERED, ,, DENY_WITNESS, ), ), ;]
LevelMatchFilterTestCase@!@common@!@[Logger, logger, =, Logger, ., getLogger, (, "test", ), ;, logger, ., trace, (, msg, ), ;, logger, ., debug, (, msg, ), ;, logger, ., info, (, msg, ), ;, logger, ., warn, (, msg, ), ;, logger, ., error, (, msg, ), ;, logger, ., fatal, (, msg, ), ;]
LevelMatchFilterTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, LevelMatchFilterTestCase, (, "accept", ), ), ;, suite, ., addTest, (, new, LevelMatchFilterTestCase, (, "deny", ), ), ;, return, suite, ;]
ERFATestCase@!@tearDown@!@[LogManager, ., resetConfiguration, (, ), ;]
ERFATestCase@!@testConstructor@!@[ExternallyRolledFileAppender, appender, =, new, ExternallyRolledFileAppender, (, ), ;, assertEquals, (, 0, ,, appender, ., getPort, (, ), ), ;]
ERFATestCase@!@sendMessage@!@[Socket, socket, =, new, Socket, (, (, String, ), null, ,, port, ), ;, DataInputStream, reader, =, new, DataInputStream, (, socket, ., getInputStream, (, ), ), ;, DataOutputStream, writer, =, new, DataOutputStream, (, socket, ., getOutputStream, (, ), ), ;, writer, ., writeUTF, (, msg, ), ;, String, response, =, reader, ., readUTF, (, ), ;, assertEquals, (, expectedResponse, ,, response, ), ;, reader, ., close, (, ), ;, writer, ., close, (, ), ;, socket, ., close, (, ), ;]
ERFATestCase@!@testRollover@!@[ExternallyRolledFileAppender, erfa, =, new, ExternallyRolledFileAppender, (, ), ;, int, port, =, 5500, ;, Logger, logger, =, Logger, ., getLogger, (, RFATestCase, ., class, ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, PatternLayout, layout, =, new, PatternLayout, (, "%m\n", ), ;, erfa, ., setLayout, (, layout, ), ;, erfa, ., setAppend, (, false, ), ;, erfa, ., setMaxBackupIndex, (, 2, ), ;, erfa, ., setPort, (, port, ), ;, erfa, ., setFile, (, "output/ERFA-test2.log", ), ;, try, {, erfa, ., activateOptions, (, ), ;, }, catch, (, SecurityException, ex, ), {, return, ;, }, erfa, ., activateOptions, (, ), ;, return, ;, try, {, Thread, ., sleep, (, 100, ), ;, }, catch, (, InterruptedException, ex, ), {, }, Thread, ., sleep, (, 100, ), ;, root, ., addAppender, (, erfa, ), ;, for, (, int, i, =, 0, ;, i, <, 55, ;, i, ++, ), {, if, (, i, <, 10, ), {, logger, ., debug, (, "Hello---", +, i, ), ;, }, else, if, (, i, <, 100, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, if, (, (, i, %, 10, ), ==, 9, ), {, try, {, sendMessage, (, port, ,, "RollOver", ,, "OK", ), ;, }, catch, (, SecurityException, ex, ), {, return, ;, }, }, }, if, (, i, <, 10, ), {, logger, ., debug, (, "Hello---", +, i, ), ;, }, else, if, (, i, <, 100, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, logger, ., debug, (, "Hello---", +, i, ), ;, logger, ., debug, (, "Hello--", +, i, ), ;, if, (, (, i, %, 10, ), ==, 9, ), {, try, {, sendMessage, (, port, ,, "RollOver", ,, "OK", ), ;, }, catch, (, SecurityException, ex, ), {, return, ;, }, }, try, {, sendMessage, (, port, ,, "RollOver", ,, "OK", ), ;, }, catch, (, SecurityException, ex, ), {, return, ;, }, sendMessage, (, port, ,, "RollOver", ,, "OK", ), ;, return, ;, try, {, sendMessage, (, port, ,, "That's all folks.", ,, "Expecting [RollOver] string.", ), ;, }, catch, (, SecurityException, ex, ), {, return, ;, }, sendMessage, (, port, ,, "That's all folks.", ,, "Expecting [RollOver] string.", ), ;, return, ;, assertTrue, (, new, File, (, "output/ERFA-test2.log", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/ERFA-test2.log.1", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/ERFA-test2.log.2", ), ., exists, (, ), ), ;, assertFalse, (, new, File, (, "output/ERFA-test2.log.3", ), ., exists, (, ), ), ;]
NTEventLogAppenderTest@!@tearDown@!@[LogManager, ., shutdown, (, ), ;]
NTEventLogAppenderTest@!@testSimple@!@[BasicConfigurator, ., configure, (, new, NTEventLogAppender, (, ), ), ;, Logger, logger, =, Logger, ., getLogger, (, "org.apache.log4j.nt.NTEventLogAppenderTest", ), ;, int, i, =, 0, ;, logger, ., debug, (, "Message ", +, i, ++, ), ;, logger, ., info, (, "Message ", +, i, ++, ), ;, logger, ., warn, (, "Message ", +, i, ++, ), ;, logger, ., error, (, "Message ", +, i, ++, ), ;, logger, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ++, ), ;, logger, ., debug, (, "Message ", +, i, ++, ,, new, Exception, (, "Just testing.", ), ), ;]
DRFATestCase@!@tearDown@!@[LogManager, ., resetConfiguration, (, ), ;]
DRFATestCase@!@testComputeCheckPeriod@!@[DailyRollingFileAppender, drfa, =, new, DailyRollingFileAppender, (, ), ;, drfa, ., setName, (, "testComputeCheckPeriod", ), ;, drfa, ., setDatePattern, (, "yyyy-MM-dd.'log'", ), ;, drfa, ., activateOptions, (, ), ;, drfa, ., computeCheckPeriod, (, ), ;, assertEquals, (, drfa, ., computeCheckPeriod, (, ), ,, DailyRollingFileAppender, ., TOP_OF_DAY, ), ;, drfa, ., setDatePattern, (, "yyyy-MM-dd mm.'log'", ), ;, assertEquals, (, drfa, ., computeCheckPeriod, (, ), ,, DailyRollingFileAppender, ., TOP_OF_MINUTE, ), ;, drfa, ., setDatePattern, (, "yyyy-MM-dd a.'log'", ), ;, assertEquals, (, drfa, ., computeCheckPeriod, (, ), ,, DailyRollingFileAppender, ., HALF_DAY, ), ;, drfa, ., setDatePattern, (, "yyyy-MM-dd HH.'log'", ), ;, assertEquals, (, drfa, ., computeCheckPeriod, (, ), ,, DailyRollingFileAppender, ., TOP_OF_HOUR, ), ;, drfa, ., setDatePattern, (, "yyyy-MM.'log'", ), ;, assertEquals, (, drfa, ., computeCheckPeriod, (, ), ,, DailyRollingFileAppender, ., TOP_OF_MONTH, ), ;, drfa, ., setDatePattern, (, "'log'HH'log'", ), ;, assertEquals, (, drfa, ., computeCheckPeriod, (, ), ,, DailyRollingFileAppender, ., TOP_OF_HOUR, ), ;]
DRFATestCase@!@testRC1@!@[RollingCalendar, rc, =, new, RollingCalendar, (, ), ;, rc, ., setType, (, DailyRollingFileAppender, ., TOP_OF_DAY, ), ;, Calendar, c, =, Calendar, ., getInstance, (, ), ;, int, [, ], M31, =, {, 0, ,, 2, ,, 4, ,, 6, ,, 7, ,, 9, ,, 11, }, ;, for, (, int, i, =, 0, ;, i, <, M31, ., length, ;, i, ++, ), {, for, (, int, d, =, 1, ;, d, <=, 31, ;, d, ++, ), {, for, (, int, h, =, 0, ;, h, <, 23, ;, h, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, 10, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 10, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, 1, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, +, 1, ), ;, }, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, }, }, }, for, (, int, d, =, 1, ;, d, <=, 31, ;, d, ++, ), {, for, (, int, h, =, 0, ;, h, <, 23, ;, h, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, 10, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 10, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, 1, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, +, 1, ), ;, }, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, }, }, for, (, int, h, =, 0, ;, h, <, 23, ;, h, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, 10, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 10, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, 1, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, +, 1, ), ;, }, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, }, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, 10, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 10, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, 1, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, +, 1, ), ;, }, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, 1, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, +, 1, ), ;, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;]
DRFATestCase@!@testRC2@!@[RollingCalendar, rc, =, new, RollingCalendar, (, ), ;, rc, ., setType, (, DailyRollingFileAppender, ., TOP_OF_HOUR, ), ;, Calendar, c, =, Calendar, ., getInstance, (, ), ;, int, [, ], M31, =, {, 0, ,, 2, ,, 4, ,, 6, ,, 7, ,, 9, ,, 11, }, ;, for, (, int, i, =, 0, ;, i, <, M31, ., length, ;, i, ++, ), {, System, ., out, ., println, (, "Month = ", +, (, M31, [, i, ], +, 1, ), ), ;, for, (, int, d, =, 1, ;, d, <=, 31, ;, d, ++, ), {, for, (, int, h, =, 0, ;, h, <, 23, ;, h, ++, ), {, for, (, int, m, =, 0, ;, m, <=, 59, ;, m, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, m, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 12, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, boolean, dltState0, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, boolean, dltState1, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, 0, ), ;, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, else, {, if, (, dltState0, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, h, ), ;, }, else, {, }, }, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, }, }, }, System, ., out, ., println, (, "Month = ", +, (, M31, [, i, ], +, 1, ), ), ;, for, (, int, d, =, 1, ;, d, <=, 31, ;, d, ++, ), {, for, (, int, h, =, 0, ;, h, <, 23, ;, h, ++, ), {, for, (, int, m, =, 0, ;, m, <=, 59, ;, m, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, m, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 12, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, boolean, dltState0, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, boolean, dltState1, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, 0, ), ;, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, else, {, if, (, dltState0, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, h, ), ;, }, else, {, }, }, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, }, }, for, (, int, h, =, 0, ;, h, <, 23, ;, h, ++, ), {, for, (, int, m, =, 0, ;, m, <=, 59, ;, m, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, m, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 12, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, boolean, dltState0, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, boolean, dltState1, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, 0, ), ;, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, else, {, if, (, dltState0, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, h, ), ;, }, else, {, }, }, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, }, for, (, int, m, =, 0, ;, m, <=, 59, ;, m, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, m, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 12, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, boolean, dltState0, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, boolean, dltState1, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, 0, ), ;, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, else, {, if, (, dltState0, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, h, ), ;, }, else, {, }, }, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, m, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 12, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, boolean, dltState0, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, boolean, dltState1, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, 0, ), ;, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, else, {, if, (, dltState0, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, h, ), ;, }, else, {, }, }, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, if, (, dltState0, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, h, ), ;, }, else, {, }, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, h, ), ;, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;]
DRFATestCase@!@testRC3@!@[RollingCalendar, rc, =, new, RollingCalendar, (, ), ;, rc, ., setType, (, DailyRollingFileAppender, ., TOP_OF_MINUTE, ), ;, int, [, ], S, =, {, 0, ,, 1, ,, 5, ,, 10, ,, 21, ,, 30, ,, 59, }, ;, int, [, ], M, =, {, 0, ,, 1, ,, 5, ,, 10, ,, 21, ,, 30, ,, 59, }, ;, Calendar, c, =, Calendar, ., getInstance, (, ), ;, int, [, ], M31, =, {, 2, ,, 9, ,, 0, ,, 4, ,, 6, ,, 7, ,, 11, }, ;, for, (, int, i, =, 0, ;, i, <, M31, ., length, ;, i, ++, ), {, System, ., out, ., println, (, "Month = ", +, (, M31, [, i, ], +, 1, ), ), ;, for, (, int, d, =, 1, ;, d, <=, 31, ;, d, ++, ), {, for, (, int, h, =, 0, ;, h, <, 23, ;, h, ++, ), {, for, (, int, m, =, 0, ;, m, <, M, ., length, ;, m, ++, ), {, for, (, int, s, =, 0, ;, s, <, S, ., length, ;, s, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, M, [, m, ], ), ;, c, ., set, (, Calendar, ., SECOND, ,, S, [, s, ], ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 1, ), ;, boolean, dltState0, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 0, ), ;, boolean, dltState1, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, (, M, [, m, ], +, 1, ), %, 60, ), ;, if, (, M, [, m, ], ==, 59, ), {, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, }, }, else, {, if, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), !=, h, ), {, c, ., add, (, Calendar, ., HOUR_OF_DAY, ,, +, 1, ), ;, boolean, dltState2, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, if, (, dltState1, ==, dltState2, ), {, fail, (, "No switch", ), ;, }, }, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, }, }, }, }, System, ., out, ., println, (, "Month = ", +, (, M31, [, i, ], +, 1, ), ), ;, for, (, int, d, =, 1, ;, d, <=, 31, ;, d, ++, ), {, for, (, int, h, =, 0, ;, h, <, 23, ;, h, ++, ), {, for, (, int, m, =, 0, ;, m, <, M, ., length, ;, m, ++, ), {, for, (, int, s, =, 0, ;, s, <, S, ., length, ;, s, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, M, [, m, ], ), ;, c, ., set, (, Calendar, ., SECOND, ,, S, [, s, ], ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 1, ), ;, boolean, dltState0, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 0, ), ;, boolean, dltState1, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, (, M, [, m, ], +, 1, ), %, 60, ), ;, if, (, M, [, m, ], ==, 59, ), {, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, }, }, else, {, if, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), !=, h, ), {, c, ., add, (, Calendar, ., HOUR_OF_DAY, ,, +, 1, ), ;, boolean, dltState2, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, if, (, dltState1, ==, dltState2, ), {, fail, (, "No switch", ), ;, }, }, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, }, }, }, for, (, int, h, =, 0, ;, h, <, 23, ;, h, ++, ), {, for, (, int, m, =, 0, ;, m, <, M, ., length, ;, m, ++, ), {, for, (, int, s, =, 0, ;, s, <, S, ., length, ;, s, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, M, [, m, ], ), ;, c, ., set, (, Calendar, ., SECOND, ,, S, [, s, ], ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 1, ), ;, boolean, dltState0, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 0, ), ;, boolean, dltState1, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, (, M, [, m, ], +, 1, ), %, 60, ), ;, if, (, M, [, m, ], ==, 59, ), {, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, }, }, else, {, if, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), !=, h, ), {, c, ., add, (, Calendar, ., HOUR_OF_DAY, ,, +, 1, ), ;, boolean, dltState2, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, if, (, dltState1, ==, dltState2, ), {, fail, (, "No switch", ), ;, }, }, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, }, }, for, (, int, m, =, 0, ;, m, <, M, ., length, ;, m, ++, ), {, for, (, int, s, =, 0, ;, s, <, S, ., length, ;, s, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, M, [, m, ], ), ;, c, ., set, (, Calendar, ., SECOND, ,, S, [, s, ], ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 1, ), ;, boolean, dltState0, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 0, ), ;, boolean, dltState1, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, (, M, [, m, ], +, 1, ), %, 60, ), ;, if, (, M, [, m, ], ==, 59, ), {, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, }, }, else, {, if, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), !=, h, ), {, c, ., add, (, Calendar, ., HOUR_OF_DAY, ,, +, 1, ), ;, boolean, dltState2, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, if, (, dltState1, ==, dltState2, ), {, fail, (, "No switch", ), ;, }, }, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, }, for, (, int, s, =, 0, ;, s, <, S, ., length, ;, s, ++, ), {, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, M, [, m, ], ), ;, c, ., set, (, Calendar, ., SECOND, ,, S, [, s, ], ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 1, ), ;, boolean, dltState0, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 0, ), ;, boolean, dltState1, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, (, M, [, m, ], +, 1, ), %, 60, ), ;, if, (, M, [, m, ], ==, 59, ), {, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, }, }, else, {, if, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), !=, h, ), {, c, ., add, (, Calendar, ., HOUR_OF_DAY, ,, +, 1, ), ;, boolean, dltState2, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, if, (, dltState1, ==, dltState2, ), {, fail, (, "No switch", ), ;, }, }, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, c, ., clear, (, ), ;, c, ., set, (, Calendar, ., YEAR, ,, 20, ), ;, c, ., set, (, Calendar, ., MONTH, ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, c, ., set, (, Calendar, ., DAY_OF_MONTH, ,, d, ), ;, c, ., set, (, Calendar, ., HOUR_OF_DAY, ,, h, ), ;, c, ., set, (, Calendar, ., MINUTE, ,, M, [, m, ], ), ;, c, ., set, (, Calendar, ., SECOND, ,, S, [, s, ], ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 88, ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 1, ), ;, boolean, dltState0, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, c, ., setTime, (, rc, ., getNextCheckDate, (, c, ., getTime, (, ), ), ), ;, c, ., add, (, Calendar, ., MILLISECOND, ,, 0, ), ;, boolean, dltState1, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, assertEquals, (, c, ., get, (, Calendar, ., MILLISECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., SECOND, ), ,, 0, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MINUTE, ), ,, (, M, [, m, ], +, 1, ), %, 60, ), ;, if, (, M, [, m, ], ==, 59, ), {, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, }, }, else, {, if, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), !=, h, ), {, c, ., add, (, Calendar, ., HOUR_OF_DAY, ,, +, 1, ), ;, boolean, dltState2, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, if, (, dltState1, ==, dltState2, ), {, fail, (, "No switch", ), ;, }, }, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, if, (, dltState0, ==, dltState1, ), {, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, }, assertEquals, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), ,, (, h, +, 1, ), %, 24, ), ;, if, (, h, ==, 23, ), {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, }, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, (, d, +, 1, ), %, 32, ), ;, if, (, d, ==, 31, ), {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, }, else, {, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, }, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, (, Calendar, ., JANUARY, +, M31, [, i, ], +, 1, ), %, 12, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, if, (, c, ., get, (, Calendar, ., HOUR_OF_DAY, ), !=, h, ), {, c, ., add, (, Calendar, ., HOUR_OF_DAY, ,, +, 1, ), ;, boolean, dltState2, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, if, (, dltState1, ==, dltState2, ), {, fail, (, "No switch", ), ;, }, }, c, ., add, (, Calendar, ., HOUR_OF_DAY, ,, +, 1, ), ;, boolean, dltState2, =, c, ., getTimeZone, (, ), ., inDaylightTime, (, c, ., getTime, (, ), ), ;, if, (, dltState1, ==, dltState2, ), {, fail, (, "No switch", ), ;, }, fail, (, "No switch", ), ;, assertEquals, (, c, ., get, (, Calendar, ., DAY_OF_MONTH, ), ,, d, ), ;, assertEquals, (, c, ., get, (, Calendar, ., MONTH, ), ,, Calendar, ., JANUARY, +, M31, [, i, ], ), ;]
DRFATestCase@!@test3Param@!@[Layout, layout, =, new, SimpleLayout, (, ), ;, DailyRollingFileAppender, appender, =, new, DailyRollingFileAppender, (, layout, ,, filename, ,, datePattern, ), ;, assertEquals, (, datePattern, ,, appender, ., getDatePattern, (, ), ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, root, ., addAppender, (, appender, ), ;, root, ., info, (, "Hello, World", ), ;, assertTrue, (, new, File, (, filename, ), ., exists, (, ), ), ;]
DRFATestCase@!@testTopOfYear@!@[try, {, test3Param, (, "'.'yyyy", ,, "output/drfa_topOfYear.log", ), ;, fail, (, "Expected illegal state exception.", ), ;, }, catch, (, IllegalStateException, ex, ), {, assertNotNull, (, ex, ), ;, }, test3Param, (, "'.'yyyy", ,, "output/drfa_topOfYear.log", ), ;, fail, (, "Expected illegal state exception.", ), ;, assertNotNull, (, ex, ), ;]
DRFATestCase@!@testTopOfMonth@!@[test3Param, (, "'.'yyyy-MM", ,, "output/drfa_topOfMonth.log", ), ;]
DRFATestCase@!@testTopOfWeek@!@[test3Param, (, "'.'yyyy-w", ,, "output/drfa_topOfWeek.log", ), ;]
DRFATestCase@!@testTopOfDay@!@[test3Param, (, "'.'yyyy-MM-dd", ,, "output/drfa_topOfDay.log", ), ;]
DRFATestCase@!@testHalfDay@!@[test3Param, (, "'.'yyyy-MM-dd-a", ,, "output/drfa_halfDay.log", ), ;]
DRFATestCase@!@testTopOfHour@!@[test3Param, (, "'.'yyyy-MM-dd-HH", ,, "output/drfa_topOfHour.log", ), ;]
DRFATestCase@!@testTopOfMinute@!@[test3Param, (, "'.'yyyy-MM-dd-HH-mm", ,, "output/drfa_topOfMinute.log", ), ;]
DRFATestCase@!@testRolloverNoPattern@!@[Layout, layout, =, new, SimpleLayout, (, ), ;, DailyRollingFileAppender, appender, =, new, DailyRollingFileAppender, (, layout, ,, "output/drfa_nopattern.log", ,, null, ), ;, VectorErrorHandler, errorHandler, =, new, VectorErrorHandler, (, ), ;, appender, ., setErrorHandler, (, errorHandler, ), ;, appender, ., rollOver, (, ), ;, assertEquals, (, 1, ,, errorHandler, ., size, (, ), ), ;, assertEquals, (, "Missing DatePattern option in rollOver().", ,, errorHandler, ., getMessage, (, 0, ), ), ;]
DRFATestCase@!@testMinuteRollover@!@[Layout, layout, =, new, SimpleLayout, (, ), ;, String, filename, =, "output/drfa_minuteRollover.log", ;, String, pattern, =, "'.'yyyy-MM-dd-HH-mm", ;, DailyRollingFileAppender, appender, =, new, DailyRollingFileAppender, (, layout, ,, filename, ,, pattern, ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, root, ., addAppender, (, appender, ), ;, File, firstFile, =, new, File, (, filename, +, new, SimpleDateFormat, (, pattern, ), ., format, (, new, Date, (, ), ), ), ;, root, ., info, (, "Hello, World", ), ;, firstFile, ., createNewFile, (, ), ;, assertTrue, (, firstFile, ., exists, (, ), ), ;, assertEquals, (, 0, ,, firstFile, ., length, (, ), ), ;, Calendar, cal, =, Calendar, ., getInstance, (, ), ;, long, now, =, cal, ., getTime, (, ), ., getTime, (, ), ;, cal, ., set, (, Calendar, ., SECOND, ,, 3, ), ;, cal, ., set, (, Calendar, ., MILLISECOND, ,, 0, ), ;, cal, ., add, (, Calendar, ., MINUTE, ,, 1, ), ;, long, until, =, cal, ., getTime, (, ), ., getTime, (, ), ;, Thread, ., sleep, (, until, -, now, ), ;, root, ., info, (, "Hello, World", ), ;, assertTrue, (, firstFile, ., exists, (, ), ), ;, assertTrue, (, firstFile, ., length, (, ), >, 0, ), ;]
DRFATestCase@!@append@!@[int, count1, =, source, ., read, (, buf, ), ;, if, (, count1, >, 0, ), {, combined, ., write, (, buf, ,, 0, ,, count1, ), ;, }, combined, ., write, (, buf, ,, 0, ,, count1, ), ;, source, ., close, (, ), ;]
DRFATestCase@!@testBlockedRollover@!@[Layout, layout, =, new, SimpleLayout, (, ), ;, String, filename, =, "output/drfa_blockedRollover.log", ;, String, pattern, =, "'.'yyyy-MM-dd-HH-mm", ;, Date, start, =, new, Date, (, ), ;, DailyRollingFileAppender, appender, =, new, DailyRollingFileAppender, (, layout, ,, filename, ,, pattern, ), ;, appender, ., setAppend, (, false, ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, root, ., addAppender, (, appender, ), ;, File, block1, =, new, File, (, filename, +, new, SimpleDateFormat, (, pattern, ), ., format, (, start, ), ), ;, File, block2, =, new, File, (, filename, +, new, SimpleDateFormat, (, pattern, ), ., format, (, new, Date, (, start, ., getTime, (, ), +, 60000, ), ), ), ;, FileOutputStream, os1, =, new, FileOutputStream, (, block1, ), ;, FileOutputStream, os2, =, new, FileOutputStream, (, block2, ), ;, root, ., info, (, "Prior to rollover", ), ;, Thread, ., sleep, (, 63000, -, (, start, ., getTime, (, ), %, 60000, ), ), ;, root, ., info, (, "Rollover attempt while blocked", ), ;, os1, ., close, (, ), ;, os2, ., close, (, ), ;, root, ., info, (, "Message after block removed", ), ;, appender, ., close, (, ), ;, String, combinedFilename, =, "output/drfa_blockedRollover.combined", ;, FileOutputStream, combined, =, new, FileOutputStream, (, combinedFilename, ), ;, byte, [, ], buf, =, new, byte, [, 500, ], ;, append, (, combined, ,, new, FileInputStream, (, block1, ), ,, buf, ), ;, append, (, combined, ,, new, FileInputStream, (, block2, ), ,, buf, ), ;, append, (, combined, ,, new, FileInputStream, (, filename, ), ,, buf, ), ;, combined, ., close, (, ), ;, assertTrue, (, Compare, ., compare, (, combinedFilename, ,, "witness/drfa_blockedRollover.log", ), ), ;]
DRFATestCase@!@testWeeklyRollover@!@[DailyRollingFileAppender, drfa, =, new, DailyRollingFileAppender, (, ), ;, drfa, ., setDatePattern, (, "'.'yyyy-ww", ), ;, int, checkPeriod, =, drfa, ., computeCheckPeriod, (, ), ;, assertEquals, (, DailyRollingFileAppender, ., TOP_OF_WEEK, ,, checkPeriod, ), ;]
TestLogXF@!@tearDown@!@[LogManager, ., resetConfiguration, (, ), ;]
TestLogXF@!@toString@!@[throw, new, NullPointerException, (, ), ;]
MDCTestCase@!@setUp@!@[MDC, ., clear, (, ), ;]
MDCTestCase@!@tearDown@!@[MDC, ., clear, (, ), ;]
MDCTestCase@!@testPut@!@[MDC, ., put, (, "key", ,, "some value", ), ;, assertEquals, (, "some value", ,, MDC, ., get, (, "key", ), ), ;, assertEquals, (, 1, ,, MDC, ., getContext, (, ), ., size, (, ), ), ;]
MDCTestCase@!@testRemoveLastKey@!@[MDC, ., put, (, "key", ,, "some value", ), ;, MDC, ., remove, (, "key", ), ;, checkThreadLocalsForLeaks, (, ), ;]
MDCTestCase@!@checkThreadLocalsForLeaks@!@[Field, threadLocalsField, =, Thread, ., class, ., getDeclaredField, (, "threadLocals", ), ;, threadLocalsField, ., setAccessible, (, true, ), ;, Field, inheritableThreadLocalsField, =, Thread, ., class, ., getDeclaredField, (, "inheritableThreadLocals", ), ;, inheritableThreadLocalsField, ., setAccessible, (, true, ), ;, Class, tlmClass, =, Class, ., forName, (, "java.lang.ThreadLocal$ThreadLocalMap", ), ;, Field, tableField, =, tlmClass, ., getDeclaredField, (, "table", ), ;, tableField, ., setAccessible, (, true, ), ;, Thread, thread, =, Thread, ., currentThread, (, ), ;, Object, threadLocalMap, ;, threadLocalMap, =, threadLocalsField, ., get, (, thread, ), ;, checkThreadLocalMapForLeaks, (, threadLocalMap, ,, tableField, ), ;, threadLocalMap, =, inheritableThreadLocalsField, ., get, (, thread, ), ;, checkThreadLocalMapForLeaks, (, threadLocalMap, ,, tableField, ), ;]
MDCTestCase@!@checkThreadLocalMapForLeaks@!@[if, (, map, !=, null, ), {, Object, [, ], table, =, (, Object, [, ], ), internalTableField, ., get, (, map, ), ;, if, (, table, !=, null, ), {, for, (, int, j, =, 0, ;, j, <, table, ., length, ;, j, ++, ), {, if, (, table, [, j, ], !=, null, ), {, Object, key, =, (, (, Reference, ), table, [, j, ], ), ., get, (, ), ;, String, keyClassName, =, key, ., getClass, (, ), ., getName, (, ), ;, if, (, key, ., getClass, (, ), ==, org, ., apache, ., log4j, ., helpers, ., ThreadLocalMap, ., class, ), {, fail, (, "Found a ThreadLocal with key of type [", +, keyClassName, +, "]", ), ;, }, }, }, }, }, Object, [, ], table, =, (, Object, [, ], ), internalTableField, ., get, (, map, ), ;, if, (, table, !=, null, ), {, for, (, int, j, =, 0, ;, j, <, table, ., length, ;, j, ++, ), {, if, (, table, [, j, ], !=, null, ), {, Object, key, =, (, (, Reference, ), table, [, j, ], ), ., get, (, ), ;, String, keyClassName, =, key, ., getClass, (, ), ., getName, (, ), ;, if, (, key, ., getClass, (, ), ==, org, ., apache, ., log4j, ., helpers, ., ThreadLocalMap, ., class, ), {, fail, (, "Found a ThreadLocal with key of type [", +, keyClassName, +, "]", ), ;, }, }, }, }, for, (, int, j, =, 0, ;, j, <, table, ., length, ;, j, ++, ), {, if, (, table, [, j, ], !=, null, ), {, Object, key, =, (, (, Reference, ), table, [, j, ], ), ., get, (, ), ;, String, keyClassName, =, key, ., getClass, (, ), ., getName, (, ), ;, if, (, key, ., getClass, (, ), ==, org, ., apache, ., log4j, ., helpers, ., ThreadLocalMap, ., class, ), {, fail, (, "Found a ThreadLocal with key of type [", +, keyClassName, +, "]", ), ;, }, }, }, if, (, table, [, j, ], !=, null, ), {, Object, key, =, (, (, Reference, ), table, [, j, ], ), ., get, (, ), ;, String, keyClassName, =, key, ., getClass, (, ), ., getName, (, ), ;, if, (, key, ., getClass, (, ), ==, org, ., apache, ., log4j, ., helpers, ., ThreadLocalMap, ., class, ), {, fail, (, "Found a ThreadLocal with key of type [", +, keyClassName, +, "]", ), ;, }, }, Object, key, =, (, (, Reference, ), table, [, j, ], ), ., get, (, ), ;, String, keyClassName, =, key, ., getClass, (, ), ., getName, (, ), ;, if, (, key, ., getClass, (, ), ==, org, ., apache, ., log4j, ., helpers, ., ThreadLocalMap, ., class, ), {, fail, (, "Found a ThreadLocal with key of type [", +, keyClassName, +, "]", ), ;, }, fail, (, "Found a ThreadLocal with key of type [", +, keyClassName, +, "]", ), ;]
EnhancedThrowableRendererTest@!@testEnhancedRender@!@[ThrowableRenderer, r, =, new, EnhancedThrowableRenderer, (, ), ;, Exception, ex, =, new, Exception, (, ), ;, String, [, ], strRep, =, r, ., doRender, (, ex, ), ;, assertNotNull, (, strRep, ), ;, assertTrue, (, strRep, ., length, >, 0, ), ;, for, (, int, i, =, 0, ;, i, <, strRep, ., length, ;, i, ++, ), {, assertNotNull, (, strRep, [, i, ], ), ;, }, assertNotNull, (, strRep, [, i, ], ), ;]
LogManagerTest@!@testDefaultConfigurationFile@!@[assertEquals, (, "log4j.properties", ,, LogManager, ., DEFAULT_CONFIGURATION_FILE, ), ;]
LogManagerTest@!@testDefaultXmlConfigurationFile@!@[assertEquals, (, "log4j.xml", ,, LogManager, ., DEFAULT_XML_CONFIGURATION_FILE, ), ;]
LogManagerTest@!@testDefaultConfigurationKey@!@[assertEquals, (, "log4j.configuration", ,, LogManager, ., DEFAULT_CONFIGURATION_KEY, ), ;]
LogManagerTest@!@testConfiguratorClassKey@!@[assertEquals, (, "log4j.configuratorClass", ,, LogManager, ., CONFIGURATOR_CLASS_KEY, ), ;]
LogManagerTest@!@testDefaultInitOverrideKey@!@[assertEquals, (, "log4j.defaultInitOverride", ,, LogManager, ., DEFAULT_INIT_OVERRIDE_KEY, ), ;]
DefaultThrowableRendererTest@!@testDefaultRender@!@[ThrowableRenderer, r, =, new, DefaultThrowableRenderer, (, ), ;, Exception, ex, =, new, Exception, (, ), ;, String, [, ], strRep, =, r, ., doRender, (, ex, ), ;, assertNotNull, (, strRep, ), ;, assertTrue, (, strRep, ., length, >, 0, ), ;, for, (, int, i, =, 0, ;, i, <, strRep, ., length, ;, i, ++, ), {, assertNotNull, (, strRep, [, i, ], ), ;, }, assertNotNull, (, strRep, [, i, ], ), ;]
CustomLevelTestCase@!@setUp@!@[root, =, Logger, ., getRootLogger, (, ), ;, logger, =, Logger, ., getLogger, (, CustomLevelTestCase, ., class, ), ;]
CustomLevelTestCase@!@tearDown@!@[root, ., getLoggerRepository, (, ), ., resetConfiguration, (, ), ;]
CustomLevelTestCase@!@test1@!@[DOMConfigurator, ., configure, (, "input/xml/customLevel1.xml", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/customLevel.1", ), ), ;]
CustomLevelTestCase@!@test2@!@[DOMConfigurator, ., configure, (, "input/xml/customLevel2.xml", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/customLevel.2", ), ), ;]
CustomLevelTestCase@!@test3@!@[DOMConfigurator, ., configure, (, "input/xml/customLevel3.xml", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/customLevel.3", ), ), ;]
CustomLevelTestCase@!@test4@!@[DOMConfigurator, ., configure, (, "input/xml/customLevel4.xml", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/customLevel.4", ), ), ;]
CustomLevelTestCase@!@common@!@[int, i, =, 0, ;, logger, ., debug, (, "Message ", +, ++, i, ), ;, logger, ., info, (, "Message ", +, ++, i, ), ;, logger, ., warn, (, "Message ", +, ++, i, ), ;, logger, ., error, (, "Message ", +, ++, i, ), ;, logger, ., log, (, XLevel, ., TRACE, ,, "Message ", +, ++, i, ), ;]
CustomLevelTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, CustomLevelTestCase, (, "test1", ), ), ;, suite, ., addTest, (, new, CustomLevelTestCase, (, "test2", ), ), ;, suite, ., addTest, (, new, CustomLevelTestCase, (, "test3", ), ), ;, suite, ., addTest, (, new, CustomLevelTestCase, (, "test4", ), ), ;, return, suite, ;]
XMLLayoutTestCase@!@setUp@!@[root, =, Logger, ., getRootLogger, (, ), ;, root, ., setLevel, (, Level, ., TRACE, ), ;, logger, =, Logger, ., getLogger, (, XMLLayoutTestCase, ., class, ), ;, logger, ., setLevel, (, Level, ., TRACE, ), ;]
XMLLayoutTestCase@!@tearDown@!@[root, ., getLoggerRepository, (, ), ., resetConfiguration, (, ), ;]
XMLLayoutTestCase@!@basic@!@[XMLLayout, xmlLayout, =, new, XMLLayout, (, ), ;, root, ., addAppender, (, new, FileAppender, (, xmlLayout, ,, TEMP, ,, false, ), ), ;, common, (, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, new, LineNumberFilter, (, ), ,, new, XMLTimestampFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/xmlLayout.1", ), ), ;]
XMLLayoutTestCase@!@locationInfo@!@[XMLLayout, xmlLayout, =, new, XMLLayout, (, ), ;, xmlLayout, ., setLocationInfo, (, true, ), ;, root, ., addAppender, (, new, FileAppender, (, xmlLayout, ,, TEMP, ,, false, ), ), ;, common, (, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, new, LineNumberFilter, (, ), ,, new, XMLTimestampFilter, (, ), ,, new, XMLLineAttributeFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/xmlLayout.2", ), ), ;]
XMLLayoutTestCase@!@testCDATA@!@[XMLLayout, xmlLayout, =, new, XMLLayout, (, ), ;, xmlLayout, ., setLocationInfo, (, true, ), ;, root, ., addAppender, (, new, FileAppender, (, xmlLayout, ,, TEMP, ,, false, ), ), ;, String, oldThreadName, =, Thread, ., currentThread, (, ), ., getName, (, ), ;, Thread, ., currentThread, (, ), ., setName, (, "main", ), ;, logger, ., trace, (, "Message with embedded <![CDATA[<hello>hi</hello>]]>.", ), ;, logger, ., debug, (, "Message with embedded <![CDATA[<hello>hi</hello>]]>.", ), ;, Thread, ., currentThread, (, ), ., setName, (, oldThreadName, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, new, LineNumberFilter, (, ), ,, new, XMLTimestampFilter, (, ), ,, new, XMLLineAttributeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, new, LineNumberFilter, (, ), ,, new, XMLTimestampFilter, (, ), ,, new, XMLLineAttributeFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/xmlLayout.3", ), ), ;]
XMLLayoutTestCase@!@testNull@!@[XMLLayout, xmlLayout, =, new, XMLLayout, (, ), ;, root, ., addAppender, (, new, FileAppender, (, xmlLayout, ,, TEMP, ,, false, ), ), ;, String, oldThreadName, =, Thread, ., currentThread, (, ), ., getName, (, ), ;, Thread, ., currentThread, (, ), ., setName, (, "main", ), ;, logger, ., debug, (, "hi", ), ;, logger, ., debug, (, null, ), ;, Exception, e, =, new, Exception, (, (, String, ), null, ), ;, logger, ., debug, (, "hi", ,, e, ), ;, Thread, ., currentThread, (, ), ., setName, (, oldThreadName, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, new, LineNumberFilter, (, ), ,, new, XMLTimestampFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, SunReflectFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/xmlLayout.null", ), ), ;]
XMLLayoutTestCase@!@testMDC@!@[XMLLayout, xmlLayout, =, new, XMLLayout, (, ), ;, xmlLayout, ., setProperties, (, true, ), ;, root, ., addAppender, (, new, FileAppender, (, xmlLayout, ,, TEMP, ,, false, ), ), ;, Hashtable, context, =, MDC, ., getContext, (, ), ;, if, (, context, !=, null, ), {, context, ., clear, (, ), ;, }, context, ., clear, (, ), ;, MDC, ., put, (, "key1", ,, "val1", ), ;, MDC, ., put, (, "key2", ,, "val2", ), ;, logger, ., debug, (, "Hello", ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, XMLTimestampFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/xmlLayout.mdc.1", ), ), ;]
XMLLayoutTestCase@!@testMDCEscaped@!@[XMLLayout, xmlLayout, =, new, XMLLayout, (, ), ;, xmlLayout, ., setProperties, (, true, ), ;, root, ., addAppender, (, new, FileAppender, (, xmlLayout, ,, TEMP, ,, false, ), ), ;, Hashtable, context, =, MDC, ., getContext, (, ), ;, if, (, context, !=, null, ), {, context, ., clear, (, ), ;, }, context, ., clear, (, ), ;, MDC, ., put, (, "blahAttribute", ,, "<blah value='blah'>", ), ;, MDC, ., put, (, "<blahKey value='blah'/>", ,, "blahValue", ), ;, logger, ., debug, (, "Hello", ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, new, LineNumberFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), ,, new, XMLTimestampFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/xmlLayout.mdc.2", ), ), ;]
XMLLayoutTestCase@!@common@!@[String, oldThreadName, =, Thread, ., currentThread, (, ), ., getName, (, ), ;, Thread, ., currentThread, (, ), ., setName, (, "main", ), ;, int, i, =, -, 1, ;, new, X, (, ), ;, logger, ., trace, (, "Message ", +, ++, i, ), ;, root, ., trace, (, "Message ", +, i, ), ;, logger, ., debug, (, "Message ", +, ++, i, ), ;, root, ., debug, (, "Message ", +, i, ), ;, logger, ., info, (, "Message ", +, ++, i, ), ;, root, ., info, (, "Message ", +, i, ), ;, logger, ., warn, (, "Message ", +, ++, i, ), ;, root, ., warn, (, "Message ", +, i, ), ;, logger, ., error, (, "Message ", +, ++, i, ), ;, root, ., error, (, "Message ", +, i, ), ;, logger, ., log, (, Level, ., FATAL, ,, "Message ", +, ++, i, ), ;, root, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, Exception, e, =, new, Exception, (, "Just testing", ), ;, logger, ., debug, (, "Message ", +, ++, i, ,, e, ), ;, root, ., debug, (, "Message ", +, i, ,, e, ), ;, logger, ., error, (, "Message ", +, ++, i, ,, e, ), ;, root, ., error, (, "Message ", +, i, ,, e, ), ;, Thread, ., currentThread, (, ), ., setName, (, oldThreadName, ), ;]
XMLLayoutTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, XMLLayoutTestCase, (, "basic", ), ), ;, suite, ., addTest, (, new, XMLLayoutTestCase, (, "locationInfo", ), ), ;, suite, ., addTest, (, new, XMLLayoutTestCase, (, "testCDATA", ), ), ;, suite, ., addTest, (, new, XMLLayoutTestCase, (, "testNull", ), ), ;, suite, ., addTest, (, new, XMLLayoutTestCase, (, "testMDC", ), ), ;, suite, ., addTest, (, new, XMLLayoutTestCase, (, "testMDCEscaped", ), ), ;, return, suite, ;]
LocationInfoTest@!@testFourParamConstructor@!@[final, String, className, =, LocationInfoTest, ., class, ., getName, (, ), ;, final, String, methodName, =, "testFourParamConstructor", ;, final, String, fileName, =, "LocationInfoTest.java", ;, final, String, lineNumber, =, "41", ;, LocationInfo, li, =, new, LocationInfo, (, fileName, ,, className, ,, methodName, ,, lineNumber, ), ;, assertEquals, (, className, ,, li, ., getClassName, (, ), ), ;, assertEquals, (, methodName, ,, li, ., getMethodName, (, ), ), ;, assertEquals, (, fileName, ,, li, ., getFileName, (, ), ), ;, assertEquals, (, lineNumber, ,, li, ., getLineNumber, (, ), ), ;, assertEquals, (, className, +, ".", +, methodName, +, "(", +, fileName, +, ":", +, lineNumber, +, ")", ,, li, ., fullInfo, ), ;]
LocationInfoTest@!@getInfo@!@[return, new, LocationInfo, (, new, Throwable, (, ), ,, NameSubstring, ., class, ., getName, (, ), ), ;]
LoggingEventTest@!@testSerializationSimple@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, LoggingEvent, event, =, new, LoggingEvent, (, root, ., getClass, (, ), ., getName, (, ), ,, root, ,, Level, ., INFO, ,, "Hello, world.", ,, null, ), ;, int, [, ], skip, =, new, int, [, ], {, 352, ,, 353, ,, 354, ,, 355, ,, 356, }, ;, SerializationTestHelper, ., assertSerializationEquals, (, "witness/serialization/simple.bin", ,, event, ,, skip, ,, 237, ), ;]
LoggingEventTest@!@testSerializationWithException@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, Exception, ex, =, new, Exception, (, "Don't panic", ), ;, LoggingEvent, event, =, new, LoggingEvent, (, root, ., getClass, (, ), ., getName, (, ), ,, root, ,, Level, ., INFO, ,, "Hello, world.", ,, ex, ), ;, int, [, ], skip, =, new, int, [, ], {, 352, ,, 353, ,, 354, ,, 355, ,, 356, }, ;, SerializationTestHelper, ., assertSerializationEquals, (, "witness/serialization/exception.bin", ,, event, ,, skip, ,, 237, ), ;]
LoggingEventTest@!@testSerializationWithLocation@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, LoggingEvent, event, =, new, LoggingEvent, (, root, ., getClass, (, ), ., getName, (, ), ,, root, ,, Level, ., INFO, ,, "Hello, world.", ,, null, ), ;, event, ., getLocationInformation, (, ), ;, int, [, ], skip, =, new, int, [, ], {, 352, ,, 353, ,, 354, ,, 355, ,, 356, }, ;, SerializationTestHelper, ., assertSerializationEquals, (, "witness/serialization/location.bin", ,, event, ,, skip, ,, 237, ), ;]
LoggingEventTest@!@testSerializationNDC@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, NDC, ., push, (, "ndc test", ), ;, LoggingEvent, event, =, new, LoggingEvent, (, root, ., getClass, (, ), ., getName, (, ), ,, root, ,, Level, ., INFO, ,, "Hello, world.", ,, null, ), ;, int, [, ], skip, =, new, int, [, ], {, 352, ,, 353, ,, 354, ,, 355, ,, 356, }, ;, SerializationTestHelper, ., assertSerializationEquals, (, "witness/serialization/ndc.bin", ,, event, ,, skip, ,, 237, ), ;]
LoggingEventTest@!@testSerializationMDC@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, MDC, ., put, (, "mdckey", ,, "mdcvalue", ), ;, LoggingEvent, event, =, new, LoggingEvent, (, root, ., getClass, (, ), ., getName, (, ), ,, root, ,, Level, ., INFO, ,, "Hello, world.", ,, null, ), ;, int, [, ], skip, =, new, int, [, ], {, 352, ,, 353, ,, 354, ,, 355, ,, 356, }, ;, SerializationTestHelper, ., assertSerializationEquals, (, "witness/serialization/mdc.bin", ,, event, ,, skip, ,, 237, ), ;]
LoggingEventTest@!@testDeserializationSimple@!@[Object, obj, =, SerializationTestHelper, ., deserializeStream, (, "witness/serialization/simple.bin", ), ;, assertTrue, (, obj, instanceof, LoggingEvent, ), ;, LoggingEvent, event, =, (, LoggingEvent, ), obj, ;, assertEquals, (, "Hello, world.", ,, event, ., getMessage, (, ), ), ;, assertEquals, (, Level, ., INFO, ,, event, ., getLevel, (, ), ), ;]
LoggingEventTest@!@testDeserializationWithException@!@[Object, obj, =, SerializationTestHelper, ., deserializeStream, (, "witness/serialization/exception.bin", ), ;, assertTrue, (, obj, instanceof, LoggingEvent, ), ;, LoggingEvent, event, =, (, LoggingEvent, ), obj, ;, assertEquals, (, "Hello, world.", ,, event, ., getMessage, (, ), ), ;, assertEquals, (, Level, ., INFO, ,, event, ., getLevel, (, ), ), ;]
LoggingEventTest@!@testDeserializationWithLocation@!@[Object, obj, =, SerializationTestHelper, ., deserializeStream, (, "witness/serialization/location.bin", ), ;, assertTrue, (, obj, instanceof, LoggingEvent, ), ;, LoggingEvent, event, =, (, LoggingEvent, ), obj, ;, assertEquals, (, "Hello, world.", ,, event, ., getMessage, (, ), ), ;, assertEquals, (, Level, ., INFO, ,, event, ., getLevel, (, ), ), ;]
LoggingEventTest@!@testFQNOfCategoryClass@!@[Category, root, =, Logger, ., getRootLogger, (, ), ;, Priority, info, =, Level, ., INFO, ;, String, catName, =, Logger, ., class, ., toString, (, ), ;, LoggingEvent, event, =, new, LoggingEvent, (, catName, ,, root, ,, info, ,, "Hello, world.", ,, null, ), ;, assertEquals, (, catName, ,, event, ., fqnOfCategoryClass, ), ;]
LoggingEventTest@!@testLevel@!@[Category, root, =, Logger, ., getRootLogger, (, ), ;, Priority, info, =, Level, ., INFO, ;, String, catName, =, Logger, ., class, ., toString, (, ), ;, LoggingEvent, event, =, new, LoggingEvent, (, catName, ,, root, ,, 0L, ,, info, ,, "Hello, world.", ,, null, ), ;, Priority, error, =, Level, ., ERROR, ;, event, ., level, =, error, ;, assertEquals, (, Level, ., ERROR, ,, event, ., level, ), ;]
LoggingEventTest@!@testLocationInfoNoFQCN@!@[Category, root, =, Logger, ., getRootLogger, (, ), ;, Priority, level, =, Level, ., INFO, ;, LoggingEvent, event, =, new, LoggingEvent, (, null, ,, root, ,, 0L, ,, level, ,, "Hello, world.", ,, null, ), ;, LocationInfo, info, =, event, ., getLocationInformation, (, ), ;, assertNotNull, (, info, ), ;, if, (, info, !=, null, ), {, assertEquals, (, "?", ,, info, ., getLineNumber, (, ), ), ;, assertEquals, (, "?", ,, info, ., getClassName, (, ), ), ;, assertEquals, (, "?", ,, info, ., getFileName, (, ), ), ;, assertEquals, (, "?", ,, info, ., getMethodName, (, ), ), ;, }, assertEquals, (, "?", ,, info, ., getLineNumber, (, ), ), ;, assertEquals, (, "?", ,, info, ., getClassName, (, ), ), ;, assertEquals, (, "?", ,, info, ., getFileName, (, ), ), ;, assertEquals, (, "?", ,, info, ., getMethodName, (, ), ), ;]
LoggingEventTest@!@toString@!@[throw, new, RuntimeException, (, ), ;]
EnhancedPatternLayoutTestCase@!@setUp@!@[root, =, Logger, ., getRootLogger, (, ), ;, logger, =, Logger, ., getLogger, (, EnhancedPatternLayoutTest, ., class, ), ;]
EnhancedPatternLayoutTestCase@!@tearDown@!@[root, ., getLoggerRepository, (, ), ., resetConfiguration, (, ), ;]
EnhancedPatternLayoutTestCase@!@configure@!@[PropertyConfigurator, ., configure, (, fileName, ), ;]
EnhancedPatternLayoutTestCase@!@compare@!@[return, Compare, ., compare, (, actual, ,, expected, ), ;]
EnhancedPatternLayoutTestCase@!@test1@!@[configure, (, "input/pattern/enhancedPatternLayout1.properties", ), ;, common, (, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, new, EnhancedLineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.1", ), ), ;]
EnhancedPatternLayoutTestCase@!@test2@!@[configure, (, "input/pattern/enhancedPatternLayout2.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT1, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, ISO8601Filter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.2", ), ), ;]
EnhancedPatternLayoutTestCase@!@test3@!@[configure, (, "input/pattern/enhancedPatternLayout3.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT1, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, ISO8601Filter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.3", ), ), ;]
EnhancedPatternLayoutTestCase@!@test4@!@[configure, (, "input/pattern/enhancedPatternLayout4.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT2, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, AbsoluteDateAndTimeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.4", ), ), ;]
EnhancedPatternLayoutTestCase@!@test5@!@[configure, (, "input/pattern/enhancedPatternLayout5.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT2, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, AbsoluteDateAndTimeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.5", ), ), ;]
EnhancedPatternLayoutTestCase@!@test6@!@[configure, (, "input/pattern/enhancedPatternLayout6.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT3, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, AbsoluteTimeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.6", ), ), ;]
EnhancedPatternLayoutTestCase@!@test7@!@[configure, (, "input/pattern/enhancedPatternLayout7.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT3, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, AbsoluteTimeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.7", ), ), ;]
EnhancedPatternLayoutTestCase@!@test8@!@[configure, (, "input/pattern/enhancedPatternLayout8.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT4, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, RelativeTimeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.8", ), ), ;]
EnhancedPatternLayoutTestCase@!@test9@!@[configure, (, "input/pattern/enhancedPatternLayout9.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT5, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.9", ), ), ;]
EnhancedPatternLayoutTestCase@!@test10@!@[configure, (, "input/pattern/enhancedPatternLayout10.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT6, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.10", ), ), ;]
EnhancedPatternLayoutTestCase@!@test11@!@[configure, (, "input/pattern/enhancedPatternLayout11.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT11a, ,, PAT11b, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.11", ), ), ;]
EnhancedPatternLayoutTestCase@!@test12@!@[configure, (, "input/pattern/enhancedPatternLayout12.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT12, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.12", ), ), ;]
EnhancedPatternLayoutTestCase@!@test13@!@[configure, (, "input/pattern/enhancedPatternLayout13.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT13, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.13", ), ), ;]
EnhancedPatternLayoutTestCase@!@test14@!@[configure, (, "input/pattern/enhancedPatternLayout14.properties", ), ;, common, (, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, new, EnhancedLineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.14", ), ), ;]
EnhancedPatternLayoutTestCase@!@clearMDC@!@[java, ., util, ., Hashtable, context, =, MDC, ., getContext, (, ), ;, if, (, context, !=, null, ), {, context, ., clear, (, ), ;, }, context, ., clear, (, ), ;]
EnhancedPatternLayoutTestCase@!@testMDC1@!@[configure, (, "input/pattern/enhancedPatternLayout.mdc.1.properties", ), ;, clearMDC, (, ), ;, MDC, ., put, (, "key1", ,, "va11", ), ;, MDC, ., put, (, "key2", ,, "va12", ), ;, logger, ., debug, (, "Hello World", ), ;, MDC, ., remove, (, "key1", ), ;, MDC, ., remove, (, "key2", ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, new, EnhancedLineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), ,, new, MDCOrderFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.mdc.1", ), ), ;]
EnhancedPatternLayoutTestCase@!@test15@!@[configure, (, "input/pattern/enhancedPatternLayout15.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT14, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, EnhancedLineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, "witness/pattern/enhancedPatternLayout.15", ), ), ;]
EnhancedPatternLayoutTestCase@!@test16@!@[final, long, start, =, new, Date, (, ), ., getTime, (, ), ;, configure, (, "input/pattern/enhancedPatternLayout16.properties", ), ;, common, (, ), ;, final, long, end, =, new, Date, (, ), ., getTime, (, ), ;, FileReader, reader, =, new, FileReader, (, "output/patternLayout16.log", ), ;, char, chars, [, ], =, new, char, [, 50, ], ;, reader, ., read, (, chars, ,, 0, ,, chars, ., length, ), ;, reader, ., close, (, ), ;, SimpleDateFormat, format, =, new, SimpleDateFormat, (, "yyyy-MM-dd HH:mm:ss", ), ;, format, ., setTimeZone, (, TimeZone, ., getTimeZone, (, "GMT+0", ), ), ;, String, utcStr, =, new, String, (, chars, ,, 0, ,, 19, ), ;, Date, utcDate, =, format, ., parse, (, utcStr, ,, new, ParsePosition, (, 0, ), ), ;, assertTrue, (, utcDate, ., getTime, (, ), >=, start, -, 1000, &&, utcDate, ., getTime, (, ), <, end, +, 1000, ), ;, String, cstStr, =, new, String, (, chars, ,, 21, ,, 19, ), ;, format, ., setTimeZone, (, TimeZone, ., getTimeZone, (, "GMT-6", ), ), ;, Date, cstDate, =, format, ., parse, (, cstStr, ,, new, ParsePosition, (, 0, ), ), ;, assertFalse, (, cstStr, ., equals, (, utcStr, ), ), ;, assertTrue, (, cstDate, ., getTime, (, ), >=, start, -, 1000, &&, cstDate, ., getTime, (, ), <, end, +, 1000, ), ;]
EnhancedPatternLayoutTestCase@!@common@!@[int, i, =, -, 1, ;, logger, ., debug, (, "Message ", +, ++, i, ), ;, root, ., debug, (, "Message ", +, i, ), ;, logger, ., info, (, "Message ", +, ++, i, ), ;, root, ., info, (, "Message ", +, i, ), ;, logger, ., warn, (, "Message ", +, ++, i, ), ;, root, ., warn, (, "Message ", +, i, ), ;, logger, ., error, (, "Message ", +, ++, i, ), ;, root, ., error, (, "Message ", +, i, ), ;, logger, ., log, (, Level, ., FATAL, ,, "Message ", +, ++, i, ), ;, root, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, Exception, e, =, new, Exception, (, "Just testing", ), ;, logger, ., debug, (, "Message ", +, ++, i, ,, e, ), ;, logger, ., info, (, "Message ", +, ++, i, ,, e, ), ;, logger, ., warn, (, "Message ", +, ++, i, ,, e, ), ;, logger, ., error, (, "Message ", +, ++, i, ,, e, ), ;, logger, ., log, (, Level, ., FATAL, ,, "Message ", +, ++, i, ,, e, ), ;]
EnhancedPatternLayoutTestCase@!@testMDC2@!@[String, OUTPUT_FILE, =, "output/patternLayout.mdc.2", ;, String, WITNESS_FILE, =, "witness/pattern/enhancedPatternLayout.mdc.2", ;, String, mdcMsgPattern1, =, "%m : %X%n", ;, String, mdcMsgPattern2, =, "%m : %X{key1}%n", ;, String, mdcMsgPattern3, =, "%m : %X{key2}%n", ;, String, mdcMsgPattern4, =, "%m : %X{key3}%n", ;, String, mdcMsgPattern5, =, "%m : %X{key1},%X{key2},%X{key3}%n", ;, EnhancedPatternLayout, layout, =, new, EnhancedPatternLayout, (, "%m%n", ), ;, Appender, appender, =, new, FileAppender, (, layout, ,, OUTPUT_FILE, ,, false, ), ;, root, ., addAppender, (, appender, ), ;, root, ., setLevel, (, Level, ., DEBUG, ), ;, clearMDC, (, ), ;, root, ., debug, (, "starting mdc pattern test", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern1, ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "empty mdc, no key specified in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern2, ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "empty mdc, key1 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern3, ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "empty mdc, key2 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern4, ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "empty mdc, key3 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern5, ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "empty mdc, key1, key2, and key3 in pattern", ), ;, MDC, ., put, (, "key1", ,, "value1", ), ;, MDC, ., put, (, "key2", ,, "value2", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern1, ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "filled mdc, no key specified in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern2, ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "filled mdc, key1 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern3, ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "filled mdc, key2 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern4, ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "filled mdc, key3 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern5, ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "filled mdc, key1, key2, and key3 in pattern", ), ;, MDC, ., remove, (, "key1", ), ;, MDC, ., remove, (, "key2", ), ;, layout, ., setConversionPattern, (, "%m%n", ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "finished mdc pattern test", ), ;, Transformer, ., transform, (, OUTPUT_FILE, ,, FILTERED, ,, new, Filter, [, ], {, new, EnhancedLineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), ,, new, MDCOrderFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, WITNESS_FILE, ), ), ;]
EnhancedPatternLayoutTestCase@!@testThrowable@!@[String, OUTPUT_FILE, =, "output/patternLayout.throwable", ;, String, WITNESS_FILE, =, "witness/pattern/enhancedPatternLayout.throwable", ;, EnhancedPatternLayout, layout, =, new, EnhancedPatternLayout, (, "%m%n", ), ;, Appender, appender, =, new, FileAppender, (, layout, ,, OUTPUT_FILE, ,, false, ), ;, root, ., addAppender, (, appender, ), ;, root, ., setLevel, (, Level, ., DEBUG, ), ;, root, ., debug, (, "starting throwable pattern test", ), ;, Exception, ex, =, new, Exception, (, "Test Exception", ), ;, root, ., debug, (, "plain pattern, no exception", ), ;, root, ., debug, (, "plain pattern, with exception", ,, ex, ), ;, layout, ., setConversionPattern, (, "%m%n%throwable", ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "%throwable, no exception", ), ;, root, ., debug, (, "%throwable, with exception", ,, ex, ), ;, layout, ., setConversionPattern, (, "%m%n%throwable{short}", ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "%throwable{short}, no exception", ), ;, root, ., debug, (, "%throwable{short}, with exception", ,, ex, ), ;, layout, ., setConversionPattern, (, "%m%n%throwable{none}", ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "%throwable{none}, no exception", ), ;, root, ., debug, (, "%throwable{none}, with exception", ,, ex, ), ;, layout, ., setConversionPattern, (, "%m%n%throwable{0}", ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "%throwable{0}, no exception", ), ;, root, ., debug, (, "%throwable{0}, with exception", ,, ex, ), ;, layout, ., setConversionPattern, (, "%m%n%throwable{1}", ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "%throwable{1}, no exception", ), ;, root, ., debug, (, "%throwable{1}, with exception", ,, ex, ), ;, layout, ., setConversionPattern, (, "%m%n%throwable{100}", ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "%throwable{100}, no exception", ), ;, root, ., debug, (, "%throwable{100}, with exception", ,, ex, ), ;, String, [, ], trace, =, new, ThrowableInformation, (, ex, ), ., getThrowableStrRep, (, ), ;, layout, ., setConversionPattern, (, "%m%n%throwable{", +, (, 2, -, trace, ., length, ), +, "}", ), ;, layout, ., activateOptions, (, ), ;, root, ., debug, (, "%throwable{-n}, no exception", ), ;, root, ., debug, (, "%throwable{-n}, with exception", ,, ex, ), ;, Transformer, ., transform, (, OUTPUT_FILE, ,, FILTERED, ,, new, Filter, [, ], {, new, EnhancedLineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, EnhancedJunitTestRunnerFilter, (, ), ,, new, MDCOrderFilter, (, ), }, ), ;, assertTrue, (, compare, (, FILTERED, ,, WITNESS_FILE, ), ), ;]
HierarchyThresholdTestCase@!@setUp@!@[]
HierarchyThresholdTestCase@!@tearDown@!@[System, ., out, ., println, (, "Tearing down test case.", ), ;, logger, ., getLoggerRepository, (, ), ., resetConfiguration, (, ), ;]
HierarchyThresholdTestCase@!@test1@!@[PropertyConfigurator, ., configure, (, "input/hierarchyThreshold1.properties", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/hierarchyThreshold.1", ), ), ;]
HierarchyThresholdTestCase@!@test2@!@[PropertyConfigurator, ., configure, (, "input/hierarchyThreshold2.properties", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/hierarchyThreshold.2", ), ), ;]
HierarchyThresholdTestCase@!@test3@!@[PropertyConfigurator, ., configure, (, "input/hierarchyThreshold3.properties", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/hierarchyThreshold.3", ), ), ;]
HierarchyThresholdTestCase@!@test4@!@[PropertyConfigurator, ., configure, (, "input/hierarchyThreshold4.properties", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/hierarchyThreshold.4", ), ), ;]
HierarchyThresholdTestCase@!@test5@!@[PropertyConfigurator, ., configure, (, "input/hierarchyThreshold5.properties", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/hierarchyThreshold.5", ), ), ;]
HierarchyThresholdTestCase@!@test6@!@[PropertyConfigurator, ., configure, (, "input/hierarchyThreshold6.properties", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/hierarchyThreshold.6", ), ), ;]
HierarchyThresholdTestCase@!@test7@!@[PropertyConfigurator, ., configure, (, "input/hierarchyThreshold7.properties", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/hierarchyThreshold.7", ), ), ;]
HierarchyThresholdTestCase@!@test8@!@[PropertyConfigurator, ., configure, (, "input/hierarchyThreshold8.properties", ), ;, common, (, ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/hierarchyThreshold.8", ), ), ;]
HierarchyThresholdTestCase@!@common@!@[String, oldThreadName, =, Thread, ., currentThread, (, ), ., getName, (, ), ;, Thread, ., currentThread, (, ), ., setName, (, "main", ), ;, logger, ., log, (, XLevel, ., TRACE, ,, "m0", ), ;, logger, ., debug, (, "m1", ), ;, logger, ., info, (, "m2", ), ;, logger, ., warn, (, "m3", ), ;, logger, ., error, (, "m4", ), ;, logger, ., fatal, (, "m5", ), ;, Thread, ., currentThread, (, ), ., setName, (, oldThreadName, ), ;]
HierarchyThresholdTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, HierarchyThresholdTestCase, (, "test1", ), ), ;, suite, ., addTest, (, new, HierarchyThresholdTestCase, (, "test2", ), ), ;, suite, ., addTest, (, new, HierarchyThresholdTestCase, (, "test3", ), ), ;, suite, ., addTest, (, new, HierarchyThresholdTestCase, (, "test4", ), ), ;, suite, ., addTest, (, new, HierarchyThresholdTestCase, (, "test5", ), ), ;, suite, ., addTest, (, new, HierarchyThresholdTestCase, (, "test6", ), ), ;, suite, ., addTest, (, new, HierarchyThresholdTestCase, (, "test7", ), ), ;, suite, ., addTest, (, new, HierarchyThresholdTestCase, (, "test8", ), ), ;, return, suite, ;]
TestLogMF@!@getTraceLevel@!@[try, {, return, (, Level, ), Level, ., class, ., getField, (, "TRACE", ), ., get, (, null, ), ;, }, catch, (, Exception, ex, ), {, return, new, Level, (, 5000, ,, "TRACE", ,, 7, ), ;, }, return, (, Level, ), Level, ., class, ., getField, (, "TRACE", ), ., get, (, null, ), ;, return, new, Level, (, 5000, ,, "TRACE", ,, 7, ), ;]
TestLogMF@!@tearDown@!@[LogManager, ., resetConfiguration, (, ), ;]
TestLogMF@!@testClassName@!@[CharArrayWriter, writer, =, new, CharArrayWriter, (, ), ;, PatternLayout, layout, =, new, PatternLayout, (, "%C", ), ;, WriterAppender, appender, =, new, WriterAppender, (, layout, ,, writer, ), ;, appender, ., activateOptions, (, ), ;, Logger, ., getRootLogger, (, ), ., addAppender, (, appender, ), ;, LogMF, ., debug, (, logger, ,, null, ,, Math, ., PI, ), ;, assertEquals, (, TestLogMF, ., class, ., getName, (, ), ,, writer, ., toString, (, ), ), ;]
TestLogMF@!@testTraceNullPattern@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogMF, ., trace, (, logger, ,, null, ,, Math, ., PI, ), ;, assertNull, (, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceNoArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogMF, ., trace, (, logger, ,, "Hello, World", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogMF, ., trace, (, logger, ,, "Hello, {.", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogMF, ., trace, (, logger, ,, "Hello, {0}World", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {0}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceString@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogMF, ., trace, (, logger, ,, "Hello, {0}", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceNull@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogMF, ., trace, (, logger, ,, "Hello, {0}", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceInt@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, int, val, =, 42, ;, LogMF, ., trace, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceByte@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, byte, val, =, 42, ;, LogMF, ., trace, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceShort@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, short, val, =, 42, ;, LogMF, ., trace, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceLong@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, long, val, =, 42, ;, LogMF, ., trace, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceChar@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, char, val, =, 'C', ;, LogMF, ., trace, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceBoolean@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, boolean, val, =, true, ;, LogMF, ., trace, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceFloat@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, float, val, =, 3.14f, ;, NumberFormat, format, =, NumberFormat, ., getInstance, (, ), ;, LogMF, ., trace, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration ", +, format, ., format, (, val, ), ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceDouble@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, double, val, =, 3.14, ;, NumberFormat, format, =, NumberFormat, ., getInstance, (, ), ;, LogMF, ., trace, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration ", +, format, ., format, (, val, ), ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogMF, ., trace, (, logger, ,, "{1}, {0}.", ,, "World", ,, "Hello", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogMF, ., trace, (, logger, ,, "{1}{2} {0}.", ,, "World", ,, "Hello", ,, ",", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceFourArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogMF, ., trace, (, logger, ,, "{1}{2} {0}{3}", ,, "World", ,, "Hello", ,, ",", ,, ".", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, Object, [, ], args, =, new, Object, [, ], {, "World", ,, "Hello", ,, ",", ,, ".", }, ;, LogMF, ., trace, (, logger, ,, "{1}{2} {0}{3}", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testTraceNullArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, Object, [, ], args, =, null, ;, LogMF, ., trace, (, logger, ,, "{1}{2} {0}{3}", ,, args, ), ;, assertEquals, (, "{1}{2} {0}{3}", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugNullPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, null, ,, Math, ., PI, ), ;, assertEquals, (, null, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugNoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "Hello, World", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "Hello, {.", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "Hello, {0}World", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {0}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugString@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "Hello, {0}", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugNull@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "Hello, {0}", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugInt@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, int, val, =, 42, ;, LogMF, ., debug, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugByte@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, byte, val, =, 42, ;, LogMF, ., debug, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugShort@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, short, val, =, 42, ;, LogMF, ., debug, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugLong@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, long, val, =, 42, ;, LogMF, ., debug, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugChar@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, char, val, =, 'C', ;, LogMF, ., debug, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugBoolean@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, boolean, val, =, true, ;, LogMF, ., debug, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugFloat@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "Iteration {0}", ,, (, float, ), Math, ., PI, ), ;, String, expected, =, MessageFormat, ., format, (, "Iteration {0}", ,, new, Object, [, ], {, new, Float, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugDouble@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "Iteration {0}", ,, Math, ., PI, ), ;, String, expected, =, MessageFormat, ., format, (, "Iteration {0}", ,, new, Object, [, ], {, new, Double, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "{1}, {0}.", ,, "World", ,, "Hello", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "{1}{2} {0}.", ,, "World", ,, "Hello", ,, ",", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugFourArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "{1}{2} {0}{3}", ,, "World", ,, "Hello", ,, ",", ,, ".", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, Object, [, ], args, =, new, Object, [, ], {, "World", ,, "Hello", ,, ",", ,, ".", }, ;, LogMF, ., debug, (, logger, ,, "{1}{2} {0}{3}", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugDate@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, Date, epoch, =, new, Date, (, 0, ), ;, LogMF, ., debug, (, logger, ,, "Iteration {0}", ,, epoch, ), ;, String, expected, =, MessageFormat, ., format, (, "Iteration {0}", ,, new, Object, [, ], {, epoch, }, ), ;, String, expected2, =, "Iteration ", +, DateFormat, ., getDateTimeInstance, (, DateFormat, ., SHORT, ,, DateFormat, ., SHORT, ), ., format, (, epoch, ), ;, String, actual, =, capture, ., getMessage, (, ), ;, if, (, System, ., getProperty, (, "java.vendor", ), ., indexOf, (, "Free", ), ==, -, 1, ), {, assertEquals, (, expected, ,, actual, ), ;, }, assertEquals, (, expected, ,, actual, ), ;, assertEquals, (, expected2, ,, actual, ), ;]
TestLogMF@!@testDebugNullArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, Object, [, ], args, =, null, ;, LogMF, ., debug, (, logger, ,, "{1}{2} {0}{3}", ,, args, ), ;, assertEquals, (, "{1}{2} {0}{3}", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugPercent@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "{0, number, percent}", ,, Math, ., PI, ), ;, String, expected, =, java, ., text, ., MessageFormat, ., format, (, "{0, number, percent}", ,, new, Object, [, ], {, new, Double, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugFullPrecisionAndPercent@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "{0}{0, number, percent}", ,, Math, ., PI, ), ;, String, expected, =, java, ., text, ., MessageFormat, ., format, (, "{0}{0, number, percent}", ,, new, Object, [, ], {, new, Double, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testDebugQuoted@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogMF, ., debug, (, logger, ,, "'{0}'", ,, "World", ), ;, assertEquals, (, "{0}", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoNullPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, null, ,, Math, ., PI, ), ;, assertNull, (, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoNoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "Hello, World", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "Hello, {.", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "Hello, {0}World", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {0}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoString@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "Hello, {0}", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoNull@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "Hello, {0}", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoInt@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, int, val, =, 42, ;, LogMF, ., info, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoByte@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, byte, val, =, 42, ;, LogMF, ., info, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoShort@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, short, val, =, 42, ;, LogMF, ., info, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoLong@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, long, val, =, 42, ;, LogMF, ., info, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoChar@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, char, val, =, 'C', ;, LogMF, ., info, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoBoolean@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, boolean, val, =, true, ;, LogMF, ., info, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoFloat@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "Iteration {0}", ,, (, float, ), Math, ., PI, ), ;, String, expected, =, MessageFormat, ., format, (, "Iteration {0}", ,, new, Object, [, ], {, new, Float, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoDouble@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "Iteration {0}", ,, Math, ., PI, ), ;, String, expected, =, MessageFormat, ., format, (, "Iteration {0}", ,, new, Object, [, ], {, new, Double, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "{1}, {0}.", ,, "World", ,, "Hello", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "{1}{2} {0}.", ,, "World", ,, "Hello", ,, ",", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoFourArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "{1}{2} {0}{3}", ,, "World", ,, "Hello", ,, ",", ,, ".", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfoArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, Object, [, ], args, =, new, Object, [, ], {, "World", ,, "Hello", ,, ",", ,, ".", }, ;, LogMF, ., info, (, logger, ,, "{1}{2} {0}{3}", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnNullPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogMF, ., warn, (, logger, ,, null, ,, Math, ., PI, ), ;, assertNull, (, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnNoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogMF, ., warn, (, logger, ,, "Hello, World", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogMF, ., warn, (, logger, ,, "Hello, {.", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogMF, ., warn, (, logger, ,, "Hello, {0}World", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {0}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnString@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogMF, ., warn, (, logger, ,, "Hello, {0}", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnNull@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogMF, ., warn, (, logger, ,, "Hello, {0}", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnInt@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, int, val, =, 42, ;, LogMF, ., warn, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnByte@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, byte, val, =, 42, ;, LogMF, ., warn, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnShort@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, short, val, =, 42, ;, LogMF, ., warn, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnLong@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, long, val, =, 42, ;, LogMF, ., warn, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnChar@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, char, val, =, 'C', ;, LogMF, ., warn, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnBoolean@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, boolean, val, =, true, ;, LogMF, ., warn, (, logger, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnFloat@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogMF, ., warn, (, logger, ,, "Iteration {0}", ,, (, float, ), Math, ., PI, ), ;, String, expected, =, MessageFormat, ., format, (, "Iteration {0}", ,, new, Object, [, ], {, new, Float, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnDouble@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogMF, ., warn, (, logger, ,, "Iteration {0}", ,, Math, ., PI, ), ;, String, expected, =, MessageFormat, ., format, (, "Iteration {0}", ,, new, Object, [, ], {, new, Double, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogMF, ., warn, (, logger, ,, "{1}, {0}.", ,, "World", ,, "Hello", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogMF, ., warn, (, logger, ,, "{1}{2} {0}.", ,, "World", ,, "Hello", ,, ",", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnFourArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogMF, ., warn, (, logger, ,, "{1}{2} {0}{3}", ,, "World", ,, "Hello", ,, ",", ,, ".", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testWarnArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, Object, [, ], args, =, new, Object, [, ], {, "World", ,, "Hello", ,, ",", ,, ".", }, ;, LogMF, ., warn, (, logger, ,, "{1}{2} {0}{3}", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogNullPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, null, ,, Math, ., PI, ), ;, assertNull, (, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogNoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Hello, World", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Hello, {.", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Hello, {0}World", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {0}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogString@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Hello, {0}", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogNull@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Hello, {0}", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogInt@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, int, val, =, 42, ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogByte@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, byte, val, =, 42, ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogShort@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, short, val, =, 42, ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogLong@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, long, val, =, 42, ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogChar@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, char, val, =, 'C', ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogBoolean@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, boolean, val, =, true, ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {0}", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogFloat@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {0}", ,, (, float, ), Math, ., PI, ), ;, String, expected, =, MessageFormat, ., format, (, "Iteration {0}", ,, new, Object, [, ], {, new, Float, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogDouble@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {0}", ,, Math, ., PI, ), ;, String, expected, =, MessageFormat, ., format, (, "Iteration {0}", ,, new, Object, [, ], {, new, Double, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "{1}, {0}.", ,, "World", ,, "Hello", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "{1}{2} {0}.", ,, "World", ,, "Hello", ,, ",", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogFourArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "{1}{2} {0}{3}", ,, "World", ,, "Hello", ,, ",", ,, ".", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, Object, [, ], args, =, new, Object, [, ], {, "World", ,, "Hello", ,, ",", ,, ".", }, ;, LogMF, ., log, (, logger, ,, Level, ., ERROR, ,, "{1}{2} {0}{3}", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbNullBundle@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, null, ,, "Iteration0", ,, Math, ., PI, ), ;, assertEquals, (, "Iteration0", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbNullKey@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, null, ,, Math, ., PI, ), ;, assertNull, (, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbNoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello1", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Malformed", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello2", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {0}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbString@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello3", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbNull@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello3", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbInt@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, int, val, =, 42, ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbByte@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, byte, val, =, 42, ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbShort@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, short, val, =, 42, ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbLong@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, long, val, =, 42, ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbChar@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, char, val, =, 'C', ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbBoolean@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, boolean, val, =, true, ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbFloat@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, (, float, ), Math, ., PI, ), ;, String, expected, =, MessageFormat, ., format, (, "Iteration {0}", ,, new, Object, [, ], {, new, Float, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbDouble@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, Math, ., PI, ), ;, String, expected, =, MessageFormat, ., format, (, "Iteration {0}", ,, new, Object, [, ], {, new, Double, (, Math, ., PI, ), }, ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello4", ,, "World", ,, "Hello", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello5", ,, "World", ,, "Hello", ,, ",", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbFourArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello6", ,, "World", ,, "Hello", ,, ",", ,, ".", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testLogrbArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, Object, [, ], args, =, new, Object, [, ], {, "World", ,, "Hello", ,, ",", ,, ".", }, ;, LogMF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello6", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfo1ParamBrace9@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "Hello, {9}{0}", ,, "World", ), ;, assertEquals, (, "Hello, {9}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfo2ParamBrace9@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "{1}, {9}{0}", ,, "World", ,, "Hello", ), ;, assertEquals, (, "Hello, {9}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfo10ParamBrace9@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogMF, ., info, (, logger, ,, "{1}, {9}{0}", ,, new, Object, [, ], {, "World", ,, "Hello", ,, null, ,, null, ,, null, ,, null, ,, null, ,, null, ,, null, ,, "New ", }, ), ;, assertEquals, (, "Hello, New World", ,, capture, ., getMessage, (, ), ), ;]
TestLogMF@!@testInfo1ParamBraceSlashColon@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, String, pattern, =, "Hello, {/}{0}{:}", ;, LogMF, ., info, (, logger, ,, pattern, ,, "World", ), ;, assertEquals, (, pattern, ,, capture, ., getMessage, (, ), ), ;]
FileAppenderTest@!@testDirectoryCreation@!@[if, (, !, System, ., getProperty, (, "java.version", ), ., startsWith, (, "1.1.", ), ), {, File, newFile, =, new, File, (, "output/newdir/temp.log", ), ;, newFile, ., delete, (, ), ;, File, newDir, =, new, File, (, "output/newdir", ), ;, newDir, ., delete, (, ), ;, org, ., apache, ., log4j, ., FileAppender, wa, =, new, org, ., apache, ., log4j, ., FileAppender, (, ), ;, wa, ., setFile, (, "output/newdir/temp.log", ), ;, wa, ., setLayout, (, new, PatternLayout, (, "%m%n", ), ), ;, wa, ., activateOptions, (, ), ;, assertTrue, (, new, File, (, "output/newdir/temp.log", ), ., exists, (, ), ), ;, }, File, newFile, =, new, File, (, "output/newdir/temp.log", ), ;, newFile, ., delete, (, ), ;, File, newDir, =, new, File, (, "output/newdir", ), ;, newDir, ., delete, (, ), ;, org, ., apache, ., log4j, ., FileAppender, wa, =, new, org, ., apache, ., log4j, ., FileAppender, (, ), ;, wa, ., setFile, (, "output/newdir/temp.log", ), ;, wa, ., setLayout, (, new, PatternLayout, (, "%m%n", ), ), ;, wa, ., activateOptions, (, ), ;, assertTrue, (, new, File, (, "output/newdir/temp.log", ), ., exists, (, ), ), ;]
FileAppenderTest@!@testGetThresholdReturnType@!@[Method, method, =, FileAppender, ., class, ., getMethod, (, "getThreshold", ,, (, Class, [, ], ), null, ), ;, assertTrue, (, method, ., getReturnType, (, ), ==, Priority, ., class, ), ;]
FileAppenderTest@!@testgetSetThreshold@!@[FileAppender, appender, =, new, FileAppender, (, ), ;, Priority, debug, =, Level, ., DEBUG, ;, assertNull, (, appender, ., getThreshold, (, ), ), ;, appender, ., setThreshold, (, debug, ), ;, assertTrue, (, appender, ., getThreshold, (, ), ==, debug, ), ;]
FileAppenderTest@!@testIsAsSevereAsThreshold@!@[FileAppender, appender, =, new, FileAppender, (, ), ;, Priority, debug, =, Level, ., DEBUG, ;, assertTrue, (, appender, ., isAsSevereAsThreshold, (, debug, ), ), ;]
TestCase1@!@setUp@!@[]
TestCase1@!@tearDown@!@[LogManager, ., shutdown, (, ), ;]
TestCase1@!@noneTest@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, boolean, rootIsConfigured, =, root, ., getAllAppenders, (, ), ., hasMoreElements, (, ), ;, assertTrue, (, !, rootIsConfigured, ), ;]
TestCase1@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, TestCase1, (, "noneTest", ), ), ;, return, suite, ;]
TestCase4@!@setUp@!@[]
TestCase4@!@tearDown@!@[LogManager, ., shutdown, (, ), ;]
TestCase4@!@combinedTest@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, boolean, rootIsConfigured, =, root, ., getAllAppenders, (, ), ., hasMoreElements, (, ), ;, assertTrue, (, rootIsConfigured, ), ;, Enumeration, e, =, root, ., getAllAppenders, (, ), ;, Appender, appender, =, (, Appender, ), e, ., nextElement, (, ), ;, assertEquals, (, appender, ., getName, (, ), ,, "D1", ), ;, assertEquals, (, e, ., hasMoreElements, (, ), ,, false, ), ;]
TestCase4@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, TestCase4, (, "combinedTest", ), ), ;, return, suite, ;]
TestCase2@!@setUp@!@[]
TestCase2@!@tearDown@!@[LogManager, ., shutdown, (, ), ;]
TestCase2@!@xmlTest@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, boolean, rootIsConfigured, =, root, ., getAllAppenders, (, ), ., hasMoreElements, (, ), ;, assertTrue, (, rootIsConfigured, ), ;, Enumeration, e, =, root, ., getAllAppenders, (, ), ;, Appender, appender, =, (, Appender, ), e, ., nextElement, (, ), ;, assertEquals, (, appender, ., getName, (, ), ,, "D1", ), ;]
TestCase2@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, TestCase2, (, "xmlTest", ), ), ;, return, suite, ;]
TestCase3@!@setUp@!@[]
TestCase3@!@tearDown@!@[LogManager, ., shutdown, (, ), ;]
TestCase3@!@propertiesTest@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, boolean, rootIsConfigured, =, root, ., getAllAppenders, (, ), ., hasMoreElements, (, ), ;, assertTrue, (, rootIsConfigured, ), ;, Enumeration, e, =, root, ., getAllAppenders, (, ), ;, Appender, appender, =, (, Appender, ), e, ., nextElement, (, ), ;, assertEquals, (, appender, ., getName, (, ), ,, "D3", ), ;]
TestCase3@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, TestCase3, (, "propertiesTest", ), ), ;, return, suite, ;]
LoggerTestCase@!@setUp@!@[rbUS, =, ResourceBundle, ., getBundle, (, "L7D", ,, new, Locale, (, "en", ,, "US", ), ), ;, assertNotNull, (, rbUS, ), ;, rbFR, =, ResourceBundle, ., getBundle, (, "L7D", ,, new, Locale, (, "fr", ,, "FR", ), ), ;, assertNotNull, (, "Got a null resource bundle.", ,, rbFR, ), ;, rbCH, =, ResourceBundle, ., getBundle, (, "L7D", ,, new, Locale, (, "fr", ,, "CH", ), ), ;, assertNotNull, (, "Got a null resource bundle.", ,, rbCH, ), ;]
LoggerTestCase@!@tearDown@!@[BasicConfigurator, ., resetConfiguration, (, ), ;, a1, =, null, ;, a2, =, null, ;]
LoggerTestCase@!@testAppender1@!@[logger, =, Logger, ., getLogger, (, "test", ), ;, a1, =, new, FileAppender, (, ), ;, a1, ., setName, (, "testAppender1", ), ;, logger, ., addAppender, (, a1, ), ;, Enumeration, enumeration, =, logger, ., getAllAppenders, (, ), ;, Appender, aHat, =, (, Appender, ), enumeration, ., nextElement, (, ), ;, assertEquals, (, a1, ,, aHat, ), ;]
LoggerTestCase@!@testAppender2@!@[a1, =, new, FileAppender, (, ), ;, a1, ., setName, (, "testAppender2.1", ), ;, a2, =, new, FileAppender, (, ), ;, a2, ., setName, (, "testAppender2.2", ), ;, logger, =, Logger, ., getLogger, (, "test", ), ;, logger, ., addAppender, (, a1, ), ;, logger, ., addAppender, (, a2, ), ;, logger, ., removeAppender, (, "testAppender2.1", ), ;, Enumeration, enumeration, =, logger, ., getAllAppenders, (, ), ;, Appender, aHat, =, (, Appender, ), enumeration, ., nextElement, (, ), ;, assertEquals, (, a2, ,, aHat, ), ;, assertTrue, (, !, enumeration, ., hasMoreElements, (, ), ), ;]
LoggerTestCase@!@testAdditivity1@!@[Logger, a, =, Logger, ., getLogger, (, "a", ), ;, Logger, ab, =, Logger, ., getLogger, (, "a.b", ), ;, CountingAppender, ca, =, new, CountingAppender, (, ), ;, a, ., addAppender, (, ca, ), ;, assertEquals, (, ca, ., counter, ,, 0, ), ;, ab, ., debug, (, MSG, ), ;, assertEquals, (, ca, ., counter, ,, 1, ), ;, ab, ., info, (, MSG, ), ;, assertEquals, (, ca, ., counter, ,, 2, ), ;, ab, ., warn, (, MSG, ), ;, assertEquals, (, ca, ., counter, ,, 3, ), ;, ab, ., error, (, MSG, ), ;, assertEquals, (, ca, ., counter, ,, 4, ), ;]
LoggerTestCase@!@testAdditivity2@!@[Logger, a, =, Logger, ., getLogger, (, "a", ), ;, Logger, ab, =, Logger, ., getLogger, (, "a.b", ), ;, Logger, abc, =, Logger, ., getLogger, (, "a.b.c", ), ;, Logger, x, =, Logger, ., getLogger, (, "x", ), ;, CountingAppender, ca1, =, new, CountingAppender, (, ), ;, CountingAppender, ca2, =, new, CountingAppender, (, ), ;, a, ., addAppender, (, ca1, ), ;, abc, ., addAppender, (, ca2, ), ;, assertEquals, (, ca1, ., counter, ,, 0, ), ;, assertEquals, (, ca2, ., counter, ,, 0, ), ;, ab, ., debug, (, MSG, ), ;, assertEquals, (, ca1, ., counter, ,, 1, ), ;, assertEquals, (, ca2, ., counter, ,, 0, ), ;, abc, ., debug, (, MSG, ), ;, assertEquals, (, ca1, ., counter, ,, 2, ), ;, assertEquals, (, ca2, ., counter, ,, 1, ), ;, x, ., debug, (, MSG, ), ;, assertEquals, (, ca1, ., counter, ,, 2, ), ;, assertEquals, (, ca2, ., counter, ,, 1, ), ;]
LoggerTestCase@!@testAdditivity3@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, Logger, a, =, Logger, ., getLogger, (, "a", ), ;, Logger, ab, =, Logger, ., getLogger, (, "a.b", ), ;, Logger, abc, =, Logger, ., getLogger, (, "a.b.c", ), ;, CountingAppender, caRoot, =, new, CountingAppender, (, ), ;, CountingAppender, caA, =, new, CountingAppender, (, ), ;, CountingAppender, caABC, =, new, CountingAppender, (, ), ;, root, ., addAppender, (, caRoot, ), ;, a, ., addAppender, (, caA, ), ;, abc, ., addAppender, (, caABC, ), ;, assertEquals, (, caRoot, ., counter, ,, 0, ), ;, assertEquals, (, caA, ., counter, ,, 0, ), ;, assertEquals, (, caABC, ., counter, ,, 0, ), ;, ab, ., setAdditivity, (, false, ), ;, a, ., debug, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 1, ), ;, assertEquals, (, caA, ., counter, ,, 1, ), ;, assertEquals, (, caABC, ., counter, ,, 0, ), ;, ab, ., debug, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 1, ), ;, assertEquals, (, caA, ., counter, ,, 1, ), ;, assertEquals, (, caABC, ., counter, ,, 0, ), ;, abc, ., debug, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 1, ), ;, assertEquals, (, caA, ., counter, ,, 1, ), ;, assertEquals, (, caABC, ., counter, ,, 1, ), ;]
LoggerTestCase@!@testDisable1@!@[CountingAppender, caRoot, =, new, CountingAppender, (, ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, root, ., addAppender, (, caRoot, ), ;, LoggerRepository, h, =, LogManager, ., getLoggerRepository, (, ), ;, h, ., setThreshold, (, (, Level, ), Level, ., INFO, ), ;, assertEquals, (, caRoot, ., counter, ,, 0, ), ;, root, ., debug, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 0, ), ;, root, ., info, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 1, ), ;, root, ., log, (, Level, ., WARN, ,, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 2, ), ;, root, ., warn, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 3, ), ;, h, ., setThreshold, (, (, Level, ), Level, ., WARN, ), ;, root, ., debug, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 3, ), ;, root, ., info, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 3, ), ;, root, ., log, (, Level, ., WARN, ,, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 4, ), ;, root, ., error, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 5, ), ;, root, ., log, (, Level, ., ERROR, ,, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, h, ., setThreshold, (, Level, ., OFF, ), ;, root, ., debug, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, root, ., info, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, root, ., log, (, Level, ., WARN, ,, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, root, ., error, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, root, ., log, (, Level, ., FATAL, ,, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, root, ., log, (, Level, ., FATAL, ,, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, h, ., setThreshold, (, Level, ., OFF, ), ;, root, ., debug, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, root, ., info, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, root, ., log, (, Level, ., WARN, ,, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, root, ., error, (, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, root, ., log, (, Level, ., ERROR, ,, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;, root, ., log, (, Level, ., FATAL, ,, MSG, ), ;, assertEquals, (, caRoot, ., counter, ,, 6, ), ;]
LoggerTestCase@!@testRB1@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, root, ., setResourceBundle, (, rbUS, ), ;, ResourceBundle, t, =, root, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbUS, ), ;, Logger, x, =, Logger, ., getLogger, (, "x", ), ;, Logger, x_y, =, Logger, ., getLogger, (, "x.y", ), ;, Logger, x_y_z, =, Logger, ., getLogger, (, "x.y.z", ), ;, t, =, x, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbUS, ), ;, t, =, x_y, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbUS, ), ;, t, =, x_y_z, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbUS, ), ;]
LoggerTestCase@!@testRB2@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, root, ., setResourceBundle, (, rbUS, ), ;, ResourceBundle, t, =, root, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbUS, ), ;, Logger, x, =, Logger, ., getLogger, (, "x", ), ;, Logger, x_y, =, Logger, ., getLogger, (, "x.y", ), ;, Logger, x_y_z, =, Logger, ., getLogger, (, "x.y.z", ), ;, x_y, ., setResourceBundle, (, rbFR, ), ;, t, =, x, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbUS, ), ;, t, =, x_y, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbFR, ), ;, t, =, x_y_z, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbFR, ), ;]
LoggerTestCase@!@testRB3@!@[Logger, root, =, Logger, ., getRootLogger, (, ), ;, root, ., setResourceBundle, (, rbUS, ), ;, ResourceBundle, t, =, root, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbUS, ), ;, Logger, x, =, Logger, ., getLogger, (, "x", ), ;, Logger, x_y, =, Logger, ., getLogger, (, "x.y", ), ;, Logger, x_y_z, =, Logger, ., getLogger, (, "x.y.z", ), ;, x_y, ., setResourceBundle, (, rbFR, ), ;, x_y_z, ., setResourceBundle, (, rbCH, ), ;, t, =, x, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbUS, ), ;, t, =, x_y, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbFR, ), ;, t, =, x_y_z, ., getResourceBundle, (, ), ;, assertSame, (, t, ,, rbCH, ), ;]
LoggerTestCase@!@testExists@!@[Logger, a, =, Logger, ., getLogger, (, "a", ), ;, Logger, a_b, =, Logger, ., getLogger, (, "a.b", ), ;, Logger, a_b_c, =, Logger, ., getLogger, (, "a.b.c", ), ;, Logger, t, ;, t, =, LogManager, ., exists, (, "xx", ), ;, assertNull, (, t, ), ;, t, =, LogManager, ., exists, (, "a", ), ;, assertSame, (, a, ,, t, ), ;, t, =, LogManager, ., exists, (, "a.b", ), ;, assertSame, (, a_b, ,, t, ), ;, t, =, LogManager, ., exists, (, "a.b.c", ), ;, assertSame, (, a_b_c, ,, t, ), ;]
LoggerTestCase@!@testHierarchy1@!@[Hierarchy, h, =, new, Hierarchy, (, new, RootLogger, (, (, Level, ), Level, ., ERROR, ), ), ;, Logger, a0, =, h, ., getLogger, (, "a", ), ;, assertEquals, (, "a", ,, a0, ., getName, (, ), ), ;, assertNull, (, a0, ., getLevel, (, ), ), ;, assertSame, (, Level, ., ERROR, ,, a0, ., getEffectiveLevel, (, ), ), ;, Logger, a1, =, h, ., getLogger, (, "a", ), ;, assertSame, (, a0, ,, a1, ), ;]
LoggerTestCase@!@testTrace@!@[VectorAppender, appender, =, new, VectorAppender, (, ), ;, appender, ., activateOptions, (, ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, root, ., addAppender, (, appender, ), ;, root, ., setLevel, (, Level, ., INFO, ), ;, Logger, tracer, =, Logger, ., getLogger, (, "com.example.Tracer", ), ;, tracer, ., setLevel, (, Level, ., TRACE, ), ;, tracer, ., trace, (, "Message 1", ), ;, root, ., trace, (, "Discarded Message", ), ;, root, ., trace, (, "Discarded Message", ), ;, Vector, msgs, =, appender, ., getVector, (, ), ;, assertEquals, (, 1, ,, msgs, ., size, (, ), ), ;, LoggingEvent, event, =, (, LoggingEvent, ), msgs, ., elementAt, (, 0, ), ;, assertEquals, (, Level, ., TRACE, ,, event, ., getLevel, (, ), ), ;, assertEquals, (, "Message 1", ,, event, ., getMessage, (, ), ), ;]
LoggerTestCase@!@testTraceWithException@!@[VectorAppender, appender, =, new, VectorAppender, (, ), ;, appender, ., activateOptions, (, ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, root, ., addAppender, (, appender, ), ;, root, ., setLevel, (, Level, ., INFO, ), ;, Logger, tracer, =, Logger, ., getLogger, (, "com.example.Tracer", ), ;, tracer, ., setLevel, (, Level, ., TRACE, ), ;, NullPointerException, ex, =, new, NullPointerException, (, ), ;, tracer, ., trace, (, "Message 1", ,, ex, ), ;, root, ., trace, (, "Discarded Message", ,, ex, ), ;, root, ., trace, (, "Discarded Message", ,, ex, ), ;, Vector, msgs, =, appender, ., getVector, (, ), ;, assertEquals, (, 1, ,, msgs, ., size, (, ), ), ;, LoggingEvent, event, =, (, LoggingEvent, ), msgs, ., elementAt, (, 0, ), ;, assertEquals, (, Level, ., TRACE, ,, event, ., getLevel, (, ), ), ;, assertEquals, (, "Message 1", ,, event, ., getMessage, (, ), ), ;]
LoggerTestCase@!@testIsTraceEnabled@!@[VectorAppender, appender, =, new, VectorAppender, (, ), ;, appender, ., activateOptions, (, ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, root, ., addAppender, (, appender, ), ;, root, ., setLevel, (, Level, ., INFO, ), ;, Logger, tracer, =, Logger, ., getLogger, (, "com.example.Tracer", ), ;, tracer, ., setLevel, (, Level, ., TRACE, ), ;, assertTrue, (, tracer, ., isTraceEnabled, (, ), ), ;, assertFalse, (, root, ., isTraceEnabled, (, ), ), ;]
LoggerTestCase@!@addAppenderEvent@!@[addEventCount, =, removeEventCount, =, 0, ;, addEventCount, ++, ;]
LoggerTestCase@!@removeAppenderEvent@!@[removeEventCount, ++, ;]
LoggerTestCase@!@getAddEventCount@!@[return, addEventCount, ;]
LoggerTestCase@!@getRemoveEventCount@!@[return, removeEventCount, ;]
PatternLayoutTestCase@!@setUp@!@[root, =, Logger, ., getRootLogger, (, ), ;, logger, =, Logger, ., getLogger, (, PatternLayoutTestCase, ., class, ), ;]
PatternLayoutTestCase@!@tearDown@!@[root, ., getLoggerRepository, (, ), ., resetConfiguration, (, ), ;]
PatternLayoutTestCase@!@test1@!@[PropertyConfigurator, ., configure, (, "input/patternLayout1.properties", ), ;, common, (, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, new, LineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.1", ), ), ;]
PatternLayoutTestCase@!@test2@!@[PropertyConfigurator, ., configure, (, "input/patternLayout2.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT1, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, ISO8601Filter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.2", ), ), ;]
PatternLayoutTestCase@!@test3@!@[PropertyConfigurator, ., configure, (, "input/patternLayout3.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT1, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, ISO8601Filter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.3", ), ), ;]
PatternLayoutTestCase@!@test4@!@[PropertyConfigurator, ., configure, (, "input/patternLayout4.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT2, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, AbsoluteDateAndTimeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.4", ), ), ;]
PatternLayoutTestCase@!@test5@!@[PropertyConfigurator, ., configure, (, "input/patternLayout5.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT2, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, AbsoluteDateAndTimeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.5", ), ), ;]
PatternLayoutTestCase@!@test6@!@[PropertyConfigurator, ., configure, (, "input/patternLayout6.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT3, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, AbsoluteTimeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.6", ), ), ;]
PatternLayoutTestCase@!@test7@!@[PropertyConfigurator, ., configure, (, "input/patternLayout7.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT3, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, AbsoluteTimeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.7", ), ), ;]
PatternLayoutTestCase@!@test8@!@[PropertyConfigurator, ., configure, (, "input/patternLayout8.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT4, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, RelativeTimeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.8", ), ), ;]
PatternLayoutTestCase@!@test9@!@[PropertyConfigurator, ., configure, (, "input/patternLayout9.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT5, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.9", ), ), ;]
PatternLayoutTestCase@!@test10@!@[PropertyConfigurator, ., configure, (, "input/patternLayout10.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT6, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.10", ), ), ;]
PatternLayoutTestCase@!@test11@!@[PropertyConfigurator, ., configure, (, "input/patternLayout11.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT11a, ,, PAT11b, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.11", ), ), ;]
PatternLayoutTestCase@!@test12@!@[PropertyConfigurator, ., configure, (, "input/patternLayout12.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT12, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.12", ), ), ;]
PatternLayoutTestCase@!@test13@!@[PropertyConfigurator, ., configure, (, "input/patternLayout13.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT13, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.13", ), ), ;]
PatternLayoutTestCase@!@test14@!@[PropertyConfigurator, ., configure, (, "input/patternLayout14.properties", ), ;, common, (, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, PAT14, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, TEMP, ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/patternLayout.14", ), ), ;]
PatternLayoutTestCase@!@testMDC1@!@[PropertyConfigurator, ., configure, (, "input/patternLayout.mdc.1.properties", ), ;, MDC, ., put, (, "key1", ,, "va11", ), ;, MDC, ., put, (, "key2", ,, "va12", ), ;, logger, ., debug, (, "Hello World", ), ;, MDC, ., remove, (, "key1", ), ;, MDC, ., remove, (, "key2", ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/patternLayout.mdc.1", ), ), ;]
PatternLayoutTestCase@!@testMDCClear@!@[PropertyConfigurator, ., configure, (, "input/patternLayout.mdc.1.properties", ), ;, MDC, ., put, (, "key1", ,, "va11", ), ;, MDC, ., put, (, "key2", ,, "va12", ), ;, logger, ., debug, (, "Hello World", ), ;, MDC, ., clear, (, ), ;, logger, ., debug, (, "Hello World", ), ;, assertTrue, (, Compare, ., compare, (, TEMP, ,, "witness/patternLayout.mdc.clear", ), ), ;]
PatternLayoutTestCase@!@common@!@[String, oldThreadName, =, Thread, ., currentThread, (, ), ., getName, (, ), ;, Thread, ., currentThread, (, ), ., setName, (, "main", ), ;, int, i, =, -, 1, ;, logger, ., trace, (, "Message ", +, ++, i, ), ;, root, ., trace, (, "Message ", +, i, ), ;, logger, ., debug, (, "Message ", +, ++, i, ), ;, root, ., debug, (, "Message ", +, i, ), ;, logger, ., info, (, "Message ", +, ++, i, ), ;, root, ., info, (, "Message ", +, i, ), ;, logger, ., warn, (, "Message ", +, ++, i, ), ;, root, ., warn, (, "Message ", +, i, ), ;, logger, ., error, (, "Message ", +, ++, i, ), ;, root, ., error, (, "Message ", +, i, ), ;, logger, ., log, (, Level, ., FATAL, ,, "Message ", +, ++, i, ), ;, root, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, Exception, e, =, new, Exception, (, "Just testing", ), ;, logger, ., trace, (, "Message ", +, ++, i, ,, e, ), ;, logger, ., debug, (, "Message ", +, ++, i, ,, e, ), ;, logger, ., info, (, "Message ", +, ++, i, ,, e, ), ;, logger, ., warn, (, "Message ", +, ++, i, ,, e, ), ;, logger, ., error, (, "Message ", +, ++, i, ,, e, ), ;, logger, ., log, (, Level, ., FATAL, ,, "Message ", +, ++, i, ,, e, ), ;, Thread, ., currentThread, (, ), ., setName, (, oldThreadName, ), ;]
TestLogSF@!@getTraceLevel@!@[try, {, return, (, Level, ), Level, ., class, ., getField, (, "TRACE", ), ., get, (, null, ), ;, }, catch, (, Exception, ex, ), {, return, new, Level, (, 5000, ,, "TRACE", ,, 7, ), ;, }, return, (, Level, ), Level, ., class, ., getField, (, "TRACE", ), ., get, (, null, ), ;, return, new, Level, (, 5000, ,, "TRACE", ,, 7, ), ;]
TestLogSF@!@tearDown@!@[LogManager, ., resetConfiguration, (, ), ;]
TestLogSF@!@testClassName@!@[CharArrayWriter, writer, =, new, CharArrayWriter, (, ), ;, PatternLayout, layout, =, new, PatternLayout, (, "%C", ), ;, WriterAppender, appender, =, new, WriterAppender, (, layout, ,, writer, ), ;, appender, ., activateOptions, (, ), ;, Logger, ., getRootLogger, (, ), ., addAppender, (, appender, ), ;, LogSF, ., debug, (, logger, ,, null, ,, Math, ., PI, ), ;, assertEquals, (, TestLogSF, ., class, ., getName, (, ), ,, writer, ., toString, (, ), ), ;]
TestLogSF@!@testTraceNullPattern@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogSF, ., trace, (, logger, ,, null, ,, Math, ., PI, ), ;, assertNull, (, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceNoArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogSF, ., trace, (, logger, ,, "Hello, World", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogSF, ., trace, (, logger, ,, "Hello, {.", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogSF, ., trace, (, logger, ,, "Hello, {}World", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceString@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogSF, ., trace, (, logger, ,, "Hello, {}", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceNull@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogSF, ., trace, (, logger, ,, "Hello, {}", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceInt@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, int, val, =, 42, ;, LogSF, ., trace, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceByte@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, byte, val, =, 42, ;, LogSF, ., trace, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceShort@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, short, val, =, 42, ;, LogSF, ., trace, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceLong@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, long, val, =, 42, ;, LogSF, ., trace, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceChar@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, char, val, =, 'C', ;, LogSF, ., trace, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceBoolean@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, boolean, val, =, true, ;, LogSF, ., trace, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceFloat@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, float, val, =, 3.14f, ;, LogSF, ., trace, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration ", +, String, ., valueOf, (, val, ), ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceDouble@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, double, val, =, 3.14, ;, LogSF, ., trace, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration ", +, String, ., valueOf, (, val, ), ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogSF, ., trace, (, logger, ,, "{}, {}.", ,, "Hello", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogSF, ., trace, (, logger, ,, "{}{} {}.", ,, "Hello", ,, ",", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceFourArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, LogSF, ., trace, (, logger, ,, "{}{} {}{}", ,, "Hello", ,, ",", ,, "World", ,, ".", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, Object, [, ], args, =, new, Object, [, ], {, "Hello", ,, ",", ,, "World", ,, ".", }, ;, LogSF, ., trace, (, logger, ,, "{}{} {}{}", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testTraceNullArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, TRACE, ), ;, logger, ., setLevel, (, TRACE, ), ;, Object, [, ], args, =, null, ;, LogSF, ., trace, (, logger, ,, "{}{} {}{}", ,, args, ), ;, assertEquals, (, "{}{} {}{}", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugNullPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogSF, ., debug, (, logger, ,, null, ,, Math, ., PI, ), ;, assertNull, (, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugNoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogSF, ., debug, (, logger, ,, "Hello, World", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogSF, ., debug, (, logger, ,, "Hello, {.", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogSF, ., debug, (, logger, ,, "Hello, {}World", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugString@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogSF, ., debug, (, logger, ,, "Hello, {}", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugNull@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogSF, ., debug, (, logger, ,, "Hello, {}", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugInt@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, int, val, =, 42, ;, LogSF, ., debug, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugByte@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, byte, val, =, 42, ;, LogSF, ., debug, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugShort@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, short, val, =, 42, ;, LogSF, ., debug, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugLong@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, long, val, =, 42, ;, LogSF, ., debug, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugChar@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, char, val, =, 'C', ;, LogSF, ., debug, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugBoolean@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, boolean, val, =, true, ;, LogSF, ., debug, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugFloat@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, float, val, =, 3.14f, ;, LogSF, ., debug, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration ", +, String, ., valueOf, (, val, ), ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugDouble@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, double, val, =, 3.14, ;, LogSF, ., debug, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration ", +, String, ., valueOf, (, val, ), ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogSF, ., debug, (, logger, ,, "{}, {}.", ,, "Hello", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogSF, ., debug, (, logger, ,, "{}{} {}.", ,, "Hello", ,, ",", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugFourArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, LogSF, ., debug, (, logger, ,, "{}{} {}{}", ,, "Hello", ,, ",", ,, "World", ,, ".", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, Object, [, ], args, =, new, Object, [, ], {, "Hello", ,, ",", ,, "World", ,, ".", }, ;, LogSF, ., debug, (, logger, ,, "{}{} {}{}", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testDebugNullArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., DEBUG, ), ;, Object, [, ], args, =, null, ;, LogSF, ., debug, (, logger, ,, "{}{} {}{}", ,, args, ), ;, assertEquals, (, "{}{} {}{}", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoNullPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogSF, ., info, (, logger, ,, null, ,, Math, ., PI, ), ;, assertNull, (, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoNoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogSF, ., info, (, logger, ,, "Hello, World", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogSF, ., info, (, logger, ,, "Hello, {.", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogSF, ., info, (, logger, ,, "Hello, {}World", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoString@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogSF, ., info, (, logger, ,, "Hello, {}", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoNull@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogSF, ., info, (, logger, ,, "Hello, {}", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoInt@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, int, val, =, 42, ;, LogSF, ., info, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoByte@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, byte, val, =, 42, ;, LogSF, ., info, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoShort@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, short, val, =, 42, ;, LogSF, ., info, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoLong@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, long, val, =, 42, ;, LogSF, ., info, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoChar@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, char, val, =, 'C', ;, LogSF, ., info, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoBoolean@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, boolean, val, =, true, ;, LogSF, ., info, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoFloat@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, float, val, =, 3.14f, ;, LogSF, ., info, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration ", +, String, ., valueOf, (, val, ), ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoDouble@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, double, val, =, 3.14, ;, LogSF, ., info, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration ", +, String, ., valueOf, (, val, ), ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogSF, ., info, (, logger, ,, "{}, {}.", ,, "Hello", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogSF, ., info, (, logger, ,, "{}{} {}.", ,, "Hello", ,, ",", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testInfoArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, Object, [, ], args, =, new, Object, [, ], {, "Hello", ,, ",", ,, "World", ,, ".", }, ;, LogSF, ., info, (, logger, ,, "{}{} {}{}", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnNullPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogSF, ., warn, (, logger, ,, null, ,, Math, ., PI, ), ;, assertNull, (, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnNoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogSF, ., warn, (, logger, ,, "Hello, World", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogSF, ., warn, (, logger, ,, "Hello, {.", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogSF, ., warn, (, logger, ,, "Hello, {}World", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnString@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogSF, ., warn, (, logger, ,, "Hello, {}", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnNull@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogSF, ., warn, (, logger, ,, "Hello, {}", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnInt@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, int, val, =, 42, ;, LogSF, ., warn, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnByte@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, byte, val, =, 42, ;, LogSF, ., warn, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnShort@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, short, val, =, 42, ;, LogSF, ., warn, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnLong@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, long, val, =, 42, ;, LogSF, ., warn, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnChar@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, char, val, =, 'C', ;, LogSF, ., warn, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnBoolean@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, boolean, val, =, true, ;, LogSF, ., warn, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnFloat@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, float, val, =, 3.14f, ;, LogSF, ., warn, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration ", +, String, ., valueOf, (, val, ), ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnDouble@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, double, val, =, 3.14, ;, LogSF, ., warn, (, logger, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration ", +, String, ., valueOf, (, val, ), ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogSF, ., warn, (, logger, ,, "{}, {}.", ,, "Hello", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogSF, ., warn, (, logger, ,, "{}{} {}.", ,, "Hello", ,, ",", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnFourArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, LogSF, ., warn, (, logger, ,, "{}{} {}{}", ,, "Hello", ,, ",", ,, "World", ,, ".", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testWarnArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., WARN, ), ;, Object, [, ], args, =, new, Object, [, ], {, "Hello", ,, ",", ,, "World", ,, ".", }, ;, LogSF, ., warn, (, logger, ,, "{}{} {}{}", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogNullPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, null, ,, Math, ., PI, ), ;, assertNull, (, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogNoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Hello, World", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Hello, {.", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Hello, {}World", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogString@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Hello, {}", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogNull@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Hello, {}", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogInt@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, int, val, =, 42, ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogByte@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, byte, val, =, 42, ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogShort@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, short, val, =, 42, ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogLong@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, long, val, =, 42, ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogChar@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, char, val, =, 'C', ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogBoolean@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, boolean, val, =, true, ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {}", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogFloat@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {}", ,, (, float, ), Math, ., PI, ), ;, String, expected, =, "Iteration ", +, String, ., valueOf, (, new, Float, (, Math, ., PI, ), ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogDouble@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "Iteration {}", ,, Math, ., PI, ), ;, String, expected, =, "Iteration ", +, String, ., valueOf, (, new, Double, (, Math, ., PI, ), ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "{}, {}.", ,, "Hello", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "{}{} {}.", ,, "Hello", ,, ",", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogFourArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "{}{} {}{}", ,, "Hello", ,, ",", ,, "World", ,, ".", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, Object, [, ], args, =, new, Object, [, ], {, "Hello", ,, ",", ,, "World", ,, ".", }, ;, LogSF, ., log, (, logger, ,, Level, ., ERROR, ,, "{}{} {}{}", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbNullBundle@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, null, ,, "Iteration0", ,, Math, ., PI, ), ;, assertEquals, (, "Iteration0", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbNullKey@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, null, ,, Math, ., PI, ), ;, assertNull, (, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbNoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello1", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbBadPattern@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Malformed", ,, Math, ., PI, ), ;, assertEquals, (, "Hello, {.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbMissingArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello2", ,, new, Object, [, 0, ], ), ;, assertEquals, (, "Hello, {}World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbString@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello3", ,, "World", ), ;, assertEquals, (, "Hello, World", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbNull@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello3", ,, (, Object, ), null, ), ;, assertEquals, (, "Hello, null", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbInt@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, int, val, =, 42, ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbByte@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, byte, val, =, 42, ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbShort@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, short, val, =, 42, ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbLong@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, long, val, =, 42, ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration 42", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbChar@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, char, val, =, 'C', ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration C", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbBoolean@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, boolean, val, =, true, ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, val, ), ;, assertEquals, (, "Iteration true", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbFloat@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, (, float, ), Math, ., PI, ), ;, String, expected, =, "Iteration ", +, String, ., valueOf, (, new, Float, (, Math, ., PI, ), ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbDouble@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Iteration0", ,, Math, ., PI, ), ;, String, expected, =, "Iteration ", +, String, ., valueOf, (, new, Double, (, Math, ., PI, ), ), ;, assertEquals, (, expected, ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbTwoArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello4", ,, "Hello", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbThreeArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello5", ,, "Hello", ,, ",", ,, "World", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbFourArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello6", ,, "Hello", ,, ",", ,, "World", ,, ".", ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testLogrbArrayArg@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., ERROR, ), ;, Object, [, ], args, =, new, Object, [, ], {, "Hello", ,, ",", ,, "World", ,, ".", }, ;, LogSF, ., logrb, (, logger, ,, Level, ., ERROR, ,, BUNDLE_NAME, ,, "Hello6", ,, args, ), ;, assertEquals, (, "Hello, World.", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testEscapeOneParam@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogSF, ., info, (, logger, ,, "\\{}\\{{}}, World}\\{", ,, "Hello", ), ;, assertEquals, (, "{}{Hello}, World}{", ,, capture, ., getMessage, (, ), ), ;]
TestLogSF@!@testEscapeTwoParam@!@[LogCapture, capture, =, new, LogCapture, (, Level, ., INFO, ), ;, LogSF, ., info, (, logger, ,, "\\{}\\{{}}, {}}{}\\{", ,, "Hello", ,, "World", ), ;, assertEquals, (, "{}{Hello}, World}{}{", ,, capture, ., getMessage, (, ), ), ;]
RFATestCase@!@tearDown@!@[LogManager, ., resetConfiguration, (, ), ;]
RFATestCase@!@test1@!@[Logger, logger, =, Logger, ., getLogger, (, RFATestCase, ., class, ), ;, PropertyConfigurator, ., configure, (, "input/RFA1.properties", ), ;, for, (, int, i, =, 0, ;, i, <, 25, ;, i, ++, ), {, if, (, i, <, 10, ), {, logger, ., debug, (, "Hello---", +, i, ), ;, }, else, if, (, i, <, 100, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, }, if, (, i, <, 10, ), {, logger, ., debug, (, "Hello---", +, i, ), ;, }, else, if, (, i, <, 100, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, logger, ., debug, (, "Hello---", +, i, ), ;, logger, ., debug, (, "Hello--", +, i, ), ;, assertTrue, (, new, File, (, "output/RFA-test1.log", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-test1.log.1", ), ., exists, (, ), ), ;]
RFATestCase@!@test2@!@[Logger, logger, =, Logger, ., getLogger, (, RFATestCase, ., class, ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, PatternLayout, layout, =, new, PatternLayout, (, "%m\n", ), ;, org, ., apache, ., log4j, ., RollingFileAppender, rfa, =, new, org, ., apache, ., log4j, ., RollingFileAppender, (, ), ;, rfa, ., setName, (, "ROLLING", ), ;, rfa, ., setLayout, (, layout, ), ;, rfa, ., setAppend, (, false, ), ;, rfa, ., setMaxBackupIndex, (, 3, ), ;, rfa, ., setMaximumFileSize, (, 100, ), ;, rfa, ., setFile, (, "output/RFA-test2.log", ), ;, rfa, ., activateOptions, (, ), ;, root, ., addAppender, (, rfa, ), ;, for, (, int, i, =, 0, ;, i, <, 55, ;, i, ++, ), {, if, (, i, <, 10, ), {, logger, ., debug, (, "Hello---", +, i, ), ;, }, else, if, (, i, <, 100, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, }, if, (, i, <, 10, ), {, logger, ., debug, (, "Hello---", +, i, ), ;, }, else, if, (, i, <, 100, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, logger, ., debug, (, "Hello---", +, i, ), ;, logger, ., debug, (, "Hello--", +, i, ), ;, assertTrue, (, new, File, (, "output/RFA-test2.log", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-test2.log.1", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-test2.log.2", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-test2.log.3", ), ., exists, (, ), ), ;, assertFalse, (, new, File, (, "output/RFA-test2.log.4", ), ., exists, (, ), ), ;]
RFATestCase@!@test2ParamConstructor@!@[SimpleLayout, layout, =, new, SimpleLayout, (, ), ;, RollingFileAppender, appender, =, new, RollingFileAppender, (, layout, ,, "output/rfa_2param.log", ), ;, assertEquals, (, 1, ,, appender, ., getMaxBackupIndex, (, ), ), ;, assertEquals, (, 10, *, 1024, *, 1024, ,, appender, ., getMaximumFileSize, (, ), ), ;]
RFATestCase@!@test3ParamConstructor@!@[SimpleLayout, layout, =, new, SimpleLayout, (, ), ;, RollingFileAppender, appender, =, new, RollingFileAppender, (, layout, ,, "output/rfa_3param.log", ,, false, ), ;, assertEquals, (, 1, ,, appender, ., getMaxBackupIndex, (, ), ), ;]
RFATestCase@!@testLockDotOne@!@[Logger, logger, =, Logger, ., getLogger, (, RFATestCase, ., class, ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, PatternLayout, layout, =, new, PatternLayout, (, "%m\n", ), ;, org, ., apache, ., log4j, ., RollingFileAppender, rfa, =, new, org, ., apache, ., log4j, ., RollingFileAppender, (, ), ;, rfa, ., setName, (, "ROLLING", ), ;, rfa, ., setLayout, (, layout, ), ;, rfa, ., setAppend, (, false, ), ;, rfa, ., setMaxBackupIndex, (, 10, ), ;, rfa, ., setMaximumFileSize, (, 100, ), ;, rfa, ., setFile, (, "output/RFA-dot1.log", ), ;, rfa, ., activateOptions, (, ), ;, root, ., addAppender, (, rfa, ), ;, new, File, (, "output/RFA-dot1.log.2", ), ., delete, (, ), ;, FileWriter, dot1, =, new, FileWriter, (, "output/RFA-dot1.log.1", ), ;, dot1, ., write, (, "Locked file", ), ;, FileWriter, dot5, =, new, FileWriter, (, "output/RFA-dot1.log.5", ), ;, dot5, ., write, (, "Unlocked file", ), ;, dot5, ., close, (, ), ;, for, (, int, i, =, 0, ;, i, <, 15, ;, i, ++, ), {, if, (, i, <, 10, ), {, logger, ., debug, (, "Hello---", +, i, ), ;, }, else, if, (, i, <, 100, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, }, if, (, i, <, 10, ), {, logger, ., debug, (, "Hello---", +, i, ), ;, }, else, if, (, i, <, 100, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, logger, ., debug, (, "Hello---", +, i, ), ;, logger, ., debug, (, "Hello--", +, i, ), ;, dot1, ., close, (, ), ;, for, (, int, i, =, 15, ;, i, <, 25, ;, i, ++, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, logger, ., debug, (, "Hello--", +, i, ), ;, rfa, ., close, (, ), ;, assertTrue, (, new, File, (, "output/RFA-dot1.log.7", ), ., exists, (, ), ), ;, if, (, new, File, (, "output/RFA-dot1.log.2", ), ., length, (, ), <, 15, ), {, assertEquals, (, 50, ,, new, File, (, "output/RFA-dot1.log", ), ., length, (, ), ), ;, assertEquals, (, 200, ,, new, File, (, "output/RFA-dot1.log.1", ), ., length, (, ), ), ;, }, else, {, assertTrue, (, new, File, (, "output/RFA-dot1.log", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot1.log.1", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot1.log.2", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot1.log.3", ), ., exists, (, ), ), ;, assertFalse, (, new, File, (, "output/RFA-dot1.log.4", ), ., exists, (, ), ), ;, }, assertEquals, (, 50, ,, new, File, (, "output/RFA-dot1.log", ), ., length, (, ), ), ;, assertEquals, (, 200, ,, new, File, (, "output/RFA-dot1.log.1", ), ., length, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot1.log", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot1.log.1", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot1.log.2", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot1.log.3", ), ., exists, (, ), ), ;, assertFalse, (, new, File, (, "output/RFA-dot1.log.4", ), ., exists, (, ), ), ;]
RFATestCase@!@testLockDotThree@!@[Logger, logger, =, Logger, ., getLogger, (, RFATestCase, ., class, ), ;, Logger, root, =, Logger, ., getRootLogger, (, ), ;, PatternLayout, layout, =, new, PatternLayout, (, "%m\n", ), ;, org, ., apache, ., log4j, ., RollingFileAppender, rfa, =, new, org, ., apache, ., log4j, ., RollingFileAppender, (, ), ;, rfa, ., setName, (, "ROLLING", ), ;, rfa, ., setLayout, (, layout, ), ;, rfa, ., setAppend, (, false, ), ;, rfa, ., setMaxBackupIndex, (, 10, ), ;, rfa, ., setMaximumFileSize, (, 100, ), ;, rfa, ., setFile, (, "output/RFA-dot3.log", ), ;, rfa, ., activateOptions, (, ), ;, root, ., addAppender, (, rfa, ), ;, new, File, (, "output/RFA-dot3.log.1", ), ., delete, (, ), ;, new, File, (, "output/RFA-dot3.log.2", ), ., delete, (, ), ;, new, File, (, "output/RFA-dot3.log.4", ), ., delete, (, ), ;, FileWriter, dot3, =, new, FileWriter, (, "output/RFA-dot3.log.3", ), ;, dot3, ., write, (, "Locked file", ), ;, FileWriter, dot5, =, new, FileWriter, (, "output/RFA-dot3.log.5", ), ;, dot5, ., write, (, "Unlocked file", ), ;, dot5, ., close, (, ), ;, for, (, int, i, =, 0, ;, i, <, 15, ;, i, ++, ), {, if, (, i, <, 10, ), {, logger, ., debug, (, "Hello---", +, i, ), ;, }, else, if, (, i, <, 100, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, }, if, (, i, <, 10, ), {, logger, ., debug, (, "Hello---", +, i, ), ;, }, else, if, (, i, <, 100, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, logger, ., debug, (, "Hello---", +, i, ), ;, logger, ., debug, (, "Hello--", +, i, ), ;, dot3, ., close, (, ), ;, for, (, int, i, =, 15, ;, i, <, 35, ;, i, ++, ), {, logger, ., debug, (, "Hello--", +, i, ), ;, }, logger, ., debug, (, "Hello--", +, i, ), ;, rfa, ., close, (, ), ;, assertTrue, (, new, File, (, "output/RFA-dot3.log.8", ), ., exists, (, ), ), ;, if, (, new, File, (, "output/RFA-dot3.log.5", ), ., exists, (, ), ), {, assertEquals, (, 50, ,, new, File, (, "output/RFA-dot3.log", ), ., length, (, ), ), ;, assertEquals, (, 100, ,, new, File, (, "output/RFA-dot3.log.1", ), ., length, (, ), ), ;, assertEquals, (, 200, ,, new, File, (, "output/RFA-dot3.log.2", ), ., length, (, ), ), ;, }, else, {, assertTrue, (, new, File, (, "output/RFA-dot3.log", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot3.log.1", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot3.log.2", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot3.log.3", ), ., exists, (, ), ), ;, assertFalse, (, new, File, (, "output/RFA-dot3.log.4", ), ., exists, (, ), ), ;, }, assertEquals, (, 50, ,, new, File, (, "output/RFA-dot3.log", ), ., length, (, ), ), ;, assertEquals, (, 100, ,, new, File, (, "output/RFA-dot3.log.1", ), ., length, (, ), ), ;, assertEquals, (, 200, ,, new, File, (, "output/RFA-dot3.log.2", ), ., length, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot3.log", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot3.log.1", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot3.log.2", ), ., exists, (, ), ), ;, assertTrue, (, new, File, (, "output/RFA-dot3.log.3", ), ., exists, (, ), ), ;, assertFalse, (, new, File, (, "output/RFA-dot3.log.4", ), ., exists, (, ), ), ;]
PatternParserTest@!@convert@!@[event, =, new, LoggingEvent, (, "org.apache.log4j.Logger", ,, logger, ,, Level, ., INFO, ,, "msg 1", ,, null, ), ;, List, converters, =, new, ArrayList, (, ), ;, List, fields, =, new, ArrayList, (, ), ;, PatternParser, ., parse, (, pattern, ,, converters, ,, fields, ,, registry, ,, PatternParser, ., getPatternLayoutRules, (, ), ), ;, assertEquals, (, converters, ., size, (, ), ,, fields, ., size, (, ), ), ;, StringBuffer, buf, =, new, StringBuffer, (, ), ;, Iterator, converterIter, =, converters, ., iterator, (, ), ;, Iterator, fieldIter, =, fields, ., iterator, (, ), ;, while, (, converterIter, ., hasNext, (, ), ), {, int, fieldStart, =, buf, ., length, (, ), ;, (, (, PatternConverter, ), converterIter, ., next, (, ), ), ., format, (, event, ,, buf, ), ;, (, (, FormattingInfo, ), fieldIter, ., next, (, ), ), ., format, (, fieldStart, ,, buf, ), ;, }, int, fieldStart, =, buf, ., length, (, ), ;, (, (, PatternConverter, ), converterIter, ., next, (, ), ), ., format, (, event, ,, buf, ), ;, (, (, FormattingInfo, ), fieldIter, ., next, (, ), ), ., format, (, fieldStart, ,, buf, ), ;, return, buf, ., toString, (, ), ;]
PatternParserTest@!@testNewWord@!@[HashMap, ruleRegistry, =, new, HashMap, (, 5, ), ;, ruleRegistry, ., put, (, "z343", ,, Num343PatternConverter, ., class, ., getName, (, ), ), ;, String, result, =, convert, (, "%z343", ,, ruleRegistry, ,, event, ), ;, assertEquals, (, "343", ,, result, ), ;]
PatternParserTest@!@testNewWord2@!@[HashMap, ruleRegistry, =, new, HashMap, (, 5, ), ;, ruleRegistry, ., put, (, "n343", ,, Num343PatternConverter, ., class, ., getName, (, ), ), ;, String, result, =, convert, (, "%n343", ,, ruleRegistry, ,, event, ), ;, assertEquals, (, "343", ,, result, ), ;]
PatternParserTest@!@testBogusWord1@!@[String, result, =, convert, (, "%, foobar", ,, null, ,, event, ), ;, assertEquals, (, "%, foobar", ,, result, ), ;]
PatternParserTest@!@testBogusWord2@!@[String, result, =, convert, (, "xyz %, foobar", ,, null, ,, event, ), ;, assertEquals, (, "xyz %, foobar", ,, result, ), ;]
PatternParserTest@!@testBasic1@!@[String, result, =, convert, (, "hello %-5level - %m%n", ,, null, ,, event, ), ;, assertEquals, (, "hello INFO  - msg 1", +, Layout, ., LINE_SEP, ,, result, ), ;]
PatternParserTest@!@testBasic2@!@[String, result, =, convert, (, "%relative %-5level [%thread] %logger - %m%n", ,, null, ,, event, ), ;, long, expectedRelativeTime, =, event, ., timeStamp, -, LoggingEvent, ., getStartTime, (, ), ;, assertEquals, (, expectedRelativeTime, +, " INFO  [main] ", +, logger, ., getName, (, ), +, " - msg 1", +, Layout, ., LINE_SEP, ,, result, ), ;]
PatternParserTest@!@testMultiOption@!@[String, result, =, convert, (, "%d{HH:mm:ss}{GMT} %d{HH:mm:ss} %c  - %m", ,, null, ,, event, ), ;, SimpleDateFormat, dateFormat, =, new, SimpleDateFormat, (, "HH:mm:ss", ), ;, String, localTime, =, dateFormat, ., format, (, new, Date, (, event, ., timeStamp, ), ), ;, dateFormat, ., setTimeZone, (, TimeZone, ., getTimeZone, (, "GMT", ), ), ;, String, utcTime, =, dateFormat, ., format, (, new, Date, (, event, ., timeStamp, ), ), ;, StringBuffer, buf, =, new, StringBuffer, (, utcTime, ), ;, buf, ., append, (, ' ', ), ;, buf, ., append, (, localTime, ), ;, buf, ., append, (, " org.foobar  - msg 1", ), ;, assertEquals, (, buf, ., toString, (, ), ,, result, ), ;]
PatternParserTest@!@testBogus@!@[String, result, =, convert, (, "%bogus", ,, null, ,, event, ), ;, assertEquals, (, "%bogus", ,, result, ), ;]
PatternParserTest@!@testMore@!@[String, result, =, convert, (, "%more", ,, null, ,, event, ), ;, assertEquals, (, "msg 1ore", ,, result, ), ;]
PatternParserTest@!@testMalformedOption@!@[String, result, =, convert, (, "foo%m{yyyy.MM.dd", ,, null, ,, event, ), ;, assertEquals, (, "foomsg 1{yyyy.MM.dd", ,, result, ), ;]
PatternParserTest@!@assertFactories@!@[assertTrue, (, rules, ., size, (, ), >, 0, ), ;, Iterator, iter, =, rules, ., values, (, ), ., iterator, (, ), ;, Class, [, ], factorySig, =, new, Class, [, ], {, Class, ., forName, (, "[Ljava.lang.String;", ), }, ;, Object, [, ], factoryArg, =, new, Object, [, ], {, null, }, ;, while, (, iter, ., hasNext, (, ), ), {, Class, ruleClass, =, (, Class, ), iter, ., next, (, ), ;, Method, factory, =, ruleClass, ., getMethod, (, "newInstance", ,, factorySig, ), ;, Object, converter, =, factory, ., invoke, (, null, ,, factoryArg, ), ;, assertTrue, (, converter, !=, null, ), ;, }, Class, ruleClass, =, (, Class, ), iter, ., next, (, ), ;, Method, factory, =, ruleClass, ., getMethod, (, "newInstance", ,, factorySig, ), ;, Object, converter, =, factory, ., invoke, (, null, ,, factoryArg, ), ;, assertTrue, (, converter, !=, null, ), ;]
PatternParserTest@!@testPatternLayoutFactories@!@[assertFactories, (, PatternParser, ., getPatternLayoutRules, (, ), ), ;]
PatternParserTest@!@testFileNamePatternFactories@!@[assertFactories, (, PatternParser, ., getFileNamePatternRules, (, ), ), ;]
CachedDateFormatTest@!@createAbsoluteTimeDateFormat@!@[DateFormat, df, =, new, SimpleDateFormat, (, "HH:mm:ss,SSS", ), ;, df, ., setTimeZone, (, timeZone, ), ;, return, df, ;]
CachedDateFormatTest@!@test1@!@[DateFormat, gmtFormat, =, new, CachedDateFormat, (, createAbsoluteTimeDateFormat, (, GMT, ), ,, 1000, ), ;, long, ticks, =, 12601L, *, 86400000L, ;, Date, jul1, =, new, Date, (, ticks, ), ;, assertEquals, (, "00:00:00,000", ,, gmtFormat, ., format, (, jul1, ), ), ;, Date, plus8ms, =, new, Date, (, ticks, +, 8, ), ;, assertEquals, (, "00:00:00,008", ,, gmtFormat, ., format, (, plus8ms, ), ), ;, Date, plus17ms, =, new, Date, (, ticks, +, 17, ), ;, assertEquals, (, "00:00:00,017", ,, gmtFormat, ., format, (, plus17ms, ), ), ;, Date, plus237ms, =, new, Date, (, ticks, +, 237, ), ;, assertEquals, (, "00:00:00,237", ,, gmtFormat, ., format, (, plus237ms, ), ), ;, Date, plus1415ms, =, new, Date, (, ticks, +, 1415, ), ;, assertEquals, (, "00:00:01,415", ,, gmtFormat, ., format, (, plus1415ms, ), ), ;]
CachedDateFormatTest@!@test2@!@[Date, jul2, =, new, Date, (, 12602L, *, 86400000L, ), ;, DateFormat, gmtFormat, =, new, CachedDateFormat, (, createAbsoluteTimeDateFormat, (, GMT, ), ,, 1000, ), ;, DateFormat, chicagoFormat, =, new, CachedDateFormat, (, createAbsoluteTimeDateFormat, (, CHICAGO, ), ,, 1000, ), ;, assertEquals, (, "00:00:00,000", ,, gmtFormat, ., format, (, jul2, ), ), ;, assertEquals, (, "19:00:00,000", ,, chicagoFormat, ., format, (, jul2, ), ), ;, assertEquals, (, "00:00:00,000", ,, gmtFormat, ., format, (, jul2, ), ), ;]
CachedDateFormatTest@!@test3@!@[DateFormat, gmtFormat, =, new, CachedDateFormat, (, createAbsoluteTimeDateFormat, (, GMT, ), ,, 1000, ), ;, long, ticks, =, -, 7L, *, 86400000L, ;, Date, jul1, =, new, Date, (, ticks, +, 8, ), ;, assertEquals, (, "00:00:00,008", ,, gmtFormat, ., format, (, jul1, ), ), ;, Date, plus8ms, =, new, Date, (, ticks, +, 16, ), ;, assertEquals, (, "00:00:00,016", ,, gmtFormat, ., format, (, plus8ms, ), ), ;, Date, plus17ms, =, new, Date, (, ticks, +, 23, ), ;, assertEquals, (, "00:00:00,023", ,, gmtFormat, ., format, (, plus17ms, ), ), ;, Date, plus237ms, =, new, Date, (, ticks, +, 245, ), ;, assertEquals, (, "00:00:00,245", ,, gmtFormat, ., format, (, plus237ms, ), ), ;, Date, plus1415ms, =, new, Date, (, ticks, +, 1423, ), ;, assertEquals, (, "00:00:01,423", ,, gmtFormat, ., format, (, plus1415ms, ), ), ;]
CachedDateFormatTest@!@test4@!@[SimpleDateFormat, baseFormat, =, new, SimpleDateFormat, (, "EEE, MMM dd, HH:mm:ss.SSS z", ,, Locale, ., ENGLISH, ), ;, DateFormat, cachedFormat, =, new, CachedDateFormat, (, baseFormat, ,, 1000, ), ;, long, ticks, =, 11141L, *, 86400000L, ;, Date, jul1, =, new, Date, (, ticks, ), ;, assertEquals, (, baseFormat, ., format, (, jul1, ), ,, cachedFormat, ., format, (, jul1, ), ), ;, Date, plus8ms, =, new, Date, (, ticks, +, 8, ), ;, baseFormat, ., format, (, plus8ms, ), ;, cachedFormat, ., format, (, plus8ms, ), ;, assertEquals, (, baseFormat, ., format, (, plus8ms, ), ,, cachedFormat, ., format, (, plus8ms, ), ), ;, Date, plus17ms, =, new, Date, (, ticks, +, 17, ), ;, assertEquals, (, baseFormat, ., format, (, plus17ms, ), ,, cachedFormat, ., format, (, plus17ms, ), ), ;, Date, plus237ms, =, new, Date, (, ticks, +, 237, ), ;, assertEquals, (, baseFormat, ., format, (, plus237ms, ), ,, cachedFormat, ., format, (, plus237ms, ), ), ;, Date, plus1415ms, =, new, Date, (, ticks, +, 1415, ), ;, assertEquals, (, baseFormat, ., format, (, plus1415ms, ), ,, cachedFormat, ., format, (, plus1415ms, ), ), ;]
CachedDateFormatTest@!@test5@!@[Locale, thai, =, new, Locale, (, "th", ,, "TH", ), ;, SimpleDateFormat, baseFormat, =, new, SimpleDateFormat, (, "EEE, MMM dd, HH:mm:ss.SSS z", ,, thai, ), ;, DateFormat, cachedFormat, =, new, CachedDateFormat, (, baseFormat, ,, 1000, ), ;, long, ticks, =, 11141L, *, 86400000L, ;, String, sx, ;, Date, jul1, =, new, Date, (, ticks, ), ;, sx, =, cachedFormat, ., format, (, jul1, ), ;, System, ., out, ., println, (, baseFormat, ., format, (, jul1, ), ), ;, System, ., out, ., println, (, sx, ), ;, assertEquals, (, baseFormat, ., format, (, jul1, ), ,, sx, ), ;, sx, =, cachedFormat, ., format, (, jul1, ), ;, System, ., out, ., println, (, baseFormat, ., format, (, jul1, ), ), ;, System, ., out, ., println, (, sx, ), ;, assertEquals, (, baseFormat, ., format, (, jul1, ), ,, sx, ), ;, Date, plus8ms, =, new, Date, (, ticks, +, 8, ), ;, sx, =, cachedFormat, ., format, (, plus8ms, ), ;, System, ., out, ., println, (, baseFormat, ., format, (, plus8ms, ), ), ;, System, ., out, ., println, (, sx, ), ;, assertEquals, (, baseFormat, ., format, (, plus8ms, ), ,, sx, ), ;, Date, plus17ms, =, new, Date, (, ticks, +, 17, ), ;, assertEquals, (, baseFormat, ., format, (, plus17ms, ), ,, cachedFormat, ., format, (, plus17ms, ), ), ;, Date, plus237ms, =, new, Date, (, ticks, +, 237, ), ;, assertEquals, (, baseFormat, ., format, (, plus237ms, ), ,, cachedFormat, ., format, (, plus237ms, ), ), ;, Date, plus1415ms, =, new, Date, (, ticks, +, 1415, ), ;, assertEquals, (, baseFormat, ., format, (, plus1415ms, ), ,, cachedFormat, ., format, (, plus1415ms, ), ), ;]
CachedDateFormatTest@!@test6@!@[assertNotNull, (, new, CachedDateFormat, (, new, SimpleDateFormat, (, ), ,, 1000, ), ., getNumberFormat, (, ), ), ;]
CachedDateFormatTest@!@test8@!@[DateFormat, baseFormat, =, new, SimpleDateFormat, (, "yyyy-MM-dd HH:mm:ss,SSS", ), ;, baseFormat, ., setTimeZone, (, GMT, ), ;, DateFormat, cachedFormat, =, new, CachedDateFormat, (, baseFormat, ,, 1000, ), ;, Date, jul4, =, new, Date, (, 12603L, *, 86400000L, ), ;, assertEquals, (, "2004-07-04 00:00:00,000", ,, cachedFormat, ., format, (, jul4, ), ), ;, cachedFormat, ., setTimeZone, (, TimeZone, ., getTimeZone, (, "GMT-6", ), ), ;, assertEquals, (, "2004-07-03 18:00:00,000", ,, cachedFormat, ., format, (, jul4, ), ), ;]
CachedDateFormatTest@!@test9@!@[DateFormat, baseFormat, =, new, SimpleDateFormat, (, "yyyy-MMMM-dd HH:mm:ss,SS z", ,, Locale, ., US, ), ;, DateFormat, cachedFormat, =, new, CachedDateFormat, (, baseFormat, ,, 1000, ), ;, TimeZone, cet, =, TimeZone, ., getTimeZone, (, "GMT+1", ), ;, cachedFormat, ., setTimeZone, (, cet, ), ;, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., set, (, 2004, ,, Calendar, ., DECEMBER, ,, 12, ,, 20, ,, 0, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 37, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 23, ), ;, c, ., setTimeZone, (, cet, ), ;, String, expected, =, baseFormat, ., format, (, c, ., getTime, (, ), ), ;, String, s, =, cachedFormat, ., format, (, c, ., getTime, (, ), ), ;, assertEquals, (, expected, ,, s, ), ;, c, ., set, (, 2005, ,, Calendar, ., JANUARY, ,, 1, ,, 0, ,, 0, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 13, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 905, ), ;, expected, =, baseFormat, ., format, (, c, ., getTime, (, ), ), ;, s, =, cachedFormat, ., format, (, c, ., getTime, (, ), ), ;, assertEquals, (, expected, ,, s, ), ;]
CachedDateFormatTest@!@test10@!@[DateFormat, baseFormat, =, new, SimpleDateFormat, (, "MMMM SSS EEEEEE", ,, Locale, ., US, ), ;, DateFormat, cachedFormat, =, new, CachedDateFormat, (, baseFormat, ,, 1000, ), ;, TimeZone, cet, =, TimeZone, ., getTimeZone, (, "GMT+1", ), ;, cachedFormat, ., setTimeZone, (, cet, ), ;, Calendar, c, =, Calendar, ., getInstance, (, ), ;, c, ., set, (, 2004, ,, Calendar, ., OCTOBER, ,, 5, ,, 20, ,, 0, ), ;, c, ., set, (, Calendar, ., SECOND, ,, 37, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 23, ), ;, c, ., setTimeZone, (, cet, ), ;, String, expected, =, baseFormat, ., format, (, c, ., getTime, (, ), ), ;, String, s, =, cachedFormat, ., format, (, c, ., getTime, (, ), ), ;, assertEquals, (, expected, ,, s, ), ;, c, ., set, (, 2004, ,, Calendar, ., NOVEMBER, ,, 1, ,, 0, ,, 0, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 23, ), ;, expected, =, baseFormat, ., format, (, c, ., getTime, (, ), ), ;, s, =, cachedFormat, ., format, (, c, ., getTime, (, ), ), ;, assertEquals, (, expected, ,, s, ), ;, c, ., set, (, Calendar, ., MILLISECOND, ,, 984, ), ;, expected, =, baseFormat, ., format, (, c, ., getTime, (, ), ), ;, s, =, cachedFormat, ., format, (, c, ., getTime, (, ), ), ;, assertEquals, (, expected, ,, s, ), ;]
CachedDateFormatTest@!@test11@!@[String, badPattern, =, "ss,SS0", ;, SimpleDateFormat, simpleFormat, =, new, SimpleDateFormat, (, badPattern, ), ;, SimpleDateFormat, baseFormat, =, new, SimpleDateFormat, (, badPattern, ), ;, DateFormat, gmtFormat, =, new, CachedDateFormat, (, simpleFormat, ,, 1000, ), ;, gmtFormat, ., setTimeZone, (, GMT, ), ;, baseFormat, ., setTimeZone, (, GMT, ), ;, long, ticks, =, 11142L, *, 86400000L, ;, Date, jul2, =, new, Date, (, ticks, +, 120, ), ;, String, expected, =, baseFormat, ., format, (, jul2, ), ;, assertEquals, (, expected, ,, gmtFormat, ., format, (, jul2, ), ), ;, jul2, ., setTime, (, ticks, +, 87, ), ;, expected, =, baseFormat, ., format, (, jul2, ), ;, assertEquals, (, expected, ,, gmtFormat, ., format, (, jul2, ), ), ;]
CachedDateFormatTest@!@test12@!@[SimpleDateFormat, df, =, new, SimpleDateFormat, (, "yyyy-MM-dd HH:mm:ss,SSS", ), ;, long, ticks, =, 11142L, *, 86400000L, ;, String, formatted, =, df, ., format, (, new, Date, (, ticks, ), ), ;, int, millisecondStart, =, CachedDateFormat, ., findMillisecondStart, (, ticks, ,, formatted, ,, df, ), ;, assertEquals, (, 20, ,, millisecondStart, ), ;]
CachedDateFormatTest@!@test13@!@[SimpleDateFormat, df, =, new, SimpleDateFormat, (, "yyyy-MM-dd", ), ;, long, ticks, =, 11142L, *, 86400000L, ;, String, formatted, =, df, ., format, (, new, Date, (, ticks, ), ), ;, int, millisecondStart, =, CachedDateFormat, ., findMillisecondStart, (, ticks, ,, formatted, ,, df, ), ;, assertEquals, (, CachedDateFormat, ., NO_MILLISECONDS, ,, millisecondStart, ), ;]
CachedDateFormatTest@!@test14@!@[SimpleDateFormat, df, =, new, SimpleDateFormat, (, "HH:mm:ss,SSS", ), ;, long, ticks, =, 11142L, *, 86400000L, ;, String, formatted, =, df, ., format, (, new, Date, (, ticks, ), ), ;, int, millisecondStart, =, CachedDateFormat, ., findMillisecondStart, (, ticks, ,, formatted, ,, df, ), ;, assertEquals, (, 9, ,, millisecondStart, ), ;]
CachedDateFormatTest@!@test15@!@[SimpleDateFormat, df, =, new, SimpleDateFormat, (, "HH:mm:ss,S", ), ;, long, ticks, =, 11142L, *, 86400000L, ;, String, formatted, =, df, ., format, (, new, Date, (, ticks, ), ), ;, int, millisecondStart, =, CachedDateFormat, ., findMillisecondStart, (, ticks, ,, formatted, ,, df, ), ;, assertEquals, (, CachedDateFormat, ., UNRECOGNIZED_MILLISECONDS, ,, millisecondStart, ), ;]
CachedDateFormatTest@!@test16@!@[SimpleDateFormat, df, =, new, SimpleDateFormat, (, "HH:mm:ss,SS", ), ;, long, ticks, =, 11142L, *, 86400000L, ;, String, formatted, =, df, ., format, (, new, Date, (, ticks, ), ), ;, int, millisecondStart, =, CachedDateFormat, ., findMillisecondStart, (, ticks, ,, formatted, ,, df, ), ;, assertEquals, (, CachedDateFormat, ., UNRECOGNIZED_MILLISECONDS, ,, millisecondStart, ), ;]
CachedDateFormatTest@!@test17@!@[Date, jul2, =, new, Date, (, 12602L, *, 86400000L, ), ;, String, badPattern, =, "HH:mm:ss,SSS HH:mm:ss,SSS", ;, SimpleDateFormat, simpleFormat, =, new, SimpleDateFormat, (, badPattern, ), ;, simpleFormat, ., setTimeZone, (, GMT, ), ;, DateFormat, cachedFormat, =, new, CachedDateFormat, (, simpleFormat, ,, 1000, ), ;, String, s, =, cachedFormat, ., format, (, jul2, ), ;, assertEquals, (, "00:00:00,000 00:00:00,000", ,, s, ), ;, jul2, ., setTime, (, jul2, ., getTime, (, ), +, 120, ), ;, assertEquals, (, "00:00:00,120 00:00:00,120", ,, simpleFormat, ., format, (, jul2, ), ), ;, s, =, cachedFormat, ., format, (, jul2, ), ;, int, maxValid, =, CachedDateFormat, ., getMaximumCacheValidity, (, badPattern, ), ;, assertEquals, (, 1, ,, maxValid, ), ;]
CachedDateFormatTest@!@xsuite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, CachedDateFormatTest, (, "test5", ), ), ;, return, suite, ;]
NameAbbreviatorTest@!@testGetDefault@!@[NameAbbreviator, abbrev, =, NameAbbreviator, ., getDefaultAbbreviator, (, ), ;, assertNotNull, (, abbrev, ), ;]
NameAbbreviatorTest@!@testZero@!@[NameAbbreviator, abbrev, =, NameAbbreviator, ., getAbbreviator, (, "0", ), ;, StringBuffer, buf, =, new, StringBuffer, (, "DEBUG - ", ), ;, int, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "org.example.foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - ", ,, buf, ., toString, (, ), ), ;]
NameAbbreviatorTest@!@testBlank@!@[NameAbbreviator, abbrev, =, NameAbbreviator, ., getAbbreviator, (, "   ", ), ;, NameAbbreviator, defaultAbbrev, =, NameAbbreviator, ., getDefaultAbbreviator, (, ), ;, assertTrue, (, abbrev, ==, defaultAbbrev, ), ;]
NameAbbreviatorTest@!@testOne@!@[NameAbbreviator, abbrev, =, NameAbbreviator, ., getAbbreviator, (, "1", ), ;, StringBuffer, buf, =, new, StringBuffer, (, "DEBUG - ", ), ;, int, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "org.example.foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - ", ,, buf, ., toString, (, ), ), ;]
NameAbbreviatorTest@!@testBlankOne@!@[NameAbbreviator, abbrev, =, NameAbbreviator, ., getAbbreviator, (, " 1 ", ), ;, StringBuffer, buf, =, new, StringBuffer, (, "DEBUG - ", ), ;, int, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "org.example.foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - ", ,, buf, ., toString, (, ), ), ;]
NameAbbreviatorTest@!@testTwo@!@[NameAbbreviator, abbrev, =, NameAbbreviator, ., getAbbreviator, (, "2", ), ;, StringBuffer, buf, =, new, StringBuffer, (, "DEBUG - ", ), ;, int, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "org.example.foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - foo.bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - foo.bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - bar", ,, buf, ., toString, (, ), ), ;]
NameAbbreviatorTest@!@testOneDot@!@[NameAbbreviator, abbrev, =, NameAbbreviator, ., getAbbreviator, (, "1.", ), ;, StringBuffer, buf, =, new, StringBuffer, (, "DEBUG - ", ), ;, int, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "org.example.foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - o.e.f.bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "org.example.foo.", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - o.e.f.", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - f.bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - ", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, ".", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - .", ,, buf, ., toString, (, ), ), ;]
NameAbbreviatorTest@!@testOneTildeDot@!@[NameAbbreviator, abbrev, =, NameAbbreviator, ., getAbbreviator, (, "1~.", ), ;, StringBuffer, buf, =, new, StringBuffer, (, "DEBUG - ", ), ;, int, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "org.example.foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - o~.e~.f~.bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "org.example.foo.", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - o~.e~.f~.", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - f~.bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - ", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, ".", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - .", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "o.e.f.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - o.e.f.bar", ,, buf, ., toString, (, ), ), ;]
NameAbbreviatorTest@!@testMulti@!@[NameAbbreviator, abbrev, =, NameAbbreviator, ., getAbbreviator, (, "1.*.2", ), ;, StringBuffer, buf, =, new, StringBuffer, (, "DEBUG - ", ), ;, int, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "org.example.foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - o.example.fo.bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "org.example.foo.", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - o.example.fo.", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - f.bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - ", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, ".", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - .", ,, buf, ., toString, (, ), ), ;]
NameAbbreviatorTest@!@testMinusOne@!@[NameAbbreviator, abbrev, =, NameAbbreviator, ., getAbbreviator, (, "-1", ), ;, StringBuffer, buf, =, new, StringBuffer, (, "DEBUG - ", ), ;, int, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "org.example.foo.bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - example.foo.bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, "bar", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - bar", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - ", ,, buf, ., toString, (, ), ), ;, buf, ., setLength, (, 0, ), ;, buf, ., append, (, "DEBUG - ", ), ;, fieldStart, =, buf, ., length, (, ), ;, buf, ., append, (, ".", ), ;, abbrev, ., abbreviate, (, fieldStart, ,, buf, ), ;, assertEquals, (, "DEBUG - ", ,, buf, ., toString, (, ), ), ;]
FormattingInfoTest@!@testGetDefault@!@[FormattingInfo, field, =, FormattingInfo, ., getDefault, (, ), ;, assertNotNull, (, field, ), ;, assertEquals, (, 0, ,, field, ., getMinLength, (, ), ), ;, assertEquals, (, Integer, ., MAX_VALUE, ,, field, ., getMaxLength, (, ), ), ;, assertEquals, (, false, ,, field, ., isLeftAligned, (, ), ), ;]
FormattingInfoTest@!@testConstructor@!@[FormattingInfo, field, =, new, FormattingInfo, (, true, ,, 3, ,, 6, ), ;, assertNotNull, (, field, ), ;, assertEquals, (, 3, ,, field, ., getMinLength, (, ), ), ;, assertEquals, (, 6, ,, field, ., getMaxLength, (, ), ), ;, assertEquals, (, true, ,, field, ., isLeftAligned, (, ), ), ;]
FormattingInfoTest@!@testTruncate@!@[StringBuffer, buf, =, new, StringBuffer, (, "foobar", ), ;, FormattingInfo, field, =, new, FormattingInfo, (, true, ,, 0, ,, 3, ), ;, field, ., format, (, 2, ,, buf, ), ;, assertEquals, (, "fobar", ,, buf, ., toString, (, ), ), ;]
FormattingInfoTest@!@testPadLeft@!@[StringBuffer, buf, =, new, StringBuffer, (, "foobar", ), ;, FormattingInfo, field, =, new, FormattingInfo, (, false, ,, 5, ,, 10, ), ;, field, ., format, (, 2, ,, buf, ), ;, assertEquals, (, "fo obar", ,, buf, ., toString, (, ), ), ;]
FormattingInfoTest@!@testPadRight@!@[StringBuffer, buf, =, new, StringBuffer, (, "foobar", ), ;, FormattingInfo, field, =, new, FormattingInfo, (, true, ,, 5, ,, 10, ), ;, field, ., format, (, 2, ,, buf, ), ;, assertEquals, (, "foobar ", ,, buf, ., toString, (, ), ), ;]
ORTestCase@!@setUp@!@[aor, =, new, UTObjectRenderer, (, "A", ), ;, bor, =, new, UTObjectRenderer, (, "B", ), ;, xor, =, new, UTObjectRenderer, (, "X", ), ;, yor, =, new, UTObjectRenderer, (, "Y", ), ;, oor, =, new, UTObjectRenderer, (, "Object", ), ;, nor, =, new, UTObjectRenderer, (, "Number", ), ;, ior, =, new, UTObjectRenderer, (, "Integer", ), ;, cor, =, new, UTObjectRenderer, (, "Comparable", ), ;, sor, =, new, UTObjectRenderer, (, "Serializable", ), ;]
ORTestCase@!@test1@!@[RendererMap, map, =, new, RendererMap, (, ), ;, ObjectRenderer, dr, =, map, ., getDefaultRenderer, (, ), ;, ObjectRenderer, r, =, map, ., get, (, Integer, ., class, ), ;, assertEquals, (, r, ,, dr, ), ;]
ORTestCase@!@test2@!@[RendererMap, map, =, new, RendererMap, (, ), ;, map, ., put, (, Integer, ., class, ,, ior, ), ;, ObjectRenderer, r, =, map, ., get, (, Integer, ., class, ), ;, assertEquals, (, r, ,, ior, ), ;]
ORTestCase@!@test3@!@[RendererMap, map, =, new, RendererMap, (, ), ;, map, ., put, (, Number, ., class, ,, ior, ), ;, ObjectRenderer, r, =, map, ., get, (, Integer, ., class, ), ;, assertEquals, (, r, ,, ior, ), ;]
ORTestCase@!@test4@!@[RendererMap, map, =, new, RendererMap, (, ), ;, map, ., put, (, Object, ., class, ,, oor, ), ;, ObjectRenderer, r, =, map, ., get, (, Integer, ., class, ), ;, assertEquals, (, r, ,, oor, ), ;]
ORTestCase@!@test5@!@[RendererMap, map, =, new, RendererMap, (, ), ;, map, ., put, (, Object, ., class, ,, oor, ), ;, map, ., put, (, Number, ., class, ,, nor, ), ;, map, ., put, (, Integer, ., class, ,, ior, ), ;, ObjectRenderer, r, =, map, ., get, (, Integer, ., class, ), ;, assertEquals, (, r, ,, ior, ), ;]
ORTestCase@!@test6@!@[RendererMap, map, =, new, RendererMap, (, ), ;, map, ., put, (, Object, ., class, ,, oor, ), ;, map, ., put, (, Number, ., class, ,, nor, ), ;, ObjectRenderer, r, =, map, ., get, (, Integer, ., class, ), ;, assertEquals, (, r, ,, nor, ), ;]
ORTestCase@!@test7@!@[RendererMap, map, =, new, RendererMap, (, ), ;, Class, comparable, =, null, ;, try, {, comparable, =, Class, ., forName, (, "java.lang.Comparable", ), ;, }, catch, (, Exception, ex, ), {, return, ;, }, comparable, =, Class, ., forName, (, "java.lang.Comparable", ), ;, return, ;, map, ., put, (, comparable, ,, cor, ), ;, ObjectRenderer, r, =, map, ., get, (, Integer, ., class, ), ;, assertEquals, (, r, ,, cor, ), ;]
ORTestCase@!@test8@!@[RendererMap, map, =, new, RendererMap, (, ), ;, map, ., put, (, Serializable, ., class, ,, sor, ), ;, ObjectRenderer, r, =, map, ., get, (, Integer, ., class, ), ;, assertEquals, (, r, ,, sor, ), ;]
ORTestCase@!@test9@!@[RendererMap, map, =, new, RendererMap, (, ), ;, map, ., put, (, Y, ., class, ,, yor, ), ;, ObjectRenderer, r, =, map, ., get, (, B, ., class, ), ;, assertEquals, (, r, ,, yor, ), ;]
ORTestCase@!@test10@!@[RendererMap, map, =, new, RendererMap, (, ), ;, map, ., put, (, X, ., class, ,, xor, ), ;, ObjectRenderer, r, =, map, ., get, (, B, ., class, ), ;, assertEquals, (, r, ,, xor, ), ;]
ORTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, ORTestCase, (, "test1", ), ), ;, suite, ., addTest, (, new, ORTestCase, (, "test2", ), ), ;, suite, ., addTest, (, new, ORTestCase, (, "test3", ), ), ;, suite, ., addTest, (, new, ORTestCase, (, "test4", ), ), ;, suite, ., addTest, (, new, ORTestCase, (, "test5", ), ), ;, suite, ., addTest, (, new, ORTestCase, (, "test6", ), ), ;, suite, ., addTest, (, new, ORTestCase, (, "test7", ), ), ;, suite, ., addTest, (, new, ORTestCase, (, "test8", ), ), ;, suite, ., addTest, (, new, ORTestCase, (, "test9", ), ), ;, suite, ., addTest, (, new, ORTestCase, (, "test10", ), ), ;, return, suite, ;]
PatternParserTestCase@!@setUp@!@[root, =, Logger, ., getRootLogger, (, ), ;, root, ., removeAllAppenders, (, ), ;]
PatternParserTestCase@!@tearDown@!@[root, ., getLoggerRepository, (, ), ., resetConfiguration, (, ), ;]
PatternParserTestCase@!@mdcPattern@!@[String, mdcMsgPattern1, =, "%m : %X%n", ;, String, mdcMsgPattern2, =, "%m : %X{key1}%n", ;, String, mdcMsgPattern3, =, "%m : %X{key2}%n", ;, String, mdcMsgPattern4, =, "%m : %X{key3}%n", ;, String, mdcMsgPattern5, =, "%m : %X{key1},%X{key2},%X{key3}%n", ;, PatternLayout, layout, =, new, PatternLayout, (, msgPattern, ), ;, Appender, appender, =, new, FileAppender, (, layout, ,, OUTPUT_FILE, +, "_mdc", ,, false, ), ;, root, ., addAppender, (, appender, ), ;, root, ., setLevel, (, Level, ., DEBUG, ), ;, root, ., debug, (, "starting mdc pattern test", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern1, ), ;, root, ., debug, (, "empty mdc, no key specified in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern2, ), ;, root, ., debug, (, "empty mdc, key1 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern3, ), ;, root, ., debug, (, "empty mdc, key2 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern4, ), ;, root, ., debug, (, "empty mdc, key3 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern5, ), ;, root, ., debug, (, "empty mdc, key1, key2, and key3 in pattern", ), ;, MDC, ., put, (, "key1", ,, "value1", ), ;, MDC, ., put, (, "key2", ,, "value2", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern1, ), ;, root, ., debug, (, "filled mdc, no key specified in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern2, ), ;, root, ., debug, (, "filled mdc, key1 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern3, ), ;, root, ., debug, (, "filled mdc, key2 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern4, ), ;, root, ., debug, (, "filled mdc, key3 in pattern", ), ;, layout, ., setConversionPattern, (, mdcMsgPattern5, ), ;, root, ., debug, (, "filled mdc, key1, key2, and key3 in pattern", ), ;, MDC, ., remove, (, "key1", ), ;, MDC, ., remove, (, "key2", ), ;, layout, ., setConversionPattern, (, msgPattern, ), ;, root, ., debug, (, "finished mdc pattern test", ), ;, assertTrue, (, Compare, ., compare, (, OUTPUT_FILE, +, "_mdc", ,, WITNESS_FILE, +, "_mdc", ), ), ;]
PatternParserTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, if, (, !, System, ., getProperty, (, "java.version", ), ., startsWith, (, "1.1.", ), ), {, suite, ., addTest, (, new, PatternParserTestCase, (, "mdcPattern", ), ), ;, }, suite, ., addTest, (, new, PatternParserTestCase, (, "mdcPattern", ), ), ;, return, suite, ;]
LogLogTest@!@testDebugKey@!@[assertEquals, (, "log4j.debug", ,, LogLog, ., DEBUG_KEY, ), ;]
LogLogTest@!@testConfigDebugKey@!@[assertEquals, (, "log4j.configDebug", ,, LogLog, ., CONFIG_DEBUG_KEY, ), ;]
BoundedFIFOTestCase@!@setUp@!@[for, (, int, i, =, 0, ;, i, <, MAX, ;, i, ++, ), {, e, [, i, ], =, new, LoggingEvent, (, "", ,, cat, ,, Level, ., DEBUG, ,, "e", +, i, ,, null, ), ;, }, e, [, i, ], =, new, LoggingEvent, (, "", ,, cat, ,, Level, ., DEBUG, ,, "e", +, i, ,, null, ), ;]
BoundedFIFOTestCase@!@test1@!@[for, (, int, size, =, 1, ;, size, <=, 128, ;, size, *=, 2, ), {, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, assertEquals, (, bf, ., getMaxSize, (, ), ,, size, ), ;, assertNull, (, bf, ., get, (, ), ), ;, int, i, ;, int, j, ;, int, k, ;, for, (, i, =, 1, ;, i, <, 2, *, size, ;, i, ++, ), {, for, (, j, =, 0, ;, j, <, i, ;, j, ++, ), {, bf, ., put, (, e, [, j, ], ), ;, assertEquals, (, bf, ., length, (, ), ,, j, <, size, ?, j, +, 1, :, size, ), ;, }, int, max, =, size, <, j, ?, size, :, j, ;, j, --, ;, for, (, k, =, 0, ;, k, <=, j, ;, k, ++, ), {, assertEquals, (, bf, ., length, (, ), ,, max, -, k, >, 0, ?, max, -, k, :, 0, ), ;, Object, r, =, bf, ., get, (, ), ;, if, (, k, >=, size, ), assertNull, (, r, ), ;, else, assertEquals, (, r, ,, e, [, k, ], ), ;, }, }, }, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, assertEquals, (, bf, ., getMaxSize, (, ), ,, size, ), ;, assertNull, (, bf, ., get, (, ), ), ;, int, i, ;, int, j, ;, int, k, ;, for, (, i, =, 1, ;, i, <, 2, *, size, ;, i, ++, ), {, for, (, j, =, 0, ;, j, <, i, ;, j, ++, ), {, bf, ., put, (, e, [, j, ], ), ;, assertEquals, (, bf, ., length, (, ), ,, j, <, size, ?, j, +, 1, :, size, ), ;, }, int, max, =, size, <, j, ?, size, :, j, ;, j, --, ;, for, (, k, =, 0, ;, k, <=, j, ;, k, ++, ), {, assertEquals, (, bf, ., length, (, ), ,, max, -, k, >, 0, ?, max, -, k, :, 0, ), ;, Object, r, =, bf, ., get, (, ), ;, if, (, k, >=, size, ), assertNull, (, r, ), ;, else, assertEquals, (, r, ,, e, [, k, ], ), ;, }, }, for, (, j, =, 0, ;, j, <, i, ;, j, ++, ), {, bf, ., put, (, e, [, j, ], ), ;, assertEquals, (, bf, ., length, (, ), ,, j, <, size, ?, j, +, 1, :, size, ), ;, }, bf, ., put, (, e, [, j, ], ), ;, assertEquals, (, bf, ., length, (, ), ,, j, <, size, ?, j, +, 1, :, size, ), ;, int, max, =, size, <, j, ?, size, :, j, ;, j, --, ;, for, (, k, =, 0, ;, k, <=, j, ;, k, ++, ), {, assertEquals, (, bf, ., length, (, ), ,, max, -, k, >, 0, ?, max, -, k, :, 0, ), ;, Object, r, =, bf, ., get, (, ), ;, if, (, k, >=, size, ), assertNull, (, r, ), ;, else, assertEquals, (, r, ,, e, [, k, ], ), ;, }, assertEquals, (, bf, ., length, (, ), ,, max, -, k, >, 0, ?, max, -, k, :, 0, ), ;, Object, r, =, bf, ., get, (, ), ;, if, (, k, >=, size, ), assertNull, (, r, ), ;, else, assertEquals, (, r, ,, e, [, k, ], ), ;]
BoundedFIFOTestCase@!@test2@!@[int, size, =, 3, ;, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, bf, ., put, (, e, [, 0, ], ), ;, assertEquals, (, bf, ., get, (, ), ,, e, [, 0, ], ), ;, assertNull, (, bf, ., get, (, ), ), ;, bf, ., put, (, e, [, 1, ], ), ;, assertEquals, (, bf, ., length, (, ), ,, 1, ), ;, bf, ., put, (, e, [, 2, ], ), ;, assertEquals, (, bf, ., length, (, ), ,, 2, ), ;, bf, ., put, (, e, [, 3, ], ), ;, assertEquals, (, bf, ., length, (, ), ,, 3, ), ;, assertEquals, (, bf, ., get, (, ), ,, e, [, 1, ], ), ;, assertEquals, (, bf, ., length, (, ), ,, 2, ), ;, assertEquals, (, bf, ., get, (, ), ,, e, [, 2, ], ), ;, assertEquals, (, bf, ., length, (, ), ,, 1, ), ;, assertEquals, (, bf, ., get, (, ), ,, e, [, 3, ], ), ;, assertEquals, (, bf, ., length, (, ), ,, 0, ), ;, assertNull, (, bf, ., get, (, ), ), ;, assertEquals, (, bf, ., length, (, ), ,, 0, ), ;]
BoundedFIFOTestCase@!@min@!@[return, a, <, b, ?, a, :, b, ;]
BoundedFIFOTestCase@!@testResize1@!@[int, size, =, 10, ;, for, (, int, n, =, 1, ;, n, <, size, *, 2, ;, n, ++, ), {, for, (, int, i, =, 0, ;, i, <, size, *, 2, ;, i, ++, ), {, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, f, =, 0, ;, f, <, i, ;, f, ++, ), {, bf, ., put, (, e, [, f, ], ), ;, }, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, min, (, i, ,, size, ), ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, ], ), ;, }, }, }, for, (, int, i, =, 0, ;, i, <, size, *, 2, ;, i, ++, ), {, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, f, =, 0, ;, f, <, i, ;, f, ++, ), {, bf, ., put, (, e, [, f, ], ), ;, }, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, min, (, i, ,, size, ), ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, ], ), ;, }, }, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, f, =, 0, ;, f, <, i, ;, f, ++, ), {, bf, ., put, (, e, [, f, ], ), ;, }, bf, ., put, (, e, [, f, ], ), ;, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, min, (, i, ,, size, ), ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, ], ), ;, }, assertEquals, (, bf, ., get, (, ), ,, e, [, c, ], ), ;]
BoundedFIFOTestCase@!@testResize2@!@[int, size, =, 10, ;, for, (, int, n, =, 1, ;, n, <, size, *, 2, ;, n, ++, ), {, for, (, int, i, =, 0, ;, i, <, size, *, 2, ;, i, ++, ), {, for, (, int, d, =, 0, ;, d, <, min, (, i, ,, size, ), ;, d, ++, ), {, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, p, =, 0, ;, p, <, i, ;, p, ++, ), {, bf, ., put, (, e, [, p, ], ), ;, }, for, (, int, g, =, 0, ;, g, <, d, ;, g, ++, ), {, bf, ., get, (, ), ;, }, int, x, =, bf, ., length, (, ), ;, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, x, ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, +, d, ], ), ;, }, assertNull, (, bf, ., get, (, ), ), ;, }, }, }, for, (, int, i, =, 0, ;, i, <, size, *, 2, ;, i, ++, ), {, for, (, int, d, =, 0, ;, d, <, min, (, i, ,, size, ), ;, d, ++, ), {, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, p, =, 0, ;, p, <, i, ;, p, ++, ), {, bf, ., put, (, e, [, p, ], ), ;, }, for, (, int, g, =, 0, ;, g, <, d, ;, g, ++, ), {, bf, ., get, (, ), ;, }, int, x, =, bf, ., length, (, ), ;, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, x, ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, +, d, ], ), ;, }, assertNull, (, bf, ., get, (, ), ), ;, }, }, for, (, int, d, =, 0, ;, d, <, min, (, i, ,, size, ), ;, d, ++, ), {, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, p, =, 0, ;, p, <, i, ;, p, ++, ), {, bf, ., put, (, e, [, p, ], ), ;, }, for, (, int, g, =, 0, ;, g, <, d, ;, g, ++, ), {, bf, ., get, (, ), ;, }, int, x, =, bf, ., length, (, ), ;, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, x, ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, +, d, ], ), ;, }, assertNull, (, bf, ., get, (, ), ), ;, }, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, p, =, 0, ;, p, <, i, ;, p, ++, ), {, bf, ., put, (, e, [, p, ], ), ;, }, bf, ., put, (, e, [, p, ], ), ;, for, (, int, g, =, 0, ;, g, <, d, ;, g, ++, ), {, bf, ., get, (, ), ;, }, bf, ., get, (, ), ;, int, x, =, bf, ., length, (, ), ;, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, x, ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, +, d, ], ), ;, }, assertEquals, (, bf, ., get, (, ), ,, e, [, c, +, d, ], ), ;, assertNull, (, bf, ., get, (, ), ), ;]
BoundedFIFOTestCase@!@testResize3@!@[int, size, =, 10, ;, for, (, int, n, =, 1, ;, n, <, size, *, 2, ;, n, ++, ), {, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, for, (, int, d, =, 0, ;, d, <, i, ;, d, ++, ), {, for, (, int, r, =, 0, ;, r, <, d, ;, r, ++, ), {, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, p0, =, 0, ;, p0, <, i, ;, p0, ++, ), bf, ., put, (, e, [, p0, ], ), ;, for, (, int, g, =, 0, ;, g, <, d, ;, g, ++, ), bf, ., get, (, ), ;, for, (, int, p1, =, 0, ;, p1, <, r, ;, p1, ++, ), bf, ., put, (, e, [, i, +, p1, ], ), ;, int, x, =, bf, ., length, (, ), ;, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, x, ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, +, d, ], ), ;, }, }, }, }, }, for, (, int, i, =, 0, ;, i, <, size, ;, i, ++, ), {, for, (, int, d, =, 0, ;, d, <, i, ;, d, ++, ), {, for, (, int, r, =, 0, ;, r, <, d, ;, r, ++, ), {, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, p0, =, 0, ;, p0, <, i, ;, p0, ++, ), bf, ., put, (, e, [, p0, ], ), ;, for, (, int, g, =, 0, ;, g, <, d, ;, g, ++, ), bf, ., get, (, ), ;, for, (, int, p1, =, 0, ;, p1, <, r, ;, p1, ++, ), bf, ., put, (, e, [, i, +, p1, ], ), ;, int, x, =, bf, ., length, (, ), ;, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, x, ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, +, d, ], ), ;, }, }, }, }, for, (, int, d, =, 0, ;, d, <, i, ;, d, ++, ), {, for, (, int, r, =, 0, ;, r, <, d, ;, r, ++, ), {, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, p0, =, 0, ;, p0, <, i, ;, p0, ++, ), bf, ., put, (, e, [, p0, ], ), ;, for, (, int, g, =, 0, ;, g, <, d, ;, g, ++, ), bf, ., get, (, ), ;, for, (, int, p1, =, 0, ;, p1, <, r, ;, p1, ++, ), bf, ., put, (, e, [, i, +, p1, ], ), ;, int, x, =, bf, ., length, (, ), ;, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, x, ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, +, d, ], ), ;, }, }, }, for, (, int, r, =, 0, ;, r, <, d, ;, r, ++, ), {, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, p0, =, 0, ;, p0, <, i, ;, p0, ++, ), bf, ., put, (, e, [, p0, ], ), ;, for, (, int, g, =, 0, ;, g, <, d, ;, g, ++, ), bf, ., get, (, ), ;, for, (, int, p1, =, 0, ;, p1, <, r, ;, p1, ++, ), bf, ., put, (, e, [, i, +, p1, ], ), ;, int, x, =, bf, ., length, (, ), ;, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, x, ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, +, d, ], ), ;, }, }, BoundedFIFO, bf, =, new, BoundedFIFO, (, size, ), ;, for, (, int, p0, =, 0, ;, p0, <, i, ;, p0, ++, ), bf, ., put, (, e, [, p0, ], ), ;, for, (, int, g, =, 0, ;, g, <, d, ;, g, ++, ), bf, ., get, (, ), ;, for, (, int, p1, =, 0, ;, p1, <, r, ;, p1, ++, ), bf, ., put, (, e, [, i, +, p1, ], ), ;, int, x, =, bf, ., length, (, ), ;, bf, ., resize, (, n, ), ;, int, expectedSize, =, min, (, n, ,, x, ), ;, assertEquals, (, bf, ., length, (, ), ,, expectedSize, ), ;, for, (, int, c, =, 0, ;, c, <, expectedSize, ;, c, ++, ), {, assertEquals, (, bf, ., get, (, ), ,, e, [, c, +, d, ], ), ;, }, assertEquals, (, bf, ., get, (, ), ,, e, [, c, +, d, ], ), ;]
BoundedFIFOTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, BoundedFIFOTestCase, (, "test1", ), ), ;, suite, ., addTest, (, new, BoundedFIFOTestCase, (, "test2", ), ), ;, suite, ., addTest, (, new, BoundedFIFOTestCase, (, "testResize1", ), ), ;, suite, ., addTest, (, new, BoundedFIFOTestCase, (, "testResize2", ), ), ;, suite, ., addTest, (, new, BoundedFIFOTestCase, (, "testResize3", ), ), ;, return, suite, ;]
UtilLoggingLevelTest@!@testToLevelFINEST@!@[assertSame, (, UtilLoggingLevel, ., FINEST, ,, UtilLoggingLevel, ., toLevel, (, "fiNeSt", ), ), ;]
CyclicBufferTestCase@!@setUp@!@[for, (, int, i, =, 0, ;, i, <, MAX, ;, i, ++, ), {, e, [, i, ], =, new, LoggingEvent, (, "", ,, cat, ,, Level, ., DEBUG, ,, "e", +, i, ,, null, ), ;, }, e, [, i, ], =, new, LoggingEvent, (, "", ,, cat, ,, Level, ., DEBUG, ,, "e", +, i, ,, null, ), ;]
CyclicBufferTestCase@!@test0@!@[int, size, =, 2, ;, CyclicBuffer, cb, =, new, CyclicBuffer, (, size, ), ;, assertEquals, (, cb, ., getMaxSize, (, ), ,, size, ), ;, cb, ., add, (, e, [, 0, ], ), ;, assertEquals, (, cb, ., length, (, ), ,, 1, ), ;, assertEquals, (, cb, ., get, (, ), ,, e, [, 0, ], ), ;, assertEquals, (, cb, ., length, (, ), ,, 0, ), ;, assertNull, (, cb, ., get, (, ), ), ;, assertEquals, (, cb, ., length, (, ), ,, 0, ), ;, cb, =, new, CyclicBuffer, (, size, ), ;, cb, ., add, (, e, [, 0, ], ), ;, cb, ., add, (, e, [, 1, ], ), ;, assertEquals, (, cb, ., length, (, ), ,, 2, ), ;, assertEquals, (, cb, ., get, (, ), ,, e, [, 0, ], ), ;, assertEquals, (, cb, ., length, (, ), ,, 1, ), ;, assertEquals, (, cb, ., get, (, ), ,, e, [, 1, ], ), ;, assertEquals, (, cb, ., length, (, ), ,, 0, ), ;, assertNull, (, cb, ., get, (, ), ), ;, assertEquals, (, cb, ., length, (, ), ,, 0, ), ;]
CyclicBufferTestCase@!@test1@!@[for, (, int, bufSize, =, 1, ;, bufSize, <=, 128, ;, bufSize, *=, 2, ), doTest1, (, bufSize, ), ;]
CyclicBufferTestCase@!@doTest1@!@[CyclicBuffer, cb, =, new, CyclicBuffer, (, size, ), ;, assertEquals, (, cb, ., getMaxSize, (, ), ,, size, ), ;, for, (, int, i, =, -, (, size, +, 10, ), ;, i, <, (, size, +, 10, ), ;, i, ++, ), {, assertNull, (, cb, ., get, (, i, ), ), ;, }, assertNull, (, cb, ., get, (, i, ), ), ;, for, (, int, i, =, 0, ;, i, <, MAX, ;, i, ++, ), {, cb, ., add, (, e, [, i, ], ), ;, int, limit, =, i, <, size, -, 1, ?, i, :, size, -, 1, ;, for, (, int, j, =, limit, ;, j, >=, 0, ;, j, --, ), {, assertEquals, (, cb, ., get, (, j, ), ,, e, [, i, -, (, limit, -, j, ), ], ), ;, }, assertNull, (, cb, ., get, (, -, 1, ), ), ;, assertNull, (, cb, ., get, (, limit, +, 1, ), ), ;, }, cb, ., add, (, e, [, i, ], ), ;, int, limit, =, i, <, size, -, 1, ?, i, :, size, -, 1, ;, for, (, int, j, =, limit, ;, j, >=, 0, ;, j, --, ), {, assertEquals, (, cb, ., get, (, j, ), ,, e, [, i, -, (, limit, -, j, ), ], ), ;, }, assertEquals, (, cb, ., get, (, j, ), ,, e, [, i, -, (, limit, -, j, ), ], ), ;, assertNull, (, cb, ., get, (, -, 1, ), ), ;, assertNull, (, cb, ., get, (, limit, +, 1, ), ), ;]
CyclicBufferTestCase@!@testResize@!@[for, (, int, isize, =, 1, ;, isize, <=, 128, ;, isize, *=, 2, ), {, doTestResize, (, isize, ,, isize, /, 2, +, 1, ,, isize, /, 2, +, 1, ), ;, doTestResize, (, isize, ,, isize, /, 2, +, 1, ,, isize, +, 10, ), ;, doTestResize, (, isize, ,, isize, +, 10, ,, isize, /, 2, +, 1, ), ;, doTestResize, (, isize, ,, isize, +, 10, ,, isize, +, 10, ), ;, }, doTestResize, (, isize, ,, isize, /, 2, +, 1, ,, isize, /, 2, +, 1, ), ;, doTestResize, (, isize, ,, isize, /, 2, +, 1, ,, isize, +, 10, ), ;, doTestResize, (, isize, ,, isize, +, 10, ,, isize, /, 2, +, 1, ), ;, doTestResize, (, isize, ,, isize, +, 10, ,, isize, +, 10, ), ;]
CyclicBufferTestCase@!@doTestResize@!@[CyclicBuffer, cb, =, new, CyclicBuffer, (, initialSize, ), ;, for, (, int, i, =, 0, ;, i, <, numberOfAdds, ;, i, ++, ), {, cb, ., add, (, e, [, i, ], ), ;, }, cb, ., add, (, e, [, i, ], ), ;, cb, ., resize, (, newSize, ), ;, int, offset, =, numberOfAdds, -, initialSize, ;, if, (, offset, <, 0, ), offset, =, 0, ;, int, len, =, newSize, <, numberOfAdds, ?, newSize, :, numberOfAdds, ;, len, =, len, <, initialSize, ?, len, :, initialSize, ;, for, (, int, j, =, 0, ;, j, <, len, ;, j, ++, ), {, assertEquals, (, cb, ., get, (, j, ), ,, e, [, offset, +, j, ], ), ;, }, assertEquals, (, cb, ., get, (, j, ), ,, e, [, offset, +, j, ], ), ;]
CyclicBufferTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, CyclicBufferTestCase, (, "test0", ), ), ;, suite, ., addTest, (, new, CyclicBufferTestCase, (, "test1", ), ), ;, suite, ., addTest, (, new, CyclicBufferTestCase, (, "testResize", ), ), ;, return, suite, ;]
OptionConverterTestCase@!@setUp@!@[props, =, new, Properties, (, ), ;, props, ., put, (, "TOTO", ,, "wonderful", ), ;, props, ., put, (, "key1", ,, "value1", ), ;, props, ., put, (, "key2", ,, "value2", ), ;, props, ., put, (, "line.separator", ,, System, ., getProperty, (, "line.separator", ), ), ;, props, ., put, (, "java.home", ,, System, ., getProperty, (, "java.home", ), ), ;, System, ., setProperties, (, props, ), ;]
OptionConverterTestCase@!@tearDown@!@[props, =, null, ;, LogManager, ., resetConfiguration, (, ), ;]
OptionConverterTestCase@!@varSubstTest1@!@[String, r, ;, r, =, OptionConverter, ., substVars, (, "hello world.", ,, null, ), ;, assertEquals, (, "hello world.", ,, r, ), ;, r, =, OptionConverter, ., substVars, (, "hello ${TOTO} world.", ,, null, ), ;, assertEquals, (, "hello wonderful world.", ,, r, ), ;]
OptionConverterTestCase@!@varSubstTest2@!@[String, r, ;, r, =, OptionConverter, ., substVars, (, "Test2 ${key1} mid ${key2} end.", ,, null, ), ;, assertEquals, (, "Test2 value1 mid value2 end.", ,, r, ), ;]
OptionConverterTestCase@!@varSubstTest3@!@[String, r, ;, r, =, OptionConverter, ., substVars, (, "Test3 ${unset} mid ${key1} end.", ,, null, ), ;, assertEquals, (, "Test3  mid value1 end.", ,, r, ), ;]
OptionConverterTestCase@!@varSubstTest4@!@[String, val, =, "Test4 ${incomplete ", ;, try, {, OptionConverter, ., substVars, (, val, ,, null, ), ;, }, catch, (, IllegalArgumentException, e, ), {, String, errorMsg, =, e, ., getMessage, (, ), ;, assertEquals, (, '"', +, val, +, "\" has no closing brace. Opening brace at position 6.", ,, errorMsg, ), ;, }, OptionConverter, ., substVars, (, val, ,, null, ), ;, String, errorMsg, =, e, ., getMessage, (, ), ;, assertEquals, (, '"', +, val, +, "\" has no closing brace. Opening brace at position 6.", ,, errorMsg, ), ;]
OptionConverterTestCase@!@varSubstTest5@!@[Properties, props, =, new, Properties, (, ), ;, props, ., put, (, "p1", ,, "x1", ), ;, props, ., put, (, "p2", ,, "${p1}", ), ;, String, res, =, OptionConverter, ., substVars, (, "${p2}", ,, props, ), ;, System, ., out, ., println, (, "Result is [", +, res, +, "].", ), ;, assertEquals, (, res, ,, "x1", ), ;]
OptionConverterTestCase@!@testInputStream@!@[File, file, =, new, File, (, "input/filter1.properties", ), ;, assertTrue, (, file, ., exists, (, ), ), ;, FileInputStream, inputStream, =, new, FileInputStream, (, file, ), ;, try, {, OptionConverter, ., selectAndConfigure, (, inputStream, ,, null, ,, LogManager, ., getLoggerRepository, (, ), ), ;, }, finally, {, inputStream, ., close, (, ), ;, }, OptionConverter, ., selectAndConfigure, (, inputStream, ,, null, ,, LogManager, ., getLoggerRepository, (, ), ), ;, inputStream, ., close, (, ), ;, new, PropertyConfiguratorTest, (, this, ., getClass, (, ), ., getName, (, ), ), ., validateNested, (, ), ;]
OptionConverterTestCase@!@toLevelTest1@!@[String, val, =, "INFO", ;, Level, p, =, OptionConverter, ., toLevel, (, val, ,, null, ), ;, assertEquals, (, p, ,, Level, ., INFO, ), ;]
OptionConverterTestCase@!@toLevelTest2@!@[String, val, =, "INFO#org.apache.log4j.xml.XLevel", ;, Level, p, =, OptionConverter, ., toLevel, (, val, ,, null, ), ;, assertEquals, (, p, ,, Level, ., INFO, ), ;]
OptionConverterTestCase@!@toLevelTest3@!@[String, val, =, "TRACE#org.apache.log4j.xml.XLevel", ;, Level, p, =, OptionConverter, ., toLevel, (, val, ,, null, ), ;, assertEquals, (, p, ,, XLevel, ., TRACE, ), ;]
OptionConverterTestCase@!@toLevelTest4@!@[String, val, =, "TR#org.apache.log4j.xml.XLevel", ;, Level, p, =, OptionConverter, ., toLevel, (, val, ,, null, ), ;, assertEquals, (, p, ,, null, ), ;]
OptionConverterTestCase@!@toLevelTest5@!@[String, val, =, "INFO#org.apache.log4j.xml.TOTO", ;, Level, p, =, OptionConverter, ., toLevel, (, val, ,, null, ), ;, assertEquals, (, p, ,, null, ), ;]
OptionConverterTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, OptionConverterTestCase, (, "varSubstTest5", ), ), ;, suite, ., addTest, (, new, OptionConverterTestCase, (, "varSubstTest1", ), ), ;, suite, ., addTest, (, new, OptionConverterTestCase, (, "varSubstTest2", ), ), ;, suite, ., addTest, (, new, OptionConverterTestCase, (, "varSubstTest3", ), ), ;, suite, ., addTest, (, new, OptionConverterTestCase, (, "varSubstTest4", ), ), ;, suite, ., addTest, (, new, OptionConverterTestCase, (, "testInputStream", ), ), ;, suite, ., addTest, (, new, OptionConverterTestCase, (, "toLevelTest1", ), ), ;, suite, ., addTest, (, new, OptionConverterTestCase, (, "toLevelTest2", ), ), ;, suite, ., addTest, (, new, OptionConverterTestCase, (, "toLevelTest3", ), ), ;, suite, ., addTest, (, new, OptionConverterTestCase, (, "toLevelTest4", ), ), ;, suite, ., addTest, (, new, OptionConverterTestCase, (, "toLevelTest5", ), ), ;, return, suite, ;]
MinimumTestCase@!@setUp@!@[root, =, Logger, ., getRootLogger, (, ), ;, root, ., removeAllAppenders, (, ), ;]
MinimumTestCase@!@tearDown@!@[root, ., getLoggerRepository, (, ), ., resetConfiguration, (, ), ;]
MinimumTestCase@!@simple@!@[Layout, layout, =, new, SimpleLayout, (, ), ;, Appender, appender, =, new, FileAppender, (, layout, ,, "output/simple", ,, false, ), ;, root, ., addAppender, (, appender, ), ;, common, (, ), ;, Transformer, ., transform, (, "output/simple", ,, FILTERED, ,, new, Filter, [, ], {, new, LineNumberFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/simple", ), ), ;]
MinimumTestCase@!@ttcc@!@[Layout, layout, =, new, TTCCLayout, (, AbsoluteTimeDateFormat, ., DATE_AND_TIME_DATE_FORMAT, ), ;, Appender, appender, =, new, FileAppender, (, layout, ,, "output/ttcc", ,, false, ), ;, root, ., addAppender, (, appender, ), ;, String, oldName, =, Thread, ., currentThread, (, ), ., getName, (, ), ;, Thread, ., currentThread, (, ), ., setName, (, "main", ), ;, common, (, ), ;, Thread, ., currentThread, (, ), ., setName, (, oldName, ), ;, ControlFilter, cf1, =, new, ControlFilter, (, new, String, [, ], {, TTCC_PAT, ,, TTCC2_PAT, ,, EXCEPTION1, ,, EXCEPTION2, ,, EXCEPTION3, ,, EXCEPTION4, ,, EXCEPTION5, }, ), ;, Transformer, ., transform, (, "output/ttcc", ,, FILTERED, ,, new, Filter, [, ], {, cf1, ,, new, LineNumberFilter, (, ), ,, new, AbsoluteDateAndTimeFilter, (, ), ,, new, SunReflectFilter, (, ), ,, new, JunitTestRunnerFilter, (, ), }, ), ;, assertTrue, (, Compare, ., compare, (, FILTERED, ,, "witness/ttcc", ), ), ;]
MinimumTestCase@!@common@!@[int, i, =, 0, ;, Logger, ERR, =, Logger, ., getLogger, (, "ERR", ), ;, ERR, ., setLevel, (, Level, ., ERROR, ), ;, Logger, INF, =, Logger, ., getLogger, (, "INF", ), ;, INF, ., setLevel, (, Level, ., INFO, ), ;, Logger, INF_ERR, =, Logger, ., getLogger, (, "INF.ERR", ), ;, INF_ERR, ., setLevel, (, Level, ., ERROR, ), ;, Logger, DEB, =, Logger, ., getLogger, (, "DEB", ), ;, DEB, ., setLevel, (, Level, ., DEBUG, ), ;, Logger, TRC, =, Logger, ., getLogger, (, "TRC", ), ;, TRC, ., setLevel, (, Level, ., TRACE, ), ;, Logger, INF_UNDEF, =, Logger, ., getLogger, (, "INF.UNDEF", ), ;, Logger, INF_ERR_UNDEF, =, Logger, ., getLogger, (, "INF.ERR.UNDEF", ), ;, Logger, UNDEF, =, Logger, ., getLogger, (, "UNDEF", ), ;, ERR, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, i, ++, ;, ERR, ., error, (, "Message ", +, i, ), ;, i, ++, ;, INF, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, i, ++, ;, INF, ., error, (, "Message ", +, i, ), ;, i, ++, ;, INF, ., warn, (, "Message ", +, i, ), ;, i, ++, ;, INF, ., info, (, "Message ", +, i, ), ;, i, ++, ;, INF_UNDEF, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, i, ++, ;, INF_UNDEF, ., error, (, "Message ", +, i, ), ;, i, ++, ;, INF_UNDEF, ., warn, (, "Message ", +, i, ), ;, i, ++, ;, INF_UNDEF, ., info, (, "Message ", +, i, ), ;, i, ++, ;, INF_ERR, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, i, ++, ;, INF_ERR, ., error, (, "Message ", +, i, ), ;, i, ++, ;, INF_ERR_UNDEF, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, i, ++, ;, INF_ERR_UNDEF, ., error, (, "Message ", +, i, ), ;, i, ++, ;, DEB, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, i, ++, ;, DEB, ., error, (, "Message ", +, i, ), ;, i, ++, ;, DEB, ., warn, (, "Message ", +, i, ), ;, i, ++, ;, DEB, ., info, (, "Message ", +, i, ), ;, i, ++, ;, DEB, ., debug, (, "Message ", +, i, ), ;, i, ++, ;, TRC, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, i, ++, ;, TRC, ., error, (, "Message ", +, i, ), ;, i, ++, ;, TRC, ., warn, (, "Message ", +, i, ), ;, i, ++, ;, TRC, ., info, (, "Message ", +, i, ), ;, i, ++, ;, TRC, ., debug, (, "Message ", +, i, ), ;, i, ++, ;, TRC, ., trace, (, "Message ", +, i, ), ;, i, ++, ;, UNDEF, ., log, (, Level, ., FATAL, ,, "Message ", +, i, ), ;, i, ++, ;, UNDEF, ., error, (, "Message ", +, i, ), ;, i, ++, ;, UNDEF, ., warn, (, "Message ", +, i, ), ;, i, ++, ;, UNDEF, ., info, (, "Message ", +, i, ), ;, i, ++, ;, UNDEF, ., debug, (, "Message ", +, i, ,, new, Exception, (, "Just testing.", ), ), ;, int, printCount, =, i, ;, i, ++, ;, ERR, ., warn, (, "Message ", +, i, ), ;, i, ++, ;, ERR, ., info, (, "Message ", +, i, ), ;, i, ++, ;, ERR, ., debug, (, "Message ", +, i, ), ;, i, ++, ;, INF, ., debug, (, "Message ", +, i, ), ;, i, ++, ;, INF_UNDEF, ., debug, (, "Message ", +, i, ), ;, i, ++, ;, INF_ERR, ., warn, (, "Message ", +, i, ), ;, i, ++, ;, INF_ERR, ., info, (, "Message ", +, i, ), ;, i, ++, ;, INF_ERR, ., debug, (, "Message ", +, i, ), ;, i, ++, ;, INF_ERR_UNDEF, ., warn, (, "Message ", +, i, ), ;, i, ++, ;, INF_ERR_UNDEF, ., info, (, "Message ", +, i, ), ;, i, ++, ;, INF_ERR_UNDEF, ., debug, (, "Message ", +, i, ), ;, i, ++, ;, UNDEF, ., trace, (, "Message ", +, i, ,, new, Exception, (, "Just testing.", ), ), ;, i, ++, ;, INF, ., info, (, "Messages should bear numbers 0 through ", +, printCount, +, ".", ), ;]
MinimumTestCase@!@suite@!@[TestSuite, suite, =, new, TestSuite, (, ), ;, suite, ., addTest, (, new, MinimumTestCase, (, "simple", ), ), ;, suite, ., addTest, (, new, MinimumTestCase, (, "ttcc", ), ), ;, return, suite, ;]
