Class@@AsyncAppenderTestCase setUp tearDown LogManager.shutdown(); closeTest Logger root=Logger.getRootLogger() VectorAppender vectorAppender=newVectorAppender() AsyncAppender asyncAppender=newAsyncAppender() asyncAppender.setName("async-CloseTest"); asyncAppender.addAppender(vectorAppender); root.addAppender(asyncAppender); root.debug("m1"); asyncAppender.close(); root.debug("m2"); Vector v=vectorAppender.getVector() assertEquals(v.size(),1); test2 Logger root=Logger.getRootLogger() VectorAppender vectorAppender=newVectorAppender() AsyncAppender asyncAppender=newAsyncAppender() asyncAppender.setName("async-test2"); asyncAppender.addAppender(vectorAppender); root.addAppender(asyncAppender); root.debug("m1"); asyncAppender.close(); root.debug("m2"); Vector v=vectorAppender.getVector() assertEquals(v.size(),1); assertTrue(vectorAppender.isClosed()); test3 int LEN=200 Logger root=Logger.getRootLogger() VectorAppender vectorAppender=newVectorAppender() AsyncAppender asyncAppender=newAsyncAppender() asyncAppender.setName("async-test3"); asyncAppender.addAppender(vectorAppender); root.addAppender(asyncAppender); for(inti=0;i<LEN;i++){root.debug("message"+i);} root.debug("message"+i); System.out.println("Done loop."); System.out.flush(); asyncAppender.close(); root.debug("m2"); Vector v=vectorAppender.getVector() assertEquals(v.size(),LEN); assertTrue(vectorAppender.isClosed());
Class@@NullPointerAppender append thrownewNullPointerException(); close requiresLayout returnfalse; testBadAppender Appender nullPointerAppender=newNullPointerAppender() AsyncAppender asyncAppender=newAsyncAppender() asyncAppender.addAppender(nullPointerAppender); asyncAppender.setBufferSize(5); asyncAppender.activateOptions(); Logger root=Logger.getRootLogger() root.addAppender(nullPointerAppender); try{root.info("Message");Thread.sleep(10);root.info("Message");fail("Should have thrown exception");}catch(NullPointerExceptionex){} root.info("Message"); Thread.sleep(10); root.info("Message"); fail("Should have thrown exception"); testLocationInfoTrue BlockableVectorAppender blockableAppender=newBlockableVectorAppender() AsyncAppender async=newAsyncAppender() async.addAppender(blockableAppender); async.setBufferSize(5); async.setLocationInfo(true); async.setBlocking(false); async.activateOptions(); Logger rootLogger=Logger.getRootLogger() rootLogger.addAppender(async); Greeter greeter=newGreeter(rootLogger,100) synchronized(blockableAppender.getMonitor()){greeter.run();rootLogger.error("That's all folks.");} greeter.run(); rootLogger.error("That's all folks."); async.close(); Vector events=blockableAppender.getVector() LoggingEvent initialEvent=(LoggingEvent)events.get(0) LoggingEvent discardEvent=(LoggingEvent)events.get(events.size()-1) PatternLayout layout=newPatternLayout() layout.setConversionPattern("%C:%L %m%n"); layout.activateOptions(); String initialStr=layout.format(initialEvent) assertEquals(AsyncAppenderTestCase.class.getName(),initialStr.substring(0,AsyncAppenderTestCase.class.getName().length())); String discardStr=layout.format(discardEvent) assertEquals("?:? ",discardStr.substring(0,4)); testLocationInfoFalse BlockableVectorAppender blockableAppender=newBlockableVectorAppender() AsyncAppender async=newAsyncAppender() async.addAppender(blockableAppender); async.setBufferSize(5); async.setLocationInfo(false); async.setBlocking(false); async.activateOptions(); Logger rootLogger=Logger.getRootLogger() rootLogger.addAppender(async); Greeter greeter=newGreeter(rootLogger,100) synchronized(blockableAppender.getMonitor()){greeter.run();rootLogger.error("That's all folks.");} greeter.run(); rootLogger.error("That's all folks."); async.close(); Vector events=blockableAppender.getVector() LoggingEvent initialEvent=(LoggingEvent)events.get(0) LoggingEvent discardEvent=(LoggingEvent)events.get(events.size()-1) PatternLayout layout=newPatternLayout() layout.setConversionPattern("%C:%L %m%n"); layout.activateOptions(); String initialStr=layout.format(initialEvent) assertEquals("?:? ",initialStr.substring(0,4)); String discardStr=layout.format(discardEvent) assertEquals("?:? ",discardStr.substring(0,4));
Class@@Greeter logger repetitions if(logger==null){thrownewIllegalArgumentException("logger");} thrownewIllegalArgumentException("logger"); this.logger=logger; this.repetitions=repetitions; run try{for(inti=0;i<repetitions;i++){logger.info("Hello, World");Thread.sleep(1);}}catch(InterruptedExceptionex){Thread.currentThread().interrupt();} for(inti=0;i<repetitions;i++){logger.info("Hello, World");Thread.sleep(1);} logger.info("Hello, World"); Thread.sleep(1); Thread.currentThread().interrupt();
Class@@BlockableVectorAppender monitor=newObject() append synchronized(monitor){super.append(event);if(event.getLevel()==Level.FATAL){Loggerlogger=Logger.getLogger(event.getLoggerName());logger.error(event.getMessage().toString());logger.warn(event.getMessage().toString());logger.info(event.getMessage().toString());logger.debug(event.getMessage().toString());}} super.append(event); if(event.getLevel()==Level.FATAL){Loggerlogger=Logger.getLogger(event.getLoggerName());logger.error(event.getMessage().toString());logger.warn(event.getMessage().toString());logger.info(event.getMessage().toString());logger.debug(event.getMessage().toString());} Logger logger=Logger.getLogger(event.getLoggerName()) logger.error(event.getMessage().toString()); logger.warn(event.getMessage().toString()); logger.info(event.getMessage().toString()); logger.debug(event.getMessage().toString()); getMonitor returnmonitor; testMutableMessage BlockableVectorAppender blockableAppender=newBlockableVectorAppender() AsyncAppender async=newAsyncAppender() async.addAppender(blockableAppender); async.setBufferSize(5); async.setLocationInfo(false); async.activateOptions(); Logger rootLogger=Logger.getRootLogger() rootLogger.addAppender(async); StringBuffer buf=newStringBuffer("Hello") synchronized(blockableAppender.getMonitor()){rootLogger.info(buf);buf.append(", World.");} rootLogger.info(buf); buf.append(", World."); async.close(); Vector events=blockableAppender.getVector() LoggingEvent event=(LoggingEvent)events.get(0) PatternLayout layout=newPatternLayout() layout.setConversionPattern("%m"); layout.activateOptions(); String msg=layout.format(event) assertEquals("Hello",msg);
Class@@CategoryTest testForcedLog MockCategory category=newMockCategory("org.example.foo") category.setAdditivity(false); category.addAppender(newVectorAppender()); category.info("Hello, World"); testGetChainedPriorityReturnType Method method=Category.class.getMethod("getChainedPriority",(Class[])null) assertTrue(method.getReturnType()==Priority.class); testL7dlog Logger logger=Logger.getLogger("org.example.foo") logger.setLevel(Level.ERROR); Priority debug=Level.DEBUG logger.l7dlog(debug,"Hello, World",null); testL7dlog4Param Logger logger=Logger.getLogger("org.example.foo") logger.setLevel(Level.ERROR); Priority debug=Level.DEBUG logger.l7dlog(debug,"Hello, World",newObject[0],null); testSetPriority Logger logger=Logger.getLogger("org.example.foo") Priority debug=Level.DEBUG logger.setPriority(debug);
Class@@MockCategory repository=newHierarchy(this); info Priority info=Level.INFO forcedLog(MockCategory.class.toString(),info,msg,null);
Class@@CoreTestSuite suite TestSuite s=newTestSuite() s.addTestSuite(LoggingEventTest.class); s.addTestSuite(org.apache.log4j.LevelTest.class); s.addTestSuite(org.apache.log4j.PriorityTest.class); s.addTestSuite(org.apache.log4j.CategoryTest.class); s.addTestSuite(org.apache.log4j.FileAppenderTest.class); s.addTestSuite(org.apache.log4j.LogManagerTest.class); s.addTestSuite(org.apache.log4j.helpers.LogLogTest.class); s.addTestSuite(org.apache.log4j.LayoutTest.class); s.addTestSuite(org.apache.log4j.helpers.DateLayoutTest.class); s.addTestSuite(org.apache.log4j.TTCCLayoutTest.class); s.addTestSuite(org.apache.log4j.xml.XMLLayoutTest.class); s.addTestSuite(org.apache.log4j.HTMLLayoutTest.class); s.addTestSuite(org.apache.log4j.PatternLayoutTest.class); s.addTestSuite(org.apache.log4j.spi.LoggingEventTest.class); s.addTestSuite(org.apache.log4j.spi.ThrowableInformationTest.class); s.addTestSuite(org.apache.log4j.spi.LocationInfoTest.class); s.addTestSuite(org.apache.log4j.PropertyConfiguratorTest.class); s.addTestSuite(org.apache.log4j.net.SMTPAppenderTest.class); s.addTestSuite(org.apache.log4j.net.TelnetAppenderTest.class); s.addTestSuite(org.apache.log4j.DefaultThrowableRendererTest.class); s.addTestSuite(org.apache.log4j.EnhancedThrowableRendererTest.class); s.addTestSuite(org.apache.log4j.TestLogXF.class); s.addTestSuite(org.apache.log4j.TestLogMF.class); s.addTestSuite(org.apache.log4j.TestLogSF.class); s.addTestSuite(org.apache.log4j.pattern.CachedDateFormatTest.class); s.addTestSuite(org.apache.log4j.pattern.FormattingInfoTest.class); s.addTestSuite(org.apache.log4j.pattern.NameAbbreviatorTest.class); s.addTestSuite(org.apache.log4j.pattern.PatternParserTest.class); s.addTestSuite(org.apache.log4j.helpers.UtilLoggingLevelTest.class); returns;
Class@@XLogger FQCN=XLogger.class.getName()+"." factory=newXFactory() suffix="" activateOptions debug super.log(FQCN,Level.DEBUG,message+" "+suffix,null); lethal if(repository.isDisabled(XLevel.LETHAL_INT))return; if(XLevel.LETHAL.isGreaterOrEqual(this.getEffectiveLevel()))forcedLog(FQCN,XLevel.LETHAL,message,t); lethal if(repository.isDisabled(XLevel.LETHAL_INT))return; if(XLevel.LETHAL.isGreaterOrEqual(this.getEffectiveLevel()))forcedLog(FQCN,XLevel.LETHAL,message,null); getLogger returnLogManager.getLogger(name,factory); getLogger returnXLogger.getLogger(clazz.getName()); getSuffix returnsuffix; setSuffix this.suffix=suffix; trace if(repository.isDisabled(XLevel.TRACE_INT))return; if(XLevel.TRACE.isGreaterOrEqual(this.getEffectiveLevel()))forcedLog(FQCN,XLevel.TRACE,message,t); trace if(repository.isDisabled(XLevel.TRACE_INT))return; if(XLevel.TRACE.isGreaterOrEqual(this.getEffectiveLevel()))forcedLog(FQCN,XLevel.TRACE,message,null);
Class@@XFactory makeNewLoggerInstance returnnewXLogger(name);
Class@@XLoggerTestCase FILTERED="output/filtered" logger=(XLogger)XLogger.getLogger(XLoggerTestCase.class) tearDown logger.getLoggerRepository().resetConfiguration(); test1 common(1); test2 common(2); common DOMConfigurator.configure("input/xml/customLogger"+number+".xml"); int i=-1 logger.trace("Message "+++i); logger.debug("Message "+++i); logger.warn("Message "+++i); logger.error("Message "+++i); logger.fatal("Message "+++i); Exception e=newException("Just testing") logger.debug("Message "+++i,e); Transformer.transform("output/temp",FILTERED,newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/customLogger."+number)); suite TestSuite suite=newTestSuite() suite.addTest(newXLoggerTestCase("test1")); suite.addTest(newXLoggerTestCase("test2")); returnsuite;
Class@@TestCase1 setUp tearDown LogManager.shutdown(); noneTest Logger root=Logger.getRootLogger() boolean rootIsConfigured=root.getAllAppenders().hasMoreElements() assertTrue(!rootIsConfigured); suite TestSuite suite=newTestSuite() suite.addTest(newTestCase1("noneTest")); returnsuite;
Class@@TestCase2 setUp tearDown LogManager.shutdown(); xmlTest Logger root=Logger.getRootLogger() boolean rootIsConfigured=root.getAllAppenders().hasMoreElements() assertTrue(rootIsConfigured); Enumeration e=root.getAllAppenders() Appender appender=(Appender)e.nextElement() assertEquals(appender.getName(),"D1"); suite TestSuite suite=newTestSuite() suite.addTest(newTestCase2("xmlTest")); returnsuite;
Class@@TestCase3 setUp tearDown LogManager.shutdown(); propertiesTest Logger root=Logger.getRootLogger() boolean rootIsConfigured=root.getAllAppenders().hasMoreElements() assertTrue(rootIsConfigured); Enumeration e=root.getAllAppenders() Appender appender=(Appender)e.nextElement() assertEquals(appender.getName(),"D3"); suite TestSuite suite=newTestSuite() suite.addTest(newTestCase3("propertiesTest")); returnsuite;
Class@@TestCase4 setUp tearDown LogManager.shutdown(); combinedTest Logger root=Logger.getRootLogger() boolean rootIsConfigured=root.getAllAppenders().hasMoreElements() assertTrue(rootIsConfigured); Enumeration e=root.getAllAppenders() Appender appender=(Appender)e.nextElement() assertEquals(appender.getName(),"D1"); assertEquals(e.hasMoreElements(),false); suite TestSuite suite=newTestSuite() suite.addTest(newTestCase4("combinedTest")); returnsuite;
Class@@DefaultThrowableRendererTest testDefaultRender ThrowableRenderer r=newDefaultThrowableRenderer() Exception ex=newException() String[] strRep=r.doRender(ex) assertNotNull(strRep); assertTrue(strRep.length>0); for(inti=0;i<strRep.length;i++){assertNotNull(strRep[i]);} assertNotNull(strRep[i]);
Class@@DRFATestCase tearDown LogManager.resetConfiguration(); testComputeCheckPeriod DailyRollingFileAppender drfa=newDailyRollingFileAppender() drfa.setName("testComputeCheckPeriod"); drfa.setDatePattern("yyyy-MM-dd.'log'"); drfa.activateOptions(); drfa.computeCheckPeriod(); assertEquals(drfa.computeCheckPeriod(),DailyRollingFileAppender.TOP_OF_DAY); drfa.setDatePattern("yyyy-MM-dd mm.'log'"); assertEquals(drfa.computeCheckPeriod(),DailyRollingFileAppender.TOP_OF_MINUTE); drfa.setDatePattern("yyyy-MM-dd a.'log'"); assertEquals(drfa.computeCheckPeriod(),DailyRollingFileAppender.HALF_DAY); drfa.setDatePattern("yyyy-MM-dd HH.'log'"); assertEquals(drfa.computeCheckPeriod(),DailyRollingFileAppender.TOP_OF_HOUR); drfa.setDatePattern("yyyy-MM.'log'"); assertEquals(drfa.computeCheckPeriod(),DailyRollingFileAppender.TOP_OF_MONTH); drfa.setDatePattern("'log'HH'log'"); assertEquals(drfa.computeCheckPeriod(),DailyRollingFileAppender.TOP_OF_HOUR); testRC1 RollingCalendar rc=newRollingCalendar() rc.setType(DailyRollingFileAppender.TOP_OF_DAY); Calendar c=Calendar.getInstance() int[] M31={0,2,4,6,7,9,11} for(inti=0;i<M31.length;i++){for(intd=1;d<=31;d++){for(inth=0;h<23;h++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,10);c.set(Calendar.SECOND,10);c.set(Calendar.MILLISECOND,88);c.setTime(rc.getNextCheckDate(c.getTime()));if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);assertEquals(c.get(Calendar.DAY_OF_MONTH),1);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);assertEquals(c.get(Calendar.DAY_OF_MONTH),d+1);}assertEquals(c.get(Calendar.HOUR_OF_DAY),0);assertEquals(c.get(Calendar.MINUTE),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MILLISECOND),0);}}} for(intd=1;d<=31;d++){for(inth=0;h<23;h++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,10);c.set(Calendar.SECOND,10);c.set(Calendar.MILLISECOND,88);c.setTime(rc.getNextCheckDate(c.getTime()));if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);assertEquals(c.get(Calendar.DAY_OF_MONTH),1);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);assertEquals(c.get(Calendar.DAY_OF_MONTH),d+1);}assertEquals(c.get(Calendar.HOUR_OF_DAY),0);assertEquals(c.get(Calendar.MINUTE),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MILLISECOND),0);}} for(inth=0;h<23;h++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,10);c.set(Calendar.SECOND,10);c.set(Calendar.MILLISECOND,88);c.setTime(rc.getNextCheckDate(c.getTime()));if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);assertEquals(c.get(Calendar.DAY_OF_MONTH),1);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);assertEquals(c.get(Calendar.DAY_OF_MONTH),d+1);}assertEquals(c.get(Calendar.HOUR_OF_DAY),0);assertEquals(c.get(Calendar.MINUTE),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MILLISECOND),0);} c.clear(); c.set(Calendar.YEAR,20); c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]); c.set(Calendar.DAY_OF_MONTH,d); c.set(Calendar.HOUR_OF_DAY,h); c.set(Calendar.MINUTE,10); c.set(Calendar.SECOND,10); c.set(Calendar.MILLISECOND,88); c.setTime(rc.getNextCheckDate(c.getTime())); if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);assertEquals(c.get(Calendar.DAY_OF_MONTH),1);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);assertEquals(c.get(Calendar.DAY_OF_MONTH),d+1);} assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12); assertEquals(c.get(Calendar.DAY_OF_MONTH),1); assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]); assertEquals(c.get(Calendar.DAY_OF_MONTH),d+1); assertEquals(c.get(Calendar.HOUR_OF_DAY),0); assertEquals(c.get(Calendar.MINUTE),0); assertEquals(c.get(Calendar.SECOND),0); assertEquals(c.get(Calendar.MILLISECOND),0); testRC2 RollingCalendar rc=newRollingCalendar() rc.setType(DailyRollingFileAppender.TOP_OF_HOUR); Calendar c=Calendar.getInstance() int[] M31={0,2,4,6,7,9,11} for(inti=0;i<M31.length;i++){System.out.println("Month = "+(M31[i]+1));for(intd=1;d<=31;d++){for(inth=0;h<23;h++){for(intm=0;m<=59;m++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,m);c.set(Calendar.SECOND,12);c.set(Calendar.MILLISECOND,88);booleandltState0=c.getTimeZone().inDaylightTime(c.getTime());c.setTime(rc.getNextCheckDate(c.getTime()));booleandltState1=c.getTimeZone().inDaylightTime(c.getTime());assertEquals(c.get(Calendar.MILLISECOND),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MINUTE),0);if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);}else{if(dltState0){assertEquals(c.get(Calendar.HOUR_OF_DAY),h);}else{}}if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}}}} System.out.println("Month = "+(M31[i]+1)); for(intd=1;d<=31;d++){for(inth=0;h<23;h++){for(intm=0;m<=59;m++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,m);c.set(Calendar.SECOND,12);c.set(Calendar.MILLISECOND,88);booleandltState0=c.getTimeZone().inDaylightTime(c.getTime());c.setTime(rc.getNextCheckDate(c.getTime()));booleandltState1=c.getTimeZone().inDaylightTime(c.getTime());assertEquals(c.get(Calendar.MILLISECOND),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MINUTE),0);if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);}else{if(dltState0){assertEquals(c.get(Calendar.HOUR_OF_DAY),h);}else{}}if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}}} for(inth=0;h<23;h++){for(intm=0;m<=59;m++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,m);c.set(Calendar.SECOND,12);c.set(Calendar.MILLISECOND,88);booleandltState0=c.getTimeZone().inDaylightTime(c.getTime());c.setTime(rc.getNextCheckDate(c.getTime()));booleandltState1=c.getTimeZone().inDaylightTime(c.getTime());assertEquals(c.get(Calendar.MILLISECOND),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MINUTE),0);if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);}else{if(dltState0){assertEquals(c.get(Calendar.HOUR_OF_DAY),h);}else{}}if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}} for(intm=0;m<=59;m++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,m);c.set(Calendar.SECOND,12);c.set(Calendar.MILLISECOND,88);booleandltState0=c.getTimeZone().inDaylightTime(c.getTime());c.setTime(rc.getNextCheckDate(c.getTime()));booleandltState1=c.getTimeZone().inDaylightTime(c.getTime());assertEquals(c.get(Calendar.MILLISECOND),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MINUTE),0);if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);}else{if(dltState0){assertEquals(c.get(Calendar.HOUR_OF_DAY),h);}else{}}if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}} c.clear(); c.set(Calendar.YEAR,20); c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]); c.set(Calendar.DAY_OF_MONTH,d); c.set(Calendar.HOUR_OF_DAY,h); c.set(Calendar.MINUTE,m); c.set(Calendar.SECOND,12); c.set(Calendar.MILLISECOND,88); boolean dltState0=c.getTimeZone().inDaylightTime(c.getTime()) c.setTime(rc.getNextCheckDate(c.getTime())); boolean dltState1=c.getTimeZone().inDaylightTime(c.getTime()) assertEquals(c.get(Calendar.MILLISECOND),0); assertEquals(c.get(Calendar.SECOND),0); assertEquals(c.get(Calendar.MINUTE),0); if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);}else{if(dltState0){assertEquals(c.get(Calendar.HOUR_OF_DAY),h);}else{}} assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24); if(dltState0){assertEquals(c.get(Calendar.HOUR_OF_DAY),h);}else{} assertEquals(c.get(Calendar.HOUR_OF_DAY),h); if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);} assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32); if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);} assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12); assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]); assertEquals(c.get(Calendar.DAY_OF_MONTH),d); assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]); testRC3 RollingCalendar rc=newRollingCalendar() rc.setType(DailyRollingFileAppender.TOP_OF_MINUTE); int[] S={0,1,5,10,21,30,59} int[] M={0,1,5,10,21,30,59} Calendar c=Calendar.getInstance() int[] M31={2,9,0,4,6,7,11} for(inti=0;i<M31.length;i++){System.out.println("Month = "+(M31[i]+1));for(intd=1;d<=31;d++){for(inth=0;h<23;h++){for(intm=0;m<M.length;m++){for(ints=0;s<S.length;s++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,M[m]);c.set(Calendar.SECOND,S[s]);c.set(Calendar.MILLISECOND,88);c.add(Calendar.MILLISECOND,1);booleandltState0=c.getTimeZone().inDaylightTime(c.getTime());c.setTime(rc.getNextCheckDate(c.getTime()));c.add(Calendar.MILLISECOND,0);booleandltState1=c.getTimeZone().inDaylightTime(c.getTime());assertEquals(c.get(Calendar.MILLISECOND),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MINUTE),(M[m]+1)%60);if(M[m]==59){if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);}if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);}}else{if(c.get(Calendar.HOUR_OF_DAY)!=h){c.add(Calendar.HOUR_OF_DAY,+1);booleandltState2=c.getTimeZone().inDaylightTime(c.getTime());if(dltState1==dltState2){fail("No switch");}}assertEquals(c.get(Calendar.DAY_OF_MONTH),d);assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}}}}} System.out.println("Month = "+(M31[i]+1)); for(intd=1;d<=31;d++){for(inth=0;h<23;h++){for(intm=0;m<M.length;m++){for(ints=0;s<S.length;s++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,M[m]);c.set(Calendar.SECOND,S[s]);c.set(Calendar.MILLISECOND,88);c.add(Calendar.MILLISECOND,1);booleandltState0=c.getTimeZone().inDaylightTime(c.getTime());c.setTime(rc.getNextCheckDate(c.getTime()));c.add(Calendar.MILLISECOND,0);booleandltState1=c.getTimeZone().inDaylightTime(c.getTime());assertEquals(c.get(Calendar.MILLISECOND),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MINUTE),(M[m]+1)%60);if(M[m]==59){if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);}if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);}}else{if(c.get(Calendar.HOUR_OF_DAY)!=h){c.add(Calendar.HOUR_OF_DAY,+1);booleandltState2=c.getTimeZone().inDaylightTime(c.getTime());if(dltState1==dltState2){fail("No switch");}}assertEquals(c.get(Calendar.DAY_OF_MONTH),d);assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}}}} for(inth=0;h<23;h++){for(intm=0;m<M.length;m++){for(ints=0;s<S.length;s++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,M[m]);c.set(Calendar.SECOND,S[s]);c.set(Calendar.MILLISECOND,88);c.add(Calendar.MILLISECOND,1);booleandltState0=c.getTimeZone().inDaylightTime(c.getTime());c.setTime(rc.getNextCheckDate(c.getTime()));c.add(Calendar.MILLISECOND,0);booleandltState1=c.getTimeZone().inDaylightTime(c.getTime());assertEquals(c.get(Calendar.MILLISECOND),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MINUTE),(M[m]+1)%60);if(M[m]==59){if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);}if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);}}else{if(c.get(Calendar.HOUR_OF_DAY)!=h){c.add(Calendar.HOUR_OF_DAY,+1);booleandltState2=c.getTimeZone().inDaylightTime(c.getTime());if(dltState1==dltState2){fail("No switch");}}assertEquals(c.get(Calendar.DAY_OF_MONTH),d);assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}}} for(intm=0;m<M.length;m++){for(ints=0;s<S.length;s++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,M[m]);c.set(Calendar.SECOND,S[s]);c.set(Calendar.MILLISECOND,88);c.add(Calendar.MILLISECOND,1);booleandltState0=c.getTimeZone().inDaylightTime(c.getTime());c.setTime(rc.getNextCheckDate(c.getTime()));c.add(Calendar.MILLISECOND,0);booleandltState1=c.getTimeZone().inDaylightTime(c.getTime());assertEquals(c.get(Calendar.MILLISECOND),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MINUTE),(M[m]+1)%60);if(M[m]==59){if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);}if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);}}else{if(c.get(Calendar.HOUR_OF_DAY)!=h){c.add(Calendar.HOUR_OF_DAY,+1);booleandltState2=c.getTimeZone().inDaylightTime(c.getTime());if(dltState1==dltState2){fail("No switch");}}assertEquals(c.get(Calendar.DAY_OF_MONTH),d);assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}} for(ints=0;s<S.length;s++){c.clear();c.set(Calendar.YEAR,20);c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]);c.set(Calendar.DAY_OF_MONTH,d);c.set(Calendar.HOUR_OF_DAY,h);c.set(Calendar.MINUTE,M[m]);c.set(Calendar.SECOND,S[s]);c.set(Calendar.MILLISECOND,88);c.add(Calendar.MILLISECOND,1);booleandltState0=c.getTimeZone().inDaylightTime(c.getTime());c.setTime(rc.getNextCheckDate(c.getTime()));c.add(Calendar.MILLISECOND,0);booleandltState1=c.getTimeZone().inDaylightTime(c.getTime());assertEquals(c.get(Calendar.MILLISECOND),0);assertEquals(c.get(Calendar.SECOND),0);assertEquals(c.get(Calendar.MINUTE),(M[m]+1)%60);if(M[m]==59){if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);}if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);}}else{if(c.get(Calendar.HOUR_OF_DAY)!=h){c.add(Calendar.HOUR_OF_DAY,+1);booleandltState2=c.getTimeZone().inDaylightTime(c.getTime());if(dltState1==dltState2){fail("No switch");}}assertEquals(c.get(Calendar.DAY_OF_MONTH),d);assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}} c.clear(); c.set(Calendar.YEAR,20); c.set(Calendar.MONTH,Calendar.JANUARY+M31[i]); c.set(Calendar.DAY_OF_MONTH,d); c.set(Calendar.HOUR_OF_DAY,h); c.set(Calendar.MINUTE,M[m]); c.set(Calendar.SECOND,S[s]); c.set(Calendar.MILLISECOND,88); c.add(Calendar.MILLISECOND,1); boolean dltState0=c.getTimeZone().inDaylightTime(c.getTime()) c.setTime(rc.getNextCheckDate(c.getTime())); c.add(Calendar.MILLISECOND,0); boolean dltState1=c.getTimeZone().inDaylightTime(c.getTime()) assertEquals(c.get(Calendar.MILLISECOND),0); assertEquals(c.get(Calendar.SECOND),0); assertEquals(c.get(Calendar.MINUTE),(M[m]+1)%60); if(M[m]==59){if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);}if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);}}else{if(c.get(Calendar.HOUR_OF_DAY)!=h){c.add(Calendar.HOUR_OF_DAY,+1);booleandltState2=c.getTimeZone().inDaylightTime(c.getTime());if(dltState1==dltState2){fail("No switch");}}assertEquals(c.get(Calendar.DAY_OF_MONTH),d);assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);} if(dltState0==dltState1){assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24);} assertEquals(c.get(Calendar.HOUR_OF_DAY),(h+1)%24); if(h==23){assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32);if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);}}else{assertEquals(c.get(Calendar.DAY_OF_MONTH),d);} assertEquals(c.get(Calendar.DAY_OF_MONTH),(d+1)%32); if(d==31){assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12);}else{assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]);} assertEquals(c.get(Calendar.MONTH),(Calendar.JANUARY+M31[i]+1)%12); assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]); assertEquals(c.get(Calendar.DAY_OF_MONTH),d); if(c.get(Calendar.HOUR_OF_DAY)!=h){c.add(Calendar.HOUR_OF_DAY,+1);booleandltState2=c.getTimeZone().inDaylightTime(c.getTime());if(dltState1==dltState2){fail("No switch");}} c.add(Calendar.HOUR_OF_DAY,+1); boolean dltState2=c.getTimeZone().inDaylightTime(c.getTime()) if(dltState1==dltState2){fail("No switch");} fail("No switch"); assertEquals(c.get(Calendar.DAY_OF_MONTH),d); assertEquals(c.get(Calendar.MONTH),Calendar.JANUARY+M31[i]); test3Param Layout layout=newSimpleLayout() DailyRollingFileAppender appender=newDailyRollingFileAppender(layout,filename,datePattern) assertEquals(datePattern,appender.getDatePattern()); Logger root=Logger.getRootLogger() root.addAppender(appender); root.info("Hello, World"); assertTrue(newFile(filename).exists()); testTopOfYear try{test3Param("'.'yyyy","output/drfa_topOfYear.log");fail("Expected illegal state exception.");}catch(IllegalStateExceptionex){assertNotNull(ex);} test3Param("'.'yyyy","output/drfa_topOfYear.log"); fail("Expected illegal state exception."); assertNotNull(ex); testTopOfMonth test3Param("'.'yyyy-MM","output/drfa_topOfMonth.log"); testTopOfWeek test3Param("'.'yyyy-w","output/drfa_topOfWeek.log"); testTopOfDay test3Param("'.'yyyy-MM-dd","output/drfa_topOfDay.log"); testHalfDay test3Param("'.'yyyy-MM-dd-a","output/drfa_halfDay.log"); testTopOfHour test3Param("'.'yyyy-MM-dd-HH","output/drfa_topOfHour.log"); testTopOfMinute test3Param("'.'yyyy-MM-dd-HH-mm","output/drfa_topOfMinute.log"); testRolloverNoPattern Layout layout=newSimpleLayout() DailyRollingFileAppender appender=newDailyRollingFileAppender(layout,"output/drfa_nopattern.log",null) VectorErrorHandler errorHandler=newVectorErrorHandler() appender.setErrorHandler(errorHandler); appender.rollOver(); assertEquals(1,errorHandler.size()); assertEquals("Missing DatePattern option in rollOver().",errorHandler.getMessage(0)); testMinuteRollover Layout layout=newSimpleLayout() String filename="output/drfa_minuteRollover.log" String pattern="'.'yyyy-MM-dd-HH-mm" DailyRollingFileAppender appender=newDailyRollingFileAppender(layout,filename,pattern) Logger root=Logger.getRootLogger() root.addAppender(appender); File firstFile=newFile(filename+newSimpleDateFormat(pattern).format(newDate())) root.info("Hello, World"); firstFile.createNewFile(); assertTrue(firstFile.exists()); assertEquals(0,firstFile.length()); Calendar cal=Calendar.getInstance() long now=cal.getTime().getTime() cal.set(Calendar.SECOND,3); cal.set(Calendar.MILLISECOND,0); cal.add(Calendar.MINUTE,1); long until=cal.getTime().getTime() Thread.sleep(until-now); root.info("Hello, World"); assertTrue(firstFile.exists()); assertTrue(firstFile.length()>0); append int count1=source.read(buf) if(count1>0){combined.write(buf,0,count1);} combined.write(buf,0,count1); source.close(); testBlockedRollover Layout layout=newSimpleLayout() String filename="output/drfa_blockedRollover.log" String pattern="'.'yyyy-MM-dd-HH-mm" Date start=newDate() DailyRollingFileAppender appender=newDailyRollingFileAppender(layout,filename,pattern) appender.setAppend(false); Logger root=Logger.getRootLogger() root.addAppender(appender); File block1=newFile(filename+newSimpleDateFormat(pattern).format(start)) File block2=newFile(filename+newSimpleDateFormat(pattern).format(newDate(start.getTime()+60000))) FileOutputStream os1=newFileOutputStream(block1) FileOutputStream os2=newFileOutputStream(block2) root.info("Prior to rollover"); Thread.sleep(63000-(start.getTime()%60000)); root.info("Rollover attempt while blocked"); os1.close(); os2.close(); root.info("Message after block removed"); appender.close(); String combinedFilename="output/drfa_blockedRollover.combined" FileOutputStream combined=newFileOutputStream(combinedFilename) byte[] buf=newbyte[500] append(combined,newFileInputStream(block1),buf); append(combined,newFileInputStream(block2),buf); append(combined,newFileInputStream(filename),buf); combined.close(); assertTrue(Compare.compare(combinedFilename,"witness/drfa_blockedRollover.log")); testWeeklyRollover DailyRollingFileAppender drfa=newDailyRollingFileAppender() drfa.setDatePattern("'.'yyyy-ww"); int checkPeriod=drfa.computeCheckPeriod() assertEquals(DailyRollingFileAppender.TOP_OF_WEEK,checkPeriod);
Class@@EnhancedMyPatternLayout createPatternParser returnnewMyPatternParser(pattern==null?DEFAULT_CONVERSION_PATTERN:pattern);
Class@@EnhancedPatternLayoutTest createLayout returnnewEnhancedPatternLayout("[%t] %p %c - %m%n"); testFormat Logger logger=Logger.getLogger("org.apache.log4j.LayoutTest") LoggingEvent event=newLoggingEvent("org.apache.log4j.Logger",logger,Level.INFO,"Hello, World",null) EnhancedPatternLayout layout=(EnhancedPatternLayout)createLayout() String result=layout.format(event) StringBuffer buf=newStringBuffer(100) buf.append('['); buf.append(event.getThreadName()); buf.append("] "); buf.append(event.getLevel().toString()); buf.append(' '); buf.append(event.getLoggerName()); buf.append(" - "); buf.append(event.getMessage()); buf.append(System.getProperty("line.separator")); assertEquals(buf.toString(),result); testGetPatternFormat EnhancedPatternLayout layout=(EnhancedPatternLayout)createLayout() assertEquals("[%t] %p %c - %m%n",layout.getConversionPattern()); testDefaultConversionPattern assertEquals("%m%n",EnhancedPatternLayout.DEFAULT_CONVERSION_PATTERN); testTTCCConversionPattern assertEquals("%r [%t] %p %c %x - %m%n",EnhancedPatternLayout.TTCC_CONVERSION_PATTERN); testFormatResize Logger logger=Logger.getLogger("org.apache.log4j.xml.PatternLayoutTest") NDC.clear(); char[] msg=newchar[2000] for(inti=0;i<msg.length;i++){msg[i]='A';} msg[i]='A'; LoggingEvent event1=newLoggingEvent("org.apache.log4j.Logger",logger,Level.DEBUG,newString(msg),null) EnhancedPatternLayout layout=(EnhancedPatternLayout)createLayout() String result=layout.format(event1) LoggingEvent event2=newLoggingEvent("org.apache.log4j.Logger",logger,Level.WARN,"Hello, World",null) result=layout.format(event2); assertEquals("[",result.substring(0,1));
Class@@DerivedPatternLayout getBufSize returnBUF_SIZE; getMaxCapacity returnMAX_CAPACITY;
Class@@EnhancedPatternLayoutTestCase TEMP="output/temp" FILTERED="output/filtered" EXCEPTION1="java.lang.Exception: Just testing" EXCEPTION2="\\s*at .*\\(.*\\)" EXCEPTION3="\\s*at .*\\((Native Method|Unknown Source)\\)" EXCEPTION4="\\s*at .*\\(.*Compiled Code\\)" PAT0="\\[main]\\ (DEBUG|INFO|WARN|ERROR|FATAL) .* - Message \\d{1,2}" PAT1=Filter.ISO8601_PAT+" "+PAT0 PAT2=Filter.ABSOLUTE_DATE_AND_TIME_PAT+" "+PAT0 PAT3=Filter.ABSOLUTE_TIME_PAT+" "+PAT0 PAT4=Filter.RELATIVE_TIME_PAT+" "+PAT0 PAT5="\\[main]\\ (DEBUG|INFO|WARN|ERROR|FATAL) .* : Message \\d{1,2}" PAT6="\\[main]\\ (DEBUG|INFO |WARN |ERROR|FATAL) org.apache.log4j.EnhancedPatternLayoutTestCase.common\\(EnhancedPatternLayoutTestCase.java(:\\d{1,4})?\\): Message \\d{1,2}" PAT11a="^(DEBUG|INFO |WARN |ERROR|FATAL) \\[main]\\ log4j.EnhancedPatternLayoutTest: Message \\d{1,2}" PAT11b="^(DEBUG|INFO |WARN |ERROR|FATAL) \\[main]\\ root: Message \\d{1,2}" PAT12="^\\[main]\\ (DEBUG|INFO |WARN |ERROR|FATAL) "+"org.apache.log4j.EnhancedPatternLayoutTestCase.common\\(EnhancedPatternLayoutTestCase.java:\\d{3}\\): "+"Message \\d{1,2}" PAT13="^\\[main]\\ (DEBUG|INFO |WARN |ERROR|FATAL) "+"apache.log4j.EnhancedPatternLayoutTestCase.common\\(EnhancedPatternLayoutTestCase.java:\\d{3}\\): "+"Message \\d{1,2}" PAT14="^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL)\\ \\d{1,2}\\ *- Message \\d{1,2}" PAT_MDC_1="" root logger setUp root=Logger.getRootLogger(); logger=Logger.getLogger(EnhancedPatternLayoutTest.class); tearDown root.getLoggerRepository().resetConfiguration(); configure PropertyConfigurator.configure(fileName); compare returnCompare.compare(actual,expected); test1 configure("input/pattern/enhancedPatternLayout1.properties"); common(); Transformer.transform(TEMP,FILTERED,newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.1")); test2 configure("input/pattern/enhancedPatternLayout2.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT1,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.2")); test3 configure("input/pattern/enhancedPatternLayout3.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT1,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.3")); test4 configure("input/pattern/enhancedPatternLayout4.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT2,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.4")); test5 configure("input/pattern/enhancedPatternLayout5.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT2,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.5")); test6 configure("input/pattern/enhancedPatternLayout6.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT3,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.6")); test7 configure("input/pattern/enhancedPatternLayout7.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT3,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.7")); test8 configure("input/pattern/enhancedPatternLayout8.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT4,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newRelativeTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.8")); test9 configure("input/pattern/enhancedPatternLayout9.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT5,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.9")); test10 configure("input/pattern/enhancedPatternLayout10.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT6,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.10")); test11 configure("input/pattern/enhancedPatternLayout11.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT11a,PAT11b,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.11")); test12 configure("input/pattern/enhancedPatternLayout12.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT12,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.12")); test13 configure("input/pattern/enhancedPatternLayout13.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT13,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.13")); test14 configure("input/pattern/enhancedPatternLayout14.properties"); common(); Transformer.transform(TEMP,FILTERED,newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.14")); clearMDC java.util.Hashtable context=MDC.getContext() if(context!=null){context.clear();} context.clear(); testMDC1 configure("input/pattern/enhancedPatternLayout.mdc.1.properties"); clearMDC(); MDC.put("key1","va11"); MDC.put("key2","va12"); logger.debug("Hello World"); MDC.remove("key1"); MDC.remove("key2"); Transformer.transform(TEMP,FILTERED,newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.mdc.1")); test15 configure("input/pattern/enhancedPatternLayout15.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT14,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}); assertTrue(compare(FILTERED,"witness/pattern/enhancedPatternLayout.15")); test16 long start=newDate().getTime() configure("input/pattern/enhancedPatternLayout16.properties"); common(); long end=newDate().getTime() FileReader reader=newFileReader("output/patternLayout16.log") char chars[]=newchar[50] reader.read(chars,0,chars.length); reader.close(); SimpleDateFormat format=newSimpleDateFormat("yyyy-MM-dd HH:mm:ss") format.setTimeZone(TimeZone.getTimeZone("GMT+0")); String utcStr=newString(chars,0,19) Date utcDate=format.parse(utcStr,newParsePosition(0)) assertTrue(utcDate.getTime()>=start-1000&&utcDate.getTime()<end+1000); String cstStr=newString(chars,21,19) format.setTimeZone(TimeZone.getTimeZone("GMT-6")); Date cstDate=format.parse(cstStr,newParsePosition(0)) assertFalse(cstStr.equals(utcStr)); assertTrue(cstDate.getTime()>=start-1000&&cstDate.getTime()<end+1000); common int i=-1 logger.debug("Message "+++i); root.debug("Message "+i); logger.info("Message "+++i); root.info("Message "+i); logger.warn("Message "+++i); root.warn("Message "+i); logger.error("Message "+++i); root.error("Message "+i); logger.log(Level.FATAL,"Message "+++i); root.log(Level.FATAL,"Message "+i); Exception e=newException("Just testing") logger.debug("Message "+++i,e); logger.info("Message "+++i,e); logger.warn("Message "+++i,e); logger.error("Message "+++i,e); logger.log(Level.FATAL,"Message "+++i,e); testMDC2 String OUTPUT_FILE="output/patternLayout.mdc.2" String WITNESS_FILE="witness/pattern/enhancedPatternLayout.mdc.2" String mdcMsgPattern1="%m : %X%n" String mdcMsgPattern2="%m : %X{key1}%n" String mdcMsgPattern3="%m : %X{key2}%n" String mdcMsgPattern4="%m : %X{key3}%n" String mdcMsgPattern5="%m : %X{key1},%X{key2},%X{key3}%n" EnhancedPatternLayout layout=newEnhancedPatternLayout("%m%n") Appender appender=newFileAppender(layout,OUTPUT_FILE,false) root.addAppender(appender); root.setLevel(Level.DEBUG); clearMDC(); root.debug("starting mdc pattern test"); layout.setConversionPattern(mdcMsgPattern1); layout.activateOptions(); root.debug("empty mdc, no key specified in pattern"); layout.setConversionPattern(mdcMsgPattern2); layout.activateOptions(); root.debug("empty mdc, key1 in pattern"); layout.setConversionPattern(mdcMsgPattern3); layout.activateOptions(); root.debug("empty mdc, key2 in pattern"); layout.setConversionPattern(mdcMsgPattern4); layout.activateOptions(); root.debug("empty mdc, key3 in pattern"); layout.setConversionPattern(mdcMsgPattern5); layout.activateOptions(); root.debug("empty mdc, key1, key2, and key3 in pattern"); MDC.put("key1","value1"); MDC.put("key2","value2"); layout.setConversionPattern(mdcMsgPattern1); layout.activateOptions(); root.debug("filled mdc, no key specified in pattern"); layout.setConversionPattern(mdcMsgPattern2); layout.activateOptions(); root.debug("filled mdc, key1 in pattern"); layout.setConversionPattern(mdcMsgPattern3); layout.activateOptions(); root.debug("filled mdc, key2 in pattern"); layout.setConversionPattern(mdcMsgPattern4); layout.activateOptions(); root.debug("filled mdc, key3 in pattern"); layout.setConversionPattern(mdcMsgPattern5); layout.activateOptions(); root.debug("filled mdc, key1, key2, and key3 in pattern"); MDC.remove("key1"); MDC.remove("key2"); layout.setConversionPattern("%m%n"); layout.activateOptions(); root.debug("finished mdc pattern test"); Transformer.transform(OUTPUT_FILE,FILTERED,newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()}); assertTrue(compare(FILTERED,WITNESS_FILE)); testThrowable String OUTPUT_FILE="output/patternLayout.throwable" String WITNESS_FILE="witness/pattern/enhancedPatternLayout.throwable" EnhancedPatternLayout layout=newEnhancedPatternLayout("%m%n") Appender appender=newFileAppender(layout,OUTPUT_FILE,false) root.addAppender(appender); root.setLevel(Level.DEBUG); root.debug("starting throwable pattern test"); Exception ex=newException("Test Exception") root.debug("plain pattern, no exception"); root.debug("plain pattern, with exception",ex); layout.setConversionPattern("%m%n%throwable"); layout.activateOptions(); root.debug("%throwable, no exception"); root.debug("%throwable, with exception",ex); layout.setConversionPattern("%m%n%throwable{short}"); layout.activateOptions(); root.debug("%throwable{short}, no exception"); root.debug("%throwable{short}, with exception",ex); layout.setConversionPattern("%m%n%throwable{none}"); layout.activateOptions(); root.debug("%throwable{none}, no exception"); root.debug("%throwable{none}, with exception",ex); layout.setConversionPattern("%m%n%throwable{0}"); layout.activateOptions(); root.debug("%throwable{0}, no exception"); root.debug("%throwable{0}, with exception",ex); layout.setConversionPattern("%m%n%throwable{1}"); layout.activateOptions(); root.debug("%throwable{1}, no exception"); root.debug("%throwable{1}, with exception",ex); layout.setConversionPattern("%m%n%throwable{100}"); layout.activateOptions(); root.debug("%throwable{100}, no exception"); root.debug("%throwable{100}, with exception",ex); String[] trace=newThrowableInformation(ex).getThrowableStrRep() layout.setConversionPattern("%m%n%throwable{"+(2-trace.length)+"}"); layout.activateOptions(); root.debug("%throwable{-n}, no exception"); root.debug("%throwable{-n}, with exception",ex); Transformer.transform(OUTPUT_FILE,FILTERED,newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()}); assertTrue(compare(FILTERED,WITNESS_FILE));
Class@@EnhancedThrowableRendererTest testEnhancedRender ThrowableRenderer r=newEnhancedThrowableRenderer() Exception ex=newException() String[] strRep=r.doRender(ex) assertNotNull(strRep); assertTrue(strRep.length>0); for(inti=0;i<strRep.length;i++){assertNotNull(strRep[i]);} assertNotNull(strRep[i]);
Class@@FileAppenderTest testDirectoryCreation if(!System.getProperty("java.version").startsWith("1.1.")){FilenewFile=newFile("output/newdir/temp.log");newFile.delete();FilenewDir=newFile("output/newdir");newDir.delete();org.apache.log4j.FileAppenderwa=neworg.apache.log4j.FileAppender();wa.setFile("output/newdir/temp.log");wa.setLayout(newPatternLayout("%m%n"));wa.activateOptions();assertTrue(newFile("output/newdir/temp.log").exists());} File newFile=newFile("output/newdir/temp.log") newFile.delete(); File newDir=newFile("output/newdir") newDir.delete(); org.apache.log4j.FileAppender wa=neworg.apache.log4j.FileAppender() wa.setFile("output/newdir/temp.log"); wa.setLayout(newPatternLayout("%m%n")); wa.activateOptions(); assertTrue(newFile("output/newdir/temp.log").exists()); testGetThresholdReturnType Method method=FileAppender.class.getMethod("getThreshold",(Class[])null) assertTrue(method.getReturnType()==Priority.class); testgetSetThreshold FileAppender appender=newFileAppender() Priority debug=Level.DEBUG assertNull(appender.getThreshold()); appender.setThreshold(debug); assertTrue(appender.getThreshold()==debug); testIsAsSevereAsThreshold FileAppender appender=newFileAppender() Priority debug=Level.DEBUG assertTrue(appender.isAsSevereAsThreshold(debug));
Class@@BoundedFIFOTestCase cat=Logger.getLogger("x") MAX=1000 e=newLoggingEvent[MAX] for(inti=0;i<MAX;i++){e[i]=newLoggingEvent("",cat,Level.DEBUG,"e"+i,null);} e[i]=newLoggingEvent("",cat,Level.DEBUG,"e"+i,null); setUp test1 for(intsize=1;size<=128;size*=2){BoundedFIFObf=newBoundedFIFO(size);assertEquals(bf.getMaxSize(),size);assertNull(bf.get());inti;intj;intk;for(i=1;i<2*size;i++){for(j=0;j<i;j++){bf.put(e[j]);assertEquals(bf.length(),j<size?j+1:size);}intmax=size<j?size:j;j--;for(k=0;k<=j;k++){assertEquals(bf.length(),max-k>0?max-k:0);Objectr=bf.get();if(k>=size)assertNull(r);elseassertEquals(r,e[k]);}}} BoundedFIFO bf=newBoundedFIFO(size) assertEquals(bf.getMaxSize(),size); assertNull(bf.get()); int i int j int k for(i=1;i<2*size;i++){for(j=0;j<i;j++){bf.put(e[j]);assertEquals(bf.length(),j<size?j+1:size);}intmax=size<j?size:j;j--;for(k=0;k<=j;k++){assertEquals(bf.length(),max-k>0?max-k:0);Objectr=bf.get();if(k>=size)assertNull(r);elseassertEquals(r,e[k]);}} for(j=0;j<i;j++){bf.put(e[j]);assertEquals(bf.length(),j<size?j+1:size);} bf.put(e[j]); assertEquals(bf.length(),j<size?j+1:size); int max=size<j?size:j j--; for(k=0;k<=j;k++){assertEquals(bf.length(),max-k>0?max-k:0);Objectr=bf.get();if(k>=size)assertNull(r);elseassertEquals(r,e[k]);} assertEquals(bf.length(),max-k>0?max-k:0); Object r=bf.get() if(k>=size)assertNull(r);elseassertEquals(r,e[k]); test2 int size=3 BoundedFIFO bf=newBoundedFIFO(size) bf.put(e[0]); assertEquals(bf.get(),e[0]); assertNull(bf.get()); bf.put(e[1]); assertEquals(bf.length(),1); bf.put(e[2]); assertEquals(bf.length(),2); bf.put(e[3]); assertEquals(bf.length(),3); assertEquals(bf.get(),e[1]); assertEquals(bf.length(),2); assertEquals(bf.get(),e[2]); assertEquals(bf.length(),1); assertEquals(bf.get(),e[3]); assertEquals(bf.length(),0); assertNull(bf.get()); assertEquals(bf.length(),0); min returna<b?a:b; testResize1 int size=10 for(intn=1;n<size*2;n++){for(inti=0;i<size*2;i++){BoundedFIFObf=newBoundedFIFO(size);for(intf=0;f<i;f++){bf.put(e[f]);}bf.resize(n);intexpectedSize=min(n,min(i,size));assertEquals(bf.length(),expectedSize);for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c]);}}} for(inti=0;i<size*2;i++){BoundedFIFObf=newBoundedFIFO(size);for(intf=0;f<i;f++){bf.put(e[f]);}bf.resize(n);intexpectedSize=min(n,min(i,size));assertEquals(bf.length(),expectedSize);for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c]);}} BoundedFIFO bf=newBoundedFIFO(size) for(intf=0;f<i;f++){bf.put(e[f]);} bf.put(e[f]); bf.resize(n); int expectedSize=min(n,min(i,size)) assertEquals(bf.length(),expectedSize); for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c]);} assertEquals(bf.get(),e[c]); testResize2 int size=10 for(intn=1;n<size*2;n++){for(inti=0;i<size*2;i++){for(intd=0;d<min(i,size);d++){BoundedFIFObf=newBoundedFIFO(size);for(intp=0;p<i;p++){bf.put(e[p]);}for(intg=0;g<d;g++){bf.get();}intx=bf.length();bf.resize(n);intexpectedSize=min(n,x);assertEquals(bf.length(),expectedSize);for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c+d]);}assertNull(bf.get());}}} for(inti=0;i<size*2;i++){for(intd=0;d<min(i,size);d++){BoundedFIFObf=newBoundedFIFO(size);for(intp=0;p<i;p++){bf.put(e[p]);}for(intg=0;g<d;g++){bf.get();}intx=bf.length();bf.resize(n);intexpectedSize=min(n,x);assertEquals(bf.length(),expectedSize);for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c+d]);}assertNull(bf.get());}} for(intd=0;d<min(i,size);d++){BoundedFIFObf=newBoundedFIFO(size);for(intp=0;p<i;p++){bf.put(e[p]);}for(intg=0;g<d;g++){bf.get();}intx=bf.length();bf.resize(n);intexpectedSize=min(n,x);assertEquals(bf.length(),expectedSize);for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c+d]);}assertNull(bf.get());} BoundedFIFO bf=newBoundedFIFO(size) for(intp=0;p<i;p++){bf.put(e[p]);} bf.put(e[p]); for(intg=0;g<d;g++){bf.get();} bf.get(); int x=bf.length() bf.resize(n); int expectedSize=min(n,x) assertEquals(bf.length(),expectedSize); for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c+d]);} assertEquals(bf.get(),e[c+d]); assertNull(bf.get()); testResize3 int size=10 for(intn=1;n<size*2;n++){for(inti=0;i<size;i++){for(intd=0;d<i;d++){for(intr=0;r<d;r++){BoundedFIFObf=newBoundedFIFO(size);for(intp0=0;p0<i;p0++)bf.put(e[p0]);for(intg=0;g<d;g++)bf.get();for(intp1=0;p1<r;p1++)bf.put(e[i+p1]);intx=bf.length();bf.resize(n);intexpectedSize=min(n,x);assertEquals(bf.length(),expectedSize);for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c+d]);}}}}} for(inti=0;i<size;i++){for(intd=0;d<i;d++){for(intr=0;r<d;r++){BoundedFIFObf=newBoundedFIFO(size);for(intp0=0;p0<i;p0++)bf.put(e[p0]);for(intg=0;g<d;g++)bf.get();for(intp1=0;p1<r;p1++)bf.put(e[i+p1]);intx=bf.length();bf.resize(n);intexpectedSize=min(n,x);assertEquals(bf.length(),expectedSize);for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c+d]);}}}} for(intd=0;d<i;d++){for(intr=0;r<d;r++){BoundedFIFObf=newBoundedFIFO(size);for(intp0=0;p0<i;p0++)bf.put(e[p0]);for(intg=0;g<d;g++)bf.get();for(intp1=0;p1<r;p1++)bf.put(e[i+p1]);intx=bf.length();bf.resize(n);intexpectedSize=min(n,x);assertEquals(bf.length(),expectedSize);for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c+d]);}}} for(intr=0;r<d;r++){BoundedFIFObf=newBoundedFIFO(size);for(intp0=0;p0<i;p0++)bf.put(e[p0]);for(intg=0;g<d;g++)bf.get();for(intp1=0;p1<r;p1++)bf.put(e[i+p1]);intx=bf.length();bf.resize(n);intexpectedSize=min(n,x);assertEquals(bf.length(),expectedSize);for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c+d]);}} BoundedFIFO bf=newBoundedFIFO(size) for(intp0=0;p0<i;p0++)bf.put(e[p0]); for(intg=0;g<d;g++)bf.get(); for(intp1=0;p1<r;p1++)bf.put(e[i+p1]); int x=bf.length() bf.resize(n); int expectedSize=min(n,x) assertEquals(bf.length(),expectedSize); for(intc=0;c<expectedSize;c++){assertEquals(bf.get(),e[c+d]);} assertEquals(bf.get(),e[c+d]); suite TestSuite suite=newTestSuite() suite.addTest(newBoundedFIFOTestCase("test1")); suite.addTest(newBoundedFIFOTestCase("test2")); suite.addTest(newBoundedFIFOTestCase("testResize1")); suite.addTest(newBoundedFIFOTestCase("testResize2")); suite.addTest(newBoundedFIFOTestCase("testResize3")); returnsuite;
Class@@CyclicBufferTestCase cat=Logger.getLogger("x") MAX=1000 e=newLoggingEvent[MAX] for(inti=0;i<MAX;i++){e[i]=newLoggingEvent("",cat,Level.DEBUG,"e"+i,null);} e[i]=newLoggingEvent("",cat,Level.DEBUG,"e"+i,null); setUp test0 int size=2 CyclicBuffer cb=newCyclicBuffer(size) assertEquals(cb.getMaxSize(),size); cb.add(e[0]); assertEquals(cb.length(),1); assertEquals(cb.get(),e[0]); assertEquals(cb.length(),0); assertNull(cb.get()); assertEquals(cb.length(),0); cb=newCyclicBuffer(size); cb.add(e[0]); cb.add(e[1]); assertEquals(cb.length(),2); assertEquals(cb.get(),e[0]); assertEquals(cb.length(),1); assertEquals(cb.get(),e[1]); assertEquals(cb.length(),0); assertNull(cb.get()); assertEquals(cb.length(),0); test1 for(intbufSize=1;bufSize<=128;bufSize*=2)doTest1(bufSize); doTest1 CyclicBuffer cb=newCyclicBuffer(size) assertEquals(cb.getMaxSize(),size); for(inti=-(size+10);i<(size+10);i++){assertNull(cb.get(i));} assertNull(cb.get(i)); for(inti=0;i<MAX;i++){cb.add(e[i]);intlimit=i<size-1?i:size-1;for(intj=limit;j>=0;j--){assertEquals(cb.get(j),e[i-(limit-j)]);}assertNull(cb.get(-1));assertNull(cb.get(limit+1));} cb.add(e[i]); int limit=i<size-1?i:size-1 for(intj=limit;j>=0;j--){assertEquals(cb.get(j),e[i-(limit-j)]);} assertEquals(cb.get(j),e[i-(limit-j)]); assertNull(cb.get(-1)); assertNull(cb.get(limit+1)); testResize for(intisize=1;isize<=128;isize*=2){doTestResize(isize,isize/2+1,isize/2+1);doTestResize(isize,isize/2+1,isize+10);doTestResize(isize,isize+10,isize/2+1);doTestResize(isize,isize+10,isize+10);} doTestResize(isize,isize/2+1,isize/2+1); doTestResize(isize,isize/2+1,isize+10); doTestResize(isize,isize+10,isize/2+1); doTestResize(isize,isize+10,isize+10); doTestResize CyclicBuffer cb=newCyclicBuffer(initialSize) for(inti=0;i<numberOfAdds;i++){cb.add(e[i]);} cb.add(e[i]); cb.resize(newSize); int offset=numberOfAdds-initialSize if(offset<0)offset=0; int len=newSize<numberOfAdds?newSize:numberOfAdds len=len<initialSize?len:initialSize; for(intj=0;j<len;j++){assertEquals(cb.get(j),e[offset+j]);} assertEquals(cb.get(j),e[offset+j]); suite TestSuite suite=newTestSuite() suite.addTest(newCyclicBufferTestCase("test0")); suite.addTest(newCyclicBufferTestCase("test1")); suite.addTest(newCyclicBufferTestCase("testResize")); returnsuite;
Class@@DateLayoutTest createLayout returnnewMockLayout(); testNullDateFormat assertEquals("NULL",DateLayout.NULL_DATE_FORMAT); testRelativeTimeDateFormat assertEquals("RELATIVE",DateLayout.RELATIVE_TIME_DATE_FORMAT); testDateFormatOption assertEquals("DateFormat",DateLayout.DATE_FORMAT_OPTION); testTimeZoneOption assertEquals("TimeZone",DateLayout.TIMEZONE_OPTION); testGetOptionStrings String[] options=((DateLayout)createLayout()).getOptionStrings() assertEquals(2,options.length); testSetOptionDateFormat DateLayout layout=(DateLayout)createLayout() layout.setOption("dAtefOrmat","foobar"); assertEquals("FOOBAR",layout.getDateFormat()); testSetOptionTimeZone DateLayout layout=(DateLayout)createLayout() layout.setOption("tImezOne","+05:00"); assertEquals("+05:00",layout.getTimeZone()); testSetDateFormat DateLayout layout=(DateLayout)createLayout() layout.setDateFormat("ABSOLUTE"); assertEquals("ABSOLUTE",layout.getDateFormat()); testSetTimeZone DateLayout layout=(DateLayout)createLayout() layout.setTimeZone("+05:00"); assertEquals("+05:00",layout.getTimeZone()); testSetDateFormatNull DateLayout layout=(DateLayout)createLayout() layout.setDateFormat((String)null,null); testSetDateFormatNullString DateLayout layout=(DateLayout)createLayout() layout.setDateFormat("NuLL",null); testSetDateFormatRelative DateLayout layout=(DateLayout)createLayout() layout.setDateFormat("rElatIve",TimeZone.getDefault()); testSetDateFormatAbsolute DateLayout layout=(DateLayout)createLayout() layout.setDateFormat("aBsolUte",TimeZone.getDefault()); testSetDateFormatDateTime DateLayout layout=(DateLayout)createLayout() layout.setDateFormat("dAte",TimeZone.getDefault()); testSetDateFormatISO8601 DateLayout layout=(DateLayout)createLayout() layout.setDateFormat("iSo8601",TimeZone.getDefault()); testSetDateFormatSimple DateLayout layout=(DateLayout)createLayout() layout.setDateFormat("HH:mm:ss",TimeZone.getDefault()); testActivateOptions DateLayout layout=(DateLayout)createLayout() layout.setDateFormat("HH:mm:ss"); layout.setTimeZone("+05:00"); layout.activateOptions(); testSetDateFormatWithFormat DateFormat format=newSimpleDateFormat("HH:mm") DateLayout layout=(DateLayout)createLayout() layout.setDateFormat(format,TimeZone.getDefault()); testISO8601Format DateFormat format=newISO8601DateFormat() Calendar calendar=Calendar.getInstance() calendar.clear(); calendar.set(1970,0,1,0,0,0); String actual=format.format(calendar.getTime()) assertEquals("1970-01-01 00:00:00,000",actual); testDateTimeFormat DateFormat format=newDateTimeDateFormat() Calendar calendar=Calendar.getInstance() calendar.clear(); calendar.set(1970,0,1,0,0,0); String actual=format.format(calendar.getTime()) SimpleDateFormat df=newSimpleDateFormat("dd MMM yyyy HH:mm:ss,SSS") String expected=df.format(calendar.getTime()) assertEquals(expected,actual);
Class@@MockLayout assertNotNull(pos); assertNotNull(date); assertNull(dateFormat); format return"Mock"; activateOptions ignoresThrowable returntrue;
Class@@LogLogTest testDebugKey assertEquals("log4j.debug",LogLog.DEBUG_KEY); testConfigDebugKey assertEquals("log4j.configDebug",LogLog.CONFIG_DEBUG_KEY);
Class@@OptionConverterTestCase props setUp props=newProperties(); props.put("TOTO","wonderful"); props.put("key1","value1"); props.put("key2","value2"); props.put("line.separator",System.getProperty("line.separator")); props.put("java.home",System.getProperty("java.home")); System.setProperties(props); tearDown props=null; LogManager.resetConfiguration(); varSubstTest1 String r r=OptionConverter.substVars("hello world.",null); assertEquals("hello world.",r); r=OptionConverter.substVars("hello ${TOTO} world.",null); assertEquals("hello wonderful world.",r); varSubstTest2 String r r=OptionConverter.substVars("Test2 ${key1} mid ${key2} end.",null); assertEquals("Test2 value1 mid value2 end.",r); varSubstTest3 String r r=OptionConverter.substVars("Test3 ${unset} mid ${key1} end.",null); assertEquals("Test3  mid value1 end.",r); varSubstTest4 String val="Test4 ${incomplete " try{OptionConverter.substVars(val,null);}catch(IllegalArgumentExceptione){StringerrorMsg=e.getMessage();assertEquals('"'+val+"\" has no closing brace. Opening brace at position 6.",errorMsg);} OptionConverter.substVars(val,null); String errorMsg=e.getMessage() assertEquals('"'+val+"\" has no closing brace. Opening brace at position 6.",errorMsg); varSubstTest5 Properties props=newProperties() props.put("p1","x1"); props.put("p2","${p1}"); String res=OptionConverter.substVars("${p2}",props) System.out.println("Result is ["+res+"]."); assertEquals(res,"x1"); testInputStream File file=newFile("input/filter1.properties") assertTrue(file.exists()); FileInputStream inputStream=newFileInputStream(file) try{OptionConverter.selectAndConfigure(inputStream,null,LogManager.getLoggerRepository());}finally{inputStream.close();} OptionConverter.selectAndConfigure(inputStream,null,LogManager.getLoggerRepository()); inputStream.close(); newPropertyConfiguratorTest(this.getClass().getName()).validateNested(); toLevelTest1 String val="INFO" Level p=OptionConverter.toLevel(val,null) assertEquals(p,Level.INFO); toLevelTest2 String val="INFO#org.apache.log4j.xml.XLevel" Level p=OptionConverter.toLevel(val,null) assertEquals(p,Level.INFO); toLevelTest3 String val="TRACE#org.apache.log4j.xml.XLevel" Level p=OptionConverter.toLevel(val,null) assertEquals(p,XLevel.TRACE); toLevelTest4 String val="TR#org.apache.log4j.xml.XLevel" Level p=OptionConverter.toLevel(val,null) assertEquals(p,null); toLevelTest5 String val="INFO#org.apache.log4j.xml.TOTO" Level p=OptionConverter.toLevel(val,null) assertEquals(p,null); suite TestSuite suite=newTestSuite() suite.addTest(newOptionConverterTestCase("varSubstTest5")); suite.addTest(newOptionConverterTestCase("varSubstTest1")); suite.addTest(newOptionConverterTestCase("varSubstTest2")); suite.addTest(newOptionConverterTestCase("varSubstTest3")); suite.addTest(newOptionConverterTestCase("varSubstTest4")); suite.addTest(newOptionConverterTestCase("testInputStream")); suite.addTest(newOptionConverterTestCase("toLevelTest1")); suite.addTest(newOptionConverterTestCase("toLevelTest2")); suite.addTest(newOptionConverterTestCase("toLevelTest3")); suite.addTest(newOptionConverterTestCase("toLevelTest4")); suite.addTest(newOptionConverterTestCase("toLevelTest5")); returnsuite;
Class@@PatternParserTestCase OUTPUT_FILE="output/PatternParser" WITNESS_FILE="witness/PatternParser" msgPattern="%m%n" root logger setUp root=Logger.getRootLogger(); root.removeAllAppenders(); tearDown root.getLoggerRepository().resetConfiguration(); mdcPattern String mdcMsgPattern1="%m : %X%n" String mdcMsgPattern2="%m : %X{key1}%n" String mdcMsgPattern3="%m : %X{key2}%n" String mdcMsgPattern4="%m : %X{key3}%n" String mdcMsgPattern5="%m : %X{key1},%X{key2},%X{key3}%n" PatternLayout layout=newPatternLayout(msgPattern) Appender appender=newFileAppender(layout,OUTPUT_FILE+"_mdc",false) root.addAppender(appender); root.setLevel(Level.DEBUG); root.debug("starting mdc pattern test"); layout.setConversionPattern(mdcMsgPattern1); root.debug("empty mdc, no key specified in pattern"); layout.setConversionPattern(mdcMsgPattern2); root.debug("empty mdc, key1 in pattern"); layout.setConversionPattern(mdcMsgPattern3); root.debug("empty mdc, key2 in pattern"); layout.setConversionPattern(mdcMsgPattern4); root.debug("empty mdc, key3 in pattern"); layout.setConversionPattern(mdcMsgPattern5); root.debug("empty mdc, key1, key2, and key3 in pattern"); MDC.put("key1","value1"); MDC.put("key2","value2"); layout.setConversionPattern(mdcMsgPattern1); root.debug("filled mdc, no key specified in pattern"); layout.setConversionPattern(mdcMsgPattern2); root.debug("filled mdc, key1 in pattern"); layout.setConversionPattern(mdcMsgPattern3); root.debug("filled mdc, key2 in pattern"); layout.setConversionPattern(mdcMsgPattern4); root.debug("filled mdc, key3 in pattern"); layout.setConversionPattern(mdcMsgPattern5); root.debug("filled mdc, key1, key2, and key3 in pattern"); MDC.remove("key1"); MDC.remove("key2"); layout.setConversionPattern(msgPattern); root.debug("finished mdc pattern test"); assertTrue(Compare.compare(OUTPUT_FILE+"_mdc",WITNESS_FILE+"_mdc")); suite TestSuite suite=newTestSuite() if(!System.getProperty("java.version").startsWith("1.1.")){suite.addTest(newPatternParserTestCase("mdcPattern"));} suite.addTest(newPatternParserTestCase("mdcPattern")); returnsuite;
Class@@UtilLoggingLevelTest testToLevelFINEST assertSame(UtilLoggingLevel.FINEST,UtilLoggingLevel.toLevel("fiNeSt"));
Class@@HierarchyThresholdTestCase TEMP="output/temp" logger=Logger.getLogger(HierarchyThresholdTestCase.class) setUp tearDown System.out.println("Tearing down test case."); logger.getLoggerRepository().resetConfiguration(); test1 PropertyConfigurator.configure("input/hierarchyThreshold1.properties"); common(); assertTrue(Compare.compare(TEMP,"witness/hierarchyThreshold.1")); test2 PropertyConfigurator.configure("input/hierarchyThreshold2.properties"); common(); assertTrue(Compare.compare(TEMP,"witness/hierarchyThreshold.2")); test3 PropertyConfigurator.configure("input/hierarchyThreshold3.properties"); common(); assertTrue(Compare.compare(TEMP,"witness/hierarchyThreshold.3")); test4 PropertyConfigurator.configure("input/hierarchyThreshold4.properties"); common(); assertTrue(Compare.compare(TEMP,"witness/hierarchyThreshold.4")); test5 PropertyConfigurator.configure("input/hierarchyThreshold5.properties"); common(); assertTrue(Compare.compare(TEMP,"witness/hierarchyThreshold.5")); test6 PropertyConfigurator.configure("input/hierarchyThreshold6.properties"); common(); assertTrue(Compare.compare(TEMP,"witness/hierarchyThreshold.6")); test7 PropertyConfigurator.configure("input/hierarchyThreshold7.properties"); common(); assertTrue(Compare.compare(TEMP,"witness/hierarchyThreshold.7")); test8 PropertyConfigurator.configure("input/hierarchyThreshold8.properties"); common(); assertTrue(Compare.compare(TEMP,"witness/hierarchyThreshold.8")); common String oldThreadName=Thread.currentThread().getName() Thread.currentThread().setName("main"); logger.log(XLevel.TRACE,"m0"); logger.debug("m1"); logger.info("m2"); logger.warn("m3"); logger.error("m4"); logger.fatal("m5"); Thread.currentThread().setName(oldThreadName); suite TestSuite suite=newTestSuite() suite.addTest(newHierarchyThresholdTestCase("test1")); suite.addTest(newHierarchyThresholdTestCase("test2")); suite.addTest(newHierarchyThresholdTestCase("test3")); suite.addTest(newHierarchyThresholdTestCase("test4")); suite.addTest(newHierarchyThresholdTestCase("test5")); suite.addTest(newHierarchyThresholdTestCase("test6")); suite.addTest(newHierarchyThresholdTestCase("test7")); suite.addTest(newHierarchyThresholdTestCase("test8")); returnsuite;
Class@@HTMLLayoutTest createLayout returnnewHTMLLayout(); parse DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance() factory.setNamespaceAware(false); factory.setCoalescing(true); DocumentBuilder builder=factory.newDocumentBuilder() Reader reader=newStringReader(source) returnbuilder.parse(newInputSource(reader)); testFormat Logger logger=Logger.getLogger("org.apache.log4j.xml.HTMLLayoutTest") NDC.push("NDC goes here"); LoggingEvent event=newLoggingEvent("org.apache.log4j.Logger",logger,Level.INFO,"Hello, World",null) HTMLLayout layout=(HTMLLayout)createLayout() layout.setLocationInfo(true); String result=layout.format(event) NDC.pop(); String src="<!DOCTYPE body [ <!ENTITY nbsp ' '>]><body>"+result+"</body>" parse(src); testGetHeader assertEquals("<!DOCTYPE",createLayout().getHeader().substring(0,9)); testGetHeaderWithLocation HTMLLayout layout=(HTMLLayout)createLayout() layout.setLocationInfo(true); assertEquals("<!DOCTYPE",layout.getHeader().substring(0,9)); testGetFooter assertEquals("</table>",createLayout().getFooter().substring(0,8)); testGetSetLocationInfo HTMLLayout layout=newHTMLLayout() assertEquals(false,layout.getLocationInfo()); layout.setLocationInfo(true); assertEquals(true,layout.getLocationInfo()); layout.setLocationInfo(false); assertEquals(false,layout.getLocationInfo()); testActivateOptions HTMLLayout layout=newHTMLLayout() layout.activateOptions(); testGetSetTitle HTMLLayout layout=newHTMLLayout() assertEquals("Log4J Log Messages",layout.getTitle()); layout.setTitle(null); assertNull(layout.getTitle()); String newTitle="A treatise on messages of log persuasion" layout.setTitle(newTitle); assertEquals(newTitle,layout.getTitle()); testFormatResize Logger logger=Logger.getLogger("org.apache.log4j.xml.HTMLLayoutTest") NDC.clear(); char[] msg=newchar[2000] for(inti=0;i<msg.length;i++){msg[i]='A';} msg[i]='A'; LoggingEvent event1=newLoggingEvent("org.apache.log4j.Logger",logger,Level.DEBUG,newString(msg),null) HTMLLayout layout=(HTMLLayout)createLayout() layout.setLocationInfo(true); String result=layout.format(event1) Exception ex=newIllegalArgumentException("'foo' is not a valid value.") LoggingEvent event2=newLoggingEvent("org.apache.log4j.Logger",logger,Level.WARN,"Hello, World",ex) result=layout.format(event2); assertEquals(Layout.LINE_SEP+"<tr>",result.substring(0,Layout.LINE_SEP.length()+4));
Class@@ProblemLevel serialVersionUID=1L testProblemCharacters String problemName="com.example.bar<>&\"'" Logger logger=Logger.getLogger(problemName) Level level=newProblemLevel(problemName) Exception ex=newIllegalArgumentException(problemName) String threadName=Thread.currentThread().getName() Thread.currentThread().setName(problemName); NDC.push(problemName); Hashtable mdcMap=MDC.getContext() if(mdcMap!=null){mdcMap.clear();} mdcMap.clear(); MDC.put(problemName,problemName); LoggingEvent event=newLoggingEvent(problemName,logger,level,problemName,ex) HTMLLayout layout=(HTMLLayout)createLayout() String result=layout.format(event) mdcMap=MDC.getContext(); if(mdcMap!=null){mdcMap.clear();} mdcMap.clear(); Thread.currentThread().setName(threadName); StringBuffer buf=newStringBuffer("<!DOCTYPE table [<!ENTITY nbsp ' '>]><table>") buf.append(result); buf.append("</table>"); String doc=buf.toString() for(inti=doc.lastIndexOf("<br>");i!=-1;i=doc.lastIndexOf("<br>",i-1)){buf.replace(i,i+4,"<br/>");} buf.replace(i,i+4,"<br/>"); parse(buf.toString());
Class@@Last test1 suite TestSuite suite=newTestSuite() suite.addTest(newLast("test1")); returnsuite;
Class@@LayoutTest contentType ignoresThrowable header footer contentType="text/plain"; ignoresThrowable=true; header=null; footer=null; contentType=expectedContentType; ignoresThrowable=expectedIgnoresThrowable; header=expectedHeader; footer=expectedFooter; testLineSep assertEquals(System.getProperty("line.separator"),Layout.LINE_SEP); testLineSepLen assertEquals(Layout.LINE_SEP.length(),Layout.LINE_SEP_LEN); createLayout returnnewMockLayout(); testGetContentType assertEquals(contentType,createLayout().getContentType()); testIgnoresThrowable assertEquals(ignoresThrowable,createLayout().ignoresThrowable()); testGetHeader assertEquals(header,createLayout().getHeader()); testGetFooter assertEquals(footer,createLayout().getFooter()); testFormat Logger logger=Logger.getLogger("org.apache.log4j.LayoutTest") LoggingEvent event=newLoggingEvent("org.apache.log4j.Logger",logger,Level.INFO,"Hello, World",null) String result=createLayout().format(event) assertEquals("Mock",result);
Class@@MockLayout format return"Mock"; activateOptions ignoresThrowable returntrue;
Class@@LevelTest testSerializeINFO int[] skip=newint[]{} SerializationTestHelper.assertSerializationEquals("witness/serialization/info.bin",Level.INFO,skip,Integer.MAX_VALUE); testDeserializeINFO Object obj=SerializationTestHelper.deserializeStream("witness/serialization/info.bin") assertTrue(objinstanceofLevel); Level info=(Level)obj assertEquals("INFO",info.toString()); if(!System.getProperty("java.version").startsWith("1.1.")){assertTrue(obj==Level.INFO);} assertTrue(obj==Level.INFO); testCustomLevelSerialization CustomLevel custom=newCustomLevel() Object obj=SerializationTestHelper.serializeClone(custom) assertTrue(objinstanceofCustomLevel); CustomLevel clone=(CustomLevel)obj assertEquals(Level.INFO.level,clone.level); assertEquals(Level.INFO.levelStr,clone.levelStr); assertEquals(Level.INFO.syslogEquivalent,clone.syslogEquivalent);
Class@@CustomLevel serialVersionUID=1L testTraceInt assertEquals(5000,Level.TRACE_INT); testTrace assertEquals("TRACE",Level.TRACE.toString()); assertEquals(5000,Level.TRACE.toInt()); assertEquals(7,Level.TRACE.getSyslogEquivalent()); testIntToTrace Level trace=Level.toLevel(5000) assertEquals("TRACE",trace.toString()); testStringToTrace Level trace=Level.toLevel("TRACE") assertEquals("TRACE",trace.toString()); testLevelExtendsPriority assertTrue(Priority.class.isAssignableFrom(Level.class)); testOFF assertTrue(Level.OFFinstanceofLevel); testFATAL assertTrue(Level.FATALinstanceofLevel); testERROR assertTrue(Level.ERRORinstanceofLevel); testWARN assertTrue(Level.WARNinstanceofLevel); testINFO assertTrue(Level.INFOinstanceofLevel); testDEBUG assertTrue(Level.DEBUGinstanceofLevel); testTRACE assertTrue(Level.TRACEinstanceofLevel); testALL assertTrue(Level.ALLinstanceofLevel); testSerialVersionUID assertEquals(3491141966387921974L,Level.serialVersionUID); testIntToAll Level level=Level.toLevel(Level.ALL_INT) assertEquals("ALL",level.toString()); testIntToFatal Level level=Level.toLevel(Level.FATAL_INT) assertEquals("FATAL",level.toString()); testIntToOff Level level=Level.toLevel(Level.OFF_INT) assertEquals("OFF",level.toString()); testToLevelUnrecognizedInt Level level=Level.toLevel(17,Level.FATAL) assertEquals("FATAL",level.toString()); testToLevelNull Level level=Level.toLevel(null,Level.FATAL) assertEquals("FATAL",level.toString()); testDotlessLowerI Level level=Level.toLevel("\u0131nfo") assertEquals("INFO",level.toString()); testDottedLowerI Locale defaultLocale=Locale.getDefault() Locale turkey=newLocale("tr","TR") Locale.setDefault(turkey); Level level=Level.toLevel("info") Locale.setDefault(defaultLocale); assertEquals("INFO",level.toString());
Class@@LogCapture appender level this.level=level; Logger root=Logger.getRootLogger() appender=newVectorAppender(); root.addAppender(appender); getMessage Vector vector=appender.getVector() String msg=null switch(vector.size()){case0:break;case1:LoggingEventevent=(LoggingEvent)vector.elementAt(0);Assert.assertNotNull(event);Assert.assertEquals(level,event.getLevel());msg=event.getRenderedMessage();break;default:Assert.fail("More than one request captured");} break; LoggingEvent event=(LoggingEvent)vector.elementAt(0) Assert.assertNotNull(event); Assert.assertEquals(level,event.getLevel()); msg=event.getRenderedMessage(); break; Assert.fail("More than one request captured"); returnmsg;
Class@@LoggerTestCase logger a1 a2 rbUS rbFR rbCH MSG="M" setUp rbUS=ResourceBundle.getBundle("L7D",newLocale("en","US")); assertNotNull(rbUS); rbFR=ResourceBundle.getBundle("L7D",newLocale("fr","FR")); assertNotNull("Got a null resource bundle.",rbFR); rbCH=ResourceBundle.getBundle("L7D",newLocale("fr","CH")); assertNotNull("Got a null resource bundle.",rbCH); tearDown BasicConfigurator.resetConfiguration(); a1=null; a2=null; testAppender1 logger=Logger.getLogger("test"); a1=newFileAppender(); a1.setName("testAppender1"); logger.addAppender(a1); Enumeration enumeration=logger.getAllAppenders() Appender aHat=(Appender)enumeration.nextElement() assertEquals(a1,aHat); testAppender2 a1=newFileAppender(); a1.setName("testAppender2.1"); a2=newFileAppender(); a2.setName("testAppender2.2"); logger=Logger.getLogger("test"); logger.addAppender(a1); logger.addAppender(a2); logger.removeAppender("testAppender2.1"); Enumeration enumeration=logger.getAllAppenders() Appender aHat=(Appender)enumeration.nextElement() assertEquals(a2,aHat); assertTrue(!enumeration.hasMoreElements()); testAdditivity1 Logger a=Logger.getLogger("a") Logger ab=Logger.getLogger("a.b") CountingAppender ca=newCountingAppender() a.addAppender(ca); assertEquals(ca.counter,0); ab.debug(MSG); assertEquals(ca.counter,1); ab.info(MSG); assertEquals(ca.counter,2); ab.warn(MSG); assertEquals(ca.counter,3); ab.error(MSG); assertEquals(ca.counter,4); testAdditivity2 Logger a=Logger.getLogger("a") Logger ab=Logger.getLogger("a.b") Logger abc=Logger.getLogger("a.b.c") Logger x=Logger.getLogger("x") CountingAppender ca1=newCountingAppender() CountingAppender ca2=newCountingAppender() a.addAppender(ca1); abc.addAppender(ca2); assertEquals(ca1.counter,0); assertEquals(ca2.counter,0); ab.debug(MSG); assertEquals(ca1.counter,1); assertEquals(ca2.counter,0); abc.debug(MSG); assertEquals(ca1.counter,2); assertEquals(ca2.counter,1); x.debug(MSG); assertEquals(ca1.counter,2); assertEquals(ca2.counter,1); testAdditivity3 Logger root=Logger.getRootLogger() Logger a=Logger.getLogger("a") Logger ab=Logger.getLogger("a.b") Logger abc=Logger.getLogger("a.b.c") CountingAppender caRoot=newCountingAppender() CountingAppender caA=newCountingAppender() CountingAppender caABC=newCountingAppender() root.addAppender(caRoot); a.addAppender(caA); abc.addAppender(caABC); assertEquals(caRoot.counter,0); assertEquals(caA.counter,0); assertEquals(caABC.counter,0); ab.setAdditivity(false); a.debug(MSG); assertEquals(caRoot.counter,1); assertEquals(caA.counter,1); assertEquals(caABC.counter,0); ab.debug(MSG); assertEquals(caRoot.counter,1); assertEquals(caA.counter,1); assertEquals(caABC.counter,0); abc.debug(MSG); assertEquals(caRoot.counter,1); assertEquals(caA.counter,1); assertEquals(caABC.counter,1); testDisable1 CountingAppender caRoot=newCountingAppender() Logger root=Logger.getRootLogger() root.addAppender(caRoot); LoggerRepository h=LogManager.getLoggerRepository() h.setThreshold((Level)Level.INFO); assertEquals(caRoot.counter,0); root.debug(MSG); assertEquals(caRoot.counter,0); root.info(MSG); assertEquals(caRoot.counter,1); root.log(Level.WARN,MSG); assertEquals(caRoot.counter,2); root.warn(MSG); assertEquals(caRoot.counter,3); h.setThreshold((Level)Level.WARN); root.debug(MSG); assertEquals(caRoot.counter,3); root.info(MSG); assertEquals(caRoot.counter,3); root.log(Level.WARN,MSG); assertEquals(caRoot.counter,4); root.error(MSG); assertEquals(caRoot.counter,5); root.log(Level.ERROR,MSG); assertEquals(caRoot.counter,6); h.setThreshold(Level.OFF); root.debug(MSG); assertEquals(caRoot.counter,6); root.info(MSG); assertEquals(caRoot.counter,6); root.log(Level.WARN,MSG); assertEquals(caRoot.counter,6); root.error(MSG); assertEquals(caRoot.counter,6); root.log(Level.FATAL,MSG); assertEquals(caRoot.counter,6); root.log(Level.FATAL,MSG); assertEquals(caRoot.counter,6); h.setThreshold(Level.OFF); root.debug(MSG); assertEquals(caRoot.counter,6); root.info(MSG); assertEquals(caRoot.counter,6); root.log(Level.WARN,MSG); assertEquals(caRoot.counter,6); root.error(MSG); assertEquals(caRoot.counter,6); root.log(Level.ERROR,MSG); assertEquals(caRoot.counter,6); root.log(Level.FATAL,MSG); assertEquals(caRoot.counter,6); testRB1 Logger root=Logger.getRootLogger() root.setResourceBundle(rbUS); ResourceBundle t=root.getResourceBundle() assertSame(t,rbUS); Logger x=Logger.getLogger("x") Logger x_y=Logger.getLogger("x.y") Logger x_y_z=Logger.getLogger("x.y.z") t=x.getResourceBundle(); assertSame(t,rbUS); t=x_y.getResourceBundle(); assertSame(t,rbUS); t=x_y_z.getResourceBundle(); assertSame(t,rbUS); testRB2 Logger root=Logger.getRootLogger() root.setResourceBundle(rbUS); ResourceBundle t=root.getResourceBundle() assertSame(t,rbUS); Logger x=Logger.getLogger("x") Logger x_y=Logger.getLogger("x.y") Logger x_y_z=Logger.getLogger("x.y.z") x_y.setResourceBundle(rbFR); t=x.getResourceBundle(); assertSame(t,rbUS); t=x_y.getResourceBundle(); assertSame(t,rbFR); t=x_y_z.getResourceBundle(); assertSame(t,rbFR); testRB3 Logger root=Logger.getRootLogger() root.setResourceBundle(rbUS); ResourceBundle t=root.getResourceBundle() assertSame(t,rbUS); Logger x=Logger.getLogger("x") Logger x_y=Logger.getLogger("x.y") Logger x_y_z=Logger.getLogger("x.y.z") x_y.setResourceBundle(rbFR); x_y_z.setResourceBundle(rbCH); t=x.getResourceBundle(); assertSame(t,rbUS); t=x_y.getResourceBundle(); assertSame(t,rbFR); t=x_y_z.getResourceBundle(); assertSame(t,rbCH); testExists Logger a=Logger.getLogger("a") Logger a_b=Logger.getLogger("a.b") Logger a_b_c=Logger.getLogger("a.b.c") Logger t t=LogManager.exists("xx"); assertNull(t); t=LogManager.exists("a"); assertSame(a,t); t=LogManager.exists("a.b"); assertSame(a_b,t); t=LogManager.exists("a.b.c"); assertSame(a_b_c,t); testHierarchy1 Hierarchy h=newHierarchy(newRootLogger((Level)Level.ERROR)) Logger a0=h.getLogger("a") assertEquals("a",a0.getName()); assertNull(a0.getLevel()); assertSame(Level.ERROR,a0.getEffectiveLevel()); Logger a1=h.getLogger("a") assertSame(a0,a1); testTrace VectorAppender appender=newVectorAppender() appender.activateOptions(); Logger root=Logger.getRootLogger() root.addAppender(appender); root.setLevel(Level.INFO); Logger tracer=Logger.getLogger("com.example.Tracer") tracer.setLevel(Level.TRACE); tracer.trace("Message 1"); root.trace("Discarded Message"); root.trace("Discarded Message"); Vector msgs=appender.getVector() assertEquals(1,msgs.size()); LoggingEvent event=(LoggingEvent)msgs.elementAt(0) assertEquals(Level.TRACE,event.getLevel()); assertEquals("Message 1",event.getMessage()); testTraceWithException VectorAppender appender=newVectorAppender() appender.activateOptions(); Logger root=Logger.getRootLogger() root.addAppender(appender); root.setLevel(Level.INFO); Logger tracer=Logger.getLogger("com.example.Tracer") tracer.setLevel(Level.TRACE); NullPointerException ex=newNullPointerException() tracer.trace("Message 1",ex); root.trace("Discarded Message",ex); root.trace("Discarded Message",ex); Vector msgs=appender.getVector() assertEquals(1,msgs.size()); LoggingEvent event=(LoggingEvent)msgs.elementAt(0) assertEquals(Level.TRACE,event.getLevel()); assertEquals("Message 1",event.getMessage()); testIsTraceEnabled VectorAppender appender=newVectorAppender() appender.activateOptions(); Logger root=Logger.getRootLogger() root.addAppender(appender); root.setLevel(Level.INFO); Logger tracer=Logger.getLogger("com.example.Tracer") tracer.setLevel(Level.TRACE); assertTrue(tracer.isTraceEnabled()); assertFalse(root.isTraceEnabled());
Class@@CountingHierarchyEventListener addEventCount removeEventCount addEventCount=removeEventCount=0; addAppenderEvent addEventCount++; removeAppenderEvent removeEventCount++; getAddEventCount returnaddEventCount; getRemoveEventCount returnremoveEventCount; testAppenderEvent1 CountingHierarchyEventListener listener=newCountingHierarchyEventListener() LogManager.getLoggerRepository().addHierarchyEventListener(listener); CountingAppender appender=newCountingAppender() Logger root=Logger.getRootLogger() root.addAppender(appender); assertEquals(1,listener.getAddEventCount()); assertEquals(0,listener.getRemoveEventCount()); root.removeAppender(appender); assertEquals(1,listener.getAddEventCount()); assertEquals(1,listener.getRemoveEventCount()); testAppenderEvent2 CountingHierarchyEventListener listener=newCountingHierarchyEventListener() LogManager.getLoggerRepository().addHierarchyEventListener(listener); CountingAppender appender=newCountingAppender() appender.setName("A1"); Logger root=Logger.getRootLogger() root.addAppender(appender); assertEquals(1,listener.getAddEventCount()); assertEquals(0,listener.getRemoveEventCount()); root.removeAppender(appender.getName()); assertEquals(1,listener.getAddEventCount()); assertEquals(1,listener.getRemoveEventCount()); testAppenderEvent3 CountingHierarchyEventListener listener=newCountingHierarchyEventListener() LogManager.getLoggerRepository().addHierarchyEventListener(listener); CountingAppender appender=newCountingAppender() Logger root=Logger.getRootLogger() root.addAppender(appender); assertEquals(1,listener.getAddEventCount()); assertEquals(0,listener.getRemoveEventCount()); root.removeAllAppenders(); assertEquals(1,listener.getAddEventCount()); assertEquals(1,listener.getRemoveEventCount()); testAppenderEvent4 CountingHierarchyEventListener listener=newCountingHierarchyEventListener() LogManager.getLoggerRepository().addHierarchyEventListener(listener); CountingAppender appender=newCountingAppender() Logger root=Logger.getRootLogger() root.addAppender(appender); assertEquals(1,listener.getAddEventCount()); assertEquals(0,listener.getRemoveEventCount()); LogManager.resetConfiguration(); assertEquals(1,listener.getAddEventCount()); assertEquals(1,listener.getRemoveEventCount());
Class@@CountingAppender counter counter=0; close append counter++; requiresLayout returntrue;
Class@@LogManagerTest testDefaultConfigurationFile assertEquals("log4j.properties",LogManager.DEFAULT_CONFIGURATION_FILE); testDefaultXmlConfigurationFile assertEquals("log4j.xml",LogManager.DEFAULT_XML_CONFIGURATION_FILE); testDefaultConfigurationKey assertEquals("log4j.configuration",LogManager.DEFAULT_CONFIGURATION_KEY); testConfiguratorClassKey assertEquals("log4j.configuratorClass",LogManager.CONFIGURATOR_CLASS_KEY); testDefaultInitOverrideKey assertEquals("log4j.defaultInitOverride",LogManager.DEFAULT_INIT_OVERRIDE_KEY);
Class@@MDCOrderFilter patterns=newString[]{"{key2,va12}{key1,va11}","{key2,value2}{key1,value1}"} replacements=newString[]{"{key1,va11}{key2,va12}","{key1,value1}{key2,value2}"} filter if(in==null){returnnull;} returnnull; for(inti=0;i<patterns.length;i++){intipos=in.indexOf(patterns[i]);if(ipos>=1){returnin.substring(0,ipos)+replacements[i]+in.substring(ipos+patterns[i].length());}} int ipos=in.indexOf(patterns[i]) if(ipos>=1){returnin.substring(0,ipos)+replacements[i]+in.substring(ipos+patterns[i].length());} returnin.substring(0,ipos)+replacements[i]+in.substring(ipos+patterns[i].length()); returnin;
Class@@MDCTestCase setUp MDC.clear(); tearDown MDC.clear(); testPut MDC.put("key","some value"); assertEquals("some value",MDC.get("key")); assertEquals(1,MDC.getContext().size()); testRemoveLastKey MDC.put("key","some value"); MDC.remove("key"); checkThreadLocalsForLeaks(); checkThreadLocalsForLeaks Field threadLocalsField=Thread.class.getDeclaredField("threadLocals") threadLocalsField.setAccessible(true); Field inheritableThreadLocalsField=Thread.class.getDeclaredField("inheritableThreadLocals") inheritableThreadLocalsField.setAccessible(true); Class tlmClass=Class.forName("java.lang.ThreadLocal$ThreadLocalMap") Field tableField=tlmClass.getDeclaredField("table") tableField.setAccessible(true); Thread thread=Thread.currentThread() Object threadLocalMap threadLocalMap=threadLocalsField.get(thread); checkThreadLocalMapForLeaks(threadLocalMap,tableField); threadLocalMap=inheritableThreadLocalsField.get(thread); checkThreadLocalMapForLeaks(threadLocalMap,tableField); checkThreadLocalMapForLeaks if(map!=null){Object[]table=(Object[])internalTableField.get(map);if(table!=null){for(intj=0;j<table.length;j++){if(table[j]!=null){Objectkey=((Reference)table[j]).get();StringkeyClassName=key.getClass().getName();if(key.getClass()==org.apache.log4j.helpers.ThreadLocalMap.class){fail("Found a ThreadLocal with key of type ["+keyClassName+"]");}}}}} Object[] table=(Object[])internalTableField.get(map) if(table!=null){for(intj=0;j<table.length;j++){if(table[j]!=null){Objectkey=((Reference)table[j]).get();StringkeyClassName=key.getClass().getName();if(key.getClass()==org.apache.log4j.helpers.ThreadLocalMap.class){fail("Found a ThreadLocal with key of type ["+keyClassName+"]");}}}} for(intj=0;j<table.length;j++){if(table[j]!=null){Objectkey=((Reference)table[j]).get();StringkeyClassName=key.getClass().getName();if(key.getClass()==org.apache.log4j.helpers.ThreadLocalMap.class){fail("Found a ThreadLocal with key of type ["+keyClassName+"]");}}} if(table[j]!=null){Objectkey=((Reference)table[j]).get();StringkeyClassName=key.getClass().getName();if(key.getClass()==org.apache.log4j.helpers.ThreadLocalMap.class){fail("Found a ThreadLocal with key of type ["+keyClassName+"]");}} Object key=((Reference)table[j]).get() String keyClassName=key.getClass().getName() if(key.getClass()==org.apache.log4j.helpers.ThreadLocalMap.class){fail("Found a ThreadLocal with key of type ["+keyClassName+"]");} fail("Found a ThreadLocal with key of type ["+keyClassName+"]");
Class@@MinimumTestCase FILTERED="output/filtered" EXCEPTION1="java.lang.Exception: Just testing" EXCEPTION2="\\s*at .*\\(.*\\)" EXCEPTION3="\\s*at .*\\(Native Method\\)" EXCEPTION4="\\s*at .*\\(.*Compiled Code\\)" EXCEPTION5="\\s*at .*\\(.*libgcj.*\\)" TTCC_PAT=Filter.ABSOLUTE_DATE_AND_TIME_PAT+" \\[main]\\ (TRACE|DEBUG|INFO|WARN|ERROR|FATAL) .* - Message \\d{1,2}" TTCC2_PAT=Filter.ABSOLUTE_DATE_AND_TIME_PAT+" \\[main]\\ (TRACE|DEBUG|INFO|WARN|ERROR|FATAL) .* - Messages should bear numbers 0 through 29\\." root logger setUp root=Logger.getRootLogger(); root.removeAllAppenders(); tearDown root.getLoggerRepository().resetConfiguration(); simple Layout layout=newSimpleLayout() Appender appender=newFileAppender(layout,"output/simple",false) root.addAppender(appender); common(); Transformer.transform("output/simple",FILTERED,newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/simple")); ttcc Layout layout=newTTCCLayout(AbsoluteTimeDateFormat.DATE_AND_TIME_DATE_FORMAT) Appender appender=newFileAppender(layout,"output/ttcc",false) root.addAppender(appender); String oldName=Thread.currentThread().getName() Thread.currentThread().setName("main"); common(); Thread.currentThread().setName(oldName); ControlFilter cf1=newControlFilter(newString[]{TTCC_PAT,TTCC2_PAT,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform("output/ttcc",FILTERED,newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/ttcc")); common int i=0 Logger ERR=Logger.getLogger("ERR") ERR.setLevel(Level.ERROR); Logger INF=Logger.getLogger("INF") INF.setLevel(Level.INFO); Logger INF_ERR=Logger.getLogger("INF.ERR") INF_ERR.setLevel(Level.ERROR); Logger DEB=Logger.getLogger("DEB") DEB.setLevel(Level.DEBUG); Logger TRC=Logger.getLogger("TRC") TRC.setLevel(Level.TRACE); Logger INF_UNDEF=Logger.getLogger("INF.UNDEF") Logger INF_ERR_UNDEF=Logger.getLogger("INF.ERR.UNDEF") Logger UNDEF=Logger.getLogger("UNDEF") ERR.log(Level.FATAL,"Message "+i); i++; ERR.error("Message "+i); i++; INF.log(Level.FATAL,"Message "+i); i++; INF.error("Message "+i); i++; INF.warn("Message "+i); i++; INF.info("Message "+i); i++; INF_UNDEF.log(Level.FATAL,"Message "+i); i++; INF_UNDEF.error("Message "+i); i++; INF_UNDEF.warn("Message "+i); i++; INF_UNDEF.info("Message "+i); i++; INF_ERR.log(Level.FATAL,"Message "+i); i++; INF_ERR.error("Message "+i); i++; INF_ERR_UNDEF.log(Level.FATAL,"Message "+i); i++; INF_ERR_UNDEF.error("Message "+i); i++; DEB.log(Level.FATAL,"Message "+i); i++; DEB.error("Message "+i); i++; DEB.warn("Message "+i); i++; DEB.info("Message "+i); i++; DEB.debug("Message "+i); i++; TRC.log(Level.FATAL,"Message "+i); i++; TRC.error("Message "+i); i++; TRC.warn("Message "+i); i++; TRC.info("Message "+i); i++; TRC.debug("Message "+i); i++; TRC.trace("Message "+i); i++; UNDEF.log(Level.FATAL,"Message "+i); i++; UNDEF.error("Message "+i); i++; UNDEF.warn("Message "+i); i++; UNDEF.info("Message "+i); i++; UNDEF.debug("Message "+i,newException("Just testing.")); int printCount=i i++; ERR.warn("Message "+i); i++; ERR.info("Message "+i); i++; ERR.debug("Message "+i); i++; INF.debug("Message "+i); i++; INF_UNDEF.debug("Message "+i); i++; INF_ERR.warn("Message "+i); i++; INF_ERR.info("Message "+i); i++; INF_ERR.debug("Message "+i); i++; INF_ERR_UNDEF.warn("Message "+i); i++; INF_ERR_UNDEF.info("Message "+i); i++; INF_ERR_UNDEF.debug("Message "+i); i++; UNDEF.trace("Message "+i,newException("Just testing.")); i++; INF.info("Messages should bear numbers 0 through "+printCount+"."); suite TestSuite suite=newTestSuite() suite.addTest(newMinimumTestCase("simple")); suite.addTest(newMinimumTestCase("ttcc")); returnsuite;
Class@@MyPatternLayout createPatternParser returnnewMyPatternParser(pattern==null?DEFAULT_CONVERSION_PATTERN:pattern); main Layout layout=newMyPatternLayout("[counter=%.10#] - %m%n") Logger logger=Logger.getLogger("some.cat") logger.addAppender(newConsoleAppender(layout,ConsoleAppender.SYSTEM_OUT)); logger.debug("Hello, log"); logger.info("Hello again...");
Class@@MyPatternParser counter=0 finalizeConverter if(c=='#'){addConverter(newUserDirPatternConverter(formattingInfo));currentLiteral.setLength(0);}else{super.finalizeConverter(c);} addConverter(newUserDirPatternConverter(formattingInfo)); currentLiteral.setLength(0); super.finalizeConverter(c);
Class@@UserDirPatternConverter convert returnString.valueOf(++counter);
Class@@ShortSocketServer cat=Logger.getLogger(ShortSocketServer.class) main int totalTests=0 String prefix=null if(args.length==2){totalTests=Integer.parseInt(args[0]);prefix=args[1];}else{usage("Wrong number of arguments.");} totalTests=Integer.parseInt(args[0]); prefix=args[1]; usage("Wrong number of arguments."); LogLog.debug("Listening on port "+SocketServerTestCase.PORT); ServerSocket serverSocket=newServerSocket(SocketServerTestCase.PORT) MDC.put("hostID","shortSocketServer"); for(inti=1;i<=totalTests;i++){PropertyConfigurator.configure(prefix+i+".properties");LogLog.debug("Waiting to accept a new client.");Socketsocket=serverSocket.accept();LogLog.debug("Connected to client at "+socket.getInetAddress());LogLog.debug("Starting new socket node.");SocketNodesn=newSocketNode(socket,LogManager.getLoggerRepository());Threadt=newThread(sn);t.start();t.join();} PropertyConfigurator.configure(prefix+i+".properties"); LogLog.debug("Waiting to accept a new client."); Socket socket=serverSocket.accept() LogLog.debug("Connected to client at "+socket.getInetAddress()); LogLog.debug("Starting new socket node."); SocketNode sn=newSocketNode(socket,LogManager.getLoggerRepository()) Thread t=newThread(sn) t.start(); t.join(); usage System.err.println(msg); System.err.println("Usage: java "+ShortSocketServer.class.getName()+" totalTests configFilePrefix"); System.exit(1);
Class@@SMTPAppenderTest tearDown LogManager.resetConfiguration();
Class@@MockTriggeringEventEvaluator isTriggeringEvent returntrue; testTrigger DOMConfigurator.configure("input/xml/smtpAppender1.xml"); SMTPAppender appender=(SMTPAppender)Logger.getRootLogger().getAppender("A1") TriggeringEventEvaluator evaluator=appender.getEvaluator() assertTrue(evaluatorinstanceofMockTriggeringEventEvaluator);
Class@@SocketAppenderTest setUp DOMConfigurator.configure("input/xml/SocketAppenderTestConfig.xml"); logger=Logger.getLogger(SocketAppenderTest.class); secondary=(LastOnlyAppender)Logger.getLogger("org.apache.log4j.net.SocketAppenderTestDummy").getAppender("lastOnly"); tearDown testFallbackErrorHandlerWhenStarting String msg="testFallbackErrorHandlerWhenStarting" logger.debug(msg); assertEquals("SocketAppender with FallbackErrorHandler",msg,secondary.getLastMessage()); logger secondary
Class@@LastOnlyAppender append this.lastEvent=event; requiresLayout returnfalse; close this.closed=true; getLastMessage if(this.lastEvent!=null)returnthis.lastEvent.getMessage().toString();elsereturn""; lastEvent
Class@@SocketServerTestCase TEMP="output/temp" FILTERED="output/filtered" PAT1="^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL|LETHAL) T1 \\[main]\\ "+".* Message \\d{1,2}" PAT2="^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL|LETHAL) T2 \\[main]\\ "+"\\? \\(\\?:\\?\\) Message \\d{1,2}" PAT3="^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL|LETHAL) T3 \\[main]\\ "+"org.apache.log4j.net.SocketServerTestCase "+"\\(SocketServerTestCase.java:\\d{3}\\) Message \\d{1,2}" PAT4="^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL|LETHAL) some T4 MDC-TEST4 \\[main]\\"+" (root|SocketServerTestCase) - Message \\d{1,2}" PAT5="^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL|LETHAL) some5 T5 MDC-TEST5 \\[main]\\"+" (root|SocketServerTestCase) - Message \\d{1,2}" PAT6="^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL|LETHAL) some6 T6 client-test6 MDC-TEST6"+" \\[main]\\ (root|SocketServerTestCase) - Message \\d{1,2}" PAT7="^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL|LETHAL) some7 T7 client-test7 MDC-TEST7"+" \\[main]\\ (root|SocketServerTestCase) - Message \\d{1,2}" PAT8="^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL|LETHAL) some8 T8 shortSocketServer"+" MDC-TEST8 \\[main]\\ (root|SocketServerTestCase) - Message \\d{1,2}" EXCEPTION1="java.lang.Exception: Just testing" EXCEPTION2="\\s*at .*\\(.*\\)" EXCEPTION3="\\s*at .*\\(Native Method\\)" EXCEPTION4="\\s*at .*\\(.*Compiled Code\\)" EXCEPTION5="\\s*at .*\\(.*libgcj.*\\)" logger=Logger.getLogger(SocketServerTestCase.class) PORT=12345 rootLogger=Logger.getRootLogger() socketAppender setUp System.out.println("Setting up test case."); tearDown System.out.println("Tearing down test case."); socketAppender=null; rootLogger.removeAllAppenders(); test1 socketAppender=newSocketAppender("localhost",PORT); rootLogger.addAppender(socketAppender); common("T1","key1","MDC-TEST1"); delay(1); ControlFilter cf=newControlFilter(newString[]{PAT1,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/socketServer.1")); test2 socketAppender=newSocketAppender("localhost",PORT); rootLogger.addAppender(socketAppender); common("T2","key2","MDC-TEST2"); delay(1); ControlFilter cf=newControlFilter(newString[]{PAT2,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/socketServer.2")); test3 socketAppender=newSocketAppender("localhost",PORT); socketAppender.setLocationInfo(true); rootLogger.addAppender(socketAppender); common("T3","key3","MDC-TEST3"); delay(1); ControlFilter cf=newControlFilter(newString[]{PAT3,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/socketServer.3")); test4 socketAppender=newSocketAppender("localhost",PORT); socketAppender.setLocationInfo(true); rootLogger.addAppender(socketAppender); NDC.push("some"); common("T4","key4","MDC-TEST4"); NDC.pop(); delay(1); if(!System.getProperty("java.version").startsWith("1.1.")){ControlFiltercf=newControlFilter(newString[]{PAT4,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5});Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()});assertTrue(Compare.compare(FILTERED,"witness/socketServer.4"));} ControlFilter cf=newControlFilter(newString[]{PAT4,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/socketServer.4")); test5 socketAppender=newSocketAppender("localhost",PORT); socketAppender.setLocationInfo(true); AsyncAppender asyncAppender=newAsyncAppender() asyncAppender.setLocationInfo(true); asyncAppender.addAppender(socketAppender); rootLogger.addAppender(asyncAppender); NDC.push("some5"); common("T5","key5","MDC-TEST5"); NDC.pop(); delay(2); if(!System.getProperty("java.version").startsWith("1.1.")){ControlFiltercf=newControlFilter(newString[]{PAT5,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5});Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()});assertTrue(Compare.compare(FILTERED,"witness/socketServer.5"));} ControlFilter cf=newControlFilter(newString[]{PAT5,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/socketServer.5")); test6 socketAppender=newSocketAppender("localhost",PORT); socketAppender.setLocationInfo(true); AsyncAppender asyncAppender=newAsyncAppender() asyncAppender.setLocationInfo(true); asyncAppender.addAppender(socketAppender); rootLogger.addAppender(asyncAppender); NDC.push("some6"); MDC.put("hostID","client-test6"); common("T6","key6","MDC-TEST6"); NDC.pop(); MDC.remove("hostID"); delay(2); if(!System.getProperty("java.version").startsWith("1.1.")){ControlFiltercf=newControlFilter(newString[]{PAT6,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5});Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()});assertTrue(Compare.compare(FILTERED,"witness/socketServer.6"));} ControlFilter cf=newControlFilter(newString[]{PAT6,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/socketServer.6")); test7 socketAppender=newSocketAppender("localhost",PORT); socketAppender.setLocationInfo(true); rootLogger.addAppender(socketAppender); NDC.push("some7"); MDC.put("hostID","client-test7"); common("T7","key7","MDC-TEST7"); NDC.pop(); MDC.remove("hostID"); delay(2); if(!System.getProperty("java.version").startsWith("1.1.")){ControlFiltercf=newControlFilter(newString[]{PAT7,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5});Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()});assertTrue(Compare.compare(FILTERED,"witness/socketServer.7"));} ControlFilter cf=newControlFilter(newString[]{PAT7,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/socketServer.7")); test8 socketAppender=newSocketAppender("localhost",PORT); socketAppender.setLocationInfo(true); rootLogger.addAppender(socketAppender); NDC.push("some8"); if(System.getProperty("java.vendor").indexOf("Apache")!=-1){MDC.put("hostID","shortSocketServer");} MDC.put("hostID","shortSocketServer"); common("T8","key8","MDC-TEST8"); NDC.pop(); delay(2); if(!System.getProperty("java.version").startsWith("1.1.")){ControlFiltercf=newControlFilter(newString[]{PAT8,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5});Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()});assertTrue(Compare.compare(FILTERED,"witness/socketServer.8"));} ControlFilter cf=newControlFilter(newString[]{PAT8,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/socketServer.8")); common String oldThreadName=Thread.currentThread().getName() Thread.currentThread().setName("main"); int i=-1 NDC.push(dc); MDC.put(key,o); Logger root=Logger.getRootLogger() logger.setLevel(Level.DEBUG); rootLogger.setLevel(Level.DEBUG); logger.log(XLevel.TRACE,"Message "+++i); logger.setLevel(Level.TRACE); rootLogger.setLevel(Level.TRACE); logger.trace("Message "+++i); root.trace("Message "+++i); logger.debug("Message "+++i); root.debug("Message "+++i); logger.info("Message "+++i); logger.warn("Message "+++i); logger.log(XLevel.LETHAL,"Message "+++i); Exception e=newException("Just testing") logger.debug("Message "+++i,e); root.error("Message "+++i,e); NDC.pop(); MDC.remove(key); Thread.currentThread().setName(oldThreadName); delay try{Thread.sleep(secs*1000);}catch(Exceptione){} Thread.sleep(secs*1000); suite TestSuite suite=newTestSuite() suite.addTest(newSocketServerTestCase("test1")); suite.addTest(newSocketServerTestCase("test2")); suite.addTest(newSocketServerTestCase("test3")); suite.addTest(newSocketServerTestCase("test4")); suite.addTest(newSocketServerTestCase("test5")); suite.addTest(newSocketServerTestCase("test6")); suite.addTest(newSocketServerTestCase("test7")); suite.addTest(newSocketServerTestCase("test8")); returnsuite;
Class@@SyslogAppenderTest tearDown LogManager.resetConfiguration(); testDefaultConstructor SyslogAppender appender=newSyslogAppender() assertEquals("user",appender.getFacility()); assertEquals(false,appender.getFacilityPrinting()); assertNull(appender.getLayout()); assertNull(appender.getSyslogHost()); assertTrue(appender.requiresLayout()); testTwoParamConstructor Layout layout=newPatternLayout() SyslogAppender appender=newSyslogAppender(layout,24) assertEquals("daemon",appender.getFacility()); assertEquals(false,appender.getFacilityPrinting()); assertEquals(layout,appender.getLayout()); assertNull(appender.getSyslogHost()); assertTrue(appender.requiresLayout()); testTwoParamConstructorBadFacility Layout layout=newPatternLayout() SyslogAppender appender=newSyslogAppender(layout,25) assertEquals("user",appender.getFacility()); assertEquals(false,appender.getFacilityPrinting()); assertEquals(layout,appender.getLayout()); assertNull(appender.getSyslogHost()); assertTrue(appender.requiresLayout()); testThreeParamConstructor Layout layout=newPatternLayout() SyslogAppender appender=newSyslogAppender(layout,"syslog.example.org",24) assertEquals("daemon",appender.getFacility()); assertEquals(false,appender.getFacilityPrinting()); assertEquals(layout,appender.getLayout()); assertEquals("syslog.example.org",appender.getSyslogHost()); assertTrue(appender.requiresLayout()); testGetFacilityString String expected="kern user mail daemon auth syslog lpr news "+"uucp cron authpriv ftp local0 local1 local2 local3 "+"local4 local5 local6 local7 " StringBuffer actual=newStringBuffer() for(inti=0;i<=11;i++){actual.append(SyslogAppender.getFacilityString(i<<3));actual.append(' ');} actual.append(SyslogAppender.getFacilityString(i<<3)); actual.append(' '); for(inti=16;i<=23;i++){actual.append(SyslogAppender.getFacilityString(i<<3));actual.append(' ');} actual.append(SyslogAppender.getFacilityString(i<<3)); actual.append(' '); assertEquals(expected,actual.toString()); testGetFacilityStringUnexpected assertNull(SyslogAppender.getFacilityString(1)); assertNull(SyslogAppender.getFacilityString(12<<3)); testGetFacilityBogus assertEquals(-1,SyslogAppender.getFacility("bogus")); testGetFacilityNull assertEquals(-1,SyslogAppender.getFacility(null)); testGetFacilitySystemNames String[] names=newString[]{"kErn","usEr","MaIL","daemOn","auTh","syslOg","lPr","newS","Uucp","croN","authprIv","ftP"} for(inti=0;i<=11;i++){assertEquals(i<<3,SyslogAppender.getFacility(names[i]));} assertEquals(i<<3,SyslogAppender.getFacility(names[i])); testGetFacilityLocalNames String[] names=newString[]{"lOcal0","LOCAL1","loCal2","locAl3","locaL4","local5","LOCal6","loCAL7"} for(inti=0;i<=7;i++){assertEquals((16+i)<<3,SyslogAppender.getFacility(names[i]));} assertEquals((16+i)<<3,SyslogAppender.getFacility(names[i])); testSetFacilityPrinting SyslogAppender appender=newSyslogAppender() assertFalse(appender.getFacilityPrinting()); appender.setFacilityPrinting(true); assertTrue(appender.getFacilityPrinting()); appender.setFacilityPrinting(false); assertFalse(appender.getFacilityPrinting()); testConstants assertEquals(0<<3,SyslogAppender.LOG_KERN); assertEquals(1<<3,SyslogAppender.LOG_USER); assertEquals(2<<3,SyslogAppender.LOG_MAIL); assertEquals(3<<3,SyslogAppender.LOG_DAEMON); assertEquals(4<<3,SyslogAppender.LOG_AUTH); assertEquals(5<<3,SyslogAppender.LOG_SYSLOG); assertEquals(6<<3,SyslogAppender.LOG_LPR); assertEquals(7<<3,SyslogAppender.LOG_NEWS); assertEquals(8<<3,SyslogAppender.LOG_UUCP); assertEquals(9<<3,SyslogAppender.LOG_CRON); assertEquals(10<<3,SyslogAppender.LOG_AUTHPRIV); assertEquals(11<<3,SyslogAppender.LOG_FTP); assertEquals(16<<3,SyslogAppender.LOG_LOCAL0); assertEquals(17<<3,SyslogAppender.LOG_LOCAL1); assertEquals(18<<3,SyslogAppender.LOG_LOCAL2); assertEquals(19<<3,SyslogAppender.LOG_LOCAL3); assertEquals(20<<3,SyslogAppender.LOG_LOCAL4); assertEquals(21<<3,SyslogAppender.LOG_LOCAL5); assertEquals(22<<3,SyslogAppender.LOG_LOCAL6); assertEquals(23<<3,SyslogAppender.LOG_LOCAL7); testSetFacilityKern SyslogAppender appender=newSyslogAppender() appender.setFacility("kern"); appender.setFacility(null); assertEquals("kern",appender.getFacility()); testSetFacilityNull SyslogAppender appender=newSyslogAppender() appender.setFacility("kern"); appender.setFacility(null); assertEquals("kern",appender.getFacility()); testSetFacilityBogus SyslogAppender appender=newSyslogAppender() appender.setFacility("kern"); appender.setFacility("bogus"); assertEquals("user",appender.getFacility()); testSetFacilityAfterActivation SyslogAppender appender=newSyslogAppender() appender.setName("foo"); appender.setThreshold(Level.INFO); appender.setSyslogHost("localhost"); appender.setFacility("user"); appender.setLayout(newPatternLayout("%m%n")); VectorErrorHandler errorHandler=newVectorErrorHandler() appender.setErrorHandler(errorHandler); appender.activateOptions(); appender.setFacility("kern"); assertEquals("kern",appender.getFacility()); testAppendBelowThreshold SyslogAppender appender=newSyslogAppender() appender.setThreshold(Level.ERROR); appender.activateOptions(); Logger logger=Logger.getRootLogger() logger.addAppender(appender); logger.info("Should not be logged by SyslogAppenderTest.testAppendBelowThreshold."); testAppendNoHost SyslogAppender appender=newSyslogAppender() appender.setName("foo"); appender.setThreshold(Level.INFO); VectorErrorHandler errorHandler=newVectorErrorHandler() appender.setErrorHandler(errorHandler); appender.setLayout(newPatternLayout("%m%n")); appender.activateOptions(); Logger logger=Logger.getRootLogger() logger.addAppender(appender); logger.info("Should not be logged by SyslogAppenderTest.testAppendNoHost."); assertEquals(1,errorHandler.size()); assertEquals("No syslog host is set for SyslogAppedender named \"foo\".",errorHandler.getMessage(0)); testAppend SyslogAppender appender=newSyslogAppender() appender.setName("foo"); appender.setThreshold(Level.INFO); appender.setSyslogHost("localhost"); appender.setFacility("user"); appender.setLayout(newPatternLayout("%m%n")); VectorErrorHandler errorHandler=newVectorErrorHandler() appender.setErrorHandler(errorHandler); appender.activateOptions(); AsyncAppender asyncAppender=newAsyncAppender() asyncAppender.addAppender(appender); asyncAppender.activateOptions(); Logger logger=Logger.getRootLogger() logger.addAppender(asyncAppender); Exception e=newException("Expected exception from SyslogAppenderTest.testAppend") logger.info("Expected message from log4j unit test SyslogAppenderTest.testAppend.",e); assertEquals(0,errorHandler.size()); testIPv6 SyslogAppender appender=newSyslogAppender() appender.setSyslogHost("::1"); testIPv6InBrackets SyslogAppender appender=newSyslogAppender() appender.setSyslogHost("[::1]"); testIPv6AndPort SyslogAppender appender=newSyslogAppender() appender.setSyslogHost("[::1]:1514"); testHostNameAndPort SyslogAppender appender=newSyslogAppender() appender.setSyslogHost("localhost:1514"); testIPv4AndPort SyslogAppender appender=newSyslogAppender() appender.setSyslogHost("127.0.0.1:1514"); log DatagramSocket ds=newDatagramSocket() ds.setSoTimeout(2000); SyslogAppender appender=newSyslogAppender() appender.setSyslogHost("localhost:"+ds.getLocalPort()); appender.setName("name"); appender.setHeader(header); PatternLayout pl=newPatternLayout("%m") appender.setLayout(pl); appender.activateOptions(); Logger l=Logger.getRootLogger() l.addAppender(appender); if(ex==null){l.info(msg);}else{l.error(msg,ex);} l.info(msg); l.error(msg,ex); appender.close(); String[] retval=newString[packets] byte[] buf=newbyte[1000] for(inti=0;i<packets;i++){DatagramPacketp=newDatagramPacket(buf,0,buf.length);ds.receive(p);retval[i]=newString(p.getData(),0,p.getLength());} DatagramPacket p=newDatagramPacket(buf,0,buf.length) ds.receive(p); retval[i]=newString(p.getData(),0,p.getLength()); ds.close(); returnretval; testActualLogging String s=log(false,"greetings",null,1)[0] StringTokenizer st=newStringTokenizer(s,"<>() ") assertEquals("14",st.nextToken()); assertEquals("greetings",st.nextToken());
Class@@MishandledException serialVersionUID=1L printStackTrace w.println("Mishandled stack trace follows:"); w.println(""); w.println("No tab here"); w.println("\ttab here"); w.println("\t"); testBadTabbing String[] s=log(false,"greetings",newMishandledException(),6) StringTokenizer st=newStringTokenizer(s[0],"<>() ") assertEquals("11",st.nextToken()); assertEquals("greetings",st.nextToken()); assertEquals("<11>Mishandled stack trace follows:",s[1]); assertEquals("<11>",s[2]); assertEquals("<11>No tab here",s[3]); assertEquals("<11>"+SyslogAppender.TAB+"tab here",s[4]); assertEquals("<11>"+SyslogAppender.TAB,s[5]); testHeaderLogging Date preDate=newDate() String s=log(true,"greetings",null,1)[0] Date postDate=newDate() assertEquals("<14>",s.substring(0,4)); String syslogDateStr=s.substring(4,20) SimpleDateFormat fmt=newSimpleDateFormat("MMM dd HH:mm:ss ",Locale.ENGLISH) Date syslogDate=fmt.parse(syslogDateStr) Calendar cal=Calendar.getInstance(Locale.ENGLISH) cal.setTime(syslogDate); int syslogMonth=cal.get(Calendar.MONTH) int syslogDay=cal.get(Calendar.DATE) if(syslogDay<10){assertEquals(' ',syslogDateStr.charAt(4));} assertEquals(' ',syslogDateStr.charAt(4)); cal.setTime(preDate); int preMonth=cal.get(Calendar.MONTH) cal.set(Calendar.MILLISECOND,0); preDate=cal.getTime(); int syslogYear if(preMonth==syslogMonth){syslogYear=cal.get(Calendar.YEAR);}else{cal.setTime(postDate);syslogYear=cal.get(Calendar.YEAR);} syslogYear=cal.get(Calendar.YEAR); cal.setTime(postDate); syslogYear=cal.get(Calendar.YEAR); cal.setTime(syslogDate); cal.set(Calendar.YEAR,syslogYear); syslogDate=cal.getTime(); assertTrue(syslogDate.compareTo(preDate)>=0); assertTrue(syslogDate.compareTo(postDate)<=0); testLayoutHeader DatagramSocket ds=newDatagramSocket() ds.setSoTimeout(2000); SyslogAppender appender=newSyslogAppender() appender.setSyslogHost("localhost:"+ds.getLocalPort()); appender.setName("name"); appender.setHeader(false); HTMLLayout pl=newHTMLLayout() appender.setLayout(pl); appender.activateOptions(); Logger l=Logger.getRootLogger() l.addAppender(appender); l.info("Hello, World"); appender.close(); String[] s=newString[3] byte[] buf=newbyte[1000] for(inti=0;i<3;i++){DatagramPacketp=newDatagramPacket(buf,0,buf.length);ds.receive(p);s[i]=newString(p.getData(),0,p.getLength());} DatagramPacket p=newDatagramPacket(buf,0,buf.length) ds.receive(p); s[i]=newString(p.getData(),0,p.getLength()); ds.close(); assertEquals("<14><!DOCTYPE",s[0].substring(0,13)); assertEquals("<14></table>",s[2].substring(0,12)); testBigPackets DatagramSocket ds=newDatagramSocket() ds.setSoTimeout(2000); SyslogAppender appender=newSyslogAppender() appender.setSyslogHost("localhost:"+ds.getLocalPort()); appender.setName("name"); appender.setHeader(false); PatternLayout pl=newPatternLayout("%m") appender.setLayout(pl); appender.activateOptions(); Logger l=Logger.getRootLogger() l.addAppender(appender); StringBuffer msgbuf=newStringBuffer() while(msgbuf.length()<8000){msgbuf.append("0123456789");} msgbuf.append("0123456789"); String msg=msgbuf.toString() l.info(msg); appender.close(); String[] s=newString[8] byte[] buf=newbyte[1200] for(inti=0;i<8;i++){DatagramPacketp=newDatagramPacket(buf,0,buf.length);ds.receive(p);assertTrue(p.getLength()<=1024);s[i]=newString(p.getData(),0,p.getLength());} DatagramPacket p=newDatagramPacket(buf,0,buf.length) ds.receive(p); assertTrue(p.getLength()<=1024); s[i]=newString(p.getData(),0,p.getLength()); ds.close(); StringBuffer rcvbuf=newStringBuffer(s[0]) rcvbuf.delete(0,4); for(inti=1;i<8;i++){rcvbuf.setLength(rcvbuf.length()-3);rcvbuf.append(s[i].substring(s[i].indexOf("...")+3));} rcvbuf.setLength(rcvbuf.length()-3); rcvbuf.append(s[i].substring(s[i].indexOf("...")+3)); assertEquals(msg.length(),rcvbuf.length()); assertEquals(msg,rcvbuf.toString());
Class@@TelnetAppenderTest port=54353 bo=newByteArrayOutputStream()
Class@@ReadThread run try{Sockets=newSocket("localhost",port);InputStreami=s.getInputStream();while(!Thread.interrupted()){intc=i.read();if(c==-1)break;bo.write(c);}s.close();}catch(IOExceptione){e.printStackTrace();} Socket s=newSocket("localhost",port) InputStream i=s.getInputStream() while(!Thread.interrupted()){intc=i.read();if(c==-1)break;bo.write(c);} int c=i.read() if(c==-1)break; bo.write(c); s.close(); e.printStackTrace(); testIt int oldActive=Thread.activeCount() TelnetAppender ta=newTelnetAppender() ta.setName("ta"); ta.setPort(port); ta.setLayout(newPatternLayout("%p - %m")); ta.activateOptions(); Logger l=Logger.getLogger("x") l.addAppender(ta); Thread t=newReadThread() t.start(); Thread.sleep(200); l.info("hi"); Thread.sleep(1000); ta.close(); Thread.sleep(200); t.interrupt(); t.join(); String s=bo.toString() assertTrue(s.endsWith("INFO - hi")); if(System.getProperty("java.vendor").indexOf("Free")==-1){assertEquals(oldActive,Thread.activeCount());} assertEquals(oldActive,Thread.activeCount());
Class@@NTEventLogAppenderTest tearDown LogManager.shutdown(); testSimple BasicConfigurator.configure(newNTEventLogAppender()); Logger logger=Logger.getLogger("org.apache.log4j.nt.NTEventLogAppenderTest") int i=0 logger.debug("Message "+i++); logger.info("Message "+i++); logger.warn("Message "+i++); logger.error("Message "+i++); logger.log(Level.FATAL,"Message "+i++); logger.debug("Message "+i++,newException("Just testing."));
Class@@ORTestCase aor bor xor yor oor nor ior cor sor setUp aor=newUTObjectRenderer("A"); bor=newUTObjectRenderer("B"); xor=newUTObjectRenderer("X"); yor=newUTObjectRenderer("Y"); oor=newUTObjectRenderer("Object"); nor=newUTObjectRenderer("Number"); ior=newUTObjectRenderer("Integer"); cor=newUTObjectRenderer("Comparable"); sor=newUTObjectRenderer("Serializable"); test1 RendererMap map=newRendererMap() ObjectRenderer dr=map.getDefaultRenderer() ObjectRenderer r=map.get(Integer.class) assertEquals(r,dr); test2 RendererMap map=newRendererMap() map.put(Integer.class,ior); ObjectRenderer r=map.get(Integer.class) assertEquals(r,ior); test3 RendererMap map=newRendererMap() map.put(Number.class,ior); ObjectRenderer r=map.get(Integer.class) assertEquals(r,ior); test4 RendererMap map=newRendererMap() map.put(Object.class,oor); ObjectRenderer r=map.get(Integer.class) assertEquals(r,oor); test5 RendererMap map=newRendererMap() map.put(Object.class,oor); map.put(Number.class,nor); map.put(Integer.class,ior); ObjectRenderer r=map.get(Integer.class) assertEquals(r,ior); test6 RendererMap map=newRendererMap() map.put(Object.class,oor); map.put(Number.class,nor); ObjectRenderer r=map.get(Integer.class) assertEquals(r,nor); test7 RendererMap map=newRendererMap() Class comparable=null try{comparable=Class.forName("java.lang.Comparable");}catch(Exceptionex){return;} comparable=Class.forName("java.lang.Comparable"); return; map.put(comparable,cor); ObjectRenderer r=map.get(Integer.class) assertEquals(r,cor); test8 RendererMap map=newRendererMap() map.put(Serializable.class,sor); ObjectRenderer r=map.get(Integer.class) assertEquals(r,sor); test9 RendererMap map=newRendererMap() map.put(Y.class,yor); ObjectRenderer r=map.get(B.class) assertEquals(r,yor); test10 RendererMap map=newRendererMap() map.put(X.class,xor); ObjectRenderer r=map.get(B.class) assertEquals(r,xor); suite TestSuite suite=newTestSuite() suite.addTest(newORTestCase("test1")); suite.addTest(newORTestCase("test2")); suite.addTest(newORTestCase("test3")); suite.addTest(newORTestCase("test4")); suite.addTest(newORTestCase("test5")); suite.addTest(newORTestCase("test6")); suite.addTest(newORTestCase("test7")); suite.addTest(newORTestCase("test8")); suite.addTest(newORTestCase("test9")); suite.addTest(newORTestCase("test10")); returnsuite;
Class@@UTObjectRenderer name this.name=name; doRender returnname; toString return("UTObjectRenderer: "+name);
Class@@A
Class@@B
Class@@CachedDateFormatTest createAbsoluteTimeDateFormat DateFormat df=newSimpleDateFormat("HH:mm:ss,SSS") df.setTimeZone(timeZone); returndf; GMT=TimeZone.getTimeZone("GMT") CHICAGO=TimeZone.getTimeZone("America/Chicago") test1 DateFormat gmtFormat=newCachedDateFormat(createAbsoluteTimeDateFormat(GMT),1000) long ticks=12601L*86400000L Date jul1=newDate(ticks) assertEquals("00:00:00,000",gmtFormat.format(jul1)); Date plus8ms=newDate(ticks+8) assertEquals("00:00:00,008",gmtFormat.format(plus8ms)); Date plus17ms=newDate(ticks+17) assertEquals("00:00:00,017",gmtFormat.format(plus17ms)); Date plus237ms=newDate(ticks+237) assertEquals("00:00:00,237",gmtFormat.format(plus237ms)); Date plus1415ms=newDate(ticks+1415) assertEquals("00:00:01,415",gmtFormat.format(plus1415ms)); test2 Date jul2=newDate(12602L*86400000L) DateFormat gmtFormat=newCachedDateFormat(createAbsoluteTimeDateFormat(GMT),1000) DateFormat chicagoFormat=newCachedDateFormat(createAbsoluteTimeDateFormat(CHICAGO),1000) assertEquals("00:00:00,000",gmtFormat.format(jul2)); assertEquals("19:00:00,000",chicagoFormat.format(jul2)); assertEquals("00:00:00,000",gmtFormat.format(jul2)); test3 DateFormat gmtFormat=newCachedDateFormat(createAbsoluteTimeDateFormat(GMT),1000) long ticks=-7L*86400000L Date jul1=newDate(ticks+8) assertEquals("00:00:00,008",gmtFormat.format(jul1)); Date plus8ms=newDate(ticks+16) assertEquals("00:00:00,016",gmtFormat.format(plus8ms)); Date plus17ms=newDate(ticks+23) assertEquals("00:00:00,023",gmtFormat.format(plus17ms)); Date plus237ms=newDate(ticks+245) assertEquals("00:00:00,245",gmtFormat.format(plus237ms)); Date plus1415ms=newDate(ticks+1423) assertEquals("00:00:01,423",gmtFormat.format(plus1415ms)); test4 SimpleDateFormat baseFormat=newSimpleDateFormat("EEE, MMM dd, HH:mm:ss.SSS z",Locale.ENGLISH) DateFormat cachedFormat=newCachedDateFormat(baseFormat,1000) long ticks=11141L*86400000L Date jul1=newDate(ticks) assertEquals(baseFormat.format(jul1),cachedFormat.format(jul1)); Date plus8ms=newDate(ticks+8) baseFormat.format(plus8ms); cachedFormat.format(plus8ms); assertEquals(baseFormat.format(plus8ms),cachedFormat.format(plus8ms)); Date plus17ms=newDate(ticks+17) assertEquals(baseFormat.format(plus17ms),cachedFormat.format(plus17ms)); Date plus237ms=newDate(ticks+237) assertEquals(baseFormat.format(plus237ms),cachedFormat.format(plus237ms)); Date plus1415ms=newDate(ticks+1415) assertEquals(baseFormat.format(plus1415ms),cachedFormat.format(plus1415ms)); test5 Locale thai=newLocale("th","TH") SimpleDateFormat baseFormat=newSimpleDateFormat("EEE, MMM dd, HH:mm:ss.SSS z",thai) DateFormat cachedFormat=newCachedDateFormat(baseFormat,1000) long ticks=11141L*86400000L String sx Date jul1=newDate(ticks) sx=cachedFormat.format(jul1); System.out.println(baseFormat.format(jul1)); System.out.println(sx); assertEquals(baseFormat.format(jul1),sx); sx=cachedFormat.format(jul1); System.out.println(baseFormat.format(jul1)); System.out.println(sx); assertEquals(baseFormat.format(jul1),sx); Date plus8ms=newDate(ticks+8) sx=cachedFormat.format(plus8ms); System.out.println(baseFormat.format(plus8ms)); System.out.println(sx); assertEquals(baseFormat.format(plus8ms),sx); Date plus17ms=newDate(ticks+17) assertEquals(baseFormat.format(plus17ms),cachedFormat.format(plus17ms)); Date plus237ms=newDate(ticks+237) assertEquals(baseFormat.format(plus237ms),cachedFormat.format(plus237ms)); Date plus1415ms=newDate(ticks+1415) assertEquals(baseFormat.format(plus1415ms),cachedFormat.format(plus1415ms)); test6 assertNotNull(newCachedDateFormat(newSimpleDateFormat(),1000).getNumberFormat()); test8 DateFormat baseFormat=newSimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS") baseFormat.setTimeZone(GMT); DateFormat cachedFormat=newCachedDateFormat(baseFormat,1000) Date jul4=newDate(12603L*86400000L) assertEquals("2004-07-04 00:00:00,000",cachedFormat.format(jul4)); cachedFormat.setTimeZone(TimeZone.getTimeZone("GMT-6")); assertEquals("2004-07-03 18:00:00,000",cachedFormat.format(jul4)); test9 DateFormat baseFormat=newSimpleDateFormat("yyyy-MMMM-dd HH:mm:ss,SS z",Locale.US) DateFormat cachedFormat=newCachedDateFormat(baseFormat,1000) TimeZone cet=TimeZone.getTimeZone("GMT+1") cachedFormat.setTimeZone(cet); Calendar c=Calendar.getInstance() c.set(2004,Calendar.DECEMBER,12,20,0); c.set(Calendar.SECOND,37); c.set(Calendar.MILLISECOND,23); c.setTimeZone(cet); String expected=baseFormat.format(c.getTime()) String s=cachedFormat.format(c.getTime()) assertEquals(expected,s); c.set(2005,Calendar.JANUARY,1,0,0); c.set(Calendar.SECOND,13); c.set(Calendar.MILLISECOND,905); expected=baseFormat.format(c.getTime()); s=cachedFormat.format(c.getTime()); assertEquals(expected,s); test10 DateFormat baseFormat=newSimpleDateFormat("MMMM SSS EEEEEE",Locale.US) DateFormat cachedFormat=newCachedDateFormat(baseFormat,1000) TimeZone cet=TimeZone.getTimeZone("GMT+1") cachedFormat.setTimeZone(cet); Calendar c=Calendar.getInstance() c.set(2004,Calendar.OCTOBER,5,20,0); c.set(Calendar.SECOND,37); c.set(Calendar.MILLISECOND,23); c.setTimeZone(cet); String expected=baseFormat.format(c.getTime()) String s=cachedFormat.format(c.getTime()) assertEquals(expected,s); c.set(2004,Calendar.NOVEMBER,1,0,0); c.set(Calendar.MILLISECOND,23); expected=baseFormat.format(c.getTime()); s=cachedFormat.format(c.getTime()); assertEquals(expected,s); c.set(Calendar.MILLISECOND,984); expected=baseFormat.format(c.getTime()); s=cachedFormat.format(c.getTime()); assertEquals(expected,s); test11 String badPattern="ss,SS0" SimpleDateFormat simpleFormat=newSimpleDateFormat(badPattern) SimpleDateFormat baseFormat=newSimpleDateFormat(badPattern) DateFormat gmtFormat=newCachedDateFormat(simpleFormat,1000) gmtFormat.setTimeZone(GMT); baseFormat.setTimeZone(GMT); long ticks=11142L*86400000L Date jul2=newDate(ticks+120) String expected=baseFormat.format(jul2) assertEquals(expected,gmtFormat.format(jul2)); jul2.setTime(ticks+87); expected=baseFormat.format(jul2); assertEquals(expected,gmtFormat.format(jul2)); test12 SimpleDateFormat df=newSimpleDateFormat("yyyy-MM-dd HH:mm:ss,SSS") long ticks=11142L*86400000L String formatted=df.format(newDate(ticks)) int millisecondStart=CachedDateFormat.findMillisecondStart(ticks,formatted,df) assertEquals(20,millisecondStart); test13 SimpleDateFormat df=newSimpleDateFormat("yyyy-MM-dd") long ticks=11142L*86400000L String formatted=df.format(newDate(ticks)) int millisecondStart=CachedDateFormat.findMillisecondStart(ticks,formatted,df) assertEquals(CachedDateFormat.NO_MILLISECONDS,millisecondStart); test14 SimpleDateFormat df=newSimpleDateFormat("HH:mm:ss,SSS") long ticks=11142L*86400000L String formatted=df.format(newDate(ticks)) int millisecondStart=CachedDateFormat.findMillisecondStart(ticks,formatted,df) assertEquals(9,millisecondStart); test15 SimpleDateFormat df=newSimpleDateFormat("HH:mm:ss,S") long ticks=11142L*86400000L String formatted=df.format(newDate(ticks)) int millisecondStart=CachedDateFormat.findMillisecondStart(ticks,formatted,df) assertEquals(CachedDateFormat.UNRECOGNIZED_MILLISECONDS,millisecondStart); test16 SimpleDateFormat df=newSimpleDateFormat("HH:mm:ss,SS") long ticks=11142L*86400000L String formatted=df.format(newDate(ticks)) int millisecondStart=CachedDateFormat.findMillisecondStart(ticks,formatted,df) assertEquals(CachedDateFormat.UNRECOGNIZED_MILLISECONDS,millisecondStart); test17 Date jul2=newDate(12602L*86400000L) String badPattern="HH:mm:ss,SSS HH:mm:ss,SSS" SimpleDateFormat simpleFormat=newSimpleDateFormat(badPattern) simpleFormat.setTimeZone(GMT); DateFormat cachedFormat=newCachedDateFormat(simpleFormat,1000) String s=cachedFormat.format(jul2) assertEquals("00:00:00,000 00:00:00,000",s); jul2.setTime(jul2.getTime()+120); assertEquals("00:00:00,120 00:00:00,120",simpleFormat.format(jul2)); s=cachedFormat.format(jul2); int maxValid=CachedDateFormat.getMaximumCacheValidity(badPattern) assertEquals(1,maxValid); xsuite TestSuite suite=newTestSuite() suite.addTest(newCachedDateFormatTest("test5")); returnsuite;
Class@@FormattingInfoTest testGetDefault FormattingInfo field=FormattingInfo.getDefault() assertNotNull(field); assertEquals(0,field.getMinLength()); assertEquals(Integer.MAX_VALUE,field.getMaxLength()); assertEquals(false,field.isLeftAligned()); testConstructor FormattingInfo field=newFormattingInfo(true,3,6) assertNotNull(field); assertEquals(3,field.getMinLength()); assertEquals(6,field.getMaxLength()); assertEquals(true,field.isLeftAligned()); testTruncate StringBuffer buf=newStringBuffer("foobar") FormattingInfo field=newFormattingInfo(true,0,3) field.format(2,buf); assertEquals("fobar",buf.toString()); testPadLeft StringBuffer buf=newStringBuffer("foobar") FormattingInfo field=newFormattingInfo(false,5,10) field.format(2,buf); assertEquals("fo obar",buf.toString()); testPadRight StringBuffer buf=newStringBuffer("foobar") FormattingInfo field=newFormattingInfo(true,5,10) field.format(2,buf); assertEquals("foobar ",buf.toString());
Class@@NameAbbreviatorTest testGetDefault NameAbbreviator abbrev=NameAbbreviator.getDefaultAbbreviator() assertNotNull(abbrev); testZero NameAbbreviator abbrev=NameAbbreviator.getAbbreviator("0") StringBuffer buf=newStringBuffer("DEBUG - ") int fieldStart=buf.length() buf.append("org.example.foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - ",buf.toString()); testBlank NameAbbreviator abbrev=NameAbbreviator.getAbbreviator("   ") NameAbbreviator defaultAbbrev=NameAbbreviator.getDefaultAbbreviator() assertTrue(abbrev==defaultAbbrev); testOne NameAbbreviator abbrev=NameAbbreviator.getAbbreviator("1") StringBuffer buf=newStringBuffer("DEBUG - ") int fieldStart=buf.length() buf.append("org.example.foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - ",buf.toString()); testBlankOne NameAbbreviator abbrev=NameAbbreviator.getAbbreviator(" 1 ") StringBuffer buf=newStringBuffer("DEBUG - ") int fieldStart=buf.length() buf.append("org.example.foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - ",buf.toString()); testTwo NameAbbreviator abbrev=NameAbbreviator.getAbbreviator("2") StringBuffer buf=newStringBuffer("DEBUG - ") int fieldStart=buf.length() buf.append("org.example.foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - foo.bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - foo.bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - bar",buf.toString()); testOneDot NameAbbreviator abbrev=NameAbbreviator.getAbbreviator("1.") StringBuffer buf=newStringBuffer("DEBUG - ") int fieldStart=buf.length() buf.append("org.example.foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - o.e.f.bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("org.example.foo."); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - o.e.f.",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - f.bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - ",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("."); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - .",buf.toString()); testOneTildeDot NameAbbreviator abbrev=NameAbbreviator.getAbbreviator("1~.") StringBuffer buf=newStringBuffer("DEBUG - ") int fieldStart=buf.length() buf.append("org.example.foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - o~.e~.f~.bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("org.example.foo."); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - o~.e~.f~.",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - f~.bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - ",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("."); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - .",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("o.e.f.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - o.e.f.bar",buf.toString()); testMulti NameAbbreviator abbrev=NameAbbreviator.getAbbreviator("1.*.2") StringBuffer buf=newStringBuffer("DEBUG - ") int fieldStart=buf.length() buf.append("org.example.foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - o.example.fo.bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("org.example.foo."); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - o.example.fo.",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - f.bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - ",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("."); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - .",buf.toString()); testMinusOne NameAbbreviator abbrev=NameAbbreviator.getAbbreviator("-1") StringBuffer buf=newStringBuffer("DEBUG - ") int fieldStart=buf.length() buf.append("org.example.foo.bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - example.foo.bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("bar"); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - bar",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - ",buf.toString()); buf.setLength(0); buf.append("DEBUG - "); fieldStart=buf.length(); buf.append("."); abbrev.abbreviate(fieldStart,buf); assertEquals("DEBUG - ",buf.toString());
Class@@Num343PatternConverter INSTANCE=newNum343PatternConverter() newInstance returnINSTANCE; format toAppendTo.append("343");
Class@@PatternParserTest logger=Logger.getLogger("org.foobar") event event=newLoggingEvent("org.apache.log4j.Logger",logger,Level.INFO,"msg 1",null); convert List converters=newArrayList() List fields=newArrayList() PatternParser.parse(pattern,converters,fields,registry,PatternParser.getPatternLayoutRules()); assertEquals(converters.size(),fields.size()); StringBuffer buf=newStringBuffer() Iterator converterIter=converters.iterator() Iterator fieldIter=fields.iterator() while(converterIter.hasNext()){intfieldStart=buf.length();((PatternConverter)converterIter.next()).format(event,buf);((FormattingInfo)fieldIter.next()).format(fieldStart,buf);} int fieldStart=buf.length() ((PatternConverter)converterIter.next()).format(event,buf); ((FormattingInfo)fieldIter.next()).format(fieldStart,buf); returnbuf.toString(); testNewWord HashMap ruleRegistry=newHashMap(5) ruleRegistry.put("z343",Num343PatternConverter.class.getName()); String result=convert("%z343",ruleRegistry,event) assertEquals("343",result); testNewWord2 HashMap ruleRegistry=newHashMap(5) ruleRegistry.put("n343",Num343PatternConverter.class.getName()); String result=convert("%n343",ruleRegistry,event) assertEquals("343",result); testBogusWord1 String result=convert("%, foobar",null,event) assertEquals("%, foobar",result); testBogusWord2 String result=convert("xyz %, foobar",null,event) assertEquals("xyz %, foobar",result); testBasic1 String result=convert("hello %-5level - %m%n",null,event) assertEquals("hello INFO  - msg 1"+Layout.LINE_SEP,result); testBasic2 String result=convert("%relative %-5level [%thread] %logger - %m%n",null,event) long expectedRelativeTime=event.timeStamp-LoggingEvent.getStartTime() assertEquals(expectedRelativeTime+" INFO  [main] "+logger.getName()+" - msg 1"+Layout.LINE_SEP,result); testMultiOption String result=convert("%d{HH:mm:ss}{GMT} %d{HH:mm:ss} %c  - %m",null,event) SimpleDateFormat dateFormat=newSimpleDateFormat("HH:mm:ss") String localTime=dateFormat.format(newDate(event.timeStamp)) dateFormat.setTimeZone(TimeZone.getTimeZone("GMT")); String utcTime=dateFormat.format(newDate(event.timeStamp)) StringBuffer buf=newStringBuffer(utcTime) buf.append(' '); buf.append(localTime); buf.append(" org.foobar  - msg 1"); assertEquals(buf.toString(),result); testBogus String result=convert("%bogus",null,event) assertEquals("%bogus",result); testMore String result=convert("%more",null,event) assertEquals("msg 1ore",result); testMalformedOption String result=convert("foo%m{yyyy.MM.dd",null,event) assertEquals("foomsg 1{yyyy.MM.dd",result); assertFactories assertTrue(rules.size()>0); Iterator iter=rules.values().iterator() Class[] factorySig=newClass[]{Class.forName("[Ljava.lang.String;")} Object[] factoryArg=newObject[]{null} while(iter.hasNext()){ClassruleClass=(Class)iter.next();Methodfactory=ruleClass.getMethod("newInstance",factorySig);Objectconverter=factory.invoke(null,factoryArg);assertTrue(converter!=null);} Class ruleClass=(Class)iter.next() Method factory=ruleClass.getMethod("newInstance",factorySig) Object converter=factory.invoke(null,factoryArg) assertTrue(converter!=null); testPatternLayoutFactories assertFactories(PatternParser.getPatternLayoutRules()); testFileNamePatternFactories assertFactories(PatternParser.getFileNamePatternRules());
Class@@PatternLayoutTest createLayout returnnewPatternLayout("[%t] %p %c - %m%n"); testFormat Logger logger=Logger.getLogger("org.apache.log4j.LayoutTest") LoggingEvent event=newLoggingEvent("org.apache.log4j.Logger",logger,Level.INFO,"Hello, World",null) PatternLayout layout=(PatternLayout)createLayout() String result=layout.format(event) StringBuffer buf=newStringBuffer(100) buf.append('['); buf.append(event.getThreadName()); buf.append("] "); buf.append(event.getLevel().toString()); buf.append(' '); buf.append(event.getLoggerName()); buf.append(" - "); buf.append(event.getMessage()); buf.append(System.getProperty("line.separator")); assertEquals(buf.toString(),result); testGetPatternFormat PatternLayout layout=(PatternLayout)createLayout() assertEquals("[%t] %p %c - %m%n",layout.getConversionPattern()); testDefaultConversionPattern assertEquals("%m%n",PatternLayout.DEFAULT_CONVERSION_PATTERN); testTTCCConversionPattern assertEquals("%r [%t] %p %c %x - %m%n",PatternLayout.TTCC_CONVERSION_PATTERN); testFormatResize Logger logger=Logger.getLogger("org.apache.log4j.xml.PatternLayoutTest") NDC.clear(); char[] msg=newchar[2000] for(inti=0;i<msg.length;i++){msg[i]='A';} msg[i]='A'; LoggingEvent event1=newLoggingEvent("org.apache.log4j.Logger",logger,Level.DEBUG,newString(msg),null) PatternLayout layout=(PatternLayout)createLayout() String result=layout.format(event1) LoggingEvent event2=newLoggingEvent("org.apache.log4j.Logger",logger,Level.WARN,"Hello, World",null) result=layout.format(event2); assertEquals("[",result.substring(0,1));
Class@@DerivedPatternLayout getBufSize returnBUF_SIZE; getMaxCapacity returnMAX_CAPACITY;
Class@@PatternLayoutTestCase TEMP="output/temp" FILTERED="output/filtered" root logger EXCEPTION1="java.lang.Exception: Just testing" EXCEPTION2="\\s*at .*\\(.*\\)" EXCEPTION3="\\s*at .*\\(Native Method\\)" EXCEPTION4="\\s*at .*\\(.*Compiled Code\\)" EXCEPTION5="\\s*at .*\\(.*libgcj.*\\)" PAT0="\\[main]\\ (TRACE|DEBUG|INFO |WARN |ERROR|FATAL) .* - Message \\d{1,2}" PAT1=Filter.ISO8601_PAT+" "+PAT0 PAT2=Filter.ABSOLUTE_DATE_AND_TIME_PAT+" "+PAT0 PAT3=Filter.ABSOLUTE_TIME_PAT+" "+PAT0 PAT4=Filter.RELATIVE_TIME_PAT+" "+PAT0 PAT5="\\[main]\\ (TRACE|DEBUG|INFO |WARN |ERROR|FATAL) .* : Message \\d{1,2}" PAT6="\\[main]\\ (TRACE|DEBUG|INFO |WARN |ERROR|FATAL) org.apache.log4j.PatternLayoutTestCase.common\\(PatternLayoutTestCase.java(:\\d{1,4})?\\): Message \\d{1,2}" PAT11a="^(TRACE|DEBUG|INFO |WARN |ERROR|FATAL) \\[main]\\ log4j.PatternLayoutTestCase: Message \\d{1,2}" PAT11b="^(TRACE|DEBUG|INFO |WARN |ERROR|FATAL) \\[main]\\ root: Message \\d{1,2}" PAT12="^\\[main]\\ (TRACE|DEBUG|INFO |WARN |ERROR|FATAL) "+"org.apache.log4j.PatternLayoutTestCase.common\\(PatternLayoutTestCase.java:\\d{3}\\): "+"Message \\d{1,2}" PAT13="^\\[main]\\ (TRACE|DEBUG|INFO |WARN |ERROR|FATAL) "+"apache.log4j.PatternLayoutTestCase.common\\(PatternLayoutTestCase.java:\\d{3}\\): "+"Message \\d{1,2}" PAT14="^(TRACE|DEBUG| INFO| WARN|ERROR|FATAL)\\ \\d{1,2}\\ *- Message \\d{1,2}" setUp root=Logger.getRootLogger(); logger=Logger.getLogger(PatternLayoutTestCase.class); tearDown root.getLoggerRepository().resetConfiguration(); test1 PropertyConfigurator.configure("input/patternLayout1.properties"); common(); Transformer.transform(TEMP,FILTERED,newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.1")); test2 PropertyConfigurator.configure("input/patternLayout2.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT1,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.2")); test3 PropertyConfigurator.configure("input/patternLayout3.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT1,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.3")); test4 PropertyConfigurator.configure("input/patternLayout4.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT2,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.4")); test5 PropertyConfigurator.configure("input/patternLayout5.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT2,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.5")); test6 PropertyConfigurator.configure("input/patternLayout6.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT3,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.6")); test7 PropertyConfigurator.configure("input/patternLayout7.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT3,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.7")); test8 PropertyConfigurator.configure("input/patternLayout8.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT4,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newRelativeTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.8")); test9 PropertyConfigurator.configure("input/patternLayout9.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT5,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.9")); test10 PropertyConfigurator.configure("input/patternLayout10.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT6,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.10")); test11 PropertyConfigurator.configure("input/patternLayout11.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT11a,PAT11b,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.11")); test12 PropertyConfigurator.configure("input/patternLayout12.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT12,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.12")); test13 PropertyConfigurator.configure("input/patternLayout13.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT13,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.13")); test14 PropertyConfigurator.configure("input/patternLayout14.properties"); common(); ControlFilter cf1=newControlFilter(newString[]{PAT14,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED,"witness/patternLayout.14")); testMDC1 PropertyConfigurator.configure("input/patternLayout.mdc.1.properties"); MDC.put("key1","va11"); MDC.put("key2","va12"); logger.debug("Hello World"); MDC.remove("key1"); MDC.remove("key2"); assertTrue(Compare.compare(TEMP,"witness/patternLayout.mdc.1")); testMDCClear PropertyConfigurator.configure("input/patternLayout.mdc.1.properties"); MDC.put("key1","va11"); MDC.put("key2","va12"); logger.debug("Hello World"); MDC.clear(); logger.debug("Hello World"); assertTrue(Compare.compare(TEMP,"witness/patternLayout.mdc.clear")); common String oldThreadName=Thread.currentThread().getName() Thread.currentThread().setName("main"); int i=-1 logger.trace("Message "+++i); root.trace("Message "+i); logger.debug("Message "+++i); root.debug("Message "+i); logger.info("Message "+++i); root.info("Message "+i); logger.warn("Message "+++i); root.warn("Message "+i); logger.error("Message "+++i); root.error("Message "+i); logger.log(Level.FATAL,"Message "+++i); root.log(Level.FATAL,"Message "+i); Exception e=newException("Just testing") logger.trace("Message "+++i,e); logger.debug("Message "+++i,e); logger.info("Message "+++i,e); logger.warn("Message "+++i,e); logger.error("Message "+++i,e); logger.log(Level.FATAL,"Message "+++i,e); Thread.currentThread().setName(oldThreadName);
Class@@PriorityTest testOffInt assertEquals(Integer.MAX_VALUE,Priority.OFF_INT); testFatalInt assertEquals(50000,Priority.FATAL_INT); testErrorInt assertEquals(40000,Priority.ERROR_INT); testWarnInt assertEquals(30000,Priority.WARN_INT); testInfoInt assertEquals(20000,Priority.INFO_INT); testDebugInt assertEquals(10000,Priority.DEBUG_INT); testAllInt assertEquals(Integer.MIN_VALUE,Priority.ALL_INT); testFatal assertTrue(Priority.FATALinstanceofLevel); testERROR assertTrue(Priority.ERRORinstanceofLevel); testWARN assertTrue(Priority.WARNinstanceofLevel); testINFO assertTrue(Priority.INFOinstanceofLevel); testDEBUG assertTrue(Priority.DEBUGinstanceofLevel); testEqualsNull assertFalse(Priority.DEBUG.equals(null)); testEqualsLevel assertTrue(Priority.DEBUG.equals(Level.DEBUG)); testGetAllPossiblePriorities Priority[] priorities=Priority.getAllPossiblePriorities() assertEquals(5,priorities.length); testToPriorityString assertTrue(Priority.toPriority("DEBUG")==Level.DEBUG); testToPriorityInt assertTrue(Priority.toPriority(Priority.DEBUG_INT)==Level.DEBUG); testToPriorityStringPriority assertTrue(Priority.toPriority("foo",Priority.DEBUG)==Priority.DEBUG); testToPriorityIntPriority assertTrue(Priority.toPriority(17,Priority.DEBUG)==Priority.DEBUG); testDotlessLowerI Priority level=Priority.toPriority("\u0131nfo") assertEquals("INFO",level.toString()); testDottedLowerI Locale defaultLocale=Locale.getDefault() Locale turkey=newLocale("tr","TR") Locale.setDefault(turkey); Priority level=Priority.toPriority("info") Locale.setDefault(defaultLocale); assertEquals("INFO",level.toString());
Class@@PropertyConfiguratorTest testBadUnicodeEscape String fileName="output/badescape.properties" FileWriter writer=newFileWriter(fileName) writer.write("log4j.rootLogger=\\uXX41"); writer.close(); PropertyConfigurator.configure(fileName); File file=newFile(fileName) assertTrue(file.delete()); assertFalse(file.exists()); testURL File file=newFile("output/unclosed.properties") FileWriter writer=newFileWriter(file) writer.write("log4j.rootLogger=debug"); writer.close(); URL url=file.toURL() PropertyConfigurator.configure(url); assertTrue(file.delete()); assertFalse(file.exists()); testURLBadEscape File file=newFile("output/urlbadescape.properties") FileWriter writer=newFileWriter(file) writer.write("log4j.rootLogger=\\uXX41"); writer.close(); URL url=file.toURL() PropertyConfigurator.configure(url); assertTrue(file.delete()); assertFalse(file.exists()); testInputStream File file=newFile("input/filter1.properties") assertTrue(file.exists()); FileInputStream inputStream=newFileInputStream(file) try{PropertyConfigurator.configure(inputStream);}finally{inputStream.close();} PropertyConfigurator.configure(inputStream); inputStream.close(); this.validateNested(); LogManager.resetConfiguration(); validateNested RollingFileAppender rfa=(RollingFileAppender)Logger.getLogger("org.apache.log4j.PropertyConfiguratorTest").getAppender("ROLLING") FixedWindowRollingPolicy rollingPolicy=(FixedWindowRollingPolicy)rfa.getRollingPolicy() assertEquals("filterBase-test1.log",rollingPolicy.getActiveFileName()); assertEquals("filterBased-test1.%i",rollingPolicy.getFileNamePattern()); assertEquals(0,rollingPolicy.getMinIndex()); assertTrue(rollingPolicy.isActivated()); FilterBasedTriggeringPolicy triggeringPolicy=(FilterBasedTriggeringPolicy)rfa.getTriggeringPolicy() LevelRangeFilter filter=(LevelRangeFilter)triggeringPolicy.getFilter() assertTrue(Level.INFO.equals(filter.getLevelMin())); testJarURL File dir=newFile("output") dir.mkdirs(); File file=newFile("output/properties.jar") ZipOutputStream zos=newZipOutputStream(newFileOutputStream(file)) zos.putNextEntry(newZipEntry(LogManager.DEFAULT_CONFIGURATION_FILE)); zos.write("log4j.rootLogger=debug".getBytes()); zos.closeEntry(); zos.close(); URL url=newURL("jar:"+file.toURL()+"!/"+LogManager.DEFAULT_CONFIGURATION_FILE) PropertyConfigurator.configure(url); assertTrue(file.delete()); assertFalse(file.exists()); testReset VectorAppender appender=newVectorAppender() appender.setName("A1"); Logger.getRootLogger().addAppender(appender); Properties props=newProperties() props.put("log4j.reset","true"); PropertyConfigurator.configure(props); assertNull(Logger.getRootLogger().getAppender("A1")); LogManager.resetConfiguration();
Class@@RollingPolicy activated=false activateOptions activated=true; isActivated returnactivated;
Class@@FixedWindowRollingPolicy activeFileName fileNamePattern minIndex minIndex=-1; getActiveFileName returnactiveFileName; setActiveFileName activeFileName=val; getFileNamePattern returnfileNamePattern; setFileNamePattern fileNamePattern=val; getMinIndex returnminIndex; setMinIndex minIndex=val;
Class@@TriggeringPolicy activated=false activateOptions activated=true; isActivated returnactivated;
Class@@FilterBasedTriggeringPolicy filter setFilter filter=val; getFilter returnfilter;
Class@@RollingFileAppender rollingPolicy triggeringPolicy append getRollingPolicy returnrollingPolicy; setRollingPolicy rollingPolicy=policy; getTriggeringPolicy returntriggeringPolicy; setTriggeringPolicy triggeringPolicy=policy; getAppend returnappend; setAppend append=val; close requiresLayout returntrue; append testNested try{PropertyConfigurator.configure("input/filter1.properties");this.validateNested();}finally{LogManager.resetConfiguration();} PropertyConfigurator.configure("input/filter1.properties"); this.validateNested(); LogManager.resetConfiguration();
Class@@MockThrowableRenderer activated=false showVersion=true activateOptions activated=true; isActivated returnactivated; doRender returnnewString[0]; setShowVersion showVersion=v; getShowVersion returnshowVersion; testThrowableRenderer Properties props=newProperties() props.put("log4j.throwableRenderer","org.apache.log4j.PropertyConfiguratorTest$MockThrowableRenderer"); props.put("log4j.throwableRenderer.showVersion","false"); PropertyConfigurator.configure(props); ThrowableRendererSupport repo=(ThrowableRendererSupport)LogManager.getLoggerRepository() MockThrowableRenderer renderer=(MockThrowableRenderer)repo.getThrowableRenderer() LogManager.resetConfiguration(); assertNotNull(renderer); assertEquals(true,renderer.isActivated()); assertEquals(false,renderer.getShowVersion());
Class@@RewriteAppenderTest setUp LogManager.getLoggerRepository().resetConfiguration(); Hashtable context=MDC.getContext() if(context!=null){context.clear();} context.clear(); tearDown LogManager.getLoggerRepository().shutdown(); configure InputStream is=RewriteAppenderTest.class.getResourceAsStream(resourceName) DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance() factory.setNamespaceAware(false); DocumentBuilder builder=factory.newDocumentBuilder() Document doc=builder.parse(is) DOMConfigurator.configure(doc.getDocumentElement()); testMapPolicy configure("map.xml"); Logger logger=Logger.getLogger(RewriteAppenderTest.class) logger.info("Message 0"); MDC.put("p1","Hola"); Map msg=newTreeMap() msg.put("p1","Hello"); msg.put("p2","World"); msg.put("x1","Mundo"); logger.info(msg); msg.put("message","Message 1"); logger.info(msg); assertTrue(Compare.compare(RewriteAppenderTest.class,"temp","map.log"));
Class@@BaseBean p2 x1 this.p2=p2; this.x1=x1; getP2 returnp2; getX1 returnx1; toString return"I am bean.";
Class@@MessageBean msg this.msg=msg; getMessage returnmsg; testReflectionPolicy configure("reflection.xml"); Logger logger=Logger.getLogger(RewriteAppenderTest.class) logger.info("Message 0"); logger.info(newBaseBean("Hello","World")); MDC.put("p1","Hola"); MDC.put("p2","p2"); logger.info(newMessageBean("Welcome to The Hub","Hello","World")); assertTrue(Compare.compare(RewriteAppenderTest.class,"temp","reflection.log")); testPropertyPolicy configure("property.xml"); Logger logger=Logger.getLogger(RewriteAppenderTest.class) logger.info("Message 0"); MDC.put("p1","Hola"); logger.info("Message 1"); assertTrue(Compare.compare(RewriteAppenderTest.class,"temp","property.log"));
Class@@RFATestCase tearDown LogManager.resetConfiguration(); test1 Logger logger=Logger.getLogger(RFATestCase.class) PropertyConfigurator.configure("input/RFA1.properties"); for(inti=0;i<25;i++){if(i<10){logger.debug("Hello---"+i);}elseif(i<100){logger.debug("Hello--"+i);}} if(i<10){logger.debug("Hello---"+i);}elseif(i<100){logger.debug("Hello--"+i);} logger.debug("Hello---"+i); logger.debug("Hello--"+i); assertTrue(newFile("output/RFA-test1.log").exists()); assertTrue(newFile("output/RFA-test1.log.1").exists()); test2 Logger logger=Logger.getLogger(RFATestCase.class) Logger root=Logger.getRootLogger() PatternLayout layout=newPatternLayout("%m\n") org.apache.log4j.RollingFileAppender rfa=neworg.apache.log4j.RollingFileAppender() rfa.setName("ROLLING"); rfa.setLayout(layout); rfa.setAppend(false); rfa.setMaxBackupIndex(3); rfa.setMaximumFileSize(100); rfa.setFile("output/RFA-test2.log"); rfa.activateOptions(); root.addAppender(rfa); for(inti=0;i<55;i++){if(i<10){logger.debug("Hello---"+i);}elseif(i<100){logger.debug("Hello--"+i);}} if(i<10){logger.debug("Hello---"+i);}elseif(i<100){logger.debug("Hello--"+i);} logger.debug("Hello---"+i); logger.debug("Hello--"+i); assertTrue(newFile("output/RFA-test2.log").exists()); assertTrue(newFile("output/RFA-test2.log.1").exists()); assertTrue(newFile("output/RFA-test2.log.2").exists()); assertTrue(newFile("output/RFA-test2.log.3").exists()); assertFalse(newFile("output/RFA-test2.log.4").exists()); test2ParamConstructor SimpleLayout layout=newSimpleLayout() RollingFileAppender appender=newRollingFileAppender(layout,"output/rfa_2param.log") assertEquals(1,appender.getMaxBackupIndex()); assertEquals(10*1024*1024,appender.getMaximumFileSize()); test3ParamConstructor SimpleLayout layout=newSimpleLayout() RollingFileAppender appender=newRollingFileAppender(layout,"output/rfa_3param.log",false) assertEquals(1,appender.getMaxBackupIndex()); testLockDotOne Logger logger=Logger.getLogger(RFATestCase.class) Logger root=Logger.getRootLogger() PatternLayout layout=newPatternLayout("%m\n") org.apache.log4j.RollingFileAppender rfa=neworg.apache.log4j.RollingFileAppender() rfa.setName("ROLLING"); rfa.setLayout(layout); rfa.setAppend(false); rfa.setMaxBackupIndex(10); rfa.setMaximumFileSize(100); rfa.setFile("output/RFA-dot1.log"); rfa.activateOptions(); root.addAppender(rfa); newFile("output/RFA-dot1.log.2").delete(); FileWriter dot1=newFileWriter("output/RFA-dot1.log.1") dot1.write("Locked file"); FileWriter dot5=newFileWriter("output/RFA-dot1.log.5") dot5.write("Unlocked file"); dot5.close(); for(inti=0;i<15;i++){if(i<10){logger.debug("Hello---"+i);}elseif(i<100){logger.debug("Hello--"+i);}} if(i<10){logger.debug("Hello---"+i);}elseif(i<100){logger.debug("Hello--"+i);} logger.debug("Hello---"+i); logger.debug("Hello--"+i); dot1.close(); for(inti=15;i<25;i++){logger.debug("Hello--"+i);} logger.debug("Hello--"+i); rfa.close(); assertTrue(newFile("output/RFA-dot1.log.7").exists()); if(newFile("output/RFA-dot1.log.2").length()<15){assertEquals(50,newFile("output/RFA-dot1.log").length());assertEquals(200,newFile("output/RFA-dot1.log.1").length());}else{assertTrue(newFile("output/RFA-dot1.log").exists());assertTrue(newFile("output/RFA-dot1.log.1").exists());assertTrue(newFile("output/RFA-dot1.log.2").exists());assertTrue(newFile("output/RFA-dot1.log.3").exists());assertFalse(newFile("output/RFA-dot1.log.4").exists());} assertEquals(50,newFile("output/RFA-dot1.log").length()); assertEquals(200,newFile("output/RFA-dot1.log.1").length()); assertTrue(newFile("output/RFA-dot1.log").exists()); assertTrue(newFile("output/RFA-dot1.log.1").exists()); assertTrue(newFile("output/RFA-dot1.log.2").exists()); assertTrue(newFile("output/RFA-dot1.log.3").exists()); assertFalse(newFile("output/RFA-dot1.log.4").exists()); testLockDotThree Logger logger=Logger.getLogger(RFATestCase.class) Logger root=Logger.getRootLogger() PatternLayout layout=newPatternLayout("%m\n") org.apache.log4j.RollingFileAppender rfa=neworg.apache.log4j.RollingFileAppender() rfa.setName("ROLLING"); rfa.setLayout(layout); rfa.setAppend(false); rfa.setMaxBackupIndex(10); rfa.setMaximumFileSize(100); rfa.setFile("output/RFA-dot3.log"); rfa.activateOptions(); root.addAppender(rfa); newFile("output/RFA-dot3.log.1").delete(); newFile("output/RFA-dot3.log.2").delete(); newFile("output/RFA-dot3.log.4").delete(); FileWriter dot3=newFileWriter("output/RFA-dot3.log.3") dot3.write("Locked file"); FileWriter dot5=newFileWriter("output/RFA-dot3.log.5") dot5.write("Unlocked file"); dot5.close(); for(inti=0;i<15;i++){if(i<10){logger.debug("Hello---"+i);}elseif(i<100){logger.debug("Hello--"+i);}} if(i<10){logger.debug("Hello---"+i);}elseif(i<100){logger.debug("Hello--"+i);} logger.debug("Hello---"+i); logger.debug("Hello--"+i); dot3.close(); for(inti=15;i<35;i++){logger.debug("Hello--"+i);} logger.debug("Hello--"+i); rfa.close(); assertTrue(newFile("output/RFA-dot3.log.8").exists()); if(newFile("output/RFA-dot3.log.5").exists()){assertEquals(50,newFile("output/RFA-dot3.log").length());assertEquals(100,newFile("output/RFA-dot3.log.1").length());assertEquals(200,newFile("output/RFA-dot3.log.2").length());}else{assertTrue(newFile("output/RFA-dot3.log").exists());assertTrue(newFile("output/RFA-dot3.log.1").exists());assertTrue(newFile("output/RFA-dot3.log.2").exists());assertTrue(newFile("output/RFA-dot3.log.3").exists());assertFalse(newFile("output/RFA-dot3.log.4").exists());} assertEquals(50,newFile("output/RFA-dot3.log").length()); assertEquals(100,newFile("output/RFA-dot3.log.1").length()); assertEquals(200,newFile("output/RFA-dot3.log.2").length()); assertTrue(newFile("output/RFA-dot3.log").exists()); assertTrue(newFile("output/RFA-dot3.log.1").exists()); assertTrue(newFile("output/RFA-dot3.log.2").exists()); assertTrue(newFile("output/RFA-dot3.log.3").exists()); assertFalse(newFile("output/RFA-dot3.log.4").exists());
Class@@LocationInfoTest testFourParamConstructor String className=LocationInfoTest.class.getName() String methodName="testFourParamConstructor" String fileName="LocationInfoTest.java" String lineNumber="41" LocationInfo li=newLocationInfo(fileName,className,methodName,lineNumber) assertEquals(className,li.getClassName()); assertEquals(methodName,li.getMethodName()); assertEquals(fileName,li.getFileName()); assertEquals(lineNumber,li.getLineNumber()); assertEquals(className+"."+methodName+"("+fileName+":"+lineNumber+")",li.fullInfo);
Class@@NameSubstring getInfo returnnewLocationInfo(newThrowable(),NameSubstring.class.getName());
Class@@NameSubstringCaller getInfo returnNameSubstring.getInfo(); testLocationInfo LocationInfo li=NameSubstringCaller.getInfo() assertEquals(NameSubstringCaller.class.getName(),li.getClassName()); assertEquals("getInfo",li.getMethodName());
Class@@LoggingEventTest testSerializationSimple Logger root=Logger.getRootLogger() LoggingEvent event=newLoggingEvent(root.getClass().getName(),root,Level.INFO,"Hello, world.",null) int[] skip=newint[]{352,353,354,355,356} SerializationTestHelper.assertSerializationEquals("witness/serialization/simple.bin",event,skip,237); testSerializationWithException Logger root=Logger.getRootLogger() Exception ex=newException("Don't panic") LoggingEvent event=newLoggingEvent(root.getClass().getName(),root,Level.INFO,"Hello, world.",ex) int[] skip=newint[]{352,353,354,355,356} SerializationTestHelper.assertSerializationEquals("witness/serialization/exception.bin",event,skip,237); testSerializationWithLocation Logger root=Logger.getRootLogger() LoggingEvent event=newLoggingEvent(root.getClass().getName(),root,Level.INFO,"Hello, world.",null) event.getLocationInformation(); int[] skip=newint[]{352,353,354,355,356} SerializationTestHelper.assertSerializationEquals("witness/serialization/location.bin",event,skip,237); testSerializationNDC Logger root=Logger.getRootLogger() NDC.push("ndc test"); LoggingEvent event=newLoggingEvent(root.getClass().getName(),root,Level.INFO,"Hello, world.",null) int[] skip=newint[]{352,353,354,355,356} SerializationTestHelper.assertSerializationEquals("witness/serialization/ndc.bin",event,skip,237); testSerializationMDC Logger root=Logger.getRootLogger() MDC.put("mdckey","mdcvalue"); LoggingEvent event=newLoggingEvent(root.getClass().getName(),root,Level.INFO,"Hello, world.",null) int[] skip=newint[]{352,353,354,355,356} SerializationTestHelper.assertSerializationEquals("witness/serialization/mdc.bin",event,skip,237); testDeserializationSimple Object obj=SerializationTestHelper.deserializeStream("witness/serialization/simple.bin") assertTrue(objinstanceofLoggingEvent); LoggingEvent event=(LoggingEvent)obj assertEquals("Hello, world.",event.getMessage()); assertEquals(Level.INFO,event.getLevel()); testDeserializationWithException Object obj=SerializationTestHelper.deserializeStream("witness/serialization/exception.bin") assertTrue(objinstanceofLoggingEvent); LoggingEvent event=(LoggingEvent)obj assertEquals("Hello, world.",event.getMessage()); assertEquals(Level.INFO,event.getLevel()); testDeserializationWithLocation Object obj=SerializationTestHelper.deserializeStream("witness/serialization/location.bin") assertTrue(objinstanceofLoggingEvent); LoggingEvent event=(LoggingEvent)obj assertEquals("Hello, world.",event.getMessage()); assertEquals(Level.INFO,event.getLevel()); testFQNOfCategoryClass Category root=Logger.getRootLogger() Priority info=Level.INFO String catName=Logger.class.toString() LoggingEvent event=newLoggingEvent(catName,root,info,"Hello, world.",null) assertEquals(catName,event.fqnOfCategoryClass); testLevel Category root=Logger.getRootLogger() Priority info=Level.INFO String catName=Logger.class.toString() LoggingEvent event=newLoggingEvent(catName,root,0L,info,"Hello, world.",null) Priority error=Level.ERROR event.level=error; assertEquals(Level.ERROR,event.level); testLocationInfoNoFQCN Category root=Logger.getRootLogger() Priority level=Level.INFO LoggingEvent event=newLoggingEvent(null,root,0L,level,"Hello, world.",null) LocationInfo info=event.getLocationInformation() assertNotNull(info); if(info!=null){assertEquals("?",info.getLineNumber());assertEquals("?",info.getClassName());assertEquals("?",info.getFileName());assertEquals("?",info.getMethodName());} assertEquals("?",info.getLineNumber()); assertEquals("?",info.getClassName()); assertEquals("?",info.getFileName()); assertEquals("?",info.getMethodName());
Class@@BadMessage toString thrownewRuntimeException(); testBadMessage Category root=Logger.getRootLogger() Priority info=Level.INFO String catName=Logger.class.toString() BadMessage msg=newBadMessage() LoggingEvent event=newLoggingEvent(catName,root,0L,info,msg,null) event.getRenderedMessage();
Class@@ThrowableInformationTest
Class@@OverriddenThrowable serialVersionUID=1L printStackTrace s.print((Object)"print(Object)"); s.print("print(char[])".toCharArray()); s.print("print(String)"); s.println((Object)"println(Object)"); s.println("println(char[])".toCharArray()); s.println("println(String)"); s.write("write(char[])".toCharArray()); s.write("write(char[], int, int)".toCharArray(),2,8); s.write("write(String, int, int)",2,8); testOverriddenBehavior ThrowableInformation ti=newThrowableInformation(newOverriddenThrowable()) String[] rep=ti.getThrowableStrRep() assertEquals(4,rep.length); assertEquals("print(Object)print(char[])print(String)println(Object)",rep[0]); assertEquals("println(char[])",rep[1]); assertEquals("println(String)",rep[2]); assertEquals("write(char[])ite(charite(Stri",rep[3]);
Class@@NotOverriddenThrowable serialVersionUID=1L printStackTrace s.print(true); s.print('a'); s.print(1); s.print(2L); s.print(Float.MAX_VALUE); s.print(Double.MIN_VALUE); s.println(true); s.println('a'); s.println(1); s.println(2L); s.println(Float.MAX_VALUE); s.println(Double.MIN_VALUE); s.write('C'); testNotOverriddenBehavior ThrowableInformation ti=newThrowableInformation(newNotOverriddenThrowable()) String[] rep=ti.getThrowableStrRep() assertEquals(7,rep.length); StringBuffer buf=newStringBuffer(String.valueOf(true)) buf.append('a'); buf.append(String.valueOf(1)); buf.append(String.valueOf(2L)); buf.append(String.valueOf(Float.MAX_VALUE)); buf.append(String.valueOf(Double.MIN_VALUE)); buf.append(String.valueOf(true)); assertEquals(buf.toString(),rep[0]); assertEquals("a",rep[1]); assertEquals(String.valueOf(1),rep[2]); assertEquals(String.valueOf(2L),rep[3]); assertEquals(String.valueOf(Float.MAX_VALUE),rep[4]); assertEquals(String.valueOf(Double.MIN_VALUE),rep[5]); assertEquals("C",rep[6]);
Class@@NullThrowable serialVersionUID=1L printStackTrace s.print((Object)null); s.print((String)null); s.println((Object)null); s.println((String)null); testNull ThrowableInformation ti=newThrowableInformation(newNullThrowable()) String[] rep=ti.getThrowableStrRep() assertEquals(2,rep.length); String nullStr=String.valueOf((Object)null) assertEquals(nullStr+nullStr+nullStr,rep[0]); assertEquals(nullStr,rep[1]);
Class@@EmptyThrowable serialVersionUID=1L printStackTrace testEmpty ThrowableInformation ti=newThrowableInformation(newEmptyThrowable()) String[] rep=ti.getThrowableStrRep() assertEquals(0,rep.length);
Class@@StringThrowable serialVersionUID=1L stackTrace stackTrace=trace; printStackTrace s.print(stackTrace); testLineFeed ThrowableInformation ti=newThrowableInformation(newStringThrowable("\n")) String[] rep=ti.getThrowableStrRep() assertEquals(1,rep.length); assertEquals("",rep[0]); testCarriageReturn ThrowableInformation ti=newThrowableInformation(newStringThrowable("\r")) String[] rep=ti.getThrowableStrRep() assertEquals(1,rep.length); assertEquals("",rep[0]); testParsing ThrowableInformation ti=newThrowableInformation(newStringThrowable("Line1\rLine2\nLine3\r\nLine4\n\rLine6")) String[] rep=ti.getThrowableStrRep() assertEquals(6,rep.length); assertEquals("Line1",rep[0]); assertEquals("Line2",rep[1]); assertEquals("Line3",rep[2]); assertEquals("Line4",rep[3]); assertEquals("",rep[4]); assertEquals("Line6",rep[5]); testLineFeedBlank ThrowableInformation ti=newThrowableInformation(newStringThrowable("\n ")) String[] rep=ti.getThrowableStrRep() assertEquals(2,rep.length); assertEquals("",rep[0]); assertEquals(" ",rep[1]); testGetThrowable Throwable t=newStringThrowable("Hello, World") ThrowableInformation ti=newThrowableInformation(t) assertSame(t,ti.getThrowable()); testIsolation ThrowableInformation ti=newThrowableInformation(newStringThrowable("Hello, World")) String[] rep=ti.getThrowableStrRep() assertEquals("Hello, World",rep[0]); rep[0]="Bonjour, Monde"; String[] rep2=ti.getThrowableStrRep() assertEquals("Hello, World",rep2[0]);
Class@@NastyThrowable serialVersionUID=1L printStackTrace s.print("NastyException"); thrownewRuntimeException("Intentional exception"); testNastyException ThrowableInformation ti=newThrowableInformation(newNastyThrowable()) String[] rep=ti.getThrowableStrRep() assertEquals("NastyException",rep[0]);
Class@@StressCategory level=newLevel[]{Level.DEBUG,Level.INFO,Level.WARN,Level.ERROR,Level.FATAL} defaultLevel=Logger.getRootLogger().getLevel() LENGTH names cat ct random=newRandom(10) main LENGTH=args.length; if(LENGTH==0){System.err.println("Usage: java "+StressCategory.class.getName()+" name1 ... nameN\n.");System.exit(1);} System.err.println("Usage: java "+StressCategory.class.getName()+" name1 ... nameN\n."); System.exit(1); if(LENGTH>=7){System.err.println("This stress test suffers from combinatorial explosion.\n"+"Invoking with seven arguments takes about 90 minutes even on fast machines");} System.err.println("This stress test suffers from combinatorial explosion.\n"+"Invoking with seven arguments takes about 90 minutes even on fast machines"); names=newString[LENGTH]; for(inti=0;i<LENGTH;i++){names[i]=args[i];} names[i]=args[i]; cat=newLogger[LENGTH]; ct=newCT[LENGTH]; permute(0); permute if(n==LENGTH)createLoop(0);elsefor(inti=n;i<LENGTH;i++){swap(names,n,i);permute(n+1);swap(names,n,i);} swap(names,n,i); permute(n+1); swap(names,n,i); swap String t=names[i] names[i]=names[j]; names[j]=t; permutationDump System.out.print("Current permutation is - "); for(inti=0;i<LENGTH;i++){System.out.print(names[i]+" ");} System.out.print(names[i]+" "); System.out.println(); createLoop if(n==LENGTH){for(inti=0;i<LENGTH;i++){if(ct[i]==null)cat[i]=null;else{cat[i]=Logger.getLogger(ct[i].catstr);cat[i].setLevel(ct[i].level);}}test();Hierarchyh=(Hierarchy)LogManager.getLoggerRepository();h.clear();}else{ct[n]=null;createLoop(n+1);ct[n]=newCT(names[n],null);createLoop(n+1);intr=random.nextInt();if(r<0)r=-r;ct[n]=newCT(names[n],level[r%5]);createLoop(n+1);} for(inti=0;i<LENGTH;i++){if(ct[i]==null)cat[i]=null;else{cat[i]=Logger.getLogger(ct[i].catstr);cat[i].setLevel(ct[i].level);}} if(ct[i]==null)cat[i]=null;else{cat[i]=Logger.getLogger(ct[i].catstr);cat[i].setLevel(ct[i].level);} cat[i]=Logger.getLogger(ct[i].catstr); cat[i].setLevel(ct[i].level); test(); Hierarchy h=(Hierarchy)LogManager.getLoggerRepository() h.clear(); ct[n]=null; createLoop(n+1); ct[n]=newCT(names[n],null); createLoop(n+1); int r=random.nextInt() if(r<0)r=-r; ct[n]=newCT(names[n],level[r%5]); createLoop(n+1); test for(inti=0;i<LENGTH;i++){if(!checkCorrectness(i)){System.out.println("Failed stress test.");permutationDump();ctDump();catDump();System.exit(1);}} if(!checkCorrectness(i)){System.out.println("Failed stress test.");permutationDump();ctDump();catDump();System.exit(1);} System.out.println("Failed stress test."); permutationDump(); ctDump(); catDump(); System.exit(1); ctDump for(intj=0;j<LENGTH;j++){if(ct[j]!=null)System.out.println("ct ["+j+"] = ("+ct[j].catstr+","+ct[j].level+")");elseSystem.out.println("ct ["+j+"] = undefined");} if(ct[j]!=null)System.out.println("ct ["+j+"] = ("+ct[j].catstr+","+ct[j].level+")");elseSystem.out.println("ct ["+j+"] = undefined"); catDump for(intj=0;j<LENGTH;j++){if(cat[j]!=null)System.out.println("cat["+j+"] = ("+cat[j].name+","+cat[j].getLevel()+")");elseSystem.out.println("cat["+j+"] = undefined");} if(cat[j]!=null)System.out.println("cat["+j+"] = ("+cat[j].name+","+cat[j].getLevel()+")");elseSystem.out.println("cat["+j+"] = undefined"); checkCorrectness CT localCT=ct[i] if(localCT==null)returntrue; Level expected=getExpectedPrioriy(localCT) Level purported=cat[i].getEffectiveLevel() if(expected!=purported){System.out.println("Expected level for "+localCT.catstr+" is "+expected);System.out.println("Purported level for "+cat[i].name+" is "+purported);returnfalse;} System.out.println("Expected level for "+localCT.catstr+" is "+expected); System.out.println("Purported level for "+cat[i].name+" is "+purported); returnfalse; returntrue; getExpectedPrioriy Level level=ctParam.level if(level!=null)returnlevel; String catstr=ctParam.catstr for(inti=catstr.lastIndexOf('.',catstr.length()-1);i>=0;i=catstr.lastIndexOf('.',i-1)){Stringsubstr=catstr.substring(0,i);for(intj=0;j<LENGTH;j++){if(ct[j]!=null&&substr.equals(ct[j].catstr)){Levelp=ct[j].level;if(p!=null)returnp;}}} String substr=catstr.substring(0,i) for(intj=0;j<LENGTH;j++){if(ct[j]!=null&&substr.equals(ct[j].catstr)){Levelp=ct[j].level;if(p!=null)returnp;}} if(ct[j]!=null&&substr.equals(ct[j].catstr)){Levelp=ct[j].level;if(p!=null)returnp;} Level p=ct[j].level if(p!=null)returnp; returndefaultLevel;
Class@@CT catstr level this.catstr=catstr; this.level=level;
Class@@TestLogMF TRACE=getTraceLevel() getTraceLevel try{return(Level)Level.class.getField("TRACE").get(null);}catch(Exceptionex){returnnewLevel(5000,"TRACE",7);} return(Level)Level.class.getField("TRACE").get(null); returnnewLevel(5000,"TRACE",7); logger=Logger.getLogger("org.apache.log4j.formatter.TestLogMF") tearDown LogManager.resetConfiguration(); testClassName CharArrayWriter writer=newCharArrayWriter() PatternLayout layout=newPatternLayout("%C") WriterAppender appender=newWriterAppender(layout,writer) appender.activateOptions(); Logger.getRootLogger().addAppender(appender); LogMF.debug(logger,null,Math.PI); assertEquals(TestLogMF.class.getName(),writer.toString()); testTraceNullPattern LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogMF.trace(logger,null,Math.PI); assertNull(capture.getMessage()); testTraceNoArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogMF.trace(logger,"Hello, World",Math.PI); assertEquals("Hello, World",capture.getMessage()); testTraceBadPattern LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogMF.trace(logger,"Hello, {.",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testTraceMissingArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogMF.trace(logger,"Hello, {0}World",newObject[0]); assertEquals("Hello, {0}World",capture.getMessage()); testTraceString LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogMF.trace(logger,"Hello, {0}","World"); assertEquals("Hello, World",capture.getMessage()); testTraceNull LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogMF.trace(logger,"Hello, {0}",(Object)null); assertEquals("Hello, null",capture.getMessage()); testTraceInt LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); int val=42 LogMF.trace(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testTraceByte LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); byte val=42 LogMF.trace(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testTraceShort LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); short val=42 LogMF.trace(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testTraceLong LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); long val=42 LogMF.trace(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testTraceChar LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); char val='C' LogMF.trace(logger,"Iteration {0}",val); assertEquals("Iteration C",capture.getMessage()); testTraceBoolean LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); boolean val=true LogMF.trace(logger,"Iteration {0}",val); assertEquals("Iteration true",capture.getMessage()); testTraceFloat LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); float val=3.14f NumberFormat format=NumberFormat.getInstance() LogMF.trace(logger,"Iteration {0}",val); assertEquals("Iteration "+format.format(val),capture.getMessage()); testTraceDouble LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); double val=3.14 NumberFormat format=NumberFormat.getInstance() LogMF.trace(logger,"Iteration {0}",val); assertEquals("Iteration "+format.format(val),capture.getMessage()); testTraceTwoArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogMF.trace(logger,"{1}, {0}.","World","Hello"); assertEquals("Hello, World.",capture.getMessage()); testTraceThreeArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogMF.trace(logger,"{1}{2} {0}.","World","Hello",","); assertEquals("Hello, World.",capture.getMessage()); testTraceFourArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogMF.trace(logger,"{1}{2} {0}{3}","World","Hello",",","."); assertEquals("Hello, World.",capture.getMessage()); testTraceArrayArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); Object[] args=newObject[]{"World","Hello",",","."} LogMF.trace(logger,"{1}{2} {0}{3}",args); assertEquals("Hello, World.",capture.getMessage()); testTraceNullArrayArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); Object[] args=null LogMF.trace(logger,"{1}{2} {0}{3}",args); assertEquals("{1}{2} {0}{3}",capture.getMessage()); testDebugNullPattern LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,null,Math.PI); assertEquals(null,capture.getMessage()); testDebugNoArg LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"Hello, World",Math.PI); assertEquals("Hello, World",capture.getMessage()); testDebugBadPattern LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"Hello, {.",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testDebugMissingArg LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"Hello, {0}World",newObject[0]); assertEquals("Hello, {0}World",capture.getMessage()); testDebugString LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"Hello, {0}","World"); assertEquals("Hello, World",capture.getMessage()); testDebugNull LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"Hello, {0}",(Object)null); assertEquals("Hello, null",capture.getMessage()); testDebugInt LogCapture capture=newLogCapture(Level.DEBUG) int val=42 LogMF.debug(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testDebugByte LogCapture capture=newLogCapture(Level.DEBUG) byte val=42 LogMF.debug(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testDebugShort LogCapture capture=newLogCapture(Level.DEBUG) short val=42 LogMF.debug(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testDebugLong LogCapture capture=newLogCapture(Level.DEBUG) long val=42 LogMF.debug(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testDebugChar LogCapture capture=newLogCapture(Level.DEBUG) char val='C' LogMF.debug(logger,"Iteration {0}",val); assertEquals("Iteration C",capture.getMessage()); testDebugBoolean LogCapture capture=newLogCapture(Level.DEBUG) boolean val=true LogMF.debug(logger,"Iteration {0}",val); assertEquals("Iteration true",capture.getMessage()); testDebugFloat LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"Iteration {0}",(float)Math.PI); String expected=MessageFormat.format("Iteration {0}",newObject[]{newFloat(Math.PI)}) assertEquals(expected,capture.getMessage()); testDebugDouble LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"Iteration {0}",Math.PI); String expected=MessageFormat.format("Iteration {0}",newObject[]{newDouble(Math.PI)}) assertEquals(expected,capture.getMessage()); testDebugTwoArg LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"{1}, {0}.","World","Hello"); assertEquals("Hello, World.",capture.getMessage()); testDebugThreeArg LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"{1}{2} {0}.","World","Hello",","); assertEquals("Hello, World.",capture.getMessage()); testDebugFourArg LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"{1}{2} {0}{3}","World","Hello",",","."); assertEquals("Hello, World.",capture.getMessage()); testDebugArrayArg LogCapture capture=newLogCapture(Level.DEBUG) Object[] args=newObject[]{"World","Hello",",","."} LogMF.debug(logger,"{1}{2} {0}{3}",args); assertEquals("Hello, World.",capture.getMessage()); testDebugDate LogCapture capture=newLogCapture(Level.DEBUG) Date epoch=newDate(0) LogMF.debug(logger,"Iteration {0}",epoch); String expected=MessageFormat.format("Iteration {0}",newObject[]{epoch}) String expected2="Iteration "+DateFormat.getDateTimeInstance(DateFormat.SHORT,DateFormat.SHORT).format(epoch) String actual=capture.getMessage() if(System.getProperty("java.vendor").indexOf("Free")==-1){assertEquals(expected,actual);} assertEquals(expected,actual); assertEquals(expected2,actual); testDebugNullArrayArg LogCapture capture=newLogCapture(Level.DEBUG) Object[] args=null LogMF.debug(logger,"{1}{2} {0}{3}",args); assertEquals("{1}{2} {0}{3}",capture.getMessage()); testDebugPercent LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"{0, number, percent}",Math.PI); String expected=MessageFormat.format("{0, number, percent}",newObject[]{newDouble(Math.PI)}) assertEquals(expected,capture.getMessage()); testDebugFullPrecisionAndPercent LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"{0}{0, number, percent}",Math.PI); String expected=MessageFormat.format("{0}{0, number, percent}",newObject[]{newDouble(Math.PI)}) assertEquals(expected,capture.getMessage()); testDebugQuoted LogCapture capture=newLogCapture(Level.DEBUG) LogMF.debug(logger,"'{0}'","World"); assertEquals("{0}",capture.getMessage()); testInfoNullPattern LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,null,Math.PI); assertNull(capture.getMessage()); testInfoNoArg LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"Hello, World",Math.PI); assertEquals("Hello, World",capture.getMessage()); testInfoBadPattern LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"Hello, {.",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testInfoMissingArg LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"Hello, {0}World",newObject[0]); assertEquals("Hello, {0}World",capture.getMessage()); testInfoString LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"Hello, {0}","World"); assertEquals("Hello, World",capture.getMessage()); testInfoNull LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"Hello, {0}",(Object)null); assertEquals("Hello, null",capture.getMessage()); testInfoInt LogCapture capture=newLogCapture(Level.INFO) int val=42 LogMF.info(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testInfoByte LogCapture capture=newLogCapture(Level.INFO) byte val=42 LogMF.info(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testInfoShort LogCapture capture=newLogCapture(Level.INFO) short val=42 LogMF.info(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testInfoLong LogCapture capture=newLogCapture(Level.INFO) long val=42 LogMF.info(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testInfoChar LogCapture capture=newLogCapture(Level.INFO) char val='C' LogMF.info(logger,"Iteration {0}",val); assertEquals("Iteration C",capture.getMessage()); testInfoBoolean LogCapture capture=newLogCapture(Level.INFO) boolean val=true LogMF.info(logger,"Iteration {0}",val); assertEquals("Iteration true",capture.getMessage()); testInfoFloat LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"Iteration {0}",(float)Math.PI); String expected=MessageFormat.format("Iteration {0}",newObject[]{newFloat(Math.PI)}) assertEquals(expected,capture.getMessage()); testInfoDouble LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"Iteration {0}",Math.PI); String expected=MessageFormat.format("Iteration {0}",newObject[]{newDouble(Math.PI)}) assertEquals(expected,capture.getMessage()); testInfoTwoArg LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"{1}, {0}.","World","Hello"); assertEquals("Hello, World.",capture.getMessage()); testInfoThreeArg LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"{1}{2} {0}.","World","Hello",","); assertEquals("Hello, World.",capture.getMessage()); testInfoFourArg LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"{1}{2} {0}{3}","World","Hello",",","."); assertEquals("Hello, World.",capture.getMessage()); testInfoArrayArg LogCapture capture=newLogCapture(Level.INFO) Object[] args=newObject[]{"World","Hello",",","."} LogMF.info(logger,"{1}{2} {0}{3}",args); assertEquals("Hello, World.",capture.getMessage()); testWarnNullPattern LogCapture capture=newLogCapture(Level.WARN) LogMF.warn(logger,null,Math.PI); assertNull(capture.getMessage()); testWarnNoArg LogCapture capture=newLogCapture(Level.WARN) LogMF.warn(logger,"Hello, World",Math.PI); assertEquals("Hello, World",capture.getMessage()); testWarnBadPattern LogCapture capture=newLogCapture(Level.WARN) LogMF.warn(logger,"Hello, {.",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testWarnMissingArg LogCapture capture=newLogCapture(Level.WARN) LogMF.warn(logger,"Hello, {0}World",newObject[0]); assertEquals("Hello, {0}World",capture.getMessage()); testWarnString LogCapture capture=newLogCapture(Level.WARN) LogMF.warn(logger,"Hello, {0}","World"); assertEquals("Hello, World",capture.getMessage()); testWarnNull LogCapture capture=newLogCapture(Level.WARN) LogMF.warn(logger,"Hello, {0}",(Object)null); assertEquals("Hello, null",capture.getMessage()); testWarnInt LogCapture capture=newLogCapture(Level.WARN) int val=42 LogMF.warn(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testWarnByte LogCapture capture=newLogCapture(Level.WARN) byte val=42 LogMF.warn(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testWarnShort LogCapture capture=newLogCapture(Level.WARN) short val=42 LogMF.warn(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testWarnLong LogCapture capture=newLogCapture(Level.WARN) long val=42 LogMF.warn(logger,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testWarnChar LogCapture capture=newLogCapture(Level.WARN) char val='C' LogMF.warn(logger,"Iteration {0}",val); assertEquals("Iteration C",capture.getMessage()); testWarnBoolean LogCapture capture=newLogCapture(Level.WARN) boolean val=true LogMF.warn(logger,"Iteration {0}",val); assertEquals("Iteration true",capture.getMessage()); testWarnFloat LogCapture capture=newLogCapture(Level.WARN) LogMF.warn(logger,"Iteration {0}",(float)Math.PI); String expected=MessageFormat.format("Iteration {0}",newObject[]{newFloat(Math.PI)}) assertEquals(expected,capture.getMessage()); testWarnDouble LogCapture capture=newLogCapture(Level.WARN) LogMF.warn(logger,"Iteration {0}",Math.PI); String expected=MessageFormat.format("Iteration {0}",newObject[]{newDouble(Math.PI)}) assertEquals(expected,capture.getMessage()); testWarnTwoArg LogCapture capture=newLogCapture(Level.WARN) LogMF.warn(logger,"{1}, {0}.","World","Hello"); assertEquals("Hello, World.",capture.getMessage()); testWarnThreeArg LogCapture capture=newLogCapture(Level.WARN) LogMF.warn(logger,"{1}{2} {0}.","World","Hello",","); assertEquals("Hello, World.",capture.getMessage()); testWarnFourArg LogCapture capture=newLogCapture(Level.WARN) LogMF.warn(logger,"{1}{2} {0}{3}","World","Hello",",","."); assertEquals("Hello, World.",capture.getMessage()); testWarnArrayArg LogCapture capture=newLogCapture(Level.WARN) Object[] args=newObject[]{"World","Hello",",","."} LogMF.warn(logger,"{1}{2} {0}{3}",args); assertEquals("Hello, World.",capture.getMessage()); testLogNullPattern LogCapture capture=newLogCapture(Level.ERROR) LogMF.log(logger,Level.ERROR,null,Math.PI); assertNull(capture.getMessage()); testLogNoArg LogCapture capture=newLogCapture(Level.ERROR) LogMF.log(logger,Level.ERROR,"Hello, World",Math.PI); assertEquals("Hello, World",capture.getMessage()); testLogBadPattern LogCapture capture=newLogCapture(Level.ERROR) LogMF.log(logger,Level.ERROR,"Hello, {.",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testLogMissingArg LogCapture capture=newLogCapture(Level.ERROR) LogMF.log(logger,Level.ERROR,"Hello, {0}World",newObject[0]); assertEquals("Hello, {0}World",capture.getMessage()); testLogString LogCapture capture=newLogCapture(Level.ERROR) LogMF.log(logger,Level.ERROR,"Hello, {0}","World"); assertEquals("Hello, World",capture.getMessage()); testLogNull LogCapture capture=newLogCapture(Level.ERROR) LogMF.log(logger,Level.ERROR,"Hello, {0}",(Object)null); assertEquals("Hello, null",capture.getMessage()); testLogInt LogCapture capture=newLogCapture(Level.ERROR) int val=42 LogMF.log(logger,Level.ERROR,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testLogByte LogCapture capture=newLogCapture(Level.ERROR) byte val=42 LogMF.log(logger,Level.ERROR,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testLogShort LogCapture capture=newLogCapture(Level.ERROR) short val=42 LogMF.log(logger,Level.ERROR,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testLogLong LogCapture capture=newLogCapture(Level.ERROR) long val=42 LogMF.log(logger,Level.ERROR,"Iteration {0}",val); assertEquals("Iteration 42",capture.getMessage()); testLogChar LogCapture capture=newLogCapture(Level.ERROR) char val='C' LogMF.log(logger,Level.ERROR,"Iteration {0}",val); assertEquals("Iteration C",capture.getMessage()); testLogBoolean LogCapture capture=newLogCapture(Level.ERROR) boolean val=true LogMF.log(logger,Level.ERROR,"Iteration {0}",val); assertEquals("Iteration true",capture.getMessage()); testLogFloat LogCapture capture=newLogCapture(Level.ERROR) LogMF.log(logger,Level.ERROR,"Iteration {0}",(float)Math.PI); String expected=MessageFormat.format("Iteration {0}",newObject[]{newFloat(Math.PI)}) assertEquals(expected,capture.getMessage()); testLogDouble LogCapture capture=newLogCapture(Level.ERROR) LogMF.log(logger,Level.ERROR,"Iteration {0}",Math.PI); String expected=MessageFormat.format("Iteration {0}",newObject[]{newDouble(Math.PI)}) assertEquals(expected,capture.getMessage()); testLogTwoArg LogCapture capture=newLogCapture(Level.ERROR) LogMF.log(logger,Level.ERROR,"{1}, {0}.","World","Hello"); assertEquals("Hello, World.",capture.getMessage()); testLogThreeArg LogCapture capture=newLogCapture(Level.ERROR) LogMF.log(logger,Level.ERROR,"{1}{2} {0}.","World","Hello",","); assertEquals("Hello, World.",capture.getMessage()); testLogFourArg LogCapture capture=newLogCapture(Level.ERROR) LogMF.log(logger,Level.ERROR,"{1}{2} {0}{3}","World","Hello",",","."); assertEquals("Hello, World.",capture.getMessage()); testLogArrayArg LogCapture capture=newLogCapture(Level.ERROR) Object[] args=newObject[]{"World","Hello",",","."} LogMF.log(logger,Level.ERROR,"{1}{2} {0}{3}",args); assertEquals("Hello, World.",capture.getMessage()); BUNDLE_NAME="org.apache.log4j.TestLogMFPatterns" testLogrbNullBundle LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,null,"Iteration0",Math.PI); assertEquals("Iteration0",capture.getMessage()); testLogrbNullKey LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,null,Math.PI); assertNull(capture.getMessage()); testLogrbNoArg LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello1",Math.PI); assertEquals("Hello, World",capture.getMessage()); testLogrbBadPattern LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Malformed",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testLogrbMissingArg LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello2",newObject[0]); assertEquals("Hello, {0}World",capture.getMessage()); testLogrbString LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello3","World"); assertEquals("Hello, World",capture.getMessage()); testLogrbNull LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello3",(Object)null); assertEquals("Hello, null",capture.getMessage()); testLogrbInt LogCapture capture=newLogCapture(Level.ERROR) int val=42 LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration 42",capture.getMessage()); testLogrbByte LogCapture capture=newLogCapture(Level.ERROR) byte val=42 LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration 42",capture.getMessage()); testLogrbShort LogCapture capture=newLogCapture(Level.ERROR) short val=42 LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration 42",capture.getMessage()); testLogrbLong LogCapture capture=newLogCapture(Level.ERROR) long val=42 LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration 42",capture.getMessage()); testLogrbChar LogCapture capture=newLogCapture(Level.ERROR) char val='C' LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration C",capture.getMessage()); testLogrbBoolean LogCapture capture=newLogCapture(Level.ERROR) boolean val=true LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration true",capture.getMessage()); testLogrbFloat LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",(float)Math.PI); String expected=MessageFormat.format("Iteration {0}",newObject[]{newFloat(Math.PI)}) assertEquals(expected,capture.getMessage()); testLogrbDouble LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",Math.PI); String expected=MessageFormat.format("Iteration {0}",newObject[]{newDouble(Math.PI)}) assertEquals(expected,capture.getMessage()); testLogrbTwoArg LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello4","World","Hello"); assertEquals("Hello, World.",capture.getMessage()); testLogrbThreeArg LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello5","World","Hello",","); assertEquals("Hello, World.",capture.getMessage()); testLogrbFourArg LogCapture capture=newLogCapture(Level.ERROR) LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello6","World","Hello",",","."); assertEquals("Hello, World.",capture.getMessage()); testLogrbArrayArg LogCapture capture=newLogCapture(Level.ERROR) Object[] args=newObject[]{"World","Hello",",","."} LogMF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello6",args); assertEquals("Hello, World.",capture.getMessage()); testInfo1ParamBrace9 LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"Hello, {9}{0}","World"); assertEquals("Hello, {9}World",capture.getMessage()); testInfo2ParamBrace9 LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"{1}, {9}{0}","World","Hello"); assertEquals("Hello, {9}World",capture.getMessage()); testInfo10ParamBrace9 LogCapture capture=newLogCapture(Level.INFO) LogMF.info(logger,"{1}, {9}{0}",newObject[]{"World","Hello",null,null,null,null,null,null,null,"New "}); assertEquals("Hello, New World",capture.getMessage()); testInfo1ParamBraceSlashColon LogCapture capture=newLogCapture(Level.INFO) String pattern="Hello, {/}{0}{:}" LogMF.info(logger,pattern,"World"); assertEquals(pattern,capture.getMessage());
Class@@TestLogSF TRACE=getTraceLevel() getTraceLevel try{return(Level)Level.class.getField("TRACE").get(null);}catch(Exceptionex){returnnewLevel(5000,"TRACE",7);} return(Level)Level.class.getField("TRACE").get(null); returnnewLevel(5000,"TRACE",7); logger=Logger.getLogger("org.apache.log4j.formatter.TestLogSF") tearDown LogManager.resetConfiguration(); testClassName CharArrayWriter writer=newCharArrayWriter() PatternLayout layout=newPatternLayout("%C") WriterAppender appender=newWriterAppender(layout,writer) appender.activateOptions(); Logger.getRootLogger().addAppender(appender); LogSF.debug(logger,null,Math.PI); assertEquals(TestLogSF.class.getName(),writer.toString()); testTraceNullPattern LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogSF.trace(logger,null,Math.PI); assertNull(capture.getMessage()); testTraceNoArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogSF.trace(logger,"Hello, World",Math.PI); assertEquals("Hello, World",capture.getMessage()); testTraceBadPattern LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogSF.trace(logger,"Hello, {.",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testTraceMissingArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogSF.trace(logger,"Hello, {}World",newObject[0]); assertEquals("Hello, {}World",capture.getMessage()); testTraceString LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogSF.trace(logger,"Hello, {}","World"); assertEquals("Hello, World",capture.getMessage()); testTraceNull LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogSF.trace(logger,"Hello, {}",(Object)null); assertEquals("Hello, null",capture.getMessage()); testTraceInt LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); int val=42 LogSF.trace(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testTraceByte LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); byte val=42 LogSF.trace(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testTraceShort LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); short val=42 LogSF.trace(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testTraceLong LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); long val=42 LogSF.trace(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testTraceChar LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); char val='C' LogSF.trace(logger,"Iteration {}",val); assertEquals("Iteration C",capture.getMessage()); testTraceBoolean LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); boolean val=true LogSF.trace(logger,"Iteration {}",val); assertEquals("Iteration true",capture.getMessage()); testTraceFloat LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); float val=3.14f LogSF.trace(logger,"Iteration {}",val); assertEquals("Iteration "+String.valueOf(val),capture.getMessage()); testTraceDouble LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); double val=3.14 LogSF.trace(logger,"Iteration {}",val); assertEquals("Iteration "+String.valueOf(val),capture.getMessage()); testTraceTwoArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogSF.trace(logger,"{}, {}.","Hello","World"); assertEquals("Hello, World.",capture.getMessage()); testTraceThreeArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogSF.trace(logger,"{}{} {}.","Hello",",","World"); assertEquals("Hello, World.",capture.getMessage()); testTraceFourArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); LogSF.trace(logger,"{}{} {}{}","Hello",",","World","."); assertEquals("Hello, World.",capture.getMessage()); testTraceArrayArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); Object[] args=newObject[]{"Hello",",","World","."} LogSF.trace(logger,"{}{} {}{}",args); assertEquals("Hello, World.",capture.getMessage()); testTraceNullArrayArg LogCapture capture=newLogCapture(TRACE) logger.setLevel(TRACE); Object[] args=null LogSF.trace(logger,"{}{} {}{}",args); assertEquals("{}{} {}{}",capture.getMessage()); testDebugNullPattern LogCapture capture=newLogCapture(Level.DEBUG) LogSF.debug(logger,null,Math.PI); assertNull(capture.getMessage()); testDebugNoArg LogCapture capture=newLogCapture(Level.DEBUG) LogSF.debug(logger,"Hello, World",Math.PI); assertEquals("Hello, World",capture.getMessage()); testDebugBadPattern LogCapture capture=newLogCapture(Level.DEBUG) LogSF.debug(logger,"Hello, {.",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testDebugMissingArg LogCapture capture=newLogCapture(Level.DEBUG) LogSF.debug(logger,"Hello, {}World",newObject[0]); assertEquals("Hello, {}World",capture.getMessage()); testDebugString LogCapture capture=newLogCapture(Level.DEBUG) LogSF.debug(logger,"Hello, {}","World"); assertEquals("Hello, World",capture.getMessage()); testDebugNull LogCapture capture=newLogCapture(Level.DEBUG) LogSF.debug(logger,"Hello, {}",(Object)null); assertEquals("Hello, null",capture.getMessage()); testDebugInt LogCapture capture=newLogCapture(Level.DEBUG) int val=42 LogSF.debug(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testDebugByte LogCapture capture=newLogCapture(Level.DEBUG) byte val=42 LogSF.debug(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testDebugShort LogCapture capture=newLogCapture(Level.DEBUG) short val=42 LogSF.debug(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testDebugLong LogCapture capture=newLogCapture(Level.DEBUG) long val=42 LogSF.debug(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testDebugChar LogCapture capture=newLogCapture(Level.DEBUG) char val='C' LogSF.debug(logger,"Iteration {}",val); assertEquals("Iteration C",capture.getMessage()); testDebugBoolean LogCapture capture=newLogCapture(Level.DEBUG) boolean val=true LogSF.debug(logger,"Iteration {}",val); assertEquals("Iteration true",capture.getMessage()); testDebugFloat LogCapture capture=newLogCapture(Level.DEBUG) float val=3.14f LogSF.debug(logger,"Iteration {}",val); assertEquals("Iteration "+String.valueOf(val),capture.getMessage()); testDebugDouble LogCapture capture=newLogCapture(Level.DEBUG) double val=3.14 LogSF.debug(logger,"Iteration {}",val); assertEquals("Iteration "+String.valueOf(val),capture.getMessage()); testDebugTwoArg LogCapture capture=newLogCapture(Level.DEBUG) LogSF.debug(logger,"{}, {}.","Hello","World"); assertEquals("Hello, World.",capture.getMessage()); testDebugThreeArg LogCapture capture=newLogCapture(Level.DEBUG) LogSF.debug(logger,"{}{} {}.","Hello",",","World"); assertEquals("Hello, World.",capture.getMessage()); testDebugFourArg LogCapture capture=newLogCapture(Level.DEBUG) LogSF.debug(logger,"{}{} {}{}","Hello",",","World","."); assertEquals("Hello, World.",capture.getMessage()); testDebugArrayArg LogCapture capture=newLogCapture(Level.DEBUG) Object[] args=newObject[]{"Hello",",","World","."} LogSF.debug(logger,"{}{} {}{}",args); assertEquals("Hello, World.",capture.getMessage()); testDebugNullArrayArg LogCapture capture=newLogCapture(Level.DEBUG) Object[] args=null LogSF.debug(logger,"{}{} {}{}",args); assertEquals("{}{} {}{}",capture.getMessage()); testInfoNullPattern LogCapture capture=newLogCapture(Level.INFO) LogSF.info(logger,null,Math.PI); assertNull(capture.getMessage()); testInfoNoArg LogCapture capture=newLogCapture(Level.INFO) LogSF.info(logger,"Hello, World",Math.PI); assertEquals("Hello, World",capture.getMessage()); testInfoBadPattern LogCapture capture=newLogCapture(Level.INFO) LogSF.info(logger,"Hello, {.",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testInfoMissingArg LogCapture capture=newLogCapture(Level.INFO) LogSF.info(logger,"Hello, {}World",newObject[0]); assertEquals("Hello, {}World",capture.getMessage()); testInfoString LogCapture capture=newLogCapture(Level.INFO) LogSF.info(logger,"Hello, {}","World"); assertEquals("Hello, World",capture.getMessage()); testInfoNull LogCapture capture=newLogCapture(Level.INFO) LogSF.info(logger,"Hello, {}",(Object)null); assertEquals("Hello, null",capture.getMessage()); testInfoInt LogCapture capture=newLogCapture(Level.INFO) int val=42 LogSF.info(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testInfoByte LogCapture capture=newLogCapture(Level.INFO) byte val=42 LogSF.info(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testInfoShort LogCapture capture=newLogCapture(Level.INFO) short val=42 LogSF.info(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testInfoLong LogCapture capture=newLogCapture(Level.INFO) long val=42 LogSF.info(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testInfoChar LogCapture capture=newLogCapture(Level.INFO) char val='C' LogSF.info(logger,"Iteration {}",val); assertEquals("Iteration C",capture.getMessage()); testInfoBoolean LogCapture capture=newLogCapture(Level.INFO) boolean val=true LogSF.info(logger,"Iteration {}",val); assertEquals("Iteration true",capture.getMessage()); testInfoFloat LogCapture capture=newLogCapture(Level.INFO) float val=3.14f LogSF.info(logger,"Iteration {}",val); assertEquals("Iteration "+String.valueOf(val),capture.getMessage()); testInfoDouble LogCapture capture=newLogCapture(Level.INFO) double val=3.14 LogSF.info(logger,"Iteration {}",val); assertEquals("Iteration "+String.valueOf(val),capture.getMessage()); testInfoTwoArg LogCapture capture=newLogCapture(Level.INFO) LogSF.info(logger,"{}, {}.","Hello","World"); assertEquals("Hello, World.",capture.getMessage()); testInfoThreeArg LogCapture capture=newLogCapture(Level.INFO) LogSF.info(logger,"{}{} {}.","Hello",",","World"); assertEquals("Hello, World.",capture.getMessage()); testInfoArrayArg LogCapture capture=newLogCapture(Level.INFO) Object[] args=newObject[]{"Hello",",","World","."} LogSF.info(logger,"{}{} {}{}",args); assertEquals("Hello, World.",capture.getMessage()); testWarnNullPattern LogCapture capture=newLogCapture(Level.WARN) LogSF.warn(logger,null,Math.PI); assertNull(capture.getMessage()); testWarnNoArg LogCapture capture=newLogCapture(Level.WARN) LogSF.warn(logger,"Hello, World",Math.PI); assertEquals("Hello, World",capture.getMessage()); testWarnBadPattern LogCapture capture=newLogCapture(Level.WARN) LogSF.warn(logger,"Hello, {.",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testWarnMissingArg LogCapture capture=newLogCapture(Level.WARN) LogSF.warn(logger,"Hello, {}World",newObject[0]); assertEquals("Hello, {}World",capture.getMessage()); testWarnString LogCapture capture=newLogCapture(Level.WARN) LogSF.warn(logger,"Hello, {}","World"); assertEquals("Hello, World",capture.getMessage()); testWarnNull LogCapture capture=newLogCapture(Level.WARN) LogSF.warn(logger,"Hello, {}",(Object)null); assertEquals("Hello, null",capture.getMessage()); testWarnInt LogCapture capture=newLogCapture(Level.WARN) int val=42 LogSF.warn(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testWarnByte LogCapture capture=newLogCapture(Level.WARN) byte val=42 LogSF.warn(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testWarnShort LogCapture capture=newLogCapture(Level.WARN) short val=42 LogSF.warn(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testWarnLong LogCapture capture=newLogCapture(Level.WARN) long val=42 LogSF.warn(logger,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testWarnChar LogCapture capture=newLogCapture(Level.WARN) char val='C' LogSF.warn(logger,"Iteration {}",val); assertEquals("Iteration C",capture.getMessage()); testWarnBoolean LogCapture capture=newLogCapture(Level.WARN) boolean val=true LogSF.warn(logger,"Iteration {}",val); assertEquals("Iteration true",capture.getMessage()); testWarnFloat LogCapture capture=newLogCapture(Level.WARN) float val=3.14f LogSF.warn(logger,"Iteration {}",val); assertEquals("Iteration "+String.valueOf(val),capture.getMessage()); testWarnDouble LogCapture capture=newLogCapture(Level.WARN) double val=3.14 LogSF.warn(logger,"Iteration {}",val); assertEquals("Iteration "+String.valueOf(val),capture.getMessage()); testWarnTwoArg LogCapture capture=newLogCapture(Level.WARN) LogSF.warn(logger,"{}, {}.","Hello","World"); assertEquals("Hello, World.",capture.getMessage()); testWarnThreeArg LogCapture capture=newLogCapture(Level.WARN) LogSF.warn(logger,"{}{} {}.","Hello",",","World"); assertEquals("Hello, World.",capture.getMessage()); testWarnFourArg LogCapture capture=newLogCapture(Level.WARN) LogSF.warn(logger,"{}{} {}{}","Hello",",","World","."); assertEquals("Hello, World.",capture.getMessage()); testWarnArrayArg LogCapture capture=newLogCapture(Level.WARN) Object[] args=newObject[]{"Hello",",","World","."} LogSF.warn(logger,"{}{} {}{}",args); assertEquals("Hello, World.",capture.getMessage()); testLogNullPattern LogCapture capture=newLogCapture(Level.ERROR) LogSF.log(logger,Level.ERROR,null,Math.PI); assertNull(capture.getMessage()); testLogNoArg LogCapture capture=newLogCapture(Level.ERROR) LogSF.log(logger,Level.ERROR,"Hello, World",Math.PI); assertEquals("Hello, World",capture.getMessage()); testLogBadPattern LogCapture capture=newLogCapture(Level.ERROR) LogSF.log(logger,Level.ERROR,"Hello, {.",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testLogMissingArg LogCapture capture=newLogCapture(Level.ERROR) LogSF.log(logger,Level.ERROR,"Hello, {}World",newObject[0]); assertEquals("Hello, {}World",capture.getMessage()); testLogString LogCapture capture=newLogCapture(Level.ERROR) LogSF.log(logger,Level.ERROR,"Hello, {}","World"); assertEquals("Hello, World",capture.getMessage()); testLogNull LogCapture capture=newLogCapture(Level.ERROR) LogSF.log(logger,Level.ERROR,"Hello, {}",(Object)null); assertEquals("Hello, null",capture.getMessage()); testLogInt LogCapture capture=newLogCapture(Level.ERROR) int val=42 LogSF.log(logger,Level.ERROR,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testLogByte LogCapture capture=newLogCapture(Level.ERROR) byte val=42 LogSF.log(logger,Level.ERROR,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testLogShort LogCapture capture=newLogCapture(Level.ERROR) short val=42 LogSF.log(logger,Level.ERROR,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testLogLong LogCapture capture=newLogCapture(Level.ERROR) long val=42 LogSF.log(logger,Level.ERROR,"Iteration {}",val); assertEquals("Iteration 42",capture.getMessage()); testLogChar LogCapture capture=newLogCapture(Level.ERROR) char val='C' LogSF.log(logger,Level.ERROR,"Iteration {}",val); assertEquals("Iteration C",capture.getMessage()); testLogBoolean LogCapture capture=newLogCapture(Level.ERROR) boolean val=true LogSF.log(logger,Level.ERROR,"Iteration {}",val); assertEquals("Iteration true",capture.getMessage()); testLogFloat LogCapture capture=newLogCapture(Level.ERROR) LogSF.log(logger,Level.ERROR,"Iteration {}",(float)Math.PI); String expected="Iteration "+String.valueOf(newFloat(Math.PI)) assertEquals(expected,capture.getMessage()); testLogDouble LogCapture capture=newLogCapture(Level.ERROR) LogSF.log(logger,Level.ERROR,"Iteration {}",Math.PI); String expected="Iteration "+String.valueOf(newDouble(Math.PI)) assertEquals(expected,capture.getMessage()); testLogTwoArg LogCapture capture=newLogCapture(Level.ERROR) LogSF.log(logger,Level.ERROR,"{}, {}.","Hello","World"); assertEquals("Hello, World.",capture.getMessage()); testLogThreeArg LogCapture capture=newLogCapture(Level.ERROR) LogSF.log(logger,Level.ERROR,"{}{} {}.","Hello",",","World"); assertEquals("Hello, World.",capture.getMessage()); testLogFourArg LogCapture capture=newLogCapture(Level.ERROR) LogSF.log(logger,Level.ERROR,"{}{} {}{}","Hello",",","World","."); assertEquals("Hello, World.",capture.getMessage()); testLogArrayArg LogCapture capture=newLogCapture(Level.ERROR) Object[] args=newObject[]{"Hello",",","World","."} LogSF.log(logger,Level.ERROR,"{}{} {}{}",args); assertEquals("Hello, World.",capture.getMessage()); BUNDLE_NAME="org.apache.log4j.TestLogSFPatterns" testLogrbNullBundle LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,null,"Iteration0",Math.PI); assertEquals("Iteration0",capture.getMessage()); testLogrbNullKey LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,null,Math.PI); assertNull(capture.getMessage()); testLogrbNoArg LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello1",Math.PI); assertEquals("Hello, World",capture.getMessage()); testLogrbBadPattern LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Malformed",Math.PI); assertEquals("Hello, {.",capture.getMessage()); testLogrbMissingArg LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello2",newObject[0]); assertEquals("Hello, {}World",capture.getMessage()); testLogrbString LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello3","World"); assertEquals("Hello, World",capture.getMessage()); testLogrbNull LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello3",(Object)null); assertEquals("Hello, null",capture.getMessage()); testLogrbInt LogCapture capture=newLogCapture(Level.ERROR) int val=42 LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration 42",capture.getMessage()); testLogrbByte LogCapture capture=newLogCapture(Level.ERROR) byte val=42 LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration 42",capture.getMessage()); testLogrbShort LogCapture capture=newLogCapture(Level.ERROR) short val=42 LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration 42",capture.getMessage()); testLogrbLong LogCapture capture=newLogCapture(Level.ERROR) long val=42 LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration 42",capture.getMessage()); testLogrbChar LogCapture capture=newLogCapture(Level.ERROR) char val='C' LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration C",capture.getMessage()); testLogrbBoolean LogCapture capture=newLogCapture(Level.ERROR) boolean val=true LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",val); assertEquals("Iteration true",capture.getMessage()); testLogrbFloat LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",(float)Math.PI); String expected="Iteration "+String.valueOf(newFloat(Math.PI)) assertEquals(expected,capture.getMessage()); testLogrbDouble LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Iteration0",Math.PI); String expected="Iteration "+String.valueOf(newDouble(Math.PI)) assertEquals(expected,capture.getMessage()); testLogrbTwoArg LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello4","Hello","World"); assertEquals("Hello, World.",capture.getMessage()); testLogrbThreeArg LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello5","Hello",",","World"); assertEquals("Hello, World.",capture.getMessage()); testLogrbFourArg LogCapture capture=newLogCapture(Level.ERROR) LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello6","Hello",",","World","."); assertEquals("Hello, World.",capture.getMessage()); testLogrbArrayArg LogCapture capture=newLogCapture(Level.ERROR) Object[] args=newObject[]{"Hello",",","World","."} LogSF.logrb(logger,Level.ERROR,BUNDLE_NAME,"Hello6",args); assertEquals("Hello, World.",capture.getMessage()); testEscapeOneParam LogCapture capture=newLogCapture(Level.INFO) LogSF.info(logger,"\\{}\\{{}}, World}\\{","Hello"); assertEquals("{}{Hello}, World}{",capture.getMessage()); testEscapeTwoParam LogCapture capture=newLogCapture(Level.INFO) LogSF.info(logger,"\\{}\\{{}}, {}}{}\\{","Hello","World"); assertEquals("{}{Hello}, World}{}{",capture.getMessage());
Class@@TestLogXF logger=Logger.getLogger("org.apache.log4j.formatter.TestLogXF") tearDown LogManager.resetConfiguration();
Class@@BadStringifier INSTANCE=newBadStringifier() toString thrownewNullPointerException(); testEnteringNullNull LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.entering(logger,null,null); assertEquals("null.null ENTRY",capture.getMessage()); testEnteringNullNullNull LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.entering(logger,null,null,(String)null); assertEquals("null.null ENTRY null",capture.getMessage()); testEnteringNullNullNullArray LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.entering(logger,null,null,(Object[])null); assertEquals("null.null ENTRY {}",capture.getMessage()); testEntering LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.entering(logger,"SomeClass","someMethod"); assertEquals("SomeClass.someMethod ENTRY",capture.getMessage()); testEnteringWithParam LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.entering(logger,"SomeClass","someMethod","someParam"); assertEquals("SomeClass.someMethod ENTRY someParam",capture.getMessage()); testEnteringWithBadParam LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.entering(logger,"SomeClass","someMethod",BadStringifier.INSTANCE); assertEquals("SomeClass.someMethod ENTRY ?",capture.getMessage()); testEnteringWithBadParams LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.entering(logger,"SomeClass","someMethod",newObject[]{"param1",BadStringifier.INSTANCE}); assertEquals("SomeClass.someMethod ENTRY {param1,?}",capture.getMessage()); testExitingNullNull LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.exiting(logger,null,null); assertEquals("null.null RETURN",capture.getMessage()); testExitingNullNullNull LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.exiting(logger,null,null,(String)null); assertEquals("null.null RETURN null",capture.getMessage()); testExiting LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.exiting(logger,"SomeClass","someMethod"); assertEquals("SomeClass.someMethod RETURN",capture.getMessage()); testExitingWithValue LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.exiting(logger,"SomeClass","someMethod","someValue"); assertEquals("SomeClass.someMethod RETURN someValue",capture.getMessage()); testExitingWithBadValue LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.exiting(logger,"SomeClass","someMethod",BadStringifier.INSTANCE); assertEquals("SomeClass.someMethod RETURN ?",capture.getMessage()); testThrowingNullNullNull LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.throwing(logger,null,null,null); assertEquals("null.null THROW",capture.getMessage()); testThrowing LogCapture capture=newLogCapture(Level.DEBUG) logger.setLevel(Level.DEBUG); LogXF.throwing(logger,"SomeClass","someMethod",newIllegalArgumentException()); assertEquals("SomeClass.someMethod THROW",capture.getMessage());
Class@@TTCCLayoutTest createLayout returnnewTTCCLayout(); testFormat NDC.clear(); NDC.push("NDC goes here"); Logger logger=Logger.getLogger("org.apache.log4j.LayoutTest") LoggingEvent event=newLoggingEvent("org.apache.log4j.Logger",logger,Level.INFO,"Hello, World",null) TTCCLayout layout=(TTCCLayout)createLayout() String result=layout.format(event) NDC.pop(); StringBuffer buf=newStringBuffer(100) layout.dateFormat(buf,event); buf.append('['); buf.append(event.getThreadName()); buf.append("] "); buf.append(event.getLevel().toString()); buf.append(' '); buf.append(event.getLoggerName()); buf.append(' '); buf.append("NDC goes here"); buf.append(" - "); buf.append(event.getMessage()); buf.append(System.getProperty("line.separator")); assertEquals(buf.toString(),result); testGetSetThreadPrinting TTCCLayout layout=newTTCCLayout() assertEquals(true,layout.getThreadPrinting()); layout.setThreadPrinting(false); assertEquals(false,layout.getThreadPrinting()); layout.setThreadPrinting(true); assertEquals(true,layout.getThreadPrinting()); testGetSetCategoryPrefixing TTCCLayout layout=newTTCCLayout() assertEquals(true,layout.getCategoryPrefixing()); layout.setCategoryPrefixing(false); assertEquals(false,layout.getCategoryPrefixing()); layout.setCategoryPrefixing(true); assertEquals(true,layout.getCategoryPrefixing()); testGetSetContextPrinting TTCCLayout layout=newTTCCLayout() assertEquals(true,layout.getContextPrinting()); layout.setContextPrinting(false); assertEquals(false,layout.getContextPrinting()); layout.setContextPrinting(true); assertEquals(true,layout.getContextPrinting());
Class@@AbsoluteDateAndTimeFilter util=newPerl5Util() filter String pat="/"+Filter.ABSOLUTE_DATE_AND_TIME_PAT+"/" if(util.match(pat,in)){returnutil.substitute("s/"+Filter.ABSOLUTE_DATE_AND_TIME_PAT+"//",in);}else{returnin;} returnutil.substitute("s/"+Filter.ABSOLUTE_DATE_AND_TIME_PAT+"//",in); returnin;
Class@@AbsoluteTimeFilter util=newPerl5Util() filter String pat="/"+Filter.ABSOLUTE_TIME_PAT+"/" if(util.match(pat,in)){returnutil.substitute("s/"+Filter.ABSOLUTE_TIME_PAT+"//",in);}else{returnin;} returnutil.substitute("s/"+Filter.ABSOLUTE_TIME_PAT+"//",in); returnin;
Class@@Compare B1_NULL=-1 B2_NULL=-2 compare BufferedReader in1=newBufferedReader(newFileReader(file1)) BufferedReader in2=newBufferedReader(newFileReader(file2)) String s1 int lineCounter=0 while((s1=in1.readLine())!=null){lineCounter++;Strings2=in2.readLine();if(!s1.equals(s2)){System.out.println("Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter);System.out.println("One reads:  ["+s1+"].");System.out.println("Other reads:["+s2+"].");returnfalse;}} lineCounter++; String s2=in2.readLine() if(!s1.equals(s2)){System.out.println("Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter);System.out.println("One reads:  ["+s1+"].");System.out.println("Other reads:["+s2+"].");returnfalse;} System.out.println("Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter); System.out.println("One reads:  ["+s1+"]."); System.out.println("Other reads:["+s2+"]."); returnfalse; if(in2.read()!=-1){System.out.println("File ["+file2+"] longer than file ["+file1+"].");returnfalse;} System.out.println("File ["+file2+"] longer than file ["+file1+"]."); returnfalse; returntrue; open String resourceName=fileName if(fileName.startsWith("witness/")){resourceName=fileName.substring(fileName.lastIndexOf('/')+1);} resourceName=fileName.substring(fileName.lastIndexOf('/')+1); InputStream is=testClass.getResourceAsStream(resourceName) if(is==null){Filefile=newFile(fileName);if(file.exists()){is=newFileInputStream(file);}else{thrownewFileNotFoundException("Resource "+resourceName+" not found");}} File file=newFile(fileName) if(file.exists()){is=newFileInputStream(file);}else{thrownewFileNotFoundException("Resource "+resourceName+" not found");} is=newFileInputStream(file); thrownewFileNotFoundException("Resource "+resourceName+" not found"); returnis; compare BufferedReader in1=newBufferedReader(newFileReader(file1)) BufferedReader in2=newBufferedReader(newInputStreamReader(open(testClass,file2))) try{returncompare(testClass,file1,file2,in1,in2);}finally{in1.close();in2.close();} returncompare(testClass,file1,file2,in1,in2); in1.close(); in2.close(); compare String s1 int lineCounter=0 while((s1=in1.readLine())!=null){lineCounter++;Strings2=in2.readLine();if(!s1.equals(s2)){System.out.println("Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter);System.out.println("One reads:  ["+s1+"].");System.out.println("Other reads:["+s2+"].");outputFile(testClass,file1);outputFile(testClass,file2);returnfalse;}} lineCounter++; String s2=in2.readLine() if(!s1.equals(s2)){System.out.println("Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter);System.out.println("One reads:  ["+s1+"].");System.out.println("Other reads:["+s2+"].");outputFile(testClass,file1);outputFile(testClass,file2);returnfalse;} System.out.println("Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter); System.out.println("One reads:  ["+s1+"]."); System.out.println("Other reads:["+s2+"]."); outputFile(testClass,file1); outputFile(testClass,file2); returnfalse; if(in2.read()!=-1){System.out.println("File ["+file2+"] longer than file ["+file1+"].");outputFile(testClass,file1);outputFile(testClass,file2);returnfalse;} System.out.println("File ["+file2+"] longer than file ["+file1+"]."); outputFile(testClass,file1); outputFile(testClass,file2); returnfalse; returntrue; outputFile InputStream is=open(testClass,file) BufferedReader in1=newBufferedReader(newInputStreamReader(is)) String s1 int lineCounter=0 System.out.println("--------------------------------"); System.out.println("Contents of "+file+":"); while((s1=in1.readLine())!=null){lineCounter++;System.out.print(lineCounter);if(lineCounter<10){System.out.print("   : ");}elseif(lineCounter<100){System.out.print("  : ");}elseif(lineCounter<1000){System.out.print(" : ");}else{System.out.print(": ");}System.out.println(s1);} lineCounter++; System.out.print(lineCounter); if(lineCounter<10){System.out.print("   : ");}elseif(lineCounter<100){System.out.print("  : ");}elseif(lineCounter<1000){System.out.print(" : ");}else{System.out.print(": ");} System.out.print("   : "); System.out.print("  : "); System.out.print(" : "); System.out.print(": "); System.out.println(s1); in1.close();
Class@@ControlFilter util=newPerl5Util() allowedPatterns this.allowedPatterns=allowedPatterns; filter int len=allowedPatterns.length for(inti=0;i<len;i++){if(util.match("/"+allowedPatterns[i]+"/",in)){returnin;}} if(util.match("/"+allowedPatterns[i]+"/",in)){returnin;} returnin; thrownewUnexpectedFormatException("["+in+"]");
Class@@EnhancedJunitTestRunnerFilter util=newPerl5Util() PATTERNS={"at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner","at org.apache.tools.ant","at junit.textui.TestRunner","at com.intellij.rt.execution.junit","at java.lang.reflect.Method.invoke","at org.apache.maven.","at org.codehaus.","at org.junit.internal.runners.","at junit.framework.JUnit4TestAdapter"} filter if(in==null){returnnull;} returnnull; if(in.indexOf("at junit.framework.TestCase.runTest")!=-1){return"\tat java.lang.reflect.Method.invoke(X)\n\t"+in.trim();} return"\tat java.lang.reflect.Method.invoke(X)\n\t"+in.trim(); for(inti=0;i<PATTERNS.length;i++){if(in.indexOf(PATTERNS[i])!=-1){returnnull;}} if(in.indexOf(PATTERNS[i])!=-1){returnnull;} returnnull; if(util.match("/\\sat /",in)){return"\t"+in.trim();} return"\t"+in.trim(); returnin;
Class@@EnhancedLineNumberFilter linePattern nativePattern linePattern=Pattern.compile("\\(.*:\\d{1,4}\\)"); nativePattern=Pattern.compile("\\(Native Method\\)"); filter if(linePattern.matcher(in).find()){returnlinePattern.matcher(in).replaceAll("(X)");}elseif(nativePattern.matcher(in).find()){returnnativePattern.matcher(in).replaceAll("(X)");}else{returnin;} returnlinePattern.matcher(in).replaceAll("(X)"); returnnativePattern.matcher(in).replaceAll("(X)"); returnin; filter
Class@@ISO8601Filter util=newPerl5Util() filter String pat="/"+ISO8601_PAT+"/" if(util.match(pat,in)){returnutil.substitute("s/"+ISO8601_PAT+"//",in);}else{returnin;} returnutil.substitute("s/"+ISO8601_PAT+"//",in); returnin;
Class@@JunitTestRunnerFilter util=newPerl5Util() filter if(in==null){returnnull;} returnnull; if(util.match("/at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner/",in)){returnnull;}elseif(util.match("/at org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner/",in)){returnnull;}elseif(util.match("/at com.intellij/",in)){returnnull;}elseif(in.indexOf("at junit.")>=0&&in.indexOf("ui.TestRunner")>=0){returnnull;}elseif(in.indexOf("org.apache.maven")>=0){returnnull;}elseif(in.indexOf("junit.internal")>=0){returnnull;}elseif(in.indexOf("JUnit4TestAdapter")>=0){returnnull;}elseif(util.match("/\\sat /",in)){return"\t"+in.trim();}else{returnin;} returnnull; returnnull; returnnull; returnnull; returnnull; returnnull; returnnull; return"\t"+in.trim(); returnin;
Class@@LineNumberFilter util=newPerl5Util() filter if(util.match("/\\(.*:\\d{1,4}\\)/",in)){returnutil.substitute("s/:\\d{1,4}\\)/:XXX)/",in);}else{if(in.indexOf(", Compiled Code")>=0){returnutil.substitute("s/, Compiled Code/:XXX/",in);}returnin;} returnutil.substitute("s/:\\d{1,4}\\)/:XXX)/",in); if(in.indexOf(", Compiled Code")>=0){returnutil.substitute("s/, Compiled Code/:XXX/",in);} returnutil.substitute("s/, Compiled Code/:XXX/",in); returnin;
Class@@RelativeTimeFilter util=newPerl5Util() filter String pat="/"+Filter.RELATIVE_TIME_PAT+"/" if(util.match(pat,in)){returnutil.substitute("s/"+Filter.RELATIVE_TIME_PAT+"//",in);}else{returnin;} returnutil.substitute("s/"+Filter.RELATIVE_TIME_PAT+"//",in); returnin;
Class@@SerializationTestHelper serializeClone ByteArrayOutputStream memOut=newByteArrayOutputStream() ObjectOutputStream objOut=newObjectOutputStream(memOut) objOut.writeObject(obj); objOut.close(); ByteArrayInputStream src=newByteArrayInputStream(memOut.toByteArray()) ObjectInputStream objIs=newObjectInputStream(src) returnobjIs.readObject(); deserializeStream FileInputStream fileIs=newFileInputStream(witness) ObjectInputStream objIs=newObjectInputStream(fileIs) returnobjIs.readObject(); assertSerializationEquals ByteArrayOutputStream memOut=newByteArrayOutputStream() ObjectOutputStream objOut=newObjectOutputStream(memOut) objOut.writeObject(obj); objOut.close(); assertStreamEquals(witness,memOut.toByteArray(),skip,endCompare); assertStreamEquals File witnessFile=newFile(witness) if(witnessFile.exists()){intskipIndex=0;byte[]expected=newbyte[actual.length];FileInputStreamis=newFileInputStream(witnessFile);intbytesRead=is.read(expected);is.close();if(bytesRead<endCompare){TestCase.assertEquals(bytesRead,actual.length);}intendScan=actual.length;if(endScan>endCompare){endScan=endCompare;}for(inti=0;i<endScan;i++){if((skipIndex<skip.length)&&(skip[skipIndex]==i)){skipIndex++;}else{if(expected[i]!=actual[i]){TestCase.assertEquals("Difference at offset "+i,expected[i],actual[i]);}}}}else{FileOutputStreamos=newFileOutputStream(witnessFile);os.write(actual);os.close();TestCase.fail("Writing witness file "+witness);} int skipIndex=0 byte[] expected=newbyte[actual.length] FileInputStream is=newFileInputStream(witnessFile) int bytesRead=is.read(expected) is.close(); if(bytesRead<endCompare){TestCase.assertEquals(bytesRead,actual.length);} TestCase.assertEquals(bytesRead,actual.length); int endScan=actual.length if(endScan>endCompare){endScan=endCompare;} endScan=endCompare; for(inti=0;i<endScan;i++){if((skipIndex<skip.length)&&(skip[skipIndex]==i)){skipIndex++;}else{if(expected[i]!=actual[i]){TestCase.assertEquals("Difference at offset "+i,expected[i],actual[i]);}}} if((skipIndex<skip.length)&&(skip[skipIndex]==i)){skipIndex++;}else{if(expected[i]!=actual[i]){TestCase.assertEquals("Difference at offset "+i,expected[i],actual[i]);}} skipIndex++; if(expected[i]!=actual[i]){TestCase.assertEquals("Difference at offset "+i,expected[i],actual[i]);} TestCase.assertEquals("Difference at offset "+i,expected[i],actual[i]); FileOutputStream os=newFileOutputStream(witnessFile) os.write(actual); os.close(); TestCase.fail("Writing witness file "+witness);
Class@@SunReflectFilter util=newPerl5Util() filter if(in==null){returnnull;} returnnull; if(util.match("/at sun.reflect/",in)){returnnull;} returnnull; if(in.indexOf("at java.lang.reflect.")>=0){returnnull;} returnnull; if(in.indexOf("Compiled Code")>=0){if(in.indexOf("junit.framework.TestSuite")>=0){returnutil.substitute("s/Compiled Code/TestSuite.java:XXX/",in);}} if(in.indexOf("junit.framework.TestSuite")>=0){returnutil.substitute("s/Compiled Code/TestSuite.java:XXX/",in);} returnutil.substitute("s/Compiled Code/TestSuite.java:XXX/",in); if(util.match("/\\(Method.java:.*\\)/",in)){returnutil.substitute("s/\\(Method.java:.*\\)/(Native Method)/",in);} returnutil.substitute("s/\\(Method.java:.*\\)/(Native Method)/",in); returnin;
Class@@Transformer transform String line BufferedReader input=newBufferedReader(newFileReader(in)) PrintStream output=newPrintStream(newFileOutputStream(out,false)) while((line=input.readLine())!=null){for(inti=0;i<filters.length;i++){line=filters[i].filter(line);}if(line!=null){output.println(line);}} for(inti=0;i<filters.length;i++){line=filters[i].filter(line);} line=filters[i].filter(line); if(line!=null){output.println(line);} output.println(line); transform String line BufferedReader input=newBufferedReader(newFileReader(in)) PrintStream output=newPrintStream(newFileOutputStream(out)) while((line=input.readLine())!=null){line=filter.filter(line);output.println(line);} line=filter.filter(line); output.println(line);
Class@@UnexpectedFormatException serialVersionUID=1787725660780924147L
Class@@XMLLineAttributeFilter util=newPerl5Util() filter if(util.match("/line=\"\\d{1,3}\"/",in)){returnutil.substitute("s/line=\"\\d{1,3}\"/line=\"X\"/",in);}elseif(util.match("/line=\"?\"/",in)){returnutil.substitute("s/line=\"?\"/line=\"X\"/",in);}else{returnin;} returnutil.substitute("s/line=\"\\d{1,3}\"/line=\"X\"/",in); returnutil.substitute("s/line=\"?\"/line=\"X\"/",in); returnin;
Class@@XMLTimestampFilter util=newPerl5Util() filter if(util.match("/timestamp=\"\\d{10,13}\"/",in)){returnutil.substitute("s/timestamp=\"\\d{10,13}\"/timestamp=\"XXX\"/",in);}else{returnin;} returnutil.substitute("s/timestamp=\"\\d{10,13}\"/timestamp=\"XXX\"/",in); returnin;
Class@@ERFATestCase tearDown LogManager.resetConfiguration(); testConstructor ExternallyRolledFileAppender appender=newExternallyRolledFileAppender() assertEquals(0,appender.getPort()); sendMessage Socket socket=newSocket((String)null,port) DataInputStream reader=newDataInputStream(socket.getInputStream()) DataOutputStream writer=newDataOutputStream(socket.getOutputStream()) writer.writeUTF(msg); String response=reader.readUTF() assertEquals(expectedResponse,response); reader.close(); writer.close(); socket.close(); testRollover ExternallyRolledFileAppender erfa=newExternallyRolledFileAppender() int port=5500 Logger logger=Logger.getLogger(RFATestCase.class) Logger root=Logger.getRootLogger() PatternLayout layout=newPatternLayout("%m\n") erfa.setLayout(layout); erfa.setAppend(false); erfa.setMaxBackupIndex(2); erfa.setPort(port); erfa.setFile("output/ERFA-test2.log"); try{erfa.activateOptions();}catch(SecurityExceptionex){return;} erfa.activateOptions(); return; try{Thread.sleep(100);}catch(InterruptedExceptionex){} Thread.sleep(100); root.addAppender(erfa); for(inti=0;i<55;i++){if(i<10){logger.debug("Hello---"+i);}elseif(i<100){logger.debug("Hello--"+i);}if((i%10)==9){try{sendMessage(port,"RollOver","OK");}catch(SecurityExceptionex){return;}}} if(i<10){logger.debug("Hello---"+i);}elseif(i<100){logger.debug("Hello--"+i);} logger.debug("Hello---"+i); logger.debug("Hello--"+i); if((i%10)==9){try{sendMessage(port,"RollOver","OK");}catch(SecurityExceptionex){return;}} try{sendMessage(port,"RollOver","OK");}catch(SecurityExceptionex){return;} sendMessage(port,"RollOver","OK"); return; try{sendMessage(port,"That's all folks.","Expecting [RollOver] string.");}catch(SecurityExceptionex){return;} sendMessage(port,"That's all folks.","Expecting [RollOver] string."); return; assertTrue(newFile("output/ERFA-test2.log").exists()); assertTrue(newFile("output/ERFA-test2.log.1").exists()); assertTrue(newFile("output/ERFA-test2.log.2").exists()); assertFalse(newFile("output/ERFA-test2.log.3").exists());
Class@@ErrorHandlerTestCase TEMP="output/temp" FILTERED="output/filtered" EXCEPTION1="java.lang.Exception: Just testing" EXCEPTION2="\\s*at .*\\(.*\\)" EXCEPTION3="\\s*at .*\\(Native Method\\)" TEST1_PAT="FALLBACK - (root|test) - Message \\d" root logger setUp root=Logger.getRootLogger(); logger=Logger.getLogger("test"); tearDown root.getLoggerRepository().resetConfiguration(); test1 DOMConfigurator.configure("input/xml/fallback1.xml"); Appender primary=root.getAppender("PRIMARY") ErrorHandler eh=primary.getErrorHandler() assertNotNull(eh); common(); ControlFilter cf=newControlFilter(newString[]{TEST1_PAT,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/fallback1")); test2 PropertyConfigurator.configure("input/fallback1.properties"); Appender primary=root.getAppender("PRIMARY") ErrorHandler eh=primary.getErrorHandler() assertNotNull(eh); common(); ControlFilter cf=newControlFilter(newString[]{TEST1_PAT,EXCEPTION1,EXCEPTION2,EXCEPTION3}) Transformer.transform(TEMP,FILTERED,newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/fallback1")); common int i=-1 logger.debug("Message "+++i); root.debug("Message "+i); logger.info("Message "+++i); root.info("Message "+i); logger.warn("Message "+++i); root.warn("Message "+i); logger.error("Message "+++i); root.error("Message "+i); logger.log(Level.FATAL,"Message "+++i); root.log(Level.FATAL,"Message "+i); Exception e=newException("Just testing") logger.debug("Message "+++i,e); root.debug("Message "+i,e); logger.error("Message "+++i,e); root.error("Message "+i,e);
Class@@LevelMatchFilterTestCase ACCEPT_FILE="output/LevelMatchFilter_accept" ACCEPT_FILTERED="output/LevelMatchFilter_accept_filtered" ACCEPT_WITNESS="witness/LevelMatchFilter_accept" DENY_FILE="output/LevelMatchFilter_deny" DENY_FILTERED="output/LevelMatchFilter_deny_filtered" DENY_WITNESS="witness/LevelMatchFilter_deny" root logger setUp root=Logger.getRootLogger(); root.removeAllAppenders(); tearDown root.getLoggerRepository().resetConfiguration(); accept Layout layout=newSimpleLayout() Appender appender=newFileAppender(layout,ACCEPT_FILE,false) LevelMatchFilter matchFilter=newLevelMatchFilter() appender.addFilter(matchFilter); appender.addFilter(newDenyAllFilter()); root.addAppender(appender); root.setLevel(Level.TRACE); Level[] levelArray=newLevel[]{Level.TRACE,Level.DEBUG,Level.INFO,Level.WARN,Level.ERROR,Level.FATAL} for(intx=0;x<levelArray.length;x++){matchFilter.setLevelToMatch(levelArray[x].toString());common("pass "+x+"; filter set to accept only "+levelArray[x].toString()+" msgs");} matchFilter.setLevelToMatch(levelArray[x].toString()); common("pass "+x+"; filter set to accept only "+levelArray[x].toString()+" msgs"); Transformer.transform(ACCEPT_FILE,ACCEPT_FILTERED,newLineNumberFilter()); assertTrue(Compare.compare(ACCEPT_FILTERED,ACCEPT_WITNESS)); deny Layout layout=newSimpleLayout() Appender appender=newFileAppender(layout,DENY_FILE,false) LevelMatchFilter matchFilter=newLevelMatchFilter() matchFilter.setAcceptOnMatch(false); appender.addFilter(matchFilter); root.addAppender(appender); root.setLevel(Level.TRACE); Level[] levelArray=newLevel[]{Level.TRACE,Level.DEBUG,Level.INFO,Level.WARN,Level.ERROR,Level.FATAL} for(intx=0;x<levelArray.length;x++){matchFilter.setLevelToMatch(levelArray[x].toString());common("pass "+x+"; filter set to deny only "+levelArray[x].toString()+" msgs");} matchFilter.setLevelToMatch(levelArray[x].toString()); common("pass "+x+"; filter set to deny only "+levelArray[x].toString()+" msgs"); Transformer.transform(DENY_FILE,DENY_FILTERED,newLineNumberFilter()); assertTrue(Compare.compare(DENY_FILTERED,DENY_WITNESS)); common Logger logger=Logger.getLogger("test") logger.trace(msg); logger.debug(msg); logger.info(msg); logger.warn(msg); logger.error(msg); logger.fatal(msg); suite TestSuite suite=newTestSuite() suite.addTest(newLevelMatchFilterTestCase("accept")); suite.addTest(newLevelMatchFilterTestCase("deny")); returnsuite;
Class@@VectorAppender vector vector=newVector(); activateOptions append try{Thread.sleep(100);}catch(Exceptione){} Thread.sleep(100); vector.addElement(event); getVector returnvector; close if(this.closed)return; this.closed=true; isClosed returnclosed; requiresLayout returnfalse;
Class@@VectorErrorHandler logger appender backupAppender errors=newVector() setLogger this.logger=logger; getLogger returnlogger; activateOptions error error(message,e,errorCode,null); error error(message,null,-1,null); error errors.addElement(newObject[]{message,e,newInteger(errorCode),event}); getMessage return(String)((Object[])errors.elementAt(index))[0]; getException return(Exception)((Object[])errors.elementAt(index))[1]; getErrorCode return((Integer)((Object[])errors.elementAt(index))[2]).intValue(); getEvent return(LoggingEvent)((Object[])errors.elementAt(index))[3]; size returnerrors.size(); setAppender this.appender=appender; getAppender returnappender; setBackupAppender this.backupAppender=appender; getBackupAppender returnbackupAppender;
Class@@CustomLevelTestCase TEMP="output/temp" root logger setUp root=Logger.getRootLogger(); logger=Logger.getLogger(CustomLevelTestCase.class); tearDown root.getLoggerRepository().resetConfiguration(); test1 DOMConfigurator.configure("input/xml/customLevel1.xml"); common(); assertTrue(Compare.compare(TEMP,"witness/customLevel.1")); test2 DOMConfigurator.configure("input/xml/customLevel2.xml"); common(); assertTrue(Compare.compare(TEMP,"witness/customLevel.2")); test3 DOMConfigurator.configure("input/xml/customLevel3.xml"); common(); assertTrue(Compare.compare(TEMP,"witness/customLevel.3")); test4 DOMConfigurator.configure("input/xml/customLevel4.xml"); common(); assertTrue(Compare.compare(TEMP,"witness/customLevel.4")); common int i=0 logger.debug("Message "+++i); logger.info("Message "+++i); logger.warn("Message "+++i); logger.error("Message "+++i); logger.log(XLevel.TRACE,"Message "+++i); suite TestSuite suite=newTestSuite() suite.addTest(newCustomLevelTestCase("test1")); suite.addTest(newCustomLevelTestCase("test2")); suite.addTest(newCustomLevelTestCase("test3")); suite.addTest(newCustomLevelTestCase("test4")); returnsuite;
Class@@DOMTestCase TEMP_A1="output/temp.A1" TEMP_A2="output/temp.A2" FILTERED_A1="output/filtered.A1" FILTERED_A2="output/filtered.A2" EXCEPTION1="java.lang.Exception: Just testing" EXCEPTION2="\\s*at .*\\(.*\\)" EXCEPTION3="\\s*at .*\\(Native Method\\)" EXCEPTION4="\\s*at .*\\(.*Compiled Code\\)" EXCEPTION5="\\s*at .*\\(.*libgcj.*\\)" TEST1_1A_PAT="(TRACE|DEBUG|INFO |WARN |ERROR|FATAL) \\w*\\.\\w* - Message \\d" TEST1_1B_PAT="(TRACE|DEBUG|INFO |WARN |ERROR|FATAL) root - Message \\d" TEST1_2_PAT="^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2},\\d{3} "+"\\[main]\\ (TRACE|DEBUG|INFO|WARN|ERROR|FATAL) .* - Message \\d" root logger setUp root=Logger.getRootLogger(); logger=Logger.getLogger(DOMTestCase.class); tearDown root.getLoggerRepository().resetConfiguration(); test1 DOMConfigurator.configure("input/xml/DOMTestCase1.xml"); common(); ControlFilter cf1=newControlFilter(newString[]{TEST1_1A_PAT,TEST1_1B_PAT,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) ControlFilter cf2=newControlFilter(newString[]{TEST1_2_PAT,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP_A1,FILTERED_A1,newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); Transformer.transform(TEMP_A2,FILTERED_A2,newFilter[]{cf2,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED_A1,"witness/dom.A1.1")); assertTrue(Compare.compare(FILTERED_A2,"witness/dom.A2.1")); test4 DOMConfigurator.configure("input/xml/DOMTest4.xml"); common(); ControlFilter cf1=newControlFilter(newString[]{TEST1_1A_PAT,TEST1_1B_PAT,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) ControlFilter cf2=newControlFilter(newString[]{TEST1_2_PAT,EXCEPTION1,EXCEPTION2,EXCEPTION3,EXCEPTION4,EXCEPTION5}) Transformer.transform(TEMP_A1+".4",FILTERED_A1+".4",newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); Transformer.transform(TEMP_A2+".4",FILTERED_A2+".4",newFilter[]{cf2,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); assertTrue(Compare.compare(FILTERED_A1+".4","witness/dom.A1.4")); assertTrue(Compare.compare(FILTERED_A2+".4","witness/dom.A2.4")); common String oldThreadName=Thread.currentThread().getName() Thread.currentThread().setName("main"); int i=-1 logger.trace("Message "+++i); root.trace("Message "+i); logger.debug("Message "+++i); root.debug("Message "+i); logger.info("Message "+++i); root.info("Message "+i); logger.warn("Message "+++i); root.warn("Message "+i); logger.error("Message "+++i); root.error("Message "+i); logger.log(Level.FATAL,"Message "+++i); root.log(Level.FATAL,"Message "+i); Exception e=newException("Just testing") logger.debug("Message "+++i,e); root.debug("Message "+i,e); logger.error("Message "+++i,e); root.error("Message "+i,e); Thread.currentThread().setName(oldThreadName);
Class@@CustomLogger
Class@@CustomLoggerFactory additivity additivity=true; makeNewLoggerInstance Logger logger=newCustomLogger(name) assertFalse(additivity); returnlogger; setAdditivity additivity=newVal;
Class@@CustomErrorHandler activateOptions setLogger error error error setAppender setBackupAppender testCategoryFactory1 DOMConfigurator.configure("input/xml/categoryfactory1.xml"); Logger logger1=Logger.getLogger("org.apache.log4j.xml.DOMTestCase.testCategoryFactory1.1") assertTrue(logger1instanceofCustomLogger); Logger logger2=Logger.getLogger("org.apache.log4j.xml.DOMTestCase.testCategoryFactory1.2") assertFalse(logger2instanceofCustomLogger); testCategoryFactory2 DOMConfigurator.configure("input/xml/categoryfactory2.xml"); Logger logger1=Logger.getLogger("org.apache.log4j.xml.DOMTestCase.testCategoryFactory2.1") assertTrue(logger1instanceofCustomLogger); Logger logger2=Logger.getLogger("org.apache.log4j.xml.DOMTestCase.testCategoryFactory2.2") assertFalse(logger2instanceofCustomLogger); testLoggerFactory1 DOMConfigurator.configure("input/xml/loggerfactory1.xml"); Logger logger1=Logger.getLogger("org.apache.log4j.xml.DOMTestCase.testLoggerFactory1.1") assertTrue(logger1instanceofCustomLogger); Logger logger2=Logger.getLogger("org.apache.log4j.xml.DOMTestCase.testLoggerFactory1.2") assertFalse(logger2instanceofCustomLogger); testReset VectorAppender appender=newVectorAppender() appender.setName("V1"); Logger.getRootLogger().addAppender(appender); DOMConfigurator.configure("input/xml/testReset.xml"); assertNull(Logger.getRootLogger().getAppender("V1")); testConfigureAndWatch DOMConfigurator.configureAndWatch("input/xml/DOMTestCase1.xml"); assertNotNull(Logger.getRootLogger().getAppender("A1")); testOverrideSubst DOMConfigurator configurator=newDOMConfigurator(){protectedStringsubst(finalStringvalue){if("output/temp.A1".equals(value)){return"output/subst-test.A1";}returnvalue;}} subst if("output/temp.A1".equals(value)){return"output/subst-test.A1";} return"output/subst-test.A1"; returnvalue; configurator.doConfigure("input/xml/DOMTestCase1.xml",LogManager.getLoggerRepository()); FileAppender a1=(FileAppender)Logger.getRootLogger().getAppender("A1") String file=a1.getFile() assertEquals("output/subst-test.A1",file);
Class@@MockThrowableRenderer activated=false showVersion=true activateOptions activated=true; isActivated returnactivated; doRender returnnewString[0]; setShowVersion showVersion=v; getShowVersion returnshowVersion; testThrowableRenderer1 DOMConfigurator.configure("input/xml/throwableRenderer1.xml"); ThrowableRendererSupport repo=(ThrowableRendererSupport)LogManager.getLoggerRepository() MockThrowableRenderer renderer=(MockThrowableRenderer)repo.getThrowableRenderer() LogManager.resetConfiguration(); assertNotNull(renderer); assertEquals(true,renderer.isActivated()); assertEquals(false,renderer.getShowVersion()); testJarURL File input=newFile("input/xml/defaultInit.xml") System.out.println(input.getAbsolutePath()); InputStream is=newFileInputStream(input) File dir=newFile("output") dir.mkdirs(); File file=newFile("output/xml.jar") ZipOutputStream zos=newZipOutputStream(newFileOutputStream(file)) zos.putNextEntry(newZipEntry("log4j.xml")); int len byte[] buf=newbyte[1024] while((len=is.read(buf))>0){zos.write(buf,0,len);} zos.write(buf,0,len); zos.closeEntry(); zos.close(); URL url=newURL("jar:"+file.toURL()+"!/log4j.xml") DOMConfigurator.configure(url); assertTrue(file.delete()); assertFalse(file.exists());
Class@@XLevel serialVersionUID=7288304330257085144L TRACE_INT=Level.DEBUG_INT-1 LETHAL_INT=Level.FATAL_INT+1 TRACE_STR="TRACE" LETHAL_STR="LETHAL" TRACE=newXLevel(TRACE_INT,TRACE_STR,7) LETHAL=newXLevel(LETHAL_INT,LETHAL_STR,0) toLevel return(Level)toLevel(sArg,XLevel.TRACE); toLevel if(sArg==null){returndefaultValue;} returndefaultValue; String stringVal=sArg.toUpperCase() if(stringVal.equals(TRACE_STR)){returnXLevel.TRACE;}elseif(stringVal.equals(LETHAL_STR)){returnXLevel.LETHAL;} returnXLevel.TRACE; returnXLevel.LETHAL; returnLevel.toLevel(sArg,(Level)defaultValue); toLevel switch(i){caseTRACE_INT:returnXLevel.TRACE;caseLETHAL_INT:returnXLevel.LETHAL;} returnXLevel.TRACE; returnXLevel.LETHAL; returnLevel.toLevel(i);
Class@@XMLLayoutTest setUp NDC.clear(); if(MDC.getContext()!=null){MDC.getContext().clear();} MDC.getContext().clear(); tearDown setUp(); createLayout returnnewXMLLayout(); parse DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance() factory.setNamespaceAware(false); factory.setCoalescing(true); DocumentBuilder builder=factory.newDocumentBuilder() Reader reader=newStringReader(source) Document doc=builder.parse(newInputSource(reader)) returndoc.getDocumentElement(); checkEventElement assertEquals("log4j:event",element.getTagName()); assertEquals(event.getLoggerName(),element.getAttribute("logger")); assertEquals(Long.toString(event.timeStamp),element.getAttribute("timestamp")); assertEquals(event.getLevel().toString(),element.getAttribute("level")); assertEquals(event.getThreadName(),element.getAttribute("thread")); checkMessageElement assertEquals("log4j:message",element.getTagName()); Node messageNode=element.getFirstChild() assertNotNull(messageNode); assertEquals(Node.TEXT_NODE,messageNode.getNodeType()); assertEquals(message,messageNode.getNodeValue()); assertNull(messageNode.getNextSibling()); checkNDCElement assertEquals("log4j:NDC",element.getTagName()); Node messageNode=element.getFirstChild() assertNotNull(messageNode); assertEquals(Node.TEXT_NODE,messageNode.getNodeType()); assertEquals(message,messageNode.getNodeValue()); assertNull(messageNode.getNextSibling()); checkThrowableElement assertEquals("log4j:throwable",element.getTagName()); Node messageNode=element.getFirstChild() assertNotNull(messageNode); assertEquals(Node.TEXT_NODE,messageNode.getNodeType()); String msg=ex.toString() assertEquals(msg,messageNode.getNodeValue().substring(0,msg.length())); assertNull(messageNode.getNextSibling()); checkPropertiesElement assertEquals("log4j:properties",element.getTagName()); int childNodeCount=0 for(Nodechild=element.getFirstChild();child!=null;child=child.getNextSibling()){if(child.getNodeType()==Node.ELEMENT_NODE){assertEquals("log4j:data",child.getNodeName());ElementchildElement=(Element)child;assertEquals(key,childElement.getAttribute("name"));assertEquals(value,childElement.getAttribute("value"));childNodeCount++;}} if(child.getNodeType()==Node.ELEMENT_NODE){assertEquals("log4j:data",child.getNodeName());ElementchildElement=(Element)child;assertEquals(key,childElement.getAttribute("name"));assertEquals(value,childElement.getAttribute("value"));childNodeCount++;} assertEquals("log4j:data",child.getNodeName()); Element childElement=(Element)child assertEquals(key,childElement.getAttribute("name")); assertEquals(value,childElement.getAttribute("value")); childNodeCount++; assertEquals(1,childNodeCount); testFormat Logger logger=Logger.getLogger("org.apache.log4j.xml.XMLLayoutTest") LoggingEvent event=newLoggingEvent("org.apache.log4j.Logger",logger,Level.INFO,"Hello, World",null) XMLLayout layout=(XMLLayout)createLayout() String result=layout.format(event) Element parsedResult=parse(result) checkEventElement(parsedResult,event); int childElementCount=0 for(Nodenode=parsedResult.getFirstChild();node!=null;node=node.getNextSibling()){switch(node.getNodeType()){caseNode.ELEMENT_NODE:childElementCount++;checkMessageElement((Element)node,"Hello, World");break;caseNode.COMMENT_NODE:break;caseNode.TEXT_NODE:break;default:fail("Unexpected node type");break;}} switch(node.getNodeType()){caseNode.ELEMENT_NODE:childElementCount++;checkMessageElement((Element)node,"Hello, World");break;caseNode.COMMENT_NODE:break;caseNode.TEXT_NODE:break;default:fail("Unexpected node type");break;} childElementCount++; checkMessageElement((Element)node,"Hello, World"); break; break; break; fail("Unexpected node type"); break; assertEquals(1,childElementCount); testFormatWithException Logger logger=Logger.getLogger("org.apache.log4j.xml.XMLLayoutTest") Exception ex=newIllegalArgumentException("'foo' is not a valid name") LoggingEvent event=newLoggingEvent("org.apache.log4j.Logger",logger,Level.INFO,"Hello, World",ex) XMLLayout layout=(XMLLayout)createLayout() String result=layout.format(event) Element parsedResult=parse(result) checkEventElement(parsedResult,event); int childElementCount=0 for(Nodenode=parsedResult.getFirstChild();node!=null;node=node.getNextSibling()){switch(node.getNodeType()){caseNode.ELEMENT_NODE:childElementCount++;if(childElementCount==1){checkMessageElement((Element)node,"Hello, World");}else{checkThrowableElement((Element)node,ex);}break;caseNode.COMMENT_NODE:break;caseNode.TEXT_NODE:break;default:fail("Unexpected node type");break;}} switch(node.getNodeType()){caseNode.ELEMENT_NODE:childElementCount++;if(childElementCount==1){checkMessageElement((Element)node,"Hello, World");}else{checkThrowableElement((Element)node,ex);}break;caseNode.COMMENT_NODE:break;caseNode.TEXT_NODE:break;default:fail("Unexpected node type");break;} childElementCount++; if(childElementCount==1){checkMessageElement((Element)node,"Hello, World");}else{checkThrowableElement((Element)node,ex);} checkMessageElement((Element)node,"Hello, World"); checkThrowableElement((Element)node,ex); break; break; break; fail("Unexpected node type"); break; assertEquals(2,childElementCount); testFormatWithNDC Logger logger=Logger.getLogger("org.apache.log4j.xml.XMLLayoutTest") NDC.push("NDC goes here"); LoggingEvent event=newLoggingEvent("org.apache.log4j.Logger",logger,Level.INFO,"Hello, World",null) XMLLayout layout=(XMLLayout)createLayout() String result=layout.format(event) NDC.pop(); Element parsedResult=parse(result) checkEventElement(parsedResult,event); int childElementCount=0 for(Nodenode=parsedResult.getFirstChild();node!=null;node=node.getNextSibling()){switch(node.getNodeType()){caseNode.ELEMENT_NODE:childElementCount++;if(childElementCount==1){checkMessageElement((Element)node,"Hello, World");}else{checkNDCElement((Element)node,"NDC goes here");}break;caseNode.COMMENT_NODE:break;caseNode.TEXT_NODE:break;default:fail("Unexpected node type");break;}} switch(node.getNodeType()){caseNode.ELEMENT_NODE:childElementCount++;if(childElementCount==1){checkMessageElement((Element)node,"Hello, World");}else{checkNDCElement((Element)node,"NDC goes here");}break;caseNode.COMMENT_NODE:break;caseNode.TEXT_NODE:break;default:fail("Unexpected node type");break;} childElementCount++; if(childElementCount==1){checkMessageElement((Element)node,"Hello, World");}else{checkNDCElement((Element)node,"NDC goes here");} checkMessageElement((Element)node,"Hello, World"); checkNDCElement((Element)node,"NDC goes here"); break; break; break; fail("Unexpected node type"); break; assertEquals(2,childElementCount); testGetSetLocationInfo XMLLayout layout=newXMLLayout() assertEquals(false,layout.getLocationInfo()); layout.setLocationInfo(true); assertEquals(true,layout.getLocationInfo()); layout.setLocationInfo(false); assertEquals(false,layout.getLocationInfo()); testActivateOptions XMLLayout layout=newXMLLayout() layout.activateOptions();
Class@@ProblemLevel serialVersionUID=1L testProblemCharacters String problemName="com.example.bar<>&\"'" Logger logger=Logger.getLogger(problemName) Level level=newProblemLevel(problemName) Exception ex=newIllegalArgumentException(problemName) String threadName=Thread.currentThread().getName() Thread.currentThread().setName(problemName); NDC.push(problemName); Hashtable mdcMap=MDC.getContext() if(mdcMap!=null){mdcMap.clear();} mdcMap.clear(); MDC.put(problemName,problemName); LoggingEvent event=newLoggingEvent(problemName,logger,level,problemName,ex) XMLLayout layout=(XMLLayout)createLayout() layout.setProperties(true); String result=layout.format(event) mdcMap=MDC.getContext(); if(mdcMap!=null){mdcMap.clear();} mdcMap.clear(); Thread.currentThread().setName(threadName); Element parsedResult=parse(result) checkEventElement(parsedResult,event); int childElementCount=0 for(Nodenode=parsedResult.getFirstChild();node!=null;node=node.getNextSibling()){switch(node.getNodeType()){caseNode.ELEMENT_NODE:childElementCount++;switch(childElementCount){case1:checkMessageElement((Element)node,problemName);break;case2:checkNDCElement((Element)node,problemName);break;case3:checkThrowableElement((Element)node,ex);break;case4:checkPropertiesElement((Element)node,problemName,problemName);break;default:fail("Unexpected element");break;}break;caseNode.COMMENT_NODE:break;caseNode.TEXT_NODE:break;default:fail("Unexpected node type");break;}} switch(node.getNodeType()){caseNode.ELEMENT_NODE:childElementCount++;switch(childElementCount){case1:checkMessageElement((Element)node,problemName);break;case2:checkNDCElement((Element)node,problemName);break;case3:checkThrowableElement((Element)node,ex);break;case4:checkPropertiesElement((Element)node,problemName,problemName);break;default:fail("Unexpected element");break;}break;caseNode.COMMENT_NODE:break;caseNode.TEXT_NODE:break;default:fail("Unexpected node type");break;} childElementCount++; switch(childElementCount){case1:checkMessageElement((Element)node,problemName);break;case2:checkNDCElement((Element)node,problemName);break;case3:checkThrowableElement((Element)node,ex);break;case4:checkPropertiesElement((Element)node,problemName,problemName);break;default:fail("Unexpected element");break;} checkMessageElement((Element)node,problemName); break; checkNDCElement((Element)node,problemName); break; checkThrowableElement((Element)node,ex); break; checkPropertiesElement((Element)node,problemName,problemName); break; fail("Unexpected element"); break; break; break; break; fail("Unexpected node type"); break; testNDCWithCDATA Logger logger=Logger.getLogger("com.example.bar") Level level=Level.INFO String ndcMessage="<envelope><faultstring><![CDATA[The EffectiveDate]]></faultstring><envelope>" NDC.push(ndcMessage); LoggingEvent event=newLoggingEvent("com.example.bar",logger,level,"Hello, World",null) Layout layout=createLayout() String result=layout.format(event) NDC.clear(); Element parsedResult=parse(result) NodeList ndcs=parsedResult.getElementsByTagName("log4j:NDC") assertEquals(1,ndcs.getLength()); StringBuffer buf=newStringBuffer() for(Nodechild=ndcs.item(0).getFirstChild();child!=null;child=child.getNextSibling()){buf.append(child.getNodeValue());} buf.append(child.getNodeValue()); assertEquals(ndcMessage,buf.toString()); testExceptionWithCDATA Logger logger=Logger.getLogger("com.example.bar") Level level=Level.INFO String exceptionMessage="<envelope><faultstring><![CDATA[The EffectiveDate]]></faultstring><envelope>" LoggingEvent event=newLoggingEvent("com.example.bar",logger,level,"Hello, World",newException(exceptionMessage)) Layout layout=createLayout() String result=layout.format(event) Element parsedResult=parse(result) NodeList throwables=parsedResult.getElementsByTagName("log4j:throwable") assertEquals(1,throwables.getLength()); StringBuffer buf=newStringBuffer() for(Nodechild=throwables.item(0).getFirstChild();child!=null;child=child.getNextSibling()){buf.append(child.getNodeValue());} buf.append(child.getNodeValue()); assertTrue(buf.toString().indexOf(exceptionMessage)!=-1);
Class@@XMLLayoutTestCase TEMP="output/temp" FILTERED="output/filtered" root logger setUp root=Logger.getRootLogger(); root.setLevel(Level.TRACE); logger=Logger.getLogger(XMLLayoutTestCase.class); logger.setLevel(Level.TRACE); tearDown root.getLoggerRepository().resetConfiguration(); basic XMLLayout xmlLayout=newXMLLayout() root.addAppender(newFileAppender(xmlLayout,TEMP,false)); common(); Transformer.transform(TEMP,FILTERED,newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/xmlLayout.1")); locationInfo XMLLayout xmlLayout=newXMLLayout() xmlLayout.setLocationInfo(true); root.addAppender(newFileAppender(xmlLayout,TEMP,false)); common(); Transformer.transform(TEMP,FILTERED,newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/xmlLayout.2")); testCDATA XMLLayout xmlLayout=newXMLLayout() xmlLayout.setLocationInfo(true); root.addAppender(newFileAppender(xmlLayout,TEMP,false)); String oldThreadName=Thread.currentThread().getName() Thread.currentThread().setName("main"); logger.trace("Message with embedded <![CDATA[<hello>hi</hello>]]>."); logger.debug("Message with embedded <![CDATA[<hello>hi</hello>]]>."); Thread.currentThread().setName(oldThreadName); Transformer.transform(TEMP,FILTERED,newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}); Transformer.transform(TEMP,FILTERED,newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter()}); assertTrue(Compare.compare(FILTERED,"witness/xmlLayout.3")); testNull XMLLayout xmlLayout=newXMLLayout() root.addAppender(newFileAppender(xmlLayout,TEMP,false)); String oldThreadName=Thread.currentThread().getName() Thread.currentThread().setName("main"); logger.debug("hi"); logger.debug(null); Exception e=newException((String)null) logger.debug("hi",e); Thread.currentThread().setName(oldThreadName); Transformer.transform(TEMP,FILTERED,newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}); assertTrue(Compare.compare(FILTERED,"witness/xmlLayout.null")); testMDC XMLLayout xmlLayout=newXMLLayout() xmlLayout.setProperties(true); root.addAppender(newFileAppender(xmlLayout,TEMP,false)); Hashtable context=MDC.getContext() if(context!=null){context.clear();} context.clear(); MDC.put("key1","val1"); MDC.put("key2","val2"); logger.debug("Hello"); Transformer.transform(TEMP,FILTERED,newFilter[]{newLineNumberFilter(),newJunitTestRunnerFilter(),newXMLTimestampFilter()}); assertTrue(Compare.compare(FILTERED,"witness/xmlLayout.mdc.1")); testMDCEscaped XMLLayout xmlLayout=newXMLLayout() xmlLayout.setProperties(true); root.addAppender(newFileAppender(xmlLayout,TEMP,false)); Hashtable context=MDC.getContext() if(context!=null){context.clear();} context.clear(); MDC.put("blahAttribute","<blah value='blah'>"); MDC.put("<blahKey value='blah'/>","blahValue"); logger.debug("Hello"); Transformer.transform(TEMP,FILTERED,newFilter[]{newLineNumberFilter(),newJunitTestRunnerFilter(),newXMLTimestampFilter()}); assertTrue(Compare.compare(FILTERED,"witness/xmlLayout.mdc.2")); common String oldThreadName=Thread.currentThread().getName() Thread.currentThread().setName("main"); int i=-1 newX(); logger.trace("Message "+++i); root.trace("Message "+i); logger.debug("Message "+++i); root.debug("Message "+i); logger.info("Message "+++i); root.info("Message "+i); logger.warn("Message "+++i); root.warn("Message "+i); logger.error("Message "+++i); root.error("Message "+i); logger.log(Level.FATAL,"Message "+++i); root.log(Level.FATAL,"Message "+i); Exception e=newException("Just testing") logger.debug("Message "+++i,e); root.debug("Message "+i,e); logger.error("Message "+++i,e); root.error("Message "+i,e); Thread.currentThread().setName(oldThreadName); suite TestSuite suite=newTestSuite() suite.addTest(newXMLLayoutTestCase("basic")); suite.addTest(newXMLLayoutTestCase("locationInfo")); suite.addTest(newXMLLayoutTestCase("testCDATA")); suite.addTest(newXMLLayoutTestCase("testNull")); suite.addTest(newXMLLayoutTestCase("testMDC")); suite.addTest(newXMLLayoutTestCase("testMDCEscaped")); returnsuite;
Class@@X logger=Logger.getLogger(X.class) logger.info("in X() constructor");