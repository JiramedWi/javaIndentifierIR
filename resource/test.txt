setUp
setUp
tearDown
shutdown
LogManager
tearDown
closeTest
setName
asyncAppender
"async-CloseTest"
addAppender
asyncAppender
vectorAppender
addAppender
root
asyncAppender
debug
root
"m1"
close
asyncAppender
debug
root
"m2"
null
assertEquals
v.size()
1
closeTest
test2
setName
asyncAppender
"async-test2"
addAppender
asyncAppender
vectorAppender
addAppender
root
asyncAppender
debug
root
"m1"
close
asyncAppender
debug
root
"m2"
null
assertEquals
v.size()
1
null
assertTrue
vectorAppender.isClosed()
test2
test3
setName
asyncAppender
"async-test3"
addAppender
asyncAppender
vectorAppender
addAppender
root
asyncAppender
debug
root
"message"+i
println
System.out
"Done loop."
flush
System.out
close
asyncAppender
debug
root
"m2"
null
assertEquals
v.size()
LEN
null
assertTrue
vectorAppender.isClosed()
test3
append
append
close
close
requiresLayout
requiresLayout
testBadAppender
addAppender
asyncAppender
nullPointerAppender
setBufferSize
asyncAppender
5
activateOptions
asyncAppender
addAppender
root
nullPointerAppender
info
root
"Message"
sleep
Thread
10
info
root
"Message"
null
fail
"Should have thrown exception"
testBadAppender
testLocationInfoTrue
addAppender
async
blockableAppender
setBufferSize
async
5
setLocationInfo
async
true
setBlocking
async
false
activateOptions
async
addAppender
rootLogger
async
run
greeter
error
rootLogger
"That's all folks."
close
async
setConversionPattern
layout
"%C:%L %m%n"
activateOptions
layout
null
assertEquals
AsyncAppenderTestCase.class.getName()
initialStr.substring(0,AsyncAppenderTestCase.class.getName().length())
null
assertEquals
"?:? "
discardStr.substring(0,4)
testLocationInfoTrue
testLocationInfoFalse
addAppender
async
blockableAppender
setBufferSize
async
5
setLocationInfo
async
false
setBlocking
async
false
activateOptions
async
addAppender
rootLogger
async
run
greeter
error
rootLogger
"That's all folks."
close
async
setConversionPattern
layout
"%C:%L %m%n"
activateOptions
layout
null
assertEquals
"?:? "
initialStr.substring(0,4)
null
assertEquals
"?:? "
discardStr.substring(0,4)
testLocationInfoFalse
run
info
logger
"Hello, World"
sleep
Thread
1
interrupt
Thread.currentThread()
run
append
append
error
logger
event.getMessage().toString()
warn
logger
event.getMessage().toString()
info
logger
event.getMessage().toString()
debug
logger
event.getMessage().toString()
append
getMonitor
getMonitor
testMutableMessage
addAppender
async
blockableAppender
setBufferSize
async
5
setLocationInfo
async
false
activateOptions
async
addAppender
rootLogger
async
info
rootLogger
buf
append
buf
", World."
close
async
setConversionPattern
layout
"%m"
activateOptions
layout
null
assertEquals
"Hello"
msg
testMutableMessage
testForcedLog
setAdditivity
category
false
addAppender
category
newVectorAppender()
info
category
"Hello, World"
testForcedLog
testGetChainedPriorityReturnType
null
assertTrue
method.getReturnType()==Priority.class
testGetChainedPriorityReturnType
testL7dlog
setLevel
logger
Level.ERROR
l7dlog
logger
debug
"Hello, World"
null
testL7dlog
testL7dlog4Param
setLevel
logger
Level.ERROR
l7dlog
logger
debug
"Hello, World"
newObject[0]
null
testL7dlog4Param
testSetPriority
setPriority
logger
debug
testSetPriority
info
null
forcedLog
MockCategory.class.toString()
info
msg
null
info
suite
addTestSuite
s
LoggingEventTest.class
addTestSuite
s
org.apache.log4j.LevelTest.class
addTestSuite
s
org.apache.log4j.PriorityTest.class
addTestSuite
s
org.apache.log4j.CategoryTest.class
addTestSuite
s
org.apache.log4j.FileAppenderTest.class
addTestSuite
s
org.apache.log4j.LogManagerTest.class
addTestSuite
s
org.apache.log4j.helpers.LogLogTest.class
addTestSuite
s
org.apache.log4j.LayoutTest.class
addTestSuite
s
org.apache.log4j.helpers.DateLayoutTest.class
addTestSuite
s
org.apache.log4j.TTCCLayoutTest.class
addTestSuite
s
org.apache.log4j.xml.XMLLayoutTest.class
addTestSuite
s
org.apache.log4j.HTMLLayoutTest.class
addTestSuite
s
org.apache.log4j.PatternLayoutTest.class
addTestSuite
s
org.apache.log4j.spi.LoggingEventTest.class
addTestSuite
s
org.apache.log4j.spi.ThrowableInformationTest.class
addTestSuite
s
org.apache.log4j.spi.LocationInfoTest.class
addTestSuite
s
org.apache.log4j.PropertyConfiguratorTest.class
addTestSuite
s
org.apache.log4j.net.SMTPAppenderTest.class
addTestSuite
s
org.apache.log4j.net.TelnetAppenderTest.class
addTestSuite
s
org.apache.log4j.DefaultThrowableRendererTest.class
addTestSuite
s
org.apache.log4j.EnhancedThrowableRendererTest.class
addTestSuite
s
org.apache.log4j.TestLogXF.class
addTestSuite
s
org.apache.log4j.TestLogMF.class
addTestSuite
s
org.apache.log4j.TestLogSF.class
addTestSuite
s
org.apache.log4j.pattern.CachedDateFormatTest.class
addTestSuite
s
org.apache.log4j.pattern.FormattingInfoTest.class
addTestSuite
s
org.apache.log4j.pattern.NameAbbreviatorTest.class
addTestSuite
s
org.apache.log4j.pattern.PatternParserTest.class
addTestSuite
s
org.apache.log4j.helpers.UtilLoggingLevelTest.class
suite
activateOptions
activateOptions
debug
log
debug
lethal
null
forcedLog
FQCN
XLevel.LETHAL
message
t
lethal
lethal
null
forcedLog
FQCN
XLevel.LETHAL
message
null
lethal
getLogger
getLogger
getLogger
getLogger
getSuffix
getSuffix
setSuffix
setSuffix
trace
null
forcedLog
FQCN
XLevel.TRACE
message
t
trace
trace
null
forcedLog
FQCN
XLevel.TRACE
message
null
trace
makeNewLoggerInstance
makeNewLoggerInstance
tearDown
resetConfiguration
logger.getLoggerRepository()
tearDown
test1
null
common
1
test1
test2
null
common
2
test2
common
configure
DOMConfigurator
"input/xml/customLogger"+number+".xml"
trace
logger
"Message "+++i
debug
logger
"Message "+++i
warn
logger
"Message "+++i
error
logger
"Message "+++i
fatal
logger
"Message "+++i
debug
logger
"Message "+++i
e
transform
Transformer
"output/temp"
FILTERED
newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/customLogger."+number)
common
suite
addTest
suite
newXLoggerTestCase("test1")
addTest
suite
newXLoggerTestCase("test2")
suite
setUp
setUp
tearDown
shutdown
LogManager
tearDown
noneTest
null
assertTrue
!rootIsConfigured
noneTest
suite
addTest
suite
newTestCase1("noneTest")
suite
setUp
setUp
tearDown
shutdown
LogManager
tearDown
xmlTest
null
assertTrue
rootIsConfigured
null
assertEquals
appender.getName()
"D1"
xmlTest
suite
addTest
suite
newTestCase2("xmlTest")
suite
setUp
setUp
tearDown
shutdown
LogManager
tearDown
propertiesTest
null
assertTrue
rootIsConfigured
null
assertEquals
appender.getName()
"D3"
propertiesTest
suite
addTest
suite
newTestCase3("propertiesTest")
suite
setUp
setUp
tearDown
shutdown
LogManager
tearDown
combinedTest
null
assertTrue
rootIsConfigured
null
assertEquals
appender.getName()
"D1"
null
assertEquals
e.hasMoreElements()
false
combinedTest
suite
addTest
suite
newTestCase4("combinedTest")
suite
testDefaultRender
null
assertNotNull
strRep
null
assertTrue
strRep.length>0
null
assertNotNull
strRep[i]
testDefaultRender
tearDown
resetConfiguration
LogManager
tearDown
testComputeCheckPeriod
setName
drfa
"testComputeCheckPeriod"
setDatePattern
drfa
"yyyy-MM-dd.'log'"
activateOptions
drfa
computeCheckPeriod
drfa
null
assertEquals
drfa.computeCheckPeriod()
DailyRollingFileAppender.TOP_OF_DAY
setDatePattern
drfa
"yyyy-MM-dd mm.'log'"
null
assertEquals
drfa.computeCheckPeriod()
DailyRollingFileAppender.TOP_OF_MINUTE
setDatePattern
drfa
"yyyy-MM-dd a.'log'"
null
assertEquals
drfa.computeCheckPeriod()
DailyRollingFileAppender.HALF_DAY
setDatePattern
drfa
"yyyy-MM-dd HH.'log'"
null
assertEquals
drfa.computeCheckPeriod()
DailyRollingFileAppender.TOP_OF_HOUR
setDatePattern
drfa
"yyyy-MM.'log'"
null
assertEquals
drfa.computeCheckPeriod()
DailyRollingFileAppender.TOP_OF_MONTH
setDatePattern
drfa
"'log'HH'log'"
null
assertEquals
drfa.computeCheckPeriod()
DailyRollingFileAppender.TOP_OF_HOUR
testComputeCheckPeriod
testRC1
setType
rc
DailyRollingFileAppender.TOP_OF_DAY
clear
c
set
c
Calendar.YEAR
20
set
c
Calendar.MONTH
Calendar.JANUARY+M31[i]
set
c
Calendar.DAY_OF_MONTH
d
set
c
Calendar.HOUR_OF_DAY
h
set
c
Calendar.MINUTE
10
set
c
Calendar.SECOND
10
set
c
Calendar.MILLISECOND
88
setTime
c
rc.getNextCheckDate(c.getTime())
null
assertEquals
c.get(Calendar.MONTH)
(Calendar.JANUARY+M31[i]+1)%12
null
assertEquals
c.get(Calendar.DAY_OF_MONTH)
1
null
assertEquals
c.get(Calendar.MONTH)
Calendar.JANUARY+M31[i]
null
assertEquals
c.get(Calendar.DAY_OF_MONTH)
d+1
null
assertEquals
c.get(Calendar.HOUR_OF_DAY)
0
null
assertEquals
c.get(Calendar.MINUTE)
0
null
assertEquals
c.get(Calendar.SECOND)
0
null
assertEquals
c.get(Calendar.MILLISECOND)
0
testRC1
testRC2
setType
rc
DailyRollingFileAppender.TOP_OF_HOUR
println
System.out
"Month = "+(M31[i]+1)
clear
c
set
c
Calendar.YEAR
20
set
c
Calendar.MONTH
Calendar.JANUARY+M31[i]
set
c
Calendar.DAY_OF_MONTH
d
set
c
Calendar.HOUR_OF_DAY
h
set
c
Calendar.MINUTE
m
set
c
Calendar.SECOND
12
set
c
Calendar.MILLISECOND
88
setTime
c
rc.getNextCheckDate(c.getTime())
null
assertEquals
c.get(Calendar.MILLISECOND)
0
null
assertEquals
c.get(Calendar.SECOND)
0
null
assertEquals
c.get(Calendar.MINUTE)
0
null
assertEquals
c.get(Calendar.HOUR_OF_DAY)
(h+1)%24
null
assertEquals
c.get(Calendar.HOUR_OF_DAY)
h
null
assertEquals
c.get(Calendar.DAY_OF_MONTH)
(d+1)%32
null
assertEquals
c.get(Calendar.MONTH)
(Calendar.JANUARY+M31[i]+1)%12
null
assertEquals
c.get(Calendar.MONTH)
Calendar.JANUARY+M31[i]
null
assertEquals
c.get(Calendar.DAY_OF_MONTH)
d
null
assertEquals
c.get(Calendar.MONTH)
Calendar.JANUARY+M31[i]
testRC2
testRC3
setType
rc
DailyRollingFileAppender.TOP_OF_MINUTE
println
System.out
"Month = "+(M31[i]+1)
clear
c
set
c
Calendar.YEAR
20
set
c
Calendar.MONTH
Calendar.JANUARY+M31[i]
set
c
Calendar.DAY_OF_MONTH
d
set
c
Calendar.HOUR_OF_DAY
h
set
c
Calendar.MINUTE
M[m]
set
c
Calendar.SECOND
S[s]
set
c
Calendar.MILLISECOND
88
add
c
Calendar.MILLISECOND
1
setTime
c
rc.getNextCheckDate(c.getTime())
add
c
Calendar.MILLISECOND
0
null
assertEquals
c.get(Calendar.MILLISECOND)
0
null
assertEquals
c.get(Calendar.SECOND)
0
null
assertEquals
c.get(Calendar.MINUTE)
(M[m]+1)%60
null
assertEquals
c.get(Calendar.HOUR_OF_DAY)
(h+1)%24
null
assertEquals
c.get(Calendar.DAY_OF_MONTH)
(d+1)%32
null
assertEquals
c.get(Calendar.MONTH)
(Calendar.JANUARY+M31[i]+1)%12
null
assertEquals
c.get(Calendar.MONTH)
Calendar.JANUARY+M31[i]
null
assertEquals
c.get(Calendar.DAY_OF_MONTH)
d
add
c
Calendar.HOUR_OF_DAY
+1
null
fail
"No switch"
null
assertEquals
c.get(Calendar.DAY_OF_MONTH)
d
null
assertEquals
c.get(Calendar.MONTH)
Calendar.JANUARY+M31[i]
testRC3
test3Param
null
assertEquals
datePattern
appender.getDatePattern()
addAppender
root
appender
info
root
"Hello, World"
null
assertTrue
newFile(filename).exists()
test3Param
testTopOfYear
null
test3Param
"'.'yyyy"
"output/drfa_topOfYear.log"
null
fail
"Expected illegal state exception."
null
assertNotNull
ex
testTopOfYear
testTopOfMonth
null
test3Param
"'.'yyyy-MM"
"output/drfa_topOfMonth.log"
testTopOfMonth
testTopOfWeek
null
test3Param
"'.'yyyy-w"
"output/drfa_topOfWeek.log"
testTopOfWeek
testTopOfDay
null
test3Param
"'.'yyyy-MM-dd"
"output/drfa_topOfDay.log"
testTopOfDay
testHalfDay
null
test3Param
"'.'yyyy-MM-dd-a"
"output/drfa_halfDay.log"
testHalfDay
testTopOfHour
null
test3Param
"'.'yyyy-MM-dd-HH"
"output/drfa_topOfHour.log"
testTopOfHour
testTopOfMinute
null
test3Param
"'.'yyyy-MM-dd-HH-mm"
"output/drfa_topOfMinute.log"
testTopOfMinute
testRolloverNoPattern
setErrorHandler
appender
errorHandler
rollOver
appender
null
assertEquals
1
errorHandler.size()
null
assertEquals
"Missing DatePattern option in rollOver()."
errorHandler.getMessage(0)
testRolloverNoPattern
testMinuteRollover
addAppender
root
appender
info
root
"Hello, World"
createNewFile
firstFile
null
assertTrue
firstFile.exists()
null
assertEquals
0
firstFile.length()
set
cal
Calendar.SECOND
3
set
cal
Calendar.MILLISECOND
0
add
cal
Calendar.MINUTE
1
sleep
Thread
until-now
info
root
"Hello, World"
null
assertTrue
firstFile.exists()
null
assertTrue
firstFile.length()>0
testMinuteRollover
append
write
combined
buf
0
count1
close
source
append
testBlockedRollover
setAppend
appender
false
addAppender
root
appender
info
root
"Prior to rollover"
sleep
Thread
63000-(start.getTime()%60000)
info
root
"Rollover attempt while blocked"
close
os1
close
os2
info
root
"Message after block removed"
close
appender
null
append
combined
newFileInputStream(block1)
buf
null
append
combined
newFileInputStream(block2)
buf
null
append
combined
newFileInputStream(filename)
buf
close
combined
null
assertTrue
Compare.compare(combinedFilename,"witness/drfa_blockedRollover.log")
testBlockedRollover
testWeeklyRollover
setDatePattern
drfa
"'.'yyyy-ww"
null
assertEquals
DailyRollingFileAppender.TOP_OF_WEEK
checkPeriod
testWeeklyRollover
createPatternParser
createPatternParser
createLayout
createLayout
testFormat
append
buf
'['
append
buf
event.getThreadName()
append
buf
"] "
append
buf
event.getLevel().toString()
append
buf
' '
append
buf
event.getLoggerName()
append
buf
" - "
append
buf
event.getMessage()
append
buf
System.getProperty("line.separator")
null
assertEquals
buf.toString()
result
testFormat
testGetPatternFormat
null
assertEquals
"[%t] %p %c - %m%n"
layout.getConversionPattern()
testGetPatternFormat
testDefaultConversionPattern
null
assertEquals
"%m%n"
EnhancedPatternLayout.DEFAULT_CONVERSION_PATTERN
testDefaultConversionPattern
testTTCCConversionPattern
null
assertEquals
"%r [%t] %p %c %x - %m%n"
EnhancedPatternLayout.TTCC_CONVERSION_PATTERN
testTTCCConversionPattern
testFormatResize
clear
NDC
null
assertEquals
"["
result.substring(0,1)
testFormatResize
getBufSize
getBufSize
getMaxCapacity
getMaxCapacity
setUp
setUp
tearDown
resetConfiguration
root.getLoggerRepository()
tearDown
configure
configure
PropertyConfigurator
fileName
configure
compare
compare
test1
null
configure
"input/pattern/enhancedPatternLayout1.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.1")
test1
test2
null
configure
"input/pattern/enhancedPatternLayout2.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.2")
test2
test3
null
configure
"input/pattern/enhancedPatternLayout3.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.3")
test3
test4
null
configure
"input/pattern/enhancedPatternLayout4.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.4")
test4
test5
null
configure
"input/pattern/enhancedPatternLayout5.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.5")
test5
test6
null
configure
"input/pattern/enhancedPatternLayout6.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.6")
test6
test7
null
configure
"input/pattern/enhancedPatternLayout7.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.7")
test7
test8
null
configure
"input/pattern/enhancedPatternLayout8.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newRelativeTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.8")
test8
test9
null
configure
"input/pattern/enhancedPatternLayout9.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.9")
test9
test10
null
configure
"input/pattern/enhancedPatternLayout10.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.10")
test10
test11
null
configure
"input/pattern/enhancedPatternLayout11.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.11")
test11
test12
null
configure
"input/pattern/enhancedPatternLayout12.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.12")
test12
test13
null
configure
"input/pattern/enhancedPatternLayout13.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.13")
test13
test14
null
configure
"input/pattern/enhancedPatternLayout14.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.14")
test14
clearMDC
clear
context
clearMDC
testMDC1
null
configure
"input/pattern/enhancedPatternLayout.mdc.1.properties"
null
clearMDC
put
MDC
"key1"
"va11"
put
MDC
"key2"
"va12"
debug
logger
"Hello World"
remove
MDC
"key1"
remove
MDC
"key2"
transform
Transformer
TEMP
FILTERED
newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.mdc.1")
testMDC1
test15
null
configure
"input/pattern/enhancedPatternLayout15.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
null
assertTrue
compare(FILTERED,"witness/pattern/enhancedPatternLayout.15")
test15
test16
null
configure
"input/pattern/enhancedPatternLayout16.properties"
null
common
read
reader
chars
0
chars.length
close
reader
setTimeZone
format
TimeZone.getTimeZone("GMT+0")
null
assertTrue
utcDate.getTime()>=start-1000&&utcDate.getTime()<end+1000
setTimeZone
format
TimeZone.getTimeZone("GMT-6")
null
assertFalse
cstStr.equals(utcStr)
null
assertTrue
cstDate.getTime()>=start-1000&&cstDate.getTime()<end+1000
test16
common
debug
logger
"Message "+++i
debug
root
"Message "+i
info
logger
"Message "+++i
info
root
"Message "+i
warn
logger
"Message "+++i
warn
root
"Message "+i
error
logger
"Message "+++i
error
root
"Message "+i
log
logger
Level.FATAL
"Message "+++i
log
root
Level.FATAL
"Message "+i
debug
logger
"Message "+++i
e
info
logger
"Message "+++i
e
warn
logger
"Message "+++i
e
error
logger
"Message "+++i
e
log
logger
Level.FATAL
"Message "+++i
e
common
testMDC2
addAppender
root
appender
setLevel
root
Level.DEBUG
null
clearMDC
debug
root
"starting mdc pattern test"
setConversionPattern
layout
mdcMsgPattern1
activateOptions
layout
debug
root
"empty mdc, no key specified in pattern"
setConversionPattern
layout
mdcMsgPattern2
activateOptions
layout
debug
root
"empty mdc, key1 in pattern"
setConversionPattern
layout
mdcMsgPattern3
activateOptions
layout
debug
root
"empty mdc, key2 in pattern"
setConversionPattern
layout
mdcMsgPattern4
activateOptions
layout
debug
root
"empty mdc, key3 in pattern"
setConversionPattern
layout
mdcMsgPattern5
activateOptions
layout
debug
root
"empty mdc, key1, key2, and key3 in pattern"
put
MDC
"key1"
"value1"
put
MDC
"key2"
"value2"
setConversionPattern
layout
mdcMsgPattern1
activateOptions
layout
debug
root
"filled mdc, no key specified in pattern"
setConversionPattern
layout
mdcMsgPattern2
activateOptions
layout
debug
root
"filled mdc, key1 in pattern"
setConversionPattern
layout
mdcMsgPattern3
activateOptions
layout
debug
root
"filled mdc, key2 in pattern"
setConversionPattern
layout
mdcMsgPattern4
activateOptions
layout
debug
root
"filled mdc, key3 in pattern"
setConversionPattern
layout
mdcMsgPattern5
activateOptions
layout
debug
root
"filled mdc, key1, key2, and key3 in pattern"
remove
MDC
"key1"
remove
MDC
"key2"
setConversionPattern
layout
"%m%n"
activateOptions
layout
debug
root
"finished mdc pattern test"
transform
Transformer
OUTPUT_FILE
FILTERED
newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()}
null
assertTrue
compare(FILTERED,WITNESS_FILE)
testMDC2
testThrowable
addAppender
root
appender
setLevel
root
Level.DEBUG
debug
root
"starting throwable pattern test"
debug
root
"plain pattern, no exception"
debug
root
"plain pattern, with exception"
ex
setConversionPattern
layout
"%m%n%throwable"
activateOptions
layout
debug
root
"%throwable, no exception"
debug
root
"%throwable, with exception"
ex
setConversionPattern
layout
"%m%n%throwable{short}"
activateOptions
layout
debug
root
"%throwable{short}, no exception"
debug
root
"%throwable{short}, with exception"
ex
setConversionPattern
layout
"%m%n%throwable{none}"
activateOptions
layout
debug
root
"%throwable{none}, no exception"
debug
root
"%throwable{none}, with exception"
ex
setConversionPattern
layout
"%m%n%throwable{0}"
activateOptions
layout
debug
root
"%throwable{0}, no exception"
debug
root
"%throwable{0}, with exception"
ex
setConversionPattern
layout
"%m%n%throwable{1}"
activateOptions
layout
debug
root
"%throwable{1}, no exception"
debug
root
"%throwable{1}, with exception"
ex
setConversionPattern
layout
"%m%n%throwable{100}"
activateOptions
layout
debug
root
"%throwable{100}, no exception"
debug
root
"%throwable{100}, with exception"
ex
setConversionPattern
layout
"%m%n%throwable{"+(2-trace.length)+"}"
activateOptions
layout
debug
root
"%throwable{-n}, no exception"
debug
root
"%throwable{-n}, with exception"
ex
transform
Transformer
OUTPUT_FILE
FILTERED
newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()}
null
assertTrue
compare(FILTERED,WITNESS_FILE)
testThrowable
testEnhancedRender
null
assertNotNull
strRep
null
assertTrue
strRep.length>0
null
assertNotNull
strRep[i]
testEnhancedRender
testDirectoryCreation
delete
newFile
delete
newDir
setFile
wa
"output/newdir/temp.log"
setLayout
wa
newPatternLayout("%m%n")
activateOptions
wa
null
assertTrue
newFile("output/newdir/temp.log").exists()
testDirectoryCreation
testGetThresholdReturnType
null
assertTrue
method.getReturnType()==Priority.class
testGetThresholdReturnType
testgetSetThreshold
null
assertNull
appender.getThreshold()
setThreshold
appender
debug
null
assertTrue
appender.getThreshold()==debug
testgetSetThreshold
testIsAsSevereAsThreshold
null
assertTrue
appender.isAsSevereAsThreshold(debug)
testIsAsSevereAsThreshold
setUp
setUp
test1
null
assertEquals
bf.getMaxSize()
size
null
assertNull
bf.get()
put
bf
e[j]
null
assertEquals
bf.length()
j<size?j+1:size
null
assertEquals
bf.length()
max-k>0?max-k:0
null
assertNull
r
null
assertEquals
r
e[k]
test1
test2
put
bf
e[0]
null
assertEquals
bf.get()
e[0]
null
assertNull
bf.get()
put
bf
e[1]
null
assertEquals
bf.length()
1
put
bf
e[2]
null
assertEquals
bf.length()
2
put
bf
e[3]
null
assertEquals
bf.length()
3
null
assertEquals
bf.get()
e[1]
null
assertEquals
bf.length()
2
null
assertEquals
bf.get()
e[2]
null
assertEquals
bf.length()
1
null
assertEquals
bf.get()
e[3]
null
assertEquals
bf.length()
0
null
assertNull
bf.get()
null
assertEquals
bf.length()
0
test2
min
min
testResize1
put
bf
e[f]
resize
bf
n
null
assertEquals
bf.length()
expectedSize
null
assertEquals
bf.get()
e[c]
testResize1
testResize2
put
bf
e[p]
get
bf
resize
bf
n
null
assertEquals
bf.length()
expectedSize
null
assertEquals
bf.get()
e[c+d]
null
assertNull
bf.get()
testResize2
testResize3
put
bf
e[p0]
get
bf
put
bf
e[i+p1]
resize
bf
n
null
assertEquals
bf.length()
expectedSize
null
assertEquals
bf.get()
e[c+d]
testResize3
suite
addTest
suite
newBoundedFIFOTestCase("test1")
addTest
suite
newBoundedFIFOTestCase("test2")
addTest
suite
newBoundedFIFOTestCase("testResize1")
addTest
suite
newBoundedFIFOTestCase("testResize2")
addTest
suite
newBoundedFIFOTestCase("testResize3")
suite
setUp
setUp
test0
null
assertEquals
cb.getMaxSize()
size
add
cb
e[0]
null
assertEquals
cb.length()
1
null
assertEquals
cb.get()
e[0]
null
assertEquals
cb.length()
0
null
assertNull
cb.get()
null
assertEquals
cb.length()
0
add
cb
e[0]
add
cb
e[1]
null
assertEquals
cb.length()
2
null
assertEquals
cb.get()
e[0]
null
assertEquals
cb.length()
1
null
assertEquals
cb.get()
e[1]
null
assertEquals
cb.length()
0
null
assertNull
cb.get()
null
assertEquals
cb.length()
0
test0
test1
null
doTest1
bufSize
test1
doTest1
null
assertEquals
cb.getMaxSize()
size
null
assertNull
cb.get(i)
add
cb
e[i]
null
assertEquals
cb.get(j)
e[i-(limit-j)]
null
assertNull
cb.get(-1)
null
assertNull
cb.get(limit+1)
doTest1
testResize
null
doTestResize
isize
isize/2+1
isize/2+1
null
doTestResize
isize
isize/2+1
isize+10
null
doTestResize
isize
isize+10
isize/2+1
null
doTestResize
isize
isize+10
isize+10
testResize
doTestResize
add
cb
e[i]
resize
cb
newSize
null
assertEquals
cb.get(j)
e[offset+j]
doTestResize
suite
addTest
suite
newCyclicBufferTestCase("test0")
addTest
suite
newCyclicBufferTestCase("test1")
addTest
suite
newCyclicBufferTestCase("testResize")
suite
createLayout
createLayout
testNullDateFormat
null
assertEquals
"NULL"
DateLayout.NULL_DATE_FORMAT
testNullDateFormat
testRelativeTimeDateFormat
null
assertEquals
"RELATIVE"
DateLayout.RELATIVE_TIME_DATE_FORMAT
testRelativeTimeDateFormat
testDateFormatOption
null
assertEquals
"DateFormat"
DateLayout.DATE_FORMAT_OPTION
testDateFormatOption
testTimeZoneOption
null
assertEquals
"TimeZone"
DateLayout.TIMEZONE_OPTION
testTimeZoneOption
testGetOptionStrings
null
assertEquals
2
options.length
testGetOptionStrings
testSetOptionDateFormat
setOption
layout
"dAtefOrmat"
"foobar"
null
assertEquals
"FOOBAR"
layout.getDateFormat()
testSetOptionDateFormat
testSetOptionTimeZone
setOption
layout
"tImezOne"
"+05:00"
null
assertEquals
"+05:00"
layout.getTimeZone()
testSetOptionTimeZone
testSetDateFormat
setDateFormat
layout
"ABSOLUTE"
null
assertEquals
"ABSOLUTE"
layout.getDateFormat()
testSetDateFormat
testSetTimeZone
setTimeZone
layout
"+05:00"
null
assertEquals
"+05:00"
layout.getTimeZone()
testSetTimeZone
testSetDateFormatNull
setDateFormat
layout
(String)null
null
testSetDateFormatNull
testSetDateFormatNullString
setDateFormat
layout
"NuLL"
null
testSetDateFormatNullString
testSetDateFormatRelative
setDateFormat
layout
"rElatIve"
TimeZone.getDefault()
testSetDateFormatRelative
testSetDateFormatAbsolute
setDateFormat
layout
"aBsolUte"
TimeZone.getDefault()
testSetDateFormatAbsolute
testSetDateFormatDateTime
setDateFormat
layout
"dAte"
TimeZone.getDefault()
testSetDateFormatDateTime
testSetDateFormatISO8601
setDateFormat
layout
"iSo8601"
TimeZone.getDefault()
testSetDateFormatISO8601
testSetDateFormatSimple
setDateFormat
layout
"HH:mm:ss"
TimeZone.getDefault()
testSetDateFormatSimple
testActivateOptions
setDateFormat
layout
"HH:mm:ss"
setTimeZone
layout
"+05:00"
activateOptions
layout
testActivateOptions
testSetDateFormatWithFormat
setDateFormat
layout
format
TimeZone.getDefault()
testSetDateFormatWithFormat
testISO8601Format
clear
calendar
set
calendar
1970
0
1
0
0
0
null
assertEquals
"1970-01-01 00:00:00,000"
actual
testISO8601Format
testDateTimeFormat
clear
calendar
set
calendar
1970
0
1
0
0
0
null
assertEquals
expected
actual
testDateTimeFormat
null
assertNotNull
pos
null
assertNotNull
date
null
assertNull
dateFormat
format
format
activateOptions
activateOptions
ignoresThrowable
ignoresThrowable
testDebugKey
null
assertEquals
"log4j.debug"
LogLog.DEBUG_KEY
testDebugKey
testConfigDebugKey
null
assertEquals
"log4j.configDebug"
LogLog.CONFIG_DEBUG_KEY
testConfigDebugKey
setUp
put
props
"TOTO"
"wonderful"
put
props
"key1"
"value1"
put
props
"key2"
"value2"
put
props
"line.separator"
System.getProperty("line.separator")
put
props
"java.home"
System.getProperty("java.home")
setProperties
System
props
setUp
tearDown
resetConfiguration
LogManager
tearDown
varSubstTest1
null
assertEquals
"hello world."
r
null
assertEquals
"hello wonderful world."
r
varSubstTest1
varSubstTest2
null
assertEquals
"Test2 value1 mid value2 end."
r
varSubstTest2
varSubstTest3
null
assertEquals
"Test3  mid value1 end."
r
varSubstTest3
varSubstTest4
substVars
OptionConverter
val
null
null
assertEquals
'"'+val+"\" has no closing brace. Opening brace at position 6."
errorMsg
varSubstTest4
varSubstTest5
put
props
"p1"
"x1"
put
props
"p2"
"${p1}"
println
System.out
"Result is ["+res+"]."
null
assertEquals
res
"x1"
varSubstTest5
testInputStream
null
assertTrue
file.exists()
selectAndConfigure
OptionConverter
inputStream
null
LogManager.getLoggerRepository()
close
inputStream
validateNested
newPropertyConfiguratorTest(this.getClass().getName())
testInputStream
toLevelTest1
null
assertEquals
p
Level.INFO
toLevelTest1
toLevelTest2
null
assertEquals
p
Level.INFO
toLevelTest2
toLevelTest3
null
assertEquals
p
XLevel.TRACE
toLevelTest3
toLevelTest4
null
assertEquals
p
null
toLevelTest4
toLevelTest5
null
assertEquals
p
null
toLevelTest5
suite
addTest
suite
newOptionConverterTestCase("varSubstTest5")
addTest
suite
newOptionConverterTestCase("varSubstTest1")
addTest
suite
newOptionConverterTestCase("varSubstTest2")
addTest
suite
newOptionConverterTestCase("varSubstTest3")
addTest
suite
newOptionConverterTestCase("varSubstTest4")
addTest
suite
newOptionConverterTestCase("testInputStream")
addTest
suite
newOptionConverterTestCase("toLevelTest1")
addTest
suite
newOptionConverterTestCase("toLevelTest2")
addTest
suite
newOptionConverterTestCase("toLevelTest3")
addTest
suite
newOptionConverterTestCase("toLevelTest4")
addTest
suite
newOptionConverterTestCase("toLevelTest5")
suite
setUp
removeAllAppenders
root
setUp
tearDown
resetConfiguration
root.getLoggerRepository()
tearDown
mdcPattern
addAppender
root
appender
setLevel
root
Level.DEBUG
debug
root
"starting mdc pattern test"
setConversionPattern
layout
mdcMsgPattern1
debug
root
"empty mdc, no key specified in pattern"
setConversionPattern
layout
mdcMsgPattern2
debug
root
"empty mdc, key1 in pattern"
setConversionPattern
layout
mdcMsgPattern3
debug
root
"empty mdc, key2 in pattern"
setConversionPattern
layout
mdcMsgPattern4
debug
root
"empty mdc, key3 in pattern"
setConversionPattern
layout
mdcMsgPattern5
debug
root
"empty mdc, key1, key2, and key3 in pattern"
put
MDC
"key1"
"value1"
put
MDC
"key2"
"value2"
setConversionPattern
layout
mdcMsgPattern1
debug
root
"filled mdc, no key specified in pattern"
setConversionPattern
layout
mdcMsgPattern2
debug
root
"filled mdc, key1 in pattern"
setConversionPattern
layout
mdcMsgPattern3
debug
root
"filled mdc, key2 in pattern"
setConversionPattern
layout
mdcMsgPattern4
debug
root
"filled mdc, key3 in pattern"
setConversionPattern
layout
mdcMsgPattern5
debug
root
"filled mdc, key1, key2, and key3 in pattern"
remove
MDC
"key1"
remove
MDC
"key2"
setConversionPattern
layout
msgPattern
debug
root
"finished mdc pattern test"
null
assertTrue
Compare.compare(OUTPUT_FILE+"_mdc",WITNESS_FILE+"_mdc")
mdcPattern
suite
addTest
suite
newPatternParserTestCase("mdcPattern")
suite
testToLevelFINEST
null
assertSame
UtilLoggingLevel.FINEST
UtilLoggingLevel.toLevel("fiNeSt")
testToLevelFINEST
setUp
setUp
tearDown
println
System.out
"Tearing down test case."
resetConfiguration
logger.getLoggerRepository()
tearDown
test1
configure
PropertyConfigurator
"input/hierarchyThreshold1.properties"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/hierarchyThreshold.1")
test1
test2
configure
PropertyConfigurator
"input/hierarchyThreshold2.properties"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/hierarchyThreshold.2")
test2
test3
configure
PropertyConfigurator
"input/hierarchyThreshold3.properties"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/hierarchyThreshold.3")
test3
test4
configure
PropertyConfigurator
"input/hierarchyThreshold4.properties"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/hierarchyThreshold.4")
test4
test5
configure
PropertyConfigurator
"input/hierarchyThreshold5.properties"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/hierarchyThreshold.5")
test5
test6
configure
PropertyConfigurator
"input/hierarchyThreshold6.properties"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/hierarchyThreshold.6")
test6
test7
configure
PropertyConfigurator
"input/hierarchyThreshold7.properties"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/hierarchyThreshold.7")
test7
test8
configure
PropertyConfigurator
"input/hierarchyThreshold8.properties"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/hierarchyThreshold.8")
test8
common
setName
Thread.currentThread()
"main"
log
logger
XLevel.TRACE
"m0"
debug
logger
"m1"
info
logger
"m2"
warn
logger
"m3"
error
logger
"m4"
fatal
logger
"m5"
setName
Thread.currentThread()
oldThreadName
common
suite
addTest
suite
newHierarchyThresholdTestCase("test1")
addTest
suite
newHierarchyThresholdTestCase("test2")
addTest
suite
newHierarchyThresholdTestCase("test3")
addTest
suite
newHierarchyThresholdTestCase("test4")
addTest
suite
newHierarchyThresholdTestCase("test5")
addTest
suite
newHierarchyThresholdTestCase("test6")
addTest
suite
newHierarchyThresholdTestCase("test7")
addTest
suite
newHierarchyThresholdTestCase("test8")
suite
createLayout
createLayout
parse
setNamespaceAware
factory
false
setCoalescing
factory
true
parse
testFormat
push
NDC
"NDC goes here"
setLocationInfo
layout
true
pop
NDC
null
parse
src
testFormat
testGetHeader
null
assertEquals
"<!DOCTYPE"
createLayout().getHeader().substring(0,9)
testGetHeader
testGetHeaderWithLocation
setLocationInfo
layout
true
null
assertEquals
"<!DOCTYPE"
layout.getHeader().substring(0,9)
testGetHeaderWithLocation
testGetFooter
null
assertEquals
"</table>"
createLayout().getFooter().substring(0,8)
testGetFooter
testGetSetLocationInfo
null
assertEquals
false
layout.getLocationInfo()
setLocationInfo
layout
true
null
assertEquals
true
layout.getLocationInfo()
setLocationInfo
layout
false
null
assertEquals
false
layout.getLocationInfo()
testGetSetLocationInfo
testActivateOptions
activateOptions
layout
testActivateOptions
testGetSetTitle
null
assertEquals
"Log4J Log Messages"
layout.getTitle()
setTitle
layout
null
null
assertNull
layout.getTitle()
setTitle
layout
newTitle
null
assertEquals
newTitle
layout.getTitle()
testGetSetTitle
testFormatResize
clear
NDC
setLocationInfo
layout
true
null
assertEquals
Layout.LINE_SEP+"<tr>"
result.substring(0,Layout.LINE_SEP.length()+4)
testFormatResize
testProblemCharacters
setName
Thread.currentThread()
problemName
push
NDC
problemName
clear
mdcMap
put
MDC
problemName
problemName
clear
mdcMap
setName
Thread.currentThread()
threadName
append
buf
result
append
buf
"</table>"
replace
buf
i
i+4
"<br/>"
null
parse
buf.toString()
testProblemCharacters
test1
test1
suite
addTest
suite
newLast("test1")
suite
testLineSep
null
assertEquals
System.getProperty("line.separator")
Layout.LINE_SEP
testLineSep
testLineSepLen
null
assertEquals
Layout.LINE_SEP.length()
Layout.LINE_SEP_LEN
testLineSepLen
createLayout
createLayout
testGetContentType
null
assertEquals
contentType
createLayout().getContentType()
testGetContentType
testIgnoresThrowable
null
assertEquals
ignoresThrowable
createLayout().ignoresThrowable()
testIgnoresThrowable
testGetHeader
null
assertEquals
header
createLayout().getHeader()
testGetHeader
testGetFooter
null
assertEquals
footer
createLayout().getFooter()
testGetFooter
testFormat
null
assertEquals
"Mock"
result
testFormat
format
format
activateOptions
activateOptions
ignoresThrowable
ignoresThrowable
testSerializeINFO
assertSerializationEquals
SerializationTestHelper
"witness/serialization/info.bin"
Level.INFO
skip
Integer.MAX_VALUE
testSerializeINFO
testDeserializeINFO
null
assertTrue
objinstanceofLevel
null
assertEquals
"INFO"
info.toString()
null
assertTrue
obj==Level.INFO
testDeserializeINFO
testCustomLevelSerialization
null
assertTrue
objinstanceofCustomLevel
null
assertEquals
Level.INFO.level
clone.level
null
assertEquals
Level.INFO.levelStr
clone.levelStr
null
assertEquals
Level.INFO.syslogEquivalent
clone.syslogEquivalent
testCustomLevelSerialization
testTraceInt
null
assertEquals
5000
Level.TRACE_INT
testTraceInt
testTrace
null
assertEquals
"TRACE"
Level.TRACE.toString()
null
assertEquals
5000
Level.TRACE.toInt()
null
assertEquals
7
Level.TRACE.getSyslogEquivalent()
testTrace
testIntToTrace
null
assertEquals
"TRACE"
trace.toString()
testIntToTrace
testStringToTrace
null
assertEquals
"TRACE"
trace.toString()
testStringToTrace
testLevelExtendsPriority
null
assertTrue
Priority.class.isAssignableFrom(Level.class)
testLevelExtendsPriority
testOFF
null
assertTrue
Level.OFFinstanceofLevel
testOFF
testFATAL
null
assertTrue
Level.FATALinstanceofLevel
testFATAL
testERROR
null
assertTrue
Level.ERRORinstanceofLevel
testERROR
testWARN
null
assertTrue
Level.WARNinstanceofLevel
testWARN
testINFO
null
assertTrue
Level.INFOinstanceofLevel
testINFO
testDEBUG
null
assertTrue
Level.DEBUGinstanceofLevel
testDEBUG
testTRACE
null
assertTrue
Level.TRACEinstanceofLevel
testTRACE
testALL
null
assertTrue
Level.ALLinstanceofLevel
testALL
testSerialVersionUID
null
assertEquals
3491141966387921974L
Level.serialVersionUID
testSerialVersionUID
testIntToAll
null
assertEquals
"ALL"
level.toString()
testIntToAll
testIntToFatal
null
assertEquals
"FATAL"
level.toString()
testIntToFatal
testIntToOff
null
assertEquals
"OFF"
level.toString()
testIntToOff
testToLevelUnrecognizedInt
null
assertEquals
"FATAL"
level.toString()
testToLevelUnrecognizedInt
testToLevelNull
null
assertEquals
"FATAL"
level.toString()
testToLevelNull
testDotlessLowerI
null
assertEquals
"INFO"
level.toString()
testDotlessLowerI
testDottedLowerI
setDefault
Locale
turkey
setDefault
Locale
defaultLocale
null
assertEquals
"INFO"
level.toString()
testDottedLowerI
addAppender
root
appender
getMessage
assertNotNull
Assert
event
assertEquals
Assert
level
event.getLevel()
fail
Assert
"More than one request captured"
getMessage
setUp
null
assertNotNull
rbUS
null
assertNotNull
"Got a null resource bundle."
rbFR
null
assertNotNull
"Got a null resource bundle."
rbCH
setUp
tearDown
resetConfiguration
BasicConfigurator
tearDown
testAppender1
setName
a1
"testAppender1"
addAppender
logger
a1
null
assertEquals
a1
aHat
testAppender1
testAppender2
setName
a1
"testAppender2.1"
setName
a2
"testAppender2.2"
addAppender
logger
a1
addAppender
logger
a2
removeAppender
logger
"testAppender2.1"
null
assertEquals
a2
aHat
null
assertTrue
!enumeration.hasMoreElements()
testAppender2
testAdditivity1
addAppender
a
ca
null
assertEquals
ca.counter
0
debug
ab
MSG
null
assertEquals
ca.counter
1
info
ab
MSG
null
assertEquals
ca.counter
2
warn
ab
MSG
null
assertEquals
ca.counter
3
error
ab
MSG
null
assertEquals
ca.counter
4
testAdditivity1
testAdditivity2
addAppender
a
ca1
addAppender
abc
ca2
null
assertEquals
ca1.counter
0
null
assertEquals
ca2.counter
0
debug
ab
MSG
null
assertEquals
ca1.counter
1
null
assertEquals
ca2.counter
0
debug
abc
MSG
null
assertEquals
ca1.counter
2
null
assertEquals
ca2.counter
1
debug
x
MSG
null
assertEquals
ca1.counter
2
null
assertEquals
ca2.counter
1
testAdditivity2
testAdditivity3
addAppender
root
caRoot
addAppender
a
caA
addAppender
abc
caABC
null
assertEquals
caRoot.counter
0
null
assertEquals
caA.counter
0
null
assertEquals
caABC.counter
0
setAdditivity
ab
false
debug
a
MSG
null
assertEquals
caRoot.counter
1
null
assertEquals
caA.counter
1
null
assertEquals
caABC.counter
0
debug
ab
MSG
null
assertEquals
caRoot.counter
1
null
assertEquals
caA.counter
1
null
assertEquals
caABC.counter
0
debug
abc
MSG
null
assertEquals
caRoot.counter
1
null
assertEquals
caA.counter
1
null
assertEquals
caABC.counter
1
testAdditivity3
testDisable1
addAppender
root
caRoot
setThreshold
h
(Level)Level.INFO
null
assertEquals
caRoot.counter
0
debug
root
MSG
null
assertEquals
caRoot.counter
0
info
root
MSG
null
assertEquals
caRoot.counter
1
log
root
Level.WARN
MSG
null
assertEquals
caRoot.counter
2
warn
root
MSG
null
assertEquals
caRoot.counter
3
setThreshold
h
(Level)Level.WARN
debug
root
MSG
null
assertEquals
caRoot.counter
3
info
root
MSG
null
assertEquals
caRoot.counter
3
log
root
Level.WARN
MSG
null
assertEquals
caRoot.counter
4
error
root
MSG
null
assertEquals
caRoot.counter
5
log
root
Level.ERROR
MSG
null
assertEquals
caRoot.counter
6
setThreshold
h
Level.OFF
debug
root
MSG
null
assertEquals
caRoot.counter
6
info
root
MSG
null
assertEquals
caRoot.counter
6
log
root
Level.WARN
MSG
null
assertEquals
caRoot.counter
6
error
root
MSG
null
assertEquals
caRoot.counter
6
log
root
Level.FATAL
MSG
null
assertEquals
caRoot.counter
6
log
root
Level.FATAL
MSG
null
assertEquals
caRoot.counter
6
setThreshold
h
Level.OFF
debug
root
MSG
null
assertEquals
caRoot.counter
6
info
root
MSG
null
assertEquals
caRoot.counter
6
log
root
Level.WARN
MSG
null
assertEquals
caRoot.counter
6
error
root
MSG
null
assertEquals
caRoot.counter
6
log
root
Level.ERROR
MSG
null
assertEquals
caRoot.counter
6
log
root
Level.FATAL
MSG
null
assertEquals
caRoot.counter
6
testDisable1
testRB1
setResourceBundle
root
rbUS
null
assertSame
t
rbUS
null
assertSame
t
rbUS
null
assertSame
t
rbUS
null
assertSame
t
rbUS
testRB1
testRB2
setResourceBundle
root
rbUS
null
assertSame
t
rbUS
setResourceBundle
x_y
rbFR
null
assertSame
t
rbUS
null
assertSame
t
rbFR
null
assertSame
t
rbFR
testRB2
testRB3
setResourceBundle
root
rbUS
null
assertSame
t
rbUS
setResourceBundle
x_y
rbFR
setResourceBundle
x_y_z
rbCH
null
assertSame
t
rbUS
null
assertSame
t
rbFR
null
assertSame
t
rbCH
testRB3
testExists
null
assertNull
t
null
assertSame
a
t
null
assertSame
a_b
t
null
assertSame
a_b_c
t
testExists
testHierarchy1
null
assertEquals
"a"
a0.getName()
null
assertNull
a0.getLevel()
null
assertSame
Level.ERROR
a0.getEffectiveLevel()
null
assertSame
a0
a1
testHierarchy1
testTrace
activateOptions
appender
addAppender
root
appender
setLevel
root
Level.INFO
setLevel
tracer
Level.TRACE
trace
tracer
"Message 1"
trace
root
"Discarded Message"
trace
root
"Discarded Message"
null
assertEquals
1
msgs.size()
null
assertEquals
Level.TRACE
event.getLevel()
null
assertEquals
"Message 1"
event.getMessage()
testTrace
testTraceWithException
activateOptions
appender
addAppender
root
appender
setLevel
root
Level.INFO
setLevel
tracer
Level.TRACE
trace
tracer
"Message 1"
ex
trace
root
"Discarded Message"
ex
trace
root
"Discarded Message"
ex
null
assertEquals
1
msgs.size()
null
assertEquals
Level.TRACE
event.getLevel()
null
assertEquals
"Message 1"
event.getMessage()
testTraceWithException
testIsTraceEnabled
activateOptions
appender
addAppender
root
appender
setLevel
root
Level.INFO
setLevel
tracer
Level.TRACE
null
assertTrue
tracer.isTraceEnabled()
null
assertFalse
root.isTraceEnabled()
testIsTraceEnabled
addAppenderEvent
addAppenderEvent
removeAppenderEvent
removeAppenderEvent
getAddEventCount
getAddEventCount
getRemoveEventCount
getRemoveEventCount
testAppenderEvent1
addHierarchyEventListener
LogManager.getLoggerRepository()
listener
addAppender
root
appender
null
assertEquals
1
listener.getAddEventCount()
null
assertEquals
0
listener.getRemoveEventCount()
removeAppender
root
appender
null
assertEquals
1
listener.getAddEventCount()
null
assertEquals
1
listener.getRemoveEventCount()
testAppenderEvent1
testAppenderEvent2
addHierarchyEventListener
LogManager.getLoggerRepository()
listener
setName
appender
"A1"
addAppender
root
appender
null
assertEquals
1
listener.getAddEventCount()
null
assertEquals
0
listener.getRemoveEventCount()
removeAppender
root
appender.getName()
null
assertEquals
1
listener.getAddEventCount()
null
assertEquals
1
listener.getRemoveEventCount()
testAppenderEvent2
testAppenderEvent3
addHierarchyEventListener
LogManager.getLoggerRepository()
listener
addAppender
root
appender
null
assertEquals
1
listener.getAddEventCount()
null
assertEquals
0
listener.getRemoveEventCount()
removeAllAppenders
root
null
assertEquals
1
listener.getAddEventCount()
null
assertEquals
1
listener.getRemoveEventCount()
testAppenderEvent3
testAppenderEvent4
addHierarchyEventListener
LogManager.getLoggerRepository()
listener
addAppender
root
appender
null
assertEquals
1
listener.getAddEventCount()
null
assertEquals
0
listener.getRemoveEventCount()
resetConfiguration
LogManager
null
assertEquals
1
listener.getAddEventCount()
null
assertEquals
1
listener.getRemoveEventCount()
testAppenderEvent4
close
close
append
append
requiresLayout
requiresLayout
testDefaultConfigurationFile
null
assertEquals
"log4j.properties"
LogManager.DEFAULT_CONFIGURATION_FILE
testDefaultConfigurationFile
testDefaultXmlConfigurationFile
null
assertEquals
"log4j.xml"
LogManager.DEFAULT_XML_CONFIGURATION_FILE
testDefaultXmlConfigurationFile
testDefaultConfigurationKey
null
assertEquals
"log4j.configuration"
LogManager.DEFAULT_CONFIGURATION_KEY
testDefaultConfigurationKey
testConfiguratorClassKey
null
assertEquals
"log4j.configuratorClass"
LogManager.CONFIGURATOR_CLASS_KEY
testConfiguratorClassKey
testDefaultInitOverrideKey
null
assertEquals
"log4j.defaultInitOverride"
LogManager.DEFAULT_INIT_OVERRIDE_KEY
testDefaultInitOverrideKey
filter
filter
setUp
clear
MDC
setUp
tearDown
clear
MDC
tearDown
testPut
put
MDC
"key"
"some value"
null
assertEquals
"some value"
MDC.get("key")
null
assertEquals
1
MDC.getContext().size()
testPut
testRemoveLastKey
put
MDC
"key"
"some value"
remove
MDC
"key"
null
checkThreadLocalsForLeaks
testRemoveLastKey
checkThreadLocalsForLeaks
setAccessible
threadLocalsField
true
setAccessible
inheritableThreadLocalsField
true
setAccessible
tableField
true
null
checkThreadLocalMapForLeaks
threadLocalMap
tableField
null
checkThreadLocalMapForLeaks
threadLocalMap
tableField
checkThreadLocalsForLeaks
checkThreadLocalMapForLeaks
null
fail
"Found a ThreadLocal with key of type ["+keyClassName+"]"
checkThreadLocalMapForLeaks
setUp
removeAllAppenders
root
setUp
tearDown
resetConfiguration
root.getLoggerRepository()
tearDown
simple
addAppender
root
appender
null
common
transform
Transformer
"output/simple"
FILTERED
newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/simple")
simple
ttcc
addAppender
root
appender
setName
Thread.currentThread()
"main"
null
common
setName
Thread.currentThread()
oldName
transform
Transformer
"output/ttcc"
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/ttcc")
ttcc
common
setLevel
ERR
Level.ERROR
setLevel
INF
Level.INFO
setLevel
INF_ERR
Level.ERROR
setLevel
DEB
Level.DEBUG
setLevel
TRC
Level.TRACE
log
ERR
Level.FATAL
"Message "+i
error
ERR
"Message "+i
log
INF
Level.FATAL
"Message "+i
error
INF
"Message "+i
warn
INF
"Message "+i
info
INF
"Message "+i
log
INF_UNDEF
Level.FATAL
"Message "+i
error
INF_UNDEF
"Message "+i
warn
INF_UNDEF
"Message "+i
info
INF_UNDEF
"Message "+i
log
INF_ERR
Level.FATAL
"Message "+i
error
INF_ERR
"Message "+i
log
INF_ERR_UNDEF
Level.FATAL
"Message "+i
error
INF_ERR_UNDEF
"Message "+i
log
DEB
Level.FATAL
"Message "+i
error
DEB
"Message "+i
warn
DEB
"Message "+i
info
DEB
"Message "+i
debug
DEB
"Message "+i
log
TRC
Level.FATAL
"Message "+i
error
TRC
"Message "+i
warn
TRC
"Message "+i
info
TRC
"Message "+i
debug
TRC
"Message "+i
trace
TRC
"Message "+i
log
UNDEF
Level.FATAL
"Message "+i
error
UNDEF
"Message "+i
warn
UNDEF
"Message "+i
info
UNDEF
"Message "+i
debug
UNDEF
"Message "+i
newException("Just testing.")
warn
ERR
"Message "+i
info
ERR
"Message "+i
debug
ERR
"Message "+i
debug
INF
"Message "+i
debug
INF_UNDEF
"Message "+i
warn
INF_ERR
"Message "+i
info
INF_ERR
"Message "+i
debug
INF_ERR
"Message "+i
warn
INF_ERR_UNDEF
"Message "+i
info
INF_ERR_UNDEF
"Message "+i
debug
INF_ERR_UNDEF
"Message "+i
trace
UNDEF
"Message "+i
newException("Just testing.")
info
INF
"Messages should bear numbers 0 through "+printCount+"."
common
suite
addTest
suite
newMinimumTestCase("simple")
addTest
suite
newMinimumTestCase("ttcc")
suite
createPatternParser
createPatternParser
main
addAppender
logger
newConsoleAppender(layout,ConsoleAppender.SYSTEM_OUT)
debug
logger
"Hello, log"
info
logger
"Hello again..."
main
finalizeConverter
null
addConverter
newUserDirPatternConverter(formattingInfo)
setLength
currentLiteral
0
finalizeConverter
finalizeConverter
convert
convert
main
null
usage
"Wrong number of arguments."
debug
LogLog
"Listening on port "+SocketServerTestCase.PORT
put
MDC
"hostID"
"shortSocketServer"
configure
PropertyConfigurator
prefix+i+".properties"
debug
LogLog
"Waiting to accept a new client."
debug
LogLog
"Connected to client at "+socket.getInetAddress()
debug
LogLog
"Starting new socket node."
start
t
join
t
main
usage
println
System.err
msg
println
System.err
"Usage: java "+ShortSocketServer.class.getName()+" totalTests configFilePrefix"
exit
System
1
usage
tearDown
resetConfiguration
LogManager
tearDown
isTriggeringEvent
isTriggeringEvent
testTrigger
configure
DOMConfigurator
"input/xml/smtpAppender1.xml"
null
assertTrue
evaluatorinstanceofMockTriggeringEventEvaluator
testTrigger
setUp
configure
DOMConfigurator
"input/xml/SocketAppenderTestConfig.xml"
setUp
tearDown
tearDown
testFallbackErrorHandlerWhenStarting
debug
logger
msg
null
assertEquals
"SocketAppender with FallbackErrorHandler"
msg
secondary.getLastMessage()
testFallbackErrorHandlerWhenStarting
append
append
requiresLayout
requiresLayout
close
close
getLastMessage
getLastMessage
setUp
println
System.out
"Setting up test case."
setUp
tearDown
println
System.out
"Tearing down test case."
removeAllAppenders
rootLogger
tearDown
test1
addAppender
rootLogger
socketAppender
null
common
"T1"
"key1"
"MDC-TEST1"
null
delay
1
transform
Transformer
TEMP
FILTERED
newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/socketServer.1")
test1
test2
addAppender
rootLogger
socketAppender
null
common
"T2"
"key2"
"MDC-TEST2"
null
delay
1
transform
Transformer
TEMP
FILTERED
newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/socketServer.2")
test2
test3
setLocationInfo
socketAppender
true
addAppender
rootLogger
socketAppender
null
common
"T3"
"key3"
"MDC-TEST3"
null
delay
1
transform
Transformer
TEMP
FILTERED
newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/socketServer.3")
test3
test4
setLocationInfo
socketAppender
true
addAppender
rootLogger
socketAppender
push
NDC
"some"
null
common
"T4"
"key4"
"MDC-TEST4"
pop
NDC
null
delay
1
transform
Transformer
TEMP
FILTERED
newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/socketServer.4")
test4
test5
setLocationInfo
socketAppender
true
setLocationInfo
asyncAppender
true
addAppender
asyncAppender
socketAppender
addAppender
rootLogger
asyncAppender
push
NDC
"some5"
null
common
"T5"
"key5"
"MDC-TEST5"
pop
NDC
null
delay
2
transform
Transformer
TEMP
FILTERED
newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/socketServer.5")
test5
test6
setLocationInfo
socketAppender
true
setLocationInfo
asyncAppender
true
addAppender
asyncAppender
socketAppender
addAppender
rootLogger
asyncAppender
push
NDC
"some6"
put
MDC
"hostID"
"client-test6"
null
common
"T6"
"key6"
"MDC-TEST6"
pop
NDC
remove
MDC
"hostID"
null
delay
2
transform
Transformer
TEMP
FILTERED
newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/socketServer.6")
test6
test7
setLocationInfo
socketAppender
true
addAppender
rootLogger
socketAppender
push
NDC
"some7"
put
MDC
"hostID"
"client-test7"
null
common
"T7"
"key7"
"MDC-TEST7"
pop
NDC
remove
MDC
"hostID"
null
delay
2
transform
Transformer
TEMP
FILTERED
newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/socketServer.7")
test7
test8
setLocationInfo
socketAppender
true
addAppender
rootLogger
socketAppender
push
NDC
"some8"
put
MDC
"hostID"
"shortSocketServer"
null
common
"T8"
"key8"
"MDC-TEST8"
pop
NDC
null
delay
2
transform
Transformer
TEMP
FILTERED
newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/socketServer.8")
test8
common
setName
Thread.currentThread()
"main"
push
NDC
dc
put
MDC
key
o
setLevel
logger
Level.DEBUG
setLevel
rootLogger
Level.DEBUG
log
logger
XLevel.TRACE
"Message "+++i
setLevel
logger
Level.TRACE
setLevel
rootLogger
Level.TRACE
trace
logger
"Message "+++i
trace
root
"Message "+++i
debug
logger
"Message "+++i
debug
root
"Message "+++i
info
logger
"Message "+++i
warn
logger
"Message "+++i
log
logger
XLevel.LETHAL
"Message "+++i
debug
logger
"Message "+++i
e
error
root
"Message "+++i
e
pop
NDC
remove
MDC
key
setName
Thread.currentThread()
oldThreadName
common
delay
sleep
Thread
secs*1000
delay
suite
addTest
suite
newSocketServerTestCase("test1")
addTest
suite
newSocketServerTestCase("test2")
addTest
suite
newSocketServerTestCase("test3")
addTest
suite
newSocketServerTestCase("test4")
addTest
suite
newSocketServerTestCase("test5")
addTest
suite
newSocketServerTestCase("test6")
addTest
suite
newSocketServerTestCase("test7")
addTest
suite
newSocketServerTestCase("test8")
suite
tearDown
resetConfiguration
LogManager
tearDown
testDefaultConstructor
null
assertEquals
"user"
appender.getFacility()
null
assertEquals
false
appender.getFacilityPrinting()
null
assertNull
appender.getLayout()
null
assertNull
appender.getSyslogHost()
null
assertTrue
appender.requiresLayout()
testDefaultConstructor
testTwoParamConstructor
null
assertEquals
"daemon"
appender.getFacility()
null
assertEquals
false
appender.getFacilityPrinting()
null
assertEquals
layout
appender.getLayout()
null
assertNull
appender.getSyslogHost()
null
assertTrue
appender.requiresLayout()
testTwoParamConstructor
testTwoParamConstructorBadFacility
null
assertEquals
"user"
appender.getFacility()
null
assertEquals
false
appender.getFacilityPrinting()
null
assertEquals
layout
appender.getLayout()
null
assertNull
appender.getSyslogHost()
null
assertTrue
appender.requiresLayout()
testTwoParamConstructorBadFacility
testThreeParamConstructor
null
assertEquals
"daemon"
appender.getFacility()
null
assertEquals
false
appender.getFacilityPrinting()
null
assertEquals
layout
appender.getLayout()
null
assertEquals
"syslog.example.org"
appender.getSyslogHost()
null
assertTrue
appender.requiresLayout()
testThreeParamConstructor
testGetFacilityString
append
actual
SyslogAppender.getFacilityString(i<<3)
append
actual
' '
append
actual
SyslogAppender.getFacilityString(i<<3)
append
actual
' '
null
assertEquals
expected
actual.toString()
testGetFacilityString
testGetFacilityStringUnexpected
null
assertNull
SyslogAppender.getFacilityString(1)
null
assertNull
SyslogAppender.getFacilityString(12<<3)
testGetFacilityStringUnexpected
testGetFacilityBogus
null
assertEquals
-1
SyslogAppender.getFacility("bogus")
testGetFacilityBogus
testGetFacilityNull
null
assertEquals
-1
SyslogAppender.getFacility(null)
testGetFacilityNull
testGetFacilitySystemNames
null
assertEquals
i<<3
SyslogAppender.getFacility(names[i])
testGetFacilitySystemNames
testGetFacilityLocalNames
null
assertEquals
(16+i)<<3
SyslogAppender.getFacility(names[i])
testGetFacilityLocalNames
testSetFacilityPrinting
null
assertFalse
appender.getFacilityPrinting()
setFacilityPrinting
appender
true
null
assertTrue
appender.getFacilityPrinting()
setFacilityPrinting
appender
false
null
assertFalse
appender.getFacilityPrinting()
testSetFacilityPrinting
testConstants
null
assertEquals
0<<3
SyslogAppender.LOG_KERN
null
assertEquals
1<<3
SyslogAppender.LOG_USER
null
assertEquals
2<<3
SyslogAppender.LOG_MAIL
null
assertEquals
3<<3
SyslogAppender.LOG_DAEMON
null
assertEquals
4<<3
SyslogAppender.LOG_AUTH
null
assertEquals
5<<3
SyslogAppender.LOG_SYSLOG
null
assertEquals
6<<3
SyslogAppender.LOG_LPR
null
assertEquals
7<<3
SyslogAppender.LOG_NEWS
null
assertEquals
8<<3
SyslogAppender.LOG_UUCP
null
assertEquals
9<<3
SyslogAppender.LOG_CRON
null
assertEquals
10<<3
SyslogAppender.LOG_AUTHPRIV
null
assertEquals
11<<3
SyslogAppender.LOG_FTP
null
assertEquals
16<<3
SyslogAppender.LOG_LOCAL0
null
assertEquals
17<<3
SyslogAppender.LOG_LOCAL1
null
assertEquals
18<<3
SyslogAppender.LOG_LOCAL2
null
assertEquals
19<<3
SyslogAppender.LOG_LOCAL3
null
assertEquals
20<<3
SyslogAppender.LOG_LOCAL4
null
assertEquals
21<<3
SyslogAppender.LOG_LOCAL5
null
assertEquals
22<<3
SyslogAppender.LOG_LOCAL6
null
assertEquals
23<<3
SyslogAppender.LOG_LOCAL7
testConstants
testSetFacilityKern
setFacility
appender
"kern"
setFacility
appender
null
null
assertEquals
"kern"
appender.getFacility()
testSetFacilityKern
testSetFacilityNull
setFacility
appender
"kern"
setFacility
appender
null
null
assertEquals
"kern"
appender.getFacility()
testSetFacilityNull
testSetFacilityBogus
setFacility
appender
"kern"
setFacility
appender
"bogus"
null
assertEquals
"user"
appender.getFacility()
testSetFacilityBogus
testSetFacilityAfterActivation
setName
appender
"foo"
setThreshold
appender
Level.INFO
setSyslogHost
appender
"localhost"
setFacility
appender
"user"
setLayout
appender
newPatternLayout("%m%n")
setErrorHandler
appender
errorHandler
activateOptions
appender
setFacility
appender
"kern"
null
assertEquals
"kern"
appender.getFacility()
testSetFacilityAfterActivation
testAppendBelowThreshold
setThreshold
appender
Level.ERROR
activateOptions
appender
addAppender
logger
appender
info
logger
"Should not be logged by SyslogAppenderTest.testAppendBelowThreshold."
testAppendBelowThreshold
testAppendNoHost
setName
appender
"foo"
setThreshold
appender
Level.INFO
setErrorHandler
appender
errorHandler
setLayout
appender
newPatternLayout("%m%n")
activateOptions
appender
addAppender
logger
appender
info
logger
"Should not be logged by SyslogAppenderTest.testAppendNoHost."
null
assertEquals
1
errorHandler.size()
null
assertEquals
"No syslog host is set for SyslogAppedender named \"foo\"."
errorHandler.getMessage(0)
testAppendNoHost
testAppend
setName
appender
"foo"
setThreshold
appender
Level.INFO
setSyslogHost
appender
"localhost"
setFacility
appender
"user"
setLayout
appender
newPatternLayout("%m%n")
setErrorHandler
appender
errorHandler
activateOptions
appender
addAppender
asyncAppender
appender
activateOptions
asyncAppender
addAppender
logger
asyncAppender
info
logger
"Expected message from log4j unit test SyslogAppenderTest.testAppend."
e
null
assertEquals
0
errorHandler.size()
testAppend
testIPv6
setSyslogHost
appender
"::1"
testIPv6
testIPv6InBrackets
setSyslogHost
appender
"[::1]"
testIPv6InBrackets
testIPv6AndPort
setSyslogHost
appender
"[::1]:1514"
testIPv6AndPort
testHostNameAndPort
setSyslogHost
appender
"localhost:1514"
testHostNameAndPort
testIPv4AndPort
setSyslogHost
appender
"127.0.0.1:1514"
testIPv4AndPort
log
setSoTimeout
ds
2000
setSyslogHost
appender
"localhost:"+ds.getLocalPort()
setName
appender
"name"
setHeader
appender
header
setLayout
appender
pl
activateOptions
appender
addAppender
l
appender
info
l
msg
error
l
msg
ex
close
appender
receive
ds
p
close
ds
log
testActualLogging
null
assertEquals
"14"
st.nextToken()
null
assertEquals
"greetings"
st.nextToken()
testActualLogging
printStackTrace
println
w
"Mishandled stack trace follows:"
println
w
""
println
w
"No tab here"
println
w
"\ttab here"
println
w
"\t"
printStackTrace
testBadTabbing
null
assertEquals
"11"
st.nextToken()
null
assertEquals
"greetings"
st.nextToken()
null
assertEquals
"<11>Mishandled stack trace follows:"
s[1]
null
assertEquals
"<11>"
s[2]
null
assertEquals
"<11>No tab here"
s[3]
null
assertEquals
"<11>"+SyslogAppender.TAB+"tab here"
s[4]
null
assertEquals
"<11>"+SyslogAppender.TAB
s[5]
testBadTabbing
testHeaderLogging
null
assertEquals
"<14>"
s.substring(0,4)
setTime
cal
syslogDate
null
assertEquals
' '
syslogDateStr.charAt(4)
setTime
cal
preDate
set
cal
Calendar.MILLISECOND
0
setTime
cal
postDate
setTime
cal
syslogDate
set
cal
Calendar.YEAR
syslogYear
null
assertTrue
syslogDate.compareTo(preDate)>=0
null
assertTrue
syslogDate.compareTo(postDate)<=0
testHeaderLogging
testLayoutHeader
setSoTimeout
ds
2000
setSyslogHost
appender
"localhost:"+ds.getLocalPort()
setName
appender
"name"
setHeader
appender
false
setLayout
appender
pl
activateOptions
appender
addAppender
l
appender
info
l
"Hello, World"
close
appender
receive
ds
p
close
ds
null
assertEquals
"<14><!DOCTYPE"
s[0].substring(0,13)
null
assertEquals
"<14></table>"
s[2].substring(0,12)
testLayoutHeader
testBigPackets
setSoTimeout
ds
2000
setSyslogHost
appender
"localhost:"+ds.getLocalPort()
setName
appender
"name"
setHeader
appender
false
setLayout
appender
pl
activateOptions
appender
addAppender
l
appender
append
msgbuf
"0123456789"
info
l
msg
close
appender
receive
ds
p
null
assertTrue
p.getLength()<=1024
close
ds
delete
rcvbuf
0
4
setLength
rcvbuf
rcvbuf.length()-3
append
rcvbuf
s[i].substring(s[i].indexOf("...")+3)
null
assertEquals
msg.length()
rcvbuf.length()
null
assertEquals
msg
rcvbuf.toString()
testBigPackets
run
write
bo
c
close
s
printStackTrace
e
run
testIt
setName
ta
"ta"
setPort
ta
port
setLayout
ta
newPatternLayout("%p - %m")
activateOptions
ta
addAppender
l
ta
start
t
sleep
Thread
200
info
l
"hi"
sleep
Thread
1000
close
ta
sleep
Thread
200
interrupt
t
join
t
null
assertTrue
s.endsWith("INFO - hi")
null
assertEquals
oldActive
Thread.activeCount()
testIt
tearDown
shutdown
LogManager
tearDown
testSimple
configure
BasicConfigurator
newNTEventLogAppender()
debug
logger
"Message "+i++
info
logger
"Message "+i++
warn
logger
"Message "+i++
error
logger
"Message "+i++
log
logger
Level.FATAL
"Message "+i++
debug
logger
"Message "+i++
newException("Just testing.")
testSimple
setUp
setUp
test1
null
assertEquals
r
dr
test1
test2
put
map
Integer.class
ior
null
assertEquals
r
ior
test2
test3
put
map
Number.class
ior
null
assertEquals
r
ior
test3
test4
put
map
Object.class
oor
null
assertEquals
r
oor
test4
test5
put
map
Object.class
oor
put
map
Number.class
nor
put
map
Integer.class
ior
null
assertEquals
r
ior
test5
test6
put
map
Object.class
oor
put
map
Number.class
nor
null
assertEquals
r
nor
test6
test7
put
map
comparable
cor
null
assertEquals
r
cor
test7
test8
put
map
Serializable.class
sor
null
assertEquals
r
sor
test8
test9
put
map
Y.class
yor
null
assertEquals
r
yor
test9
test10
put
map
X.class
xor
null
assertEquals
r
xor
test10
suite
addTest
suite
newORTestCase("test1")
addTest
suite
newORTestCase("test2")
addTest
suite
newORTestCase("test3")
addTest
suite
newORTestCase("test4")
addTest
suite
newORTestCase("test5")
addTest
suite
newORTestCase("test6")
addTest
suite
newORTestCase("test7")
addTest
suite
newORTestCase("test8")
addTest
suite
newORTestCase("test9")
addTest
suite
newORTestCase("test10")
suite
doRender
doRender
toString
toString
createAbsoluteTimeDateFormat
setTimeZone
df
timeZone
createAbsoluteTimeDateFormat
test1
null
assertEquals
"00:00:00,000"
gmtFormat.format(jul1)
null
assertEquals
"00:00:00,008"
gmtFormat.format(plus8ms)
null
assertEquals
"00:00:00,017"
gmtFormat.format(plus17ms)
null
assertEquals
"00:00:00,237"
gmtFormat.format(plus237ms)
null
assertEquals
"00:00:01,415"
gmtFormat.format(plus1415ms)
test1
test2
null
assertEquals
"00:00:00,000"
gmtFormat.format(jul2)
null
assertEquals
"19:00:00,000"
chicagoFormat.format(jul2)
null
assertEquals
"00:00:00,000"
gmtFormat.format(jul2)
test2
test3
null
assertEquals
"00:00:00,008"
gmtFormat.format(jul1)
null
assertEquals
"00:00:00,016"
gmtFormat.format(plus8ms)
null
assertEquals
"00:00:00,023"
gmtFormat.format(plus17ms)
null
assertEquals
"00:00:00,245"
gmtFormat.format(plus237ms)
null
assertEquals
"00:00:01,423"
gmtFormat.format(plus1415ms)
test3
test4
null
assertEquals
baseFormat.format(jul1)
cachedFormat.format(jul1)
format
baseFormat
plus8ms
format
cachedFormat
plus8ms
null
assertEquals
baseFormat.format(plus8ms)
cachedFormat.format(plus8ms)
null
assertEquals
baseFormat.format(plus17ms)
cachedFormat.format(plus17ms)
null
assertEquals
baseFormat.format(plus237ms)
cachedFormat.format(plus237ms)
null
assertEquals
baseFormat.format(plus1415ms)
cachedFormat.format(plus1415ms)
test4
test5
println
System.out
baseFormat.format(jul1)
println
System.out
sx
null
assertEquals
baseFormat.format(jul1)
sx
println
System.out
baseFormat.format(jul1)
println
System.out
sx
null
assertEquals
baseFormat.format(jul1)
sx
println
System.out
baseFormat.format(plus8ms)
println
System.out
sx
null
assertEquals
baseFormat.format(plus8ms)
sx
null
assertEquals
baseFormat.format(plus17ms)
cachedFormat.format(plus17ms)
null
assertEquals
baseFormat.format(plus237ms)
cachedFormat.format(plus237ms)
null
assertEquals
baseFormat.format(plus1415ms)
cachedFormat.format(plus1415ms)
test5
test6
null
assertNotNull
newCachedDateFormat(newSimpleDateFormat(),1000).getNumberFormat()
test6
test8
setTimeZone
baseFormat
GMT
null
assertEquals
"2004-07-04 00:00:00,000"
cachedFormat.format(jul4)
setTimeZone
cachedFormat
TimeZone.getTimeZone("GMT-6")
null
assertEquals
"2004-07-03 18:00:00,000"
cachedFormat.format(jul4)
test8
test9
setTimeZone
cachedFormat
cet
set
c
2004
Calendar.DECEMBER
12
20
0
set
c
Calendar.SECOND
37
set
c
Calendar.MILLISECOND
23
setTimeZone
c
cet
null
assertEquals
expected
s
set
c
2005
Calendar.JANUARY
1
0
0
set
c
Calendar.SECOND
13
set
c
Calendar.MILLISECOND
905
null
assertEquals
expected
s
test9
test10
setTimeZone
cachedFormat
cet
set
c
2004
Calendar.OCTOBER
5
20
0
set
c
Calendar.SECOND
37
set
c
Calendar.MILLISECOND
23
setTimeZone
c
cet
null
assertEquals
expected
s
set
c
2004
Calendar.NOVEMBER
1
0
0
set
c
Calendar.MILLISECOND
23
null
assertEquals
expected
s
set
c
Calendar.MILLISECOND
984
null
assertEquals
expected
s
test10
test11
setTimeZone
gmtFormat
GMT
setTimeZone
baseFormat
GMT
null
assertEquals
expected
gmtFormat.format(jul2)
setTime
jul2
ticks+87
null
assertEquals
expected
gmtFormat.format(jul2)
test11
test12
null
assertEquals
20
millisecondStart
test12
test13
null
assertEquals
CachedDateFormat.NO_MILLISECONDS
millisecondStart
test13
test14
null
assertEquals
9
millisecondStart
test14
test15
null
assertEquals
CachedDateFormat.UNRECOGNIZED_MILLISECONDS
millisecondStart
test15
test16
null
assertEquals
CachedDateFormat.UNRECOGNIZED_MILLISECONDS
millisecondStart
test16
test17
setTimeZone
simpleFormat
GMT
null
assertEquals
"00:00:00,000 00:00:00,000"
s
setTime
jul2
jul2.getTime()+120
null
assertEquals
"00:00:00,120 00:00:00,120"
simpleFormat.format(jul2)
null
assertEquals
1
maxValid
test17
xsuite
addTest
suite
newCachedDateFormatTest("test5")
xsuite
testGetDefault
null
assertNotNull
field
null
assertEquals
0
field.getMinLength()
null
assertEquals
Integer.MAX_VALUE
field.getMaxLength()
null
assertEquals
false
field.isLeftAligned()
testGetDefault
testConstructor
null
assertNotNull
field
null
assertEquals
3
field.getMinLength()
null
assertEquals
6
field.getMaxLength()
null
assertEquals
true
field.isLeftAligned()
testConstructor
testTruncate
format
field
2
buf
null
assertEquals
"fobar"
buf.toString()
testTruncate
testPadLeft
format
field
2
buf
null
assertEquals
"fo obar"
buf.toString()
testPadLeft
testPadRight
format
field
2
buf
null
assertEquals
"foobar "
buf.toString()
testPadRight
testGetDefault
null
assertNotNull
abbrev
testGetDefault
testZero
append
buf
"org.example.foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - "
buf.toString()
testZero
testBlank
null
assertTrue
abbrev==defaultAbbrev
testBlank
testOne
append
buf
"org.example.foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - "
buf.toString()
testOne
testBlankOne
append
buf
"org.example.foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - "
buf.toString()
testBlankOne
testTwo
append
buf
"org.example.foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - foo.bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - foo.bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - bar"
buf.toString()
testTwo
testOneDot
append
buf
"org.example.foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - o.e.f.bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"org.example.foo."
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - o.e.f."
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - f.bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - "
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"."
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - ."
buf.toString()
testOneDot
testOneTildeDot
append
buf
"org.example.foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - o~.e~.f~.bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"org.example.foo."
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - o~.e~.f~."
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - f~.bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - "
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"."
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - ."
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"o.e.f.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - o.e.f.bar"
buf.toString()
testOneTildeDot
testMulti
append
buf
"org.example.foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - o.example.fo.bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"org.example.foo."
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - o.example.fo."
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - f.bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - "
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"."
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - ."
buf.toString()
testMulti
testMinusOne
append
buf
"org.example.foo.bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - example.foo.bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"bar"
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - bar"
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - "
buf.toString()
setLength
buf
0
append
buf
"DEBUG - "
append
buf
"."
abbreviate
abbrev
fieldStart
buf
null
assertEquals
"DEBUG - "
buf.toString()
testMinusOne
newInstance
newInstance
format
append
toAppendTo
"343"
format
convert
parse
PatternParser
pattern
converters
fields
registry
PatternParser.getPatternLayoutRules()
null
assertEquals
converters.size()
fields.size()
format
((PatternConverter)converterIter.next())
event
buf
format
((FormattingInfo)fieldIter.next())
fieldStart
buf
convert
testNewWord
put
ruleRegistry
"z343"
Num343PatternConverter.class.getName()
null
assertEquals
"343"
result
testNewWord
testNewWord2
put
ruleRegistry
"n343"
Num343PatternConverter.class.getName()
null
assertEquals
"343"
result
testNewWord2
testBogusWord1
null
assertEquals
"%, foobar"
result
testBogusWord1
testBogusWord2
null
assertEquals
"xyz %, foobar"
result
testBogusWord2
testBasic1
null
assertEquals
"hello INFO  - msg 1"+Layout.LINE_SEP
result
testBasic1
testBasic2
null
assertEquals
expectedRelativeTime+" INFO  [main] "+logger.getName()+" - msg 1"+Layout.LINE_SEP
result
testBasic2
testMultiOption
setTimeZone
dateFormat
TimeZone.getTimeZone("GMT")
append
buf
' '
append
buf
localTime
append
buf
" org.foobar  - msg 1"
null
assertEquals
buf.toString()
result
testMultiOption
testBogus
null
assertEquals
"%bogus"
result
testBogus
testMore
null
assertEquals
"msg 1ore"
result
testMore
testMalformedOption
null
assertEquals
"foomsg 1{yyyy.MM.dd"
result
testMalformedOption
assertFactories
null
assertTrue
rules.size()>0
null
assertTrue
converter!=null
assertFactories
testPatternLayoutFactories
null
assertFactories
PatternParser.getPatternLayoutRules()
testPatternLayoutFactories
testFileNamePatternFactories
null
assertFactories
PatternParser.getFileNamePatternRules()
testFileNamePatternFactories
createLayout
createLayout
testFormat
append
buf
'['
append
buf
event.getThreadName()
append
buf
"] "
append
buf
event.getLevel().toString()
append
buf
' '
append
buf
event.getLoggerName()
append
buf
" - "
append
buf
event.getMessage()
append
buf
System.getProperty("line.separator")
null
assertEquals
buf.toString()
result
testFormat
testGetPatternFormat
null
assertEquals
"[%t] %p %c - %m%n"
layout.getConversionPattern()
testGetPatternFormat
testDefaultConversionPattern
null
assertEquals
"%m%n"
PatternLayout.DEFAULT_CONVERSION_PATTERN
testDefaultConversionPattern
testTTCCConversionPattern
null
assertEquals
"%r [%t] %p %c %x - %m%n"
PatternLayout.TTCC_CONVERSION_PATTERN
testTTCCConversionPattern
testFormatResize
clear
NDC
null
assertEquals
"["
result.substring(0,1)
testFormatResize
getBufSize
getBufSize
getMaxCapacity
getMaxCapacity
setUp
setUp
tearDown
resetConfiguration
root.getLoggerRepository()
tearDown
test1
configure
PropertyConfigurator
"input/patternLayout1.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.1")
test1
test2
configure
PropertyConfigurator
"input/patternLayout2.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.2")
test2
test3
configure
PropertyConfigurator
"input/patternLayout3.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.3")
test3
test4
configure
PropertyConfigurator
"input/patternLayout4.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.4")
test4
test5
configure
PropertyConfigurator
"input/patternLayout5.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.5")
test5
test6
configure
PropertyConfigurator
"input/patternLayout6.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.6")
test6
test7
configure
PropertyConfigurator
"input/patternLayout7.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.7")
test7
test8
configure
PropertyConfigurator
"input/patternLayout8.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newRelativeTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.8")
test8
test9
configure
PropertyConfigurator
"input/patternLayout9.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.9")
test9
test10
configure
PropertyConfigurator
"input/patternLayout10.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.10")
test10
test11
configure
PropertyConfigurator
"input/patternLayout11.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.11")
test11
test12
configure
PropertyConfigurator
"input/patternLayout12.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.12")
test12
test13
configure
PropertyConfigurator
"input/patternLayout13.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.13")
test13
test14
configure
PropertyConfigurator
"input/patternLayout14.properties"
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/patternLayout.14")
test14
testMDC1
configure
PropertyConfigurator
"input/patternLayout.mdc.1.properties"
put
MDC
"key1"
"va11"
put
MDC
"key2"
"va12"
debug
logger
"Hello World"
remove
MDC
"key1"
remove
MDC
"key2"
null
assertTrue
Compare.compare(TEMP,"witness/patternLayout.mdc.1")
testMDC1
testMDCClear
configure
PropertyConfigurator
"input/patternLayout.mdc.1.properties"
put
MDC
"key1"
"va11"
put
MDC
"key2"
"va12"
debug
logger
"Hello World"
clear
MDC
debug
logger
"Hello World"
null
assertTrue
Compare.compare(TEMP,"witness/patternLayout.mdc.clear")
testMDCClear
common
setName
Thread.currentThread()
"main"
trace
logger
"Message "+++i
trace
root
"Message "+i
debug
logger
"Message "+++i
debug
root
"Message "+i
info
logger
"Message "+++i
info
root
"Message "+i
warn
logger
"Message "+++i
warn
root
"Message "+i
error
logger
"Message "+++i
error
root
"Message "+i
log
logger
Level.FATAL
"Message "+++i
log
root
Level.FATAL
"Message "+i
trace
logger
"Message "+++i
e
debug
logger
"Message "+++i
e
info
logger
"Message "+++i
e
warn
logger
"Message "+++i
e
error
logger
"Message "+++i
e
log
logger
Level.FATAL
"Message "+++i
e
setName
Thread.currentThread()
oldThreadName
common
testOffInt
null
assertEquals
Integer.MAX_VALUE
Priority.OFF_INT
testOffInt
testFatalInt
null
assertEquals
50000
Priority.FATAL_INT
testFatalInt
testErrorInt
null
assertEquals
40000
Priority.ERROR_INT
testErrorInt
testWarnInt
null
assertEquals
30000
Priority.WARN_INT
testWarnInt
testInfoInt
null
assertEquals
20000
Priority.INFO_INT
testInfoInt
testDebugInt
null
assertEquals
10000
Priority.DEBUG_INT
testDebugInt
testAllInt
null
assertEquals
Integer.MIN_VALUE
Priority.ALL_INT
testAllInt
testFatal
null
assertTrue
Priority.FATALinstanceofLevel
testFatal
testERROR
null
assertTrue
Priority.ERRORinstanceofLevel
testERROR
testWARN
null
assertTrue
Priority.WARNinstanceofLevel
testWARN
testINFO
null
assertTrue
Priority.INFOinstanceofLevel
testINFO
testDEBUG
null
assertTrue
Priority.DEBUGinstanceofLevel
testDEBUG
testEqualsNull
null
assertFalse
Priority.DEBUG.equals(null)
testEqualsNull
testEqualsLevel
null
assertTrue
Priority.DEBUG.equals(Level.DEBUG)
testEqualsLevel
testGetAllPossiblePriorities
null
assertEquals
5
priorities.length
testGetAllPossiblePriorities
testToPriorityString
null
assertTrue
Priority.toPriority("DEBUG")==Level.DEBUG
testToPriorityString
testToPriorityInt
null
assertTrue
Priority.toPriority(Priority.DEBUG_INT)==Level.DEBUG
testToPriorityInt
testToPriorityStringPriority
null
assertTrue
Priority.toPriority("foo",Priority.DEBUG)==Priority.DEBUG
testToPriorityStringPriority
testToPriorityIntPriority
null
assertTrue
Priority.toPriority(17,Priority.DEBUG)==Priority.DEBUG
testToPriorityIntPriority
testDotlessLowerI
null
assertEquals
"INFO"
level.toString()
testDotlessLowerI
testDottedLowerI
setDefault
Locale
turkey
setDefault
Locale
defaultLocale
null
assertEquals
"INFO"
level.toString()
testDottedLowerI
testBadUnicodeEscape
write
writer
"log4j.rootLogger=\\uXX41"
close
writer
configure
PropertyConfigurator
fileName
null
assertTrue
file.delete()
null
assertFalse
file.exists()
testBadUnicodeEscape
testURL
write
writer
"log4j.rootLogger=debug"
close
writer
configure
PropertyConfigurator
url
null
assertTrue
file.delete()
null
assertFalse
file.exists()
testURL
testURLBadEscape
write
writer
"log4j.rootLogger=\\uXX41"
close
writer
configure
PropertyConfigurator
url
null
assertTrue
file.delete()
null
assertFalse
file.exists()
testURLBadEscape
testInputStream
null
assertTrue
file.exists()
configure
PropertyConfigurator
inputStream
close
inputStream
validateNested
this
resetConfiguration
LogManager
testInputStream
validateNested
null
assertEquals
"filterBase-test1.log"
rollingPolicy.getActiveFileName()
null
assertEquals
"filterBased-test1.%i"
rollingPolicy.getFileNamePattern()
null
assertEquals
0
rollingPolicy.getMinIndex()
null
assertTrue
rollingPolicy.isActivated()
null
assertTrue
Level.INFO.equals(filter.getLevelMin())
validateNested
testJarURL
mkdirs
dir
putNextEntry
zos
newZipEntry(LogManager.DEFAULT_CONFIGURATION_FILE)
write
zos
"log4j.rootLogger=debug".getBytes()
closeEntry
zos
close
zos
configure
PropertyConfigurator
url
null
assertTrue
file.delete()
null
assertFalse
file.exists()
testJarURL
testReset
setName
appender
"A1"
addAppender
Logger.getRootLogger()
appender
put
props
"log4j.reset"
"true"
configure
PropertyConfigurator
props
null
assertNull
Logger.getRootLogger().getAppender("A1")
resetConfiguration
LogManager
testReset
activateOptions
activateOptions
isActivated
isActivated
getActiveFileName
getActiveFileName
setActiveFileName
setActiveFileName
getFileNamePattern
getFileNamePattern
setFileNamePattern
setFileNamePattern
getMinIndex
getMinIndex
setMinIndex
setMinIndex
activateOptions
activateOptions
isActivated
isActivated
setFilter
setFilter
getFilter
getFilter
getRollingPolicy
getRollingPolicy
setRollingPolicy
setRollingPolicy
getTriggeringPolicy
getTriggeringPolicy
setTriggeringPolicy
setTriggeringPolicy
getAppend
getAppend
setAppend
setAppend
close
close
requiresLayout
requiresLayout
append
append
testNested
configure
PropertyConfigurator
"input/filter1.properties"
validateNested
this
resetConfiguration
LogManager
testNested
activateOptions
activateOptions
isActivated
isActivated
doRender
doRender
setShowVersion
setShowVersion
getShowVersion
getShowVersion
testThrowableRenderer
put
props
"log4j.throwableRenderer"
"org.apache.log4j.PropertyConfiguratorTest$MockThrowableRenderer"
put
props
"log4j.throwableRenderer.showVersion"
"false"
configure
PropertyConfigurator
props
resetConfiguration
LogManager
null
assertNotNull
renderer
null
assertEquals
true
renderer.isActivated()
null
assertEquals
false
renderer.getShowVersion()
testThrowableRenderer
setUp
resetConfiguration
LogManager.getLoggerRepository()
clear
context
setUp
tearDown
shutdown
LogManager.getLoggerRepository()
tearDown
configure
setNamespaceAware
factory
false
configure
DOMConfigurator
doc.getDocumentElement()
configure
testMapPolicy
null
configure
"map.xml"
info
logger
"Message 0"
put
MDC
"p1"
"Hola"
put
msg
"p1"
"Hello"
put
msg
"p2"
"World"
put
msg
"x1"
"Mundo"
info
logger
msg
put
msg
"message"
"Message 1"
info
logger
msg
null
assertTrue
Compare.compare(RewriteAppenderTest.class,"temp","map.log")
testMapPolicy
getP2
getP2
getX1
getX1
toString
toString
getMessage
getMessage
testReflectionPolicy
null
configure
"reflection.xml"
info
logger
"Message 0"
info
logger
newBaseBean("Hello","World")
put
MDC
"p1"
"Hola"
put
MDC
"p2"
"p2"
info
logger
newMessageBean("Welcome to The Hub","Hello","World")
null
assertTrue
Compare.compare(RewriteAppenderTest.class,"temp","reflection.log")
testReflectionPolicy
testPropertyPolicy
null
configure
"property.xml"
info
logger
"Message 0"
put
MDC
"p1"
"Hola"
info
logger
"Message 1"
null
assertTrue
Compare.compare(RewriteAppenderTest.class,"temp","property.log")
testPropertyPolicy
tearDown
resetConfiguration
LogManager
tearDown
test1
configure
PropertyConfigurator
"input/RFA1.properties"
debug
logger
"Hello---"+i
debug
logger
"Hello--"+i
null
assertTrue
newFile("output/RFA-test1.log").exists()
null
assertTrue
newFile("output/RFA-test1.log.1").exists()
test1
test2
setName
rfa
"ROLLING"
setLayout
rfa
layout
setAppend
rfa
false
setMaxBackupIndex
rfa
3
setMaximumFileSize
rfa
100
setFile
rfa
"output/RFA-test2.log"
activateOptions
rfa
addAppender
root
rfa
debug
logger
"Hello---"+i
debug
logger
"Hello--"+i
null
assertTrue
newFile("output/RFA-test2.log").exists()
null
assertTrue
newFile("output/RFA-test2.log.1").exists()
null
assertTrue
newFile("output/RFA-test2.log.2").exists()
null
assertTrue
newFile("output/RFA-test2.log.3").exists()
null
assertFalse
newFile("output/RFA-test2.log.4").exists()
test2
test2ParamConstructor
null
assertEquals
1
appender.getMaxBackupIndex()
null
assertEquals
10*1024*1024
appender.getMaximumFileSize()
test2ParamConstructor
test3ParamConstructor
null
assertEquals
1
appender.getMaxBackupIndex()
test3ParamConstructor
testLockDotOne
setName
rfa
"ROLLING"
setLayout
rfa
layout
setAppend
rfa
false
setMaxBackupIndex
rfa
10
setMaximumFileSize
rfa
100
setFile
rfa
"output/RFA-dot1.log"
activateOptions
rfa
addAppender
root
rfa
delete
newFile("output/RFA-dot1.log.2")
write
dot1
"Locked file"
write
dot5
"Unlocked file"
close
dot5
debug
logger
"Hello---"+i
debug
logger
"Hello--"+i
close
dot1
debug
logger
"Hello--"+i
close
rfa
null
assertTrue
newFile("output/RFA-dot1.log.7").exists()
null
assertEquals
50
newFile("output/RFA-dot1.log").length()
null
assertEquals
200
newFile("output/RFA-dot1.log.1").length()
null
assertTrue
newFile("output/RFA-dot1.log").exists()
null
assertTrue
newFile("output/RFA-dot1.log.1").exists()
null
assertTrue
newFile("output/RFA-dot1.log.2").exists()
null
assertTrue
newFile("output/RFA-dot1.log.3").exists()
null
assertFalse
newFile("output/RFA-dot1.log.4").exists()
testLockDotOne
testLockDotThree
setName
rfa
"ROLLING"
setLayout
rfa
layout
setAppend
rfa
false
setMaxBackupIndex
rfa
10
setMaximumFileSize
rfa
100
setFile
rfa
"output/RFA-dot3.log"
activateOptions
rfa
addAppender
root
rfa
delete
newFile("output/RFA-dot3.log.1")
delete
newFile("output/RFA-dot3.log.2")
delete
newFile("output/RFA-dot3.log.4")
write
dot3
"Locked file"
write
dot5
"Unlocked file"
close
dot5
debug
logger
"Hello---"+i
debug
logger
"Hello--"+i
close
dot3
debug
logger
"Hello--"+i
close
rfa
null
assertTrue
newFile("output/RFA-dot3.log.8").exists()
null
assertEquals
50
newFile("output/RFA-dot3.log").length()
null
assertEquals
100
newFile("output/RFA-dot3.log.1").length()
null
assertEquals
200
newFile("output/RFA-dot3.log.2").length()
null
assertTrue
newFile("output/RFA-dot3.log").exists()
null
assertTrue
newFile("output/RFA-dot3.log.1").exists()
null
assertTrue
newFile("output/RFA-dot3.log.2").exists()
null
assertTrue
newFile("output/RFA-dot3.log.3").exists()
null
assertFalse
newFile("output/RFA-dot3.log.4").exists()
testLockDotThree
testFourParamConstructor
null
assertEquals
className
li.getClassName()
null
assertEquals
methodName
li.getMethodName()
null
assertEquals
fileName
li.getFileName()
null
assertEquals
lineNumber
li.getLineNumber()
null
assertEquals
className+"."+methodName+"("+fileName+":"+lineNumber+")"
li.fullInfo
testFourParamConstructor
getInfo
getInfo
getInfo
getInfo
testLocationInfo
null
assertEquals
NameSubstringCaller.class.getName()
li.getClassName()
null
assertEquals
"getInfo"
li.getMethodName()
testLocationInfo
testSerializationSimple
assertSerializationEquals
SerializationTestHelper
"witness/serialization/simple.bin"
event
skip
237
testSerializationSimple
testSerializationWithException
assertSerializationEquals
SerializationTestHelper
"witness/serialization/exception.bin"
event
skip
237
testSerializationWithException
testSerializationWithLocation
getLocationInformation
event
assertSerializationEquals
SerializationTestHelper
"witness/serialization/location.bin"
event
skip
237
testSerializationWithLocation
testSerializationNDC
push
NDC
"ndc test"
assertSerializationEquals
SerializationTestHelper
"witness/serialization/ndc.bin"
event
skip
237
testSerializationNDC
testSerializationMDC
put
MDC
"mdckey"
"mdcvalue"
assertSerializationEquals
SerializationTestHelper
"witness/serialization/mdc.bin"
event
skip
237
testSerializationMDC
testDeserializationSimple
null
assertTrue
objinstanceofLoggingEvent
null
assertEquals
"Hello, world."
event.getMessage()
null
assertEquals
Level.INFO
event.getLevel()
testDeserializationSimple
testDeserializationWithException
null
assertTrue
objinstanceofLoggingEvent
null
assertEquals
"Hello, world."
event.getMessage()
null
assertEquals
Level.INFO
event.getLevel()
testDeserializationWithException
testDeserializationWithLocation
null
assertTrue
objinstanceofLoggingEvent
null
assertEquals
"Hello, world."
event.getMessage()
null
assertEquals
Level.INFO
event.getLevel()
testDeserializationWithLocation
testFQNOfCategoryClass
null
assertEquals
catName
event.fqnOfCategoryClass
testFQNOfCategoryClass
testLevel
null
assertEquals
Level.ERROR
event.level
testLevel
testLocationInfoNoFQCN
null
assertNotNull
info
null
assertEquals
"?"
info.getLineNumber()
null
assertEquals
"?"
info.getClassName()
null
assertEquals
"?"
info.getFileName()
null
assertEquals
"?"
info.getMethodName()
testLocationInfoNoFQCN
toString
toString
testBadMessage
getRenderedMessage
event
testBadMessage
printStackTrace
print
s
(Object)"print(Object)"
print
s
"print(char[])".toCharArray()
print
s
"print(String)"
println
s
(Object)"println(Object)"
println
s
"println(char[])".toCharArray()
println
s
"println(String)"
write
s
"write(char[])".toCharArray()
write
s
"write(char[], int, int)".toCharArray()
2
8
write
s
"write(String, int, int)"
2
8
printStackTrace
testOverriddenBehavior
null
assertEquals
4
rep.length
null
assertEquals
"print(Object)print(char[])print(String)println(Object)"
rep[0]
null
assertEquals
"println(char[])"
rep[1]
null
assertEquals
"println(String)"
rep[2]
null
assertEquals
"write(char[])ite(charite(Stri"
rep[3]
testOverriddenBehavior
printStackTrace
print
s
true
print
s
'a'
print
s
1
print
s
2L
print
s
Float.MAX_VALUE
print
s
Double.MIN_VALUE
println
s
true
println
s
'a'
println
s
1
println
s
2L
println
s
Float.MAX_VALUE
println
s
Double.MIN_VALUE
write
s
'C'
printStackTrace
testNotOverriddenBehavior
null
assertEquals
7
rep.length
append
buf
'a'
append
buf
String.valueOf(1)
append
buf
String.valueOf(2L)
append
buf
String.valueOf(Float.MAX_VALUE)
append
buf
String.valueOf(Double.MIN_VALUE)
append
buf
String.valueOf(true)
null
assertEquals
buf.toString()
rep[0]
null
assertEquals
"a"
rep[1]
null
assertEquals
String.valueOf(1)
rep[2]
null
assertEquals
String.valueOf(2L)
rep[3]
null
assertEquals
String.valueOf(Float.MAX_VALUE)
rep[4]
null
assertEquals
String.valueOf(Double.MIN_VALUE)
rep[5]
null
assertEquals
"C"
rep[6]
testNotOverriddenBehavior
printStackTrace
print
s
(Object)null
print
s
(String)null
println
s
(Object)null
println
s
(String)null
printStackTrace
testNull
null
assertEquals
2
rep.length
null
assertEquals
nullStr+nullStr+nullStr
rep[0]
null
assertEquals
nullStr
rep[1]
testNull
printStackTrace
printStackTrace
testEmpty
null
assertEquals
0
rep.length
testEmpty
printStackTrace
print
s
stackTrace
printStackTrace
testLineFeed
null
assertEquals
1
rep.length
null
assertEquals
""
rep[0]
testLineFeed
testCarriageReturn
null
assertEquals
1
rep.length
null
assertEquals
""
rep[0]
testCarriageReturn
testParsing
null
assertEquals
6
rep.length
null
assertEquals
"Line1"
rep[0]
null
assertEquals
"Line2"
rep[1]
null
assertEquals
"Line3"
rep[2]
null
assertEquals
"Line4"
rep[3]
null
assertEquals
""
rep[4]
null
assertEquals
"Line6"
rep[5]
testParsing
testLineFeedBlank
null
assertEquals
2
rep.length
null
assertEquals
""
rep[0]
null
assertEquals
" "
rep[1]
testLineFeedBlank
testGetThrowable
null
assertSame
t
ti.getThrowable()
testGetThrowable
testIsolation
null
assertEquals
"Hello, World"
rep[0]
null
assertEquals
"Hello, World"
rep2[0]
testIsolation
printStackTrace
print
s
"NastyException"
printStackTrace
testNastyException
null
assertEquals
"NastyException"
rep[0]
testNastyException
main
println
System.err
"Usage: java "+StressCategory.class.getName()+" name1 ... nameN\n."
exit
System
1
println
System.err
"This stress test suffers from combinatorial explosion.\n"+"Invoking with seven arguments takes about 90 minutes even on fast machines"
null
permute
0
main
permute
null
createLoop
0
null
swap
names
n
i
null
permute
n+1
null
swap
names
n
i
permute
swap
swap
permutationDump
print
System.out
"Current permutation is - "
print
System.out
names[i]+" "
println
System.out
permutationDump
createLoop
setLevel
cat[i]
ct[i].level
null
test
clear
h
null
createLoop
n+1
null
createLoop
n+1
null
createLoop
n+1
createLoop
test
println
System.out
"Failed stress test."
null
permutationDump
null
ctDump
null
catDump
exit
System
1
test
ctDump
println
System.out
"ct ["+j+"] = ("+ct[j].catstr+","+ct[j].level+")"
println
System.out
"ct ["+j+"] = undefined"
ctDump
catDump
println
System.out
"cat["+j+"] = ("+cat[j].name+","+cat[j].getLevel()+")"
println
System.out
"cat["+j+"] = undefined"
catDump
checkCorrectness
println
System.out
"Expected level for "+localCT.catstr+" is "+expected
println
System.out
"Purported level for "+cat[i].name+" is "+purported
checkCorrectness
getExpectedPrioriy
getExpectedPrioriy
getTraceLevel
getTraceLevel
tearDown
resetConfiguration
LogManager
tearDown
testClassName
activateOptions
appender
addAppender
Logger.getRootLogger()
appender
debug
LogMF
logger
null
Math.PI
null
assertEquals
TestLogMF.class.getName()
writer.toString()
testClassName
testTraceNullPattern
setLevel
logger
TRACE
trace
LogMF
logger
null
Math.PI
null
assertNull
capture.getMessage()
testTraceNullPattern
testTraceNoArg
setLevel
logger
TRACE
trace
LogMF
logger
"Hello, World"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testTraceNoArg
testTraceBadPattern
setLevel
logger
TRACE
trace
LogMF
logger
"Hello, {."
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testTraceBadPattern
testTraceMissingArg
setLevel
logger
TRACE
trace
LogMF
logger
"Hello, {0}World"
newObject[0]
null
assertEquals
"Hello, {0}World"
capture.getMessage()
testTraceMissingArg
testTraceString
setLevel
logger
TRACE
trace
LogMF
logger
"Hello, {0}"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testTraceString
testTraceNull
setLevel
logger
TRACE
trace
LogMF
logger
"Hello, {0}"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testTraceNull
testTraceInt
setLevel
logger
TRACE
trace
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testTraceInt
testTraceByte
setLevel
logger
TRACE
trace
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testTraceByte
testTraceShort
setLevel
logger
TRACE
trace
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testTraceShort
testTraceLong
setLevel
logger
TRACE
trace
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testTraceLong
testTraceChar
setLevel
logger
TRACE
trace
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testTraceChar
testTraceBoolean
setLevel
logger
TRACE
trace
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testTraceBoolean
testTraceFloat
setLevel
logger
TRACE
trace
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration "+format.format(val)
capture.getMessage()
testTraceFloat
testTraceDouble
setLevel
logger
TRACE
trace
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration "+format.format(val)
capture.getMessage()
testTraceDouble
testTraceTwoArg
setLevel
logger
TRACE
trace
LogMF
logger
"{1}, {0}."
"World"
"Hello"
null
assertEquals
"Hello, World."
capture.getMessage()
testTraceTwoArg
testTraceThreeArg
setLevel
logger
TRACE
trace
LogMF
logger
"{1}{2} {0}."
"World"
"Hello"
","
null
assertEquals
"Hello, World."
capture.getMessage()
testTraceThreeArg
testTraceFourArg
setLevel
logger
TRACE
trace
LogMF
logger
"{1}{2} {0}{3}"
"World"
"Hello"
","
"."
null
assertEquals
"Hello, World."
capture.getMessage()
testTraceFourArg
testTraceArrayArg
setLevel
logger
TRACE
trace
LogMF
logger
"{1}{2} {0}{3}"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testTraceArrayArg
testTraceNullArrayArg
setLevel
logger
TRACE
trace
LogMF
logger
"{1}{2} {0}{3}"
args
null
assertEquals
"{1}{2} {0}{3}"
capture.getMessage()
testTraceNullArrayArg
testDebugNullPattern
debug
LogMF
logger
null
Math.PI
null
assertEquals
null
capture.getMessage()
testDebugNullPattern
testDebugNoArg
debug
LogMF
logger
"Hello, World"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testDebugNoArg
testDebugBadPattern
debug
LogMF
logger
"Hello, {."
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testDebugBadPattern
testDebugMissingArg
debug
LogMF
logger
"Hello, {0}World"
newObject[0]
null
assertEquals
"Hello, {0}World"
capture.getMessage()
testDebugMissingArg
testDebugString
debug
LogMF
logger
"Hello, {0}"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testDebugString
testDebugNull
debug
LogMF
logger
"Hello, {0}"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testDebugNull
testDebugInt
debug
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testDebugInt
testDebugByte
debug
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testDebugByte
testDebugShort
debug
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testDebugShort
testDebugLong
debug
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testDebugLong
testDebugChar
debug
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testDebugChar
testDebugBoolean
debug
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testDebugBoolean
testDebugFloat
debug
LogMF
logger
"Iteration {0}"
(float)Math.PI
null
assertEquals
expected
capture.getMessage()
testDebugFloat
testDebugDouble
debug
LogMF
logger
"Iteration {0}"
Math.PI
null
assertEquals
expected
capture.getMessage()
testDebugDouble
testDebugTwoArg
debug
LogMF
logger
"{1}, {0}."
"World"
"Hello"
null
assertEquals
"Hello, World."
capture.getMessage()
testDebugTwoArg
testDebugThreeArg
debug
LogMF
logger
"{1}{2} {0}."
"World"
"Hello"
","
null
assertEquals
"Hello, World."
capture.getMessage()
testDebugThreeArg
testDebugFourArg
debug
LogMF
logger
"{1}{2} {0}{3}"
"World"
"Hello"
","
"."
null
assertEquals
"Hello, World."
capture.getMessage()
testDebugFourArg
testDebugArrayArg
debug
LogMF
logger
"{1}{2} {0}{3}"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testDebugArrayArg
testDebugDate
debug
LogMF
logger
"Iteration {0}"
epoch
null
assertEquals
expected
actual
null
assertEquals
expected2
actual
testDebugDate
testDebugNullArrayArg
debug
LogMF
logger
"{1}{2} {0}{3}"
args
null
assertEquals
"{1}{2} {0}{3}"
capture.getMessage()
testDebugNullArrayArg
testDebugPercent
debug
LogMF
logger
"{0, number, percent}"
Math.PI
null
assertEquals
expected
capture.getMessage()
testDebugPercent
testDebugFullPrecisionAndPercent
debug
LogMF
logger
"{0}{0, number, percent}"
Math.PI
null
assertEquals
expected
capture.getMessage()
testDebugFullPrecisionAndPercent
testDebugQuoted
debug
LogMF
logger
"'{0}'"
"World"
null
assertEquals
"{0}"
capture.getMessage()
testDebugQuoted
testInfoNullPattern
info
LogMF
logger
null
Math.PI
null
assertNull
capture.getMessage()
testInfoNullPattern
testInfoNoArg
info
LogMF
logger
"Hello, World"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testInfoNoArg
testInfoBadPattern
info
LogMF
logger
"Hello, {."
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testInfoBadPattern
testInfoMissingArg
info
LogMF
logger
"Hello, {0}World"
newObject[0]
null
assertEquals
"Hello, {0}World"
capture.getMessage()
testInfoMissingArg
testInfoString
info
LogMF
logger
"Hello, {0}"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testInfoString
testInfoNull
info
LogMF
logger
"Hello, {0}"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testInfoNull
testInfoInt
info
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testInfoInt
testInfoByte
info
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testInfoByte
testInfoShort
info
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testInfoShort
testInfoLong
info
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testInfoLong
testInfoChar
info
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testInfoChar
testInfoBoolean
info
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testInfoBoolean
testInfoFloat
info
LogMF
logger
"Iteration {0}"
(float)Math.PI
null
assertEquals
expected
capture.getMessage()
testInfoFloat
testInfoDouble
info
LogMF
logger
"Iteration {0}"
Math.PI
null
assertEquals
expected
capture.getMessage()
testInfoDouble
testInfoTwoArg
info
LogMF
logger
"{1}, {0}."
"World"
"Hello"
null
assertEquals
"Hello, World."
capture.getMessage()
testInfoTwoArg
testInfoThreeArg
info
LogMF
logger
"{1}{2} {0}."
"World"
"Hello"
","
null
assertEquals
"Hello, World."
capture.getMessage()
testInfoThreeArg
testInfoFourArg
info
LogMF
logger
"{1}{2} {0}{3}"
"World"
"Hello"
","
"."
null
assertEquals
"Hello, World."
capture.getMessage()
testInfoFourArg
testInfoArrayArg
info
LogMF
logger
"{1}{2} {0}{3}"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testInfoArrayArg
testWarnNullPattern
warn
LogMF
logger
null
Math.PI
null
assertNull
capture.getMessage()
testWarnNullPattern
testWarnNoArg
warn
LogMF
logger
"Hello, World"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testWarnNoArg
testWarnBadPattern
warn
LogMF
logger
"Hello, {."
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testWarnBadPattern
testWarnMissingArg
warn
LogMF
logger
"Hello, {0}World"
newObject[0]
null
assertEquals
"Hello, {0}World"
capture.getMessage()
testWarnMissingArg
testWarnString
warn
LogMF
logger
"Hello, {0}"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testWarnString
testWarnNull
warn
LogMF
logger
"Hello, {0}"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testWarnNull
testWarnInt
warn
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testWarnInt
testWarnByte
warn
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testWarnByte
testWarnShort
warn
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testWarnShort
testWarnLong
warn
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testWarnLong
testWarnChar
warn
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testWarnChar
testWarnBoolean
warn
LogMF
logger
"Iteration {0}"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testWarnBoolean
testWarnFloat
warn
LogMF
logger
"Iteration {0}"
(float)Math.PI
null
assertEquals
expected
capture.getMessage()
testWarnFloat
testWarnDouble
warn
LogMF
logger
"Iteration {0}"
Math.PI
null
assertEquals
expected
capture.getMessage()
testWarnDouble
testWarnTwoArg
warn
LogMF
logger
"{1}, {0}."
"World"
"Hello"
null
assertEquals
"Hello, World."
capture.getMessage()
testWarnTwoArg
testWarnThreeArg
warn
LogMF
logger
"{1}{2} {0}."
"World"
"Hello"
","
null
assertEquals
"Hello, World."
capture.getMessage()
testWarnThreeArg
testWarnFourArg
warn
LogMF
logger
"{1}{2} {0}{3}"
"World"
"Hello"
","
"."
null
assertEquals
"Hello, World."
capture.getMessage()
testWarnFourArg
testWarnArrayArg
warn
LogMF
logger
"{1}{2} {0}{3}"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testWarnArrayArg
testLogNullPattern
log
LogMF
logger
Level.ERROR
null
Math.PI
null
assertNull
capture.getMessage()
testLogNullPattern
testLogNoArg
log
LogMF
logger
Level.ERROR
"Hello, World"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testLogNoArg
testLogBadPattern
log
LogMF
logger
Level.ERROR
"Hello, {."
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testLogBadPattern
testLogMissingArg
log
LogMF
logger
Level.ERROR
"Hello, {0}World"
newObject[0]
null
assertEquals
"Hello, {0}World"
capture.getMessage()
testLogMissingArg
testLogString
log
LogMF
logger
Level.ERROR
"Hello, {0}"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testLogString
testLogNull
log
LogMF
logger
Level.ERROR
"Hello, {0}"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testLogNull
testLogInt
log
LogMF
logger
Level.ERROR
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogInt
testLogByte
log
LogMF
logger
Level.ERROR
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogByte
testLogShort
log
LogMF
logger
Level.ERROR
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogShort
testLogLong
log
LogMF
logger
Level.ERROR
"Iteration {0}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogLong
testLogChar
log
LogMF
logger
Level.ERROR
"Iteration {0}"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testLogChar
testLogBoolean
log
LogMF
logger
Level.ERROR
"Iteration {0}"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testLogBoolean
testLogFloat
log
LogMF
logger
Level.ERROR
"Iteration {0}"
(float)Math.PI
null
assertEquals
expected
capture.getMessage()
testLogFloat
testLogDouble
log
LogMF
logger
Level.ERROR
"Iteration {0}"
Math.PI
null
assertEquals
expected
capture.getMessage()
testLogDouble
testLogTwoArg
log
LogMF
logger
Level.ERROR
"{1}, {0}."
"World"
"Hello"
null
assertEquals
"Hello, World."
capture.getMessage()
testLogTwoArg
testLogThreeArg
log
LogMF
logger
Level.ERROR
"{1}{2} {0}."
"World"
"Hello"
","
null
assertEquals
"Hello, World."
capture.getMessage()
testLogThreeArg
testLogFourArg
log
LogMF
logger
Level.ERROR
"{1}{2} {0}{3}"
"World"
"Hello"
","
"."
null
assertEquals
"Hello, World."
capture.getMessage()
testLogFourArg
testLogArrayArg
log
LogMF
logger
Level.ERROR
"{1}{2} {0}{3}"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testLogArrayArg
testLogrbNullBundle
logrb
LogMF
logger
Level.ERROR
null
"Iteration0"
Math.PI
null
assertEquals
"Iteration0"
capture.getMessage()
testLogrbNullBundle
testLogrbNullKey
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
null
Math.PI
null
assertNull
capture.getMessage()
testLogrbNullKey
testLogrbNoArg
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Hello1"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testLogrbNoArg
testLogrbBadPattern
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Malformed"
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testLogrbBadPattern
testLogrbMissingArg
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Hello2"
newObject[0]
null
assertEquals
"Hello, {0}World"
capture.getMessage()
testLogrbMissingArg
testLogrbString
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Hello3"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testLogrbString
testLogrbNull
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Hello3"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testLogrbNull
testLogrbInt
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogrbInt
testLogrbByte
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogrbByte
testLogrbShort
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogrbShort
testLogrbLong
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogrbLong
testLogrbChar
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testLogrbChar
testLogrbBoolean
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testLogrbBoolean
testLogrbFloat
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
(float)Math.PI
null
assertEquals
expected
capture.getMessage()
testLogrbFloat
testLogrbDouble
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
Math.PI
null
assertEquals
expected
capture.getMessage()
testLogrbDouble
testLogrbTwoArg
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Hello4"
"World"
"Hello"
null
assertEquals
"Hello, World."
capture.getMessage()
testLogrbTwoArg
testLogrbThreeArg
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Hello5"
"World"
"Hello"
","
null
assertEquals
"Hello, World."
capture.getMessage()
testLogrbThreeArg
testLogrbFourArg
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Hello6"
"World"
"Hello"
","
"."
null
assertEquals
"Hello, World."
capture.getMessage()
testLogrbFourArg
testLogrbArrayArg
logrb
LogMF
logger
Level.ERROR
BUNDLE_NAME
"Hello6"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testLogrbArrayArg
testInfo1ParamBrace9
info
LogMF
logger
"Hello, {9}{0}"
"World"
null
assertEquals
"Hello, {9}World"
capture.getMessage()
testInfo1ParamBrace9
testInfo2ParamBrace9
info
LogMF
logger
"{1}, {9}{0}"
"World"
"Hello"
null
assertEquals
"Hello, {9}World"
capture.getMessage()
testInfo2ParamBrace9
testInfo10ParamBrace9
info
LogMF
logger
"{1}, {9}{0}"
newObject[]{"World","Hello",null,null,null,null,null,null,null,"New "}
null
assertEquals
"Hello, New World"
capture.getMessage()
testInfo10ParamBrace9
testInfo1ParamBraceSlashColon
info
LogMF
logger
pattern
"World"
null
assertEquals
pattern
capture.getMessage()
testInfo1ParamBraceSlashColon
getTraceLevel
getTraceLevel
tearDown
resetConfiguration
LogManager
tearDown
testClassName
activateOptions
appender
addAppender
Logger.getRootLogger()
appender
debug
LogSF
logger
null
Math.PI
null
assertEquals
TestLogSF.class.getName()
writer.toString()
testClassName
testTraceNullPattern
setLevel
logger
TRACE
trace
LogSF
logger
null
Math.PI
null
assertNull
capture.getMessage()
testTraceNullPattern
testTraceNoArg
setLevel
logger
TRACE
trace
LogSF
logger
"Hello, World"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testTraceNoArg
testTraceBadPattern
setLevel
logger
TRACE
trace
LogSF
logger
"Hello, {."
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testTraceBadPattern
testTraceMissingArg
setLevel
logger
TRACE
trace
LogSF
logger
"Hello, {}World"
newObject[0]
null
assertEquals
"Hello, {}World"
capture.getMessage()
testTraceMissingArg
testTraceString
setLevel
logger
TRACE
trace
LogSF
logger
"Hello, {}"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testTraceString
testTraceNull
setLevel
logger
TRACE
trace
LogSF
logger
"Hello, {}"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testTraceNull
testTraceInt
setLevel
logger
TRACE
trace
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testTraceInt
testTraceByte
setLevel
logger
TRACE
trace
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testTraceByte
testTraceShort
setLevel
logger
TRACE
trace
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testTraceShort
testTraceLong
setLevel
logger
TRACE
trace
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testTraceLong
testTraceChar
setLevel
logger
TRACE
trace
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testTraceChar
testTraceBoolean
setLevel
logger
TRACE
trace
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testTraceBoolean
testTraceFloat
setLevel
logger
TRACE
trace
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration "+String.valueOf(val)
capture.getMessage()
testTraceFloat
testTraceDouble
setLevel
logger
TRACE
trace
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration "+String.valueOf(val)
capture.getMessage()
testTraceDouble
testTraceTwoArg
setLevel
logger
TRACE
trace
LogSF
logger
"{}, {}."
"Hello"
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testTraceTwoArg
testTraceThreeArg
setLevel
logger
TRACE
trace
LogSF
logger
"{}{} {}."
"Hello"
","
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testTraceThreeArg
testTraceFourArg
setLevel
logger
TRACE
trace
LogSF
logger
"{}{} {}{}"
"Hello"
","
"World"
"."
null
assertEquals
"Hello, World."
capture.getMessage()
testTraceFourArg
testTraceArrayArg
setLevel
logger
TRACE
trace
LogSF
logger
"{}{} {}{}"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testTraceArrayArg
testTraceNullArrayArg
setLevel
logger
TRACE
trace
LogSF
logger
"{}{} {}{}"
args
null
assertEquals
"{}{} {}{}"
capture.getMessage()
testTraceNullArrayArg
testDebugNullPattern
debug
LogSF
logger
null
Math.PI
null
assertNull
capture.getMessage()
testDebugNullPattern
testDebugNoArg
debug
LogSF
logger
"Hello, World"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testDebugNoArg
testDebugBadPattern
debug
LogSF
logger
"Hello, {."
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testDebugBadPattern
testDebugMissingArg
debug
LogSF
logger
"Hello, {}World"
newObject[0]
null
assertEquals
"Hello, {}World"
capture.getMessage()
testDebugMissingArg
testDebugString
debug
LogSF
logger
"Hello, {}"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testDebugString
testDebugNull
debug
LogSF
logger
"Hello, {}"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testDebugNull
testDebugInt
debug
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testDebugInt
testDebugByte
debug
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testDebugByte
testDebugShort
debug
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testDebugShort
testDebugLong
debug
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testDebugLong
testDebugChar
debug
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testDebugChar
testDebugBoolean
debug
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testDebugBoolean
testDebugFloat
debug
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration "+String.valueOf(val)
capture.getMessage()
testDebugFloat
testDebugDouble
debug
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration "+String.valueOf(val)
capture.getMessage()
testDebugDouble
testDebugTwoArg
debug
LogSF
logger
"{}, {}."
"Hello"
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testDebugTwoArg
testDebugThreeArg
debug
LogSF
logger
"{}{} {}."
"Hello"
","
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testDebugThreeArg
testDebugFourArg
debug
LogSF
logger
"{}{} {}{}"
"Hello"
","
"World"
"."
null
assertEquals
"Hello, World."
capture.getMessage()
testDebugFourArg
testDebugArrayArg
debug
LogSF
logger
"{}{} {}{}"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testDebugArrayArg
testDebugNullArrayArg
debug
LogSF
logger
"{}{} {}{}"
args
null
assertEquals
"{}{} {}{}"
capture.getMessage()
testDebugNullArrayArg
testInfoNullPattern
info
LogSF
logger
null
Math.PI
null
assertNull
capture.getMessage()
testInfoNullPattern
testInfoNoArg
info
LogSF
logger
"Hello, World"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testInfoNoArg
testInfoBadPattern
info
LogSF
logger
"Hello, {."
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testInfoBadPattern
testInfoMissingArg
info
LogSF
logger
"Hello, {}World"
newObject[0]
null
assertEquals
"Hello, {}World"
capture.getMessage()
testInfoMissingArg
testInfoString
info
LogSF
logger
"Hello, {}"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testInfoString
testInfoNull
info
LogSF
logger
"Hello, {}"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testInfoNull
testInfoInt
info
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testInfoInt
testInfoByte
info
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testInfoByte
testInfoShort
info
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testInfoShort
testInfoLong
info
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testInfoLong
testInfoChar
info
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testInfoChar
testInfoBoolean
info
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testInfoBoolean
testInfoFloat
info
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration "+String.valueOf(val)
capture.getMessage()
testInfoFloat
testInfoDouble
info
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration "+String.valueOf(val)
capture.getMessage()
testInfoDouble
testInfoTwoArg
info
LogSF
logger
"{}, {}."
"Hello"
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testInfoTwoArg
testInfoThreeArg
info
LogSF
logger
"{}{} {}."
"Hello"
","
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testInfoThreeArg
testInfoArrayArg
info
LogSF
logger
"{}{} {}{}"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testInfoArrayArg
testWarnNullPattern
warn
LogSF
logger
null
Math.PI
null
assertNull
capture.getMessage()
testWarnNullPattern
testWarnNoArg
warn
LogSF
logger
"Hello, World"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testWarnNoArg
testWarnBadPattern
warn
LogSF
logger
"Hello, {."
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testWarnBadPattern
testWarnMissingArg
warn
LogSF
logger
"Hello, {}World"
newObject[0]
null
assertEquals
"Hello, {}World"
capture.getMessage()
testWarnMissingArg
testWarnString
warn
LogSF
logger
"Hello, {}"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testWarnString
testWarnNull
warn
LogSF
logger
"Hello, {}"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testWarnNull
testWarnInt
warn
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testWarnInt
testWarnByte
warn
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testWarnByte
testWarnShort
warn
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testWarnShort
testWarnLong
warn
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testWarnLong
testWarnChar
warn
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testWarnChar
testWarnBoolean
warn
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testWarnBoolean
testWarnFloat
warn
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration "+String.valueOf(val)
capture.getMessage()
testWarnFloat
testWarnDouble
warn
LogSF
logger
"Iteration {}"
val
null
assertEquals
"Iteration "+String.valueOf(val)
capture.getMessage()
testWarnDouble
testWarnTwoArg
warn
LogSF
logger
"{}, {}."
"Hello"
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testWarnTwoArg
testWarnThreeArg
warn
LogSF
logger
"{}{} {}."
"Hello"
","
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testWarnThreeArg
testWarnFourArg
warn
LogSF
logger
"{}{} {}{}"
"Hello"
","
"World"
"."
null
assertEquals
"Hello, World."
capture.getMessage()
testWarnFourArg
testWarnArrayArg
warn
LogSF
logger
"{}{} {}{}"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testWarnArrayArg
testLogNullPattern
log
LogSF
logger
Level.ERROR
null
Math.PI
null
assertNull
capture.getMessage()
testLogNullPattern
testLogNoArg
log
LogSF
logger
Level.ERROR
"Hello, World"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testLogNoArg
testLogBadPattern
log
LogSF
logger
Level.ERROR
"Hello, {."
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testLogBadPattern
testLogMissingArg
log
LogSF
logger
Level.ERROR
"Hello, {}World"
newObject[0]
null
assertEquals
"Hello, {}World"
capture.getMessage()
testLogMissingArg
testLogString
log
LogSF
logger
Level.ERROR
"Hello, {}"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testLogString
testLogNull
log
LogSF
logger
Level.ERROR
"Hello, {}"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testLogNull
testLogInt
log
LogSF
logger
Level.ERROR
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogInt
testLogByte
log
LogSF
logger
Level.ERROR
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogByte
testLogShort
log
LogSF
logger
Level.ERROR
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogShort
testLogLong
log
LogSF
logger
Level.ERROR
"Iteration {}"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogLong
testLogChar
log
LogSF
logger
Level.ERROR
"Iteration {}"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testLogChar
testLogBoolean
log
LogSF
logger
Level.ERROR
"Iteration {}"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testLogBoolean
testLogFloat
log
LogSF
logger
Level.ERROR
"Iteration {}"
(float)Math.PI
null
assertEquals
expected
capture.getMessage()
testLogFloat
testLogDouble
log
LogSF
logger
Level.ERROR
"Iteration {}"
Math.PI
null
assertEquals
expected
capture.getMessage()
testLogDouble
testLogTwoArg
log
LogSF
logger
Level.ERROR
"{}, {}."
"Hello"
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testLogTwoArg
testLogThreeArg
log
LogSF
logger
Level.ERROR
"{}{} {}."
"Hello"
","
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testLogThreeArg
testLogFourArg
log
LogSF
logger
Level.ERROR
"{}{} {}{}"
"Hello"
","
"World"
"."
null
assertEquals
"Hello, World."
capture.getMessage()
testLogFourArg
testLogArrayArg
log
LogSF
logger
Level.ERROR
"{}{} {}{}"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testLogArrayArg
testLogrbNullBundle
logrb
LogSF
logger
Level.ERROR
null
"Iteration0"
Math.PI
null
assertEquals
"Iteration0"
capture.getMessage()
testLogrbNullBundle
testLogrbNullKey
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
null
Math.PI
null
assertNull
capture.getMessage()
testLogrbNullKey
testLogrbNoArg
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Hello1"
Math.PI
null
assertEquals
"Hello, World"
capture.getMessage()
testLogrbNoArg
testLogrbBadPattern
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Malformed"
Math.PI
null
assertEquals
"Hello, {."
capture.getMessage()
testLogrbBadPattern
testLogrbMissingArg
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Hello2"
newObject[0]
null
assertEquals
"Hello, {}World"
capture.getMessage()
testLogrbMissingArg
testLogrbString
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Hello3"
"World"
null
assertEquals
"Hello, World"
capture.getMessage()
testLogrbString
testLogrbNull
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Hello3"
(Object)null
null
assertEquals
"Hello, null"
capture.getMessage()
testLogrbNull
testLogrbInt
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogrbInt
testLogrbByte
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogrbByte
testLogrbShort
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogrbShort
testLogrbLong
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration 42"
capture.getMessage()
testLogrbLong
testLogrbChar
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration C"
capture.getMessage()
testLogrbChar
testLogrbBoolean
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
val
null
assertEquals
"Iteration true"
capture.getMessage()
testLogrbBoolean
testLogrbFloat
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
(float)Math.PI
null
assertEquals
expected
capture.getMessage()
testLogrbFloat
testLogrbDouble
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Iteration0"
Math.PI
null
assertEquals
expected
capture.getMessage()
testLogrbDouble
testLogrbTwoArg
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Hello4"
"Hello"
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testLogrbTwoArg
testLogrbThreeArg
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Hello5"
"Hello"
","
"World"
null
assertEquals
"Hello, World."
capture.getMessage()
testLogrbThreeArg
testLogrbFourArg
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Hello6"
"Hello"
","
"World"
"."
null
assertEquals
"Hello, World."
capture.getMessage()
testLogrbFourArg
testLogrbArrayArg
logrb
LogSF
logger
Level.ERROR
BUNDLE_NAME
"Hello6"
args
null
assertEquals
"Hello, World."
capture.getMessage()
testLogrbArrayArg
testEscapeOneParam
info
LogSF
logger
"\\{}\\{{}}, World}\\{"
"Hello"
null
assertEquals
"{}{Hello}, World}{"
capture.getMessage()
testEscapeOneParam
testEscapeTwoParam
info
LogSF
logger
"\\{}\\{{}}, {}}{}\\{"
"Hello"
"World"
null
assertEquals
"{}{Hello}, World}{}{"
capture.getMessage()
testEscapeTwoParam
tearDown
resetConfiguration
LogManager
tearDown
toString
toString
testEnteringNullNull
setLevel
logger
Level.DEBUG
entering
LogXF
logger
null
null
null
assertEquals
"null.null ENTRY"
capture.getMessage()
testEnteringNullNull
testEnteringNullNullNull
setLevel
logger
Level.DEBUG
entering
LogXF
logger
null
null
(String)null
null
assertEquals
"null.null ENTRY null"
capture.getMessage()
testEnteringNullNullNull
testEnteringNullNullNullArray
setLevel
logger
Level.DEBUG
entering
LogXF
logger
null
null
(Object[])null
null
assertEquals
"null.null ENTRY {}"
capture.getMessage()
testEnteringNullNullNullArray
testEntering
setLevel
logger
Level.DEBUG
entering
LogXF
logger
"SomeClass"
"someMethod"
null
assertEquals
"SomeClass.someMethod ENTRY"
capture.getMessage()
testEntering
testEnteringWithParam
setLevel
logger
Level.DEBUG
entering
LogXF
logger
"SomeClass"
"someMethod"
"someParam"
null
assertEquals
"SomeClass.someMethod ENTRY someParam"
capture.getMessage()
testEnteringWithParam
testEnteringWithBadParam
setLevel
logger
Level.DEBUG
entering
LogXF
logger
"SomeClass"
"someMethod"
BadStringifier.INSTANCE
null
assertEquals
"SomeClass.someMethod ENTRY ?"
capture.getMessage()
testEnteringWithBadParam
testEnteringWithBadParams
setLevel
logger
Level.DEBUG
entering
LogXF
logger
"SomeClass"
"someMethod"
newObject[]{"param1",BadStringifier.INSTANCE}
null
assertEquals
"SomeClass.someMethod ENTRY {param1,?}"
capture.getMessage()
testEnteringWithBadParams
testExitingNullNull
setLevel
logger
Level.DEBUG
exiting
LogXF
logger
null
null
null
assertEquals
"null.null RETURN"
capture.getMessage()
testExitingNullNull
testExitingNullNullNull
setLevel
logger
Level.DEBUG
exiting
LogXF
logger
null
null
(String)null
null
assertEquals
"null.null RETURN null"
capture.getMessage()
testExitingNullNullNull
testExiting
setLevel
logger
Level.DEBUG
exiting
LogXF
logger
"SomeClass"
"someMethod"
null
assertEquals
"SomeClass.someMethod RETURN"
capture.getMessage()
testExiting
testExitingWithValue
setLevel
logger
Level.DEBUG
exiting
LogXF
logger
"SomeClass"
"someMethod"
"someValue"
null
assertEquals
"SomeClass.someMethod RETURN someValue"
capture.getMessage()
testExitingWithValue
testExitingWithBadValue
setLevel
logger
Level.DEBUG
exiting
LogXF
logger
"SomeClass"
"someMethod"
BadStringifier.INSTANCE
null
assertEquals
"SomeClass.someMethod RETURN ?"
capture.getMessage()
testExitingWithBadValue
testThrowingNullNullNull
setLevel
logger
Level.DEBUG
throwing
LogXF
logger
null
null
null
null
assertEquals
"null.null THROW"
capture.getMessage()
testThrowingNullNullNull
testThrowing
setLevel
logger
Level.DEBUG
throwing
LogXF
logger
"SomeClass"
"someMethod"
newIllegalArgumentException()
null
assertEquals
"SomeClass.someMethod THROW"
capture.getMessage()
testThrowing
createLayout
createLayout
testFormat
clear
NDC
push
NDC
"NDC goes here"
pop
NDC
dateFormat
layout
buf
event
append
buf
'['
append
buf
event.getThreadName()
append
buf
"] "
append
buf
event.getLevel().toString()
append
buf
' '
append
buf
event.getLoggerName()
append
buf
' '
append
buf
"NDC goes here"
append
buf
" - "
append
buf
event.getMessage()
append
buf
System.getProperty("line.separator")
null
assertEquals
buf.toString()
result
testFormat
testGetSetThreadPrinting
null
assertEquals
true
layout.getThreadPrinting()
setThreadPrinting
layout
false
null
assertEquals
false
layout.getThreadPrinting()
setThreadPrinting
layout
true
null
assertEquals
true
layout.getThreadPrinting()
testGetSetThreadPrinting
testGetSetCategoryPrefixing
null
assertEquals
true
layout.getCategoryPrefixing()
setCategoryPrefixing
layout
false
null
assertEquals
false
layout.getCategoryPrefixing()
setCategoryPrefixing
layout
true
null
assertEquals
true
layout.getCategoryPrefixing()
testGetSetCategoryPrefixing
testGetSetContextPrinting
null
assertEquals
true
layout.getContextPrinting()
setContextPrinting
layout
false
null
assertEquals
false
layout.getContextPrinting()
setContextPrinting
layout
true
null
assertEquals
true
layout.getContextPrinting()
testGetSetContextPrinting
filter
filter
filter
filter
compare
println
System.out
"Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter
println
System.out
"One reads:  ["+s1+"]."
println
System.out
"Other reads:["+s2+"]."
println
System.out
"File ["+file2+"] longer than file ["+file1+"]."
compare
open
open
compare
close
in1
close
in2
compare
compare
println
System.out
"Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter
println
System.out
"One reads:  ["+s1+"]."
println
System.out
"Other reads:["+s2+"]."
null
outputFile
testClass
file1
null
outputFile
testClass
file2
println
System.out
"File ["+file2+"] longer than file ["+file1+"]."
null
outputFile
testClass
file1
null
outputFile
testClass
file2
compare
outputFile
println
System.out
"--------------------------------"
println
System.out
"Contents of "+file+":"
print
System.out
lineCounter
print
System.out
"   : "
print
System.out
"  : "
print
System.out
" : "
print
System.out
": "
println
System.out
s1
close
in1
outputFile
filter
filter
filter
filter
filter
filter
filter
filter
filter
filter
filter
filter
filter
filter
filter
filter
serializeClone
writeObject
objOut
obj
close
objOut
serializeClone
deserializeStream
deserializeStream
assertSerializationEquals
writeObject
objOut
obj
close
objOut
null
assertStreamEquals
witness
memOut.toByteArray()
skip
endCompare
assertSerializationEquals
assertStreamEquals
close
is
assertEquals
TestCase
bytesRead
actual.length
assertEquals
TestCase
"Difference at offset "+i
expected[i]
actual[i]
write
os
actual
close
os
fail
TestCase
"Writing witness file "+witness
assertStreamEquals
filter
filter
transform
println
output
line
transform
transform
println
output
line
transform
filter
filter
filter
filter
tearDown
resetConfiguration
LogManager
tearDown
testConstructor
null
assertEquals
0
appender.getPort()
testConstructor
sendMessage
writeUTF
writer
msg
null
assertEquals
expectedResponse
response
close
reader
close
writer
close
socket
sendMessage
testRollover
setLayout
erfa
layout
setAppend
erfa
false
setMaxBackupIndex
erfa
2
setPort
erfa
port
setFile
erfa
"output/ERFA-test2.log"
activateOptions
erfa
sleep
Thread
100
addAppender
root
erfa
debug
logger
"Hello---"+i
debug
logger
"Hello--"+i
null
sendMessage
port
"RollOver"
"OK"
null
sendMessage
port
"That's all folks."
"Expecting [RollOver] string."
null
assertTrue
newFile("output/ERFA-test2.log").exists()
null
assertTrue
newFile("output/ERFA-test2.log.1").exists()
null
assertTrue
newFile("output/ERFA-test2.log.2").exists()
null
assertFalse
newFile("output/ERFA-test2.log.3").exists()
testRollover
setUp
setUp
tearDown
resetConfiguration
root.getLoggerRepository()
tearDown
test1
configure
DOMConfigurator
"input/xml/fallback1.xml"
null
assertNotNull
eh
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/fallback1")
test1
test2
configure
PropertyConfigurator
"input/fallback1.properties"
null
assertNotNull
eh
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/fallback1")
test2
common
debug
logger
"Message "+++i
debug
root
"Message "+i
info
logger
"Message "+++i
info
root
"Message "+i
warn
logger
"Message "+++i
warn
root
"Message "+i
error
logger
"Message "+++i
error
root
"Message "+i
log
logger
Level.FATAL
"Message "+++i
log
root
Level.FATAL
"Message "+i
debug
logger
"Message "+++i
e
debug
root
"Message "+i
e
error
logger
"Message "+++i
e
error
root
"Message "+i
e
common
setUp
removeAllAppenders
root
setUp
tearDown
resetConfiguration
root.getLoggerRepository()
tearDown
accept
addFilter
appender
matchFilter
addFilter
appender
newDenyAllFilter()
addAppender
root
appender
setLevel
root
Level.TRACE
setLevelToMatch
matchFilter
levelArray[x].toString()
null
common
"pass "+x+"; filter set to accept only "+levelArray[x].toString()+" msgs"
transform
Transformer
ACCEPT_FILE
ACCEPT_FILTERED
newLineNumberFilter()
null
assertTrue
Compare.compare(ACCEPT_FILTERED,ACCEPT_WITNESS)
accept
deny
setAcceptOnMatch
matchFilter
false
addFilter
appender
matchFilter
addAppender
root
appender
setLevel
root
Level.TRACE
setLevelToMatch
matchFilter
levelArray[x].toString()
null
common
"pass "+x+"; filter set to deny only "+levelArray[x].toString()+" msgs"
transform
Transformer
DENY_FILE
DENY_FILTERED
newLineNumberFilter()
null
assertTrue
Compare.compare(DENY_FILTERED,DENY_WITNESS)
deny
common
trace
logger
msg
debug
logger
msg
info
logger
msg
warn
logger
msg
error
logger
msg
fatal
logger
msg
common
suite
addTest
suite
newLevelMatchFilterTestCase("accept")
addTest
suite
newLevelMatchFilterTestCase("deny")
suite
activateOptions
activateOptions
append
sleep
Thread
100
addElement
vector
event
append
getVector
getVector
close
close
isClosed
isClosed
requiresLayout
requiresLayout
setLogger
setLogger
getLogger
getLogger
activateOptions
activateOptions
error
null
error
message
e
errorCode
null
error
error
null
error
message
null
-1
null
error
error
addElement
errors
newObject[]{message,e,newInteger(errorCode),event}
error
getMessage
getMessage
getException
getException
getErrorCode
getErrorCode
getEvent
getEvent
size
size
setAppender
setAppender
getAppender
getAppender
setBackupAppender
setBackupAppender
getBackupAppender
getBackupAppender
setUp
setUp
tearDown
resetConfiguration
root.getLoggerRepository()
tearDown
test1
configure
DOMConfigurator
"input/xml/customLevel1.xml"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/customLevel.1")
test1
test2
configure
DOMConfigurator
"input/xml/customLevel2.xml"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/customLevel.2")
test2
test3
configure
DOMConfigurator
"input/xml/customLevel3.xml"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/customLevel.3")
test3
test4
configure
DOMConfigurator
"input/xml/customLevel4.xml"
null
common
null
assertTrue
Compare.compare(TEMP,"witness/customLevel.4")
test4
common
debug
logger
"Message "+++i
info
logger
"Message "+++i
warn
logger
"Message "+++i
error
logger
"Message "+++i
log
logger
XLevel.TRACE
"Message "+++i
common
suite
addTest
suite
newCustomLevelTestCase("test1")
addTest
suite
newCustomLevelTestCase("test2")
addTest
suite
newCustomLevelTestCase("test3")
addTest
suite
newCustomLevelTestCase("test4")
suite
setUp
setUp
tearDown
resetConfiguration
root.getLoggerRepository()
tearDown
test1
configure
DOMConfigurator
"input/xml/DOMTestCase1.xml"
null
common
transform
Transformer
TEMP_A1
FILTERED_A1
newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
transform
Transformer
TEMP_A2
FILTERED_A2
newFilter[]{cf2,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED_A1,"witness/dom.A1.1")
null
assertTrue
Compare.compare(FILTERED_A2,"witness/dom.A2.1")
test1
test4
configure
DOMConfigurator
"input/xml/DOMTest4.xml"
null
common
transform
Transformer
TEMP_A1+".4"
FILTERED_A1+".4"
newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
transform
Transformer
TEMP_A2+".4"
FILTERED_A2+".4"
newFilter[]{cf2,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
null
assertTrue
Compare.compare(FILTERED_A1+".4","witness/dom.A1.4")
null
assertTrue
Compare.compare(FILTERED_A2+".4","witness/dom.A2.4")
test4
common
setName
Thread.currentThread()
"main"
trace
logger
"Message "+++i
trace
root
"Message "+i
debug
logger
"Message "+++i
debug
root
"Message "+i
info
logger
"Message "+++i
info
root
"Message "+i
warn
logger
"Message "+++i
warn
root
"Message "+i
error
logger
"Message "+++i
error
root
"Message "+i
log
logger
Level.FATAL
"Message "+++i
log
root
Level.FATAL
"Message "+i
debug
logger
"Message "+++i
e
debug
root
"Message "+i
e
error
logger
"Message "+++i
e
error
root
"Message "+i
e
setName
Thread.currentThread()
oldThreadName
common
makeNewLoggerInstance
null
assertFalse
additivity
makeNewLoggerInstance
setAdditivity
setAdditivity
activateOptions
activateOptions
setLogger
setLogger
error
error
error
error
error
error
setAppender
setAppender
setBackupAppender
setBackupAppender
testCategoryFactory1
configure
DOMConfigurator
"input/xml/categoryfactory1.xml"
null
assertTrue
logger1instanceofCustomLogger
null
assertFalse
logger2instanceofCustomLogger
testCategoryFactory1
testCategoryFactory2
configure
DOMConfigurator
"input/xml/categoryfactory2.xml"
null
assertTrue
logger1instanceofCustomLogger
null
assertFalse
logger2instanceofCustomLogger
testCategoryFactory2
testLoggerFactory1
configure
DOMConfigurator
"input/xml/loggerfactory1.xml"
null
assertTrue
logger1instanceofCustomLogger
null
assertFalse
logger2instanceofCustomLogger
testLoggerFactory1
testReset
setName
appender
"V1"
addAppender
Logger.getRootLogger()
appender
configure
DOMConfigurator
"input/xml/testReset.xml"
null
assertNull
Logger.getRootLogger().getAppender("V1")
testReset
testConfigureAndWatch
configureAndWatch
DOMConfigurator
"input/xml/DOMTestCase1.xml"
null
assertNotNull
Logger.getRootLogger().getAppender("A1")
testConfigureAndWatch
testOverrideSubst
subst
subst
doConfigure
configurator
"input/xml/DOMTestCase1.xml"
LogManager.getLoggerRepository()
null
assertEquals
"output/subst-test.A1"
file
subst
activateOptions
activateOptions
isActivated
isActivated
doRender
doRender
setShowVersion
setShowVersion
getShowVersion
getShowVersion
testThrowableRenderer1
configure
DOMConfigurator
"input/xml/throwableRenderer1.xml"
resetConfiguration
LogManager
null
assertNotNull
renderer
null
assertEquals
true
renderer.isActivated()
null
assertEquals
false
renderer.getShowVersion()
testThrowableRenderer1
testJarURL
println
System.out
input.getAbsolutePath()
mkdirs
dir
putNextEntry
zos
newZipEntry("log4j.xml")
write
zos
buf
0
len
closeEntry
zos
close
zos
configure
DOMConfigurator
url
null
assertTrue
file.delete()
null
assertFalse
file.exists()
testJarURL
toLevel
toLevel
toLevel
toLevel
toLevel
toLevel
setUp
clear
NDC
clear
MDC.getContext()
setUp
tearDown
null
setUp
tearDown
createLayout
createLayout
parse
setNamespaceAware
factory
false
setCoalescing
factory
true
parse
checkEventElement
null
assertEquals
"log4j:event"
element.getTagName()
null
assertEquals
event.getLoggerName()
element.getAttribute("logger")
null
assertEquals
Long.toString(event.timeStamp)
element.getAttribute("timestamp")
null
assertEquals
event.getLevel().toString()
element.getAttribute("level")
null
assertEquals
event.getThreadName()
element.getAttribute("thread")
checkEventElement
checkMessageElement
null
assertEquals
"log4j:message"
element.getTagName()
null
assertNotNull
messageNode
null
assertEquals
Node.TEXT_NODE
messageNode.getNodeType()
null
assertEquals
message
messageNode.getNodeValue()
null
assertNull
messageNode.getNextSibling()
checkMessageElement
checkNDCElement
null
assertEquals
"log4j:NDC"
element.getTagName()
null
assertNotNull
messageNode
null
assertEquals
Node.TEXT_NODE
messageNode.getNodeType()
null
assertEquals
message
messageNode.getNodeValue()
null
assertNull
messageNode.getNextSibling()
checkNDCElement
checkThrowableElement
null
assertEquals
"log4j:throwable"
element.getTagName()
null
assertNotNull
messageNode
null
assertEquals
Node.TEXT_NODE
messageNode.getNodeType()
null
assertEquals
msg
messageNode.getNodeValue().substring(0,msg.length())
null
assertNull
messageNode.getNextSibling()
checkThrowableElement
checkPropertiesElement
null
assertEquals
"log4j:properties"
element.getTagName()
null
assertEquals
"log4j:data"
child.getNodeName()
null
assertEquals
key
childElement.getAttribute("name")
null
assertEquals
value
childElement.getAttribute("value")
null
assertEquals
1
childNodeCount
checkPropertiesElement
testFormat
null
checkEventElement
parsedResult
event
null
checkMessageElement
(Element)node
"Hello, World"
null
fail
"Unexpected node type"
null
assertEquals
1
childElementCount
testFormat
testFormatWithException
null
checkEventElement
parsedResult
event
null
checkMessageElement
(Element)node
"Hello, World"
null
checkThrowableElement
(Element)node
ex
null
fail
"Unexpected node type"
null
assertEquals
2
childElementCount
testFormatWithException
testFormatWithNDC
push
NDC
"NDC goes here"
pop
NDC
null
checkEventElement
parsedResult
event
null
checkMessageElement
(Element)node
"Hello, World"
null
checkNDCElement
(Element)node
"NDC goes here"
null
fail
"Unexpected node type"
null
assertEquals
2
childElementCount
testFormatWithNDC
testGetSetLocationInfo
null
assertEquals
false
layout.getLocationInfo()
setLocationInfo
layout
true
null
assertEquals
true
layout.getLocationInfo()
setLocationInfo
layout
false
null
assertEquals
false
layout.getLocationInfo()
testGetSetLocationInfo
testActivateOptions
activateOptions
layout
testActivateOptions
testProblemCharacters
setName
Thread.currentThread()
problemName
push
NDC
problemName
clear
mdcMap
put
MDC
problemName
problemName
setProperties
layout
true
clear
mdcMap
setName
Thread.currentThread()
threadName
null
checkEventElement
parsedResult
event
null
checkMessageElement
(Element)node
problemName
null
checkNDCElement
(Element)node
problemName
null
checkThrowableElement
(Element)node
ex
null
checkPropertiesElement
(Element)node
problemName
problemName
null
fail
"Unexpected element"
null
fail
"Unexpected node type"
testProblemCharacters
testNDCWithCDATA
push
NDC
ndcMessage
clear
NDC
null
assertEquals
1
ndcs.getLength()
append
buf
child.getNodeValue()
null
assertEquals
ndcMessage
buf.toString()
testNDCWithCDATA
testExceptionWithCDATA
null
assertEquals
1
throwables.getLength()
append
buf
child.getNodeValue()
null
assertTrue
buf.toString().indexOf(exceptionMessage)!=-1
testExceptionWithCDATA
setUp
setLevel
root
Level.TRACE
setLevel
logger
Level.TRACE
setUp
tearDown
resetConfiguration
root.getLoggerRepository()
tearDown
basic
addAppender
root
newFileAppender(xmlLayout,TEMP,false)
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/xmlLayout.1")
basic
locationInfo
setLocationInfo
xmlLayout
true
addAppender
root
newFileAppender(xmlLayout,TEMP,false)
null
common
transform
Transformer
TEMP
FILTERED
newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/xmlLayout.2")
locationInfo
testCDATA
setLocationInfo
xmlLayout
true
addAppender
root
newFileAppender(xmlLayout,TEMP,false)
setName
Thread.currentThread()
"main"
trace
logger
"Message with embedded <![CDATA[<hello>hi</hello>]]>."
debug
logger
"Message with embedded <![CDATA[<hello>hi</hello>]]>."
setName
Thread.currentThread()
oldThreadName
transform
Transformer
TEMP
FILTERED
newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
transform
Transformer
TEMP
FILTERED
newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/xmlLayout.3")
testCDATA
testNull
addAppender
root
newFileAppender(xmlLayout,TEMP,false)
setName
Thread.currentThread()
"main"
debug
logger
"hi"
debug
logger
null
debug
logger
"hi"
e
setName
Thread.currentThread()
oldThreadName
transform
Transformer
TEMP
FILTERED
newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/xmlLayout.null")
testNull
testMDC
setProperties
xmlLayout
true
addAppender
root
newFileAppender(xmlLayout,TEMP,false)
clear
context
put
MDC
"key1"
"val1"
put
MDC
"key2"
"val2"
debug
logger
"Hello"
transform
Transformer
TEMP
FILTERED
newFilter[]{newLineNumberFilter(),newJunitTestRunnerFilter(),newXMLTimestampFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/xmlLayout.mdc.1")
testMDC
testMDCEscaped
setProperties
xmlLayout
true
addAppender
root
newFileAppender(xmlLayout,TEMP,false)
clear
context
put
MDC
"blahAttribute"
"<blah value='blah'>"
put
MDC
"<blahKey value='blah'/>"
"blahValue"
debug
logger
"Hello"
transform
Transformer
TEMP
FILTERED
newFilter[]{newLineNumberFilter(),newJunitTestRunnerFilter(),newXMLTimestampFilter()}
null
assertTrue
Compare.compare(FILTERED,"witness/xmlLayout.mdc.2")
testMDCEscaped
common
setName
Thread.currentThread()
"main"
trace
logger
"Message "+++i
trace
root
"Message "+i
debug
logger
"Message "+++i
debug
root
"Message "+i
info
logger
"Message "+++i
info
root
"Message "+i
warn
logger
"Message "+++i
warn
root
"Message "+i
error
logger
"Message "+++i
error
root
"Message "+i
log
logger
Level.FATAL
"Message "+++i
log
root
Level.FATAL
"Message "+i
debug
logger
"Message "+++i
e
debug
root
"Message "+i
e
error
logger
"Message "+++i
e
error
root
"Message "+i
e
setName
Thread.currentThread()
oldThreadName
common
suite
addTest
suite
newXMLLayoutTestCase("basic")
addTest
suite
newXMLLayoutTestCase("locationInfo")
addTest
suite
newXMLLayoutTestCase("testCDATA")
addTest
suite
newXMLLayoutTestCase("testNull")
addTest
suite
newXMLLayoutTestCase("testMDC")
addTest
suite
newXMLLayoutTestCase("testMDCEscaped")
suite
info
logger
"in X() constructor"
