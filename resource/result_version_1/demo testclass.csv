Class,Method_detailAsyncAppenderTestCase," [Log, Manager.shutdown();] [Loggerroot=, Logger.get, Root, Logger()] [Vector, Appendervector, Appender=new, Vector, Appender()] [Async, Appenderasync, Appender=new, Async, Appender()] [Async, Appender.set, Name(""async-, Close, Test"");] [Async, Appender.add, Appender(vector, Appender);] [Root.add, Appender(async, Appender);] [Root.debug(""m1"");] [Async, Appender.close();] [Root.debug(""m2"");] [Vectorv=vector, Appender.get, Vector()] [Assert, Equals(v.size(),1);] [Loggerroot=, Logger.get, Root, Logger()] [Vector, Appendervector, Appender=new, Vector, Appender()] [Async, Appenderasync, Appender=new, Async, Appender()] [Async, Appender.set, Name(""async-test2"");] [Async, Appender.add, Appender(vector, Appender);] [Root.add, Appender(async, Appender);] [Root.debug(""m1"");] [Async, Appender.close();] [Root.debug(""m2"");] [Vectorv=vector, Appender.get, Vector()] [Assert, Equals(v.size(),1);] [Assert, True(vector, Appender.is, Closed());] [Int, Len=200] [Loggerroot=, Logger.get, Root, Logger()] [Vector, Appendervector, Appender=new, Vector, Appender()] [Async, Appenderasync, Appender=new, Async, Appender()] [Async, Appender.set, Name(""async-test3"");] [Async, Appender.add, Appender(vector, Appender);] [Root.add, Appender(async, Appender);] [For(inti=0;i<, Len;i++){root.debug(""message""+i);}] [Root.debug(""message""+i);] [System.out.println("", Done loop."");] [System.out.flush();] [Async, Appender.close();] [Root.debug(""m2"");] [Vectorv=vector, Appender.get, Vector()] [Assert, Equals(v.size(),, Len);] [Assert, True(vector, Appender.is, Closed());"AsyncAppenderTestCase," [Thrownew, Null, Pointer, Exception();] [Returnfalse;]"AsyncAppenderTestCase," [Appendernull, Pointer, Appender=new, Null, Pointer, Appender()] [Async, Appenderasync, Appender=new, Async, Appender()] [Async, Appender.add, Appender(null, Pointer, Appender);] [Async, Appender.set, Buffer, Size(5);] [Async, Appender.activate, Options();] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(null, Pointer, Appender);] [Try{root.info("", Message"");, Thread.sleep(10);root.info("", Message"");fail("", Should have thrown exception"");}catch(, Null, Pointer, Exceptionex){}] [Root.info("", Message"");] [Thread.sleep(10);] [Root.info("", Message"");] [Fail("", Should have thrown exception"");] [Blockable, Vector, Appenderblockable, Appender=new, Blockable, Vector, Appender()] [Async, Appenderasync=new, Async, Appender()] [Async.add, Appender(blockable, Appender);] [Async.set, Buffer, Size(5);] [Async.set, Location, Info(true);] [Async.set, Blocking(false);] [Async.activate, Options();] [Loggerroot, Logger=, Logger.get, Root, Logger()] [Root, Logger.add, Appender(async);] [Greetergreeter=new, Greeter(root, Logger,100)] [Synchronized(blockable, Appender.get, Monitor()){greeter.run();root, Logger.error("", That's all folks."");}] [Greeter.run();] [Root, Logger.error("", That's all folks."");] [Async.close();] [Vectorevents=blockable, Appender.get, Vector()] [Logging, Eventinitial, Event=(, Logging, Event)events.get(0)] [Logging, Eventdiscard, Event=(, Logging, Event)events.get(events.size()-1)] [Pattern, Layoutlayout=new, Pattern, Layout()] [Layout.set, Conversion, Pattern(""%, C:%, L %m%n"");] [Layout.activate, Options();] [Stringinitial, Str=layout.format(initial, Event)] [Assert, Equals(, Async, Appender, Test, Case.class.get, Name(),initial, Str.substring(0,, Async, Appender, Test, Case.class.get, Name().length()));] [Stringdiscard, Str=layout.format(discard, Event)] [Assert, Equals(""?:? "",discard, Str.substring(0,4));] [Blockable, Vector, Appenderblockable, Appender=new, Blockable, Vector, Appender()] [Async, Appenderasync=new, Async, Appender()] [Async.add, Appender(blockable, Appender);] [Async.set, Buffer, Size(5);] [Async.set, Location, Info(false);] [Async.set, Blocking(false);] [Async.activate, Options();] [Loggerroot, Logger=, Logger.get, Root, Logger()] [Root, Logger.add, Appender(async);] [Greetergreeter=new, Greeter(root, Logger,100)] [Synchronized(blockable, Appender.get, Monitor()){greeter.run();root, Logger.error("", That's all folks."");}] [Greeter.run();] [Root, Logger.error("", That's all folks."");] [Async.close();] [Vectorevents=blockable, Appender.get, Vector()] [Logging, Eventinitial, Event=(, Logging, Event)events.get(0)] [Logging, Eventdiscard, Event=(, Logging, Event)events.get(events.size()-1)] [Pattern, Layoutlayout=new, Pattern, Layout()] [Layout.set, Conversion, Pattern(""%, C:%, L %m%n"");] [Layout.activate, Options();] [Stringinitial, Str=layout.format(initial, Event)] [Assert, Equals(""?:? "",initial, Str.substring(0,4));] [Stringdiscard, Str=layout.format(discard, Event)] [Assert, Equals(""?:? "",discard, Str.substring(0,4));]"AsyncAppenderTestCase," [If(logger==null){thrownew, Illegal, Argument, Exception(""logger"");}] [Thrownew, Illegal, Argument, Exception(""logger"");] [This.logger=logger;] [This.repetitions=repetitions;] [Try{for(inti=0;i<repetitions;i++){logger.info("", Hello, , World"");, Thread.sleep(1);}}catch(, Interrupted, Exceptionex){, Thread.current, Thread().interrupt();}] [For(inti=0;i<repetitions;i++){logger.info("", Hello, , World"");, Thread.sleep(1);}] [Logger.info("", Hello, , World"");] [Thread.sleep(1);] [Thread.current, Thread().interrupt();]Exit class: Greeter"AsyncAppenderTestCase," [Synchronized(monitor){super.append(event);if(event.get, Level()==, Level., Fatal){, Loggerlogger=, Logger.get, Logger(event.get, Logger, Name());logger.error(event.get, Message().to, String());logger.warn(event.get, Message().to, String());logger.info(event.get, Message().to, String());logger.debug(event.get, Message().to, String());}}] [Super.append(event);] [If(event.get, Level()==, Level., Fatal){, Loggerlogger=, Logger.get, Logger(event.get, Logger, Name());logger.error(event.get, Message().to, String());logger.warn(event.get, Message().to, String());logger.info(event.get, Message().to, String());logger.debug(event.get, Message().to, String());}] [Loggerlogger=, Logger.get, Logger(event.get, Logger, Name())] [Logger.error(event.get, Message().to, String());] [Logger.warn(event.get, Message().to, String());] [Logger.info(event.get, Message().to, String());] [Logger.debug(event.get, Message().to, String());] [Returnmonitor;]"AsyncAppenderTestCase," [Blockable, Vector, Appenderblockable, Appender=new, Blockable, Vector, Appender()] [Async, Appenderasync=new, Async, Appender()] [Async.add, Appender(blockable, Appender);] [Async.set, Buffer, Size(5);] [Async.set, Location, Info(false);] [Async.activate, Options();] [Loggerroot, Logger=, Logger.get, Root, Logger()] [Root, Logger.add, Appender(async);] [String, Bufferbuf=new, String, Buffer("", Hello"")] [Synchronized(blockable, Appender.get, Monitor()){root, Logger.info(buf);buf.append("", , World."");}] [Root, Logger.info(buf);] [Buf.append("", , World."");] [Async.close();] [Vectorevents=blockable, Appender.get, Vector()] [Logging, Eventevent=(, Logging, Event)events.get(0)] [Pattern, Layoutlayout=new, Pattern, Layout()] [Layout.set, Conversion, Pattern(""%m"");] [Layout.activate, Options();] [Stringmsg=layout.format(event)] [Assert, Equals("", Hello"",msg);]"