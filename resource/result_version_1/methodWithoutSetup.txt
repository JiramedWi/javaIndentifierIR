 [Log, Manager.shutdown();] [Loggerroot=, Logger.get, Root, Logger()] [Vector, Appendervector, Appender=new, Vector, Appender()] [Async, Appenderasync, Appender=new, Async, Appender()] [Async, Appender.set, Name("async-, Close, Test");] [Async, Appender.add, Appender(vector, Appender);] [Root.add, Appender(async, Appender);] [Root.debug("m1");] [Async, Appender.close();] [Root.debug("m2");] [Vectorv=vector, Appender.get, Vector()] [Assert, Equals(v.size(),1);] [Loggerroot=, Logger.get, Root, Logger()] [Vector, Appendervector, Appender=new, Vector, Appender()] [Async, Appenderasync, Appender=new, Async, Appender()] [Async, Appender.set, Name("async-test2");] [Async, Appender.add, Appender(vector, Appender);] [Root.add, Appender(async, Appender);] [Root.debug("m1");] [Async, Appender.close();] [Root.debug("m2");] [Vectorv=vector, Appender.get, Vector()] [Assert, Equals(v.size(),1);] [Assert, True(vector, Appender.is, Closed());] [Int, Len=200] [Loggerroot=, Logger.get, Root, Logger()] [Vector, Appendervector, Appender=new, Vector, Appender()] [Async, Appenderasync, Appender=new, Async, Appender()] [Async, Appender.set, Name("async-test3");] [Async, Appender.add, Appender(vector, Appender);] [Root.add, Appender(async, Appender);] [For(inti=0;i<, Len;i++){root.debug("message"+i);}] [Root.debug("message"+i);] [System.out.println(", Done loop.");] [System.out.flush();] [Async, Appender.close();] [Root.debug("m2");] [Vectorv=vector, Appender.get, Vector()] [Assert, Equals(v.size(),, Len);] [Assert, True(vector, Appender.is, Closed());] [Thrownew, Null, Pointer, Exception();] [Returnfalse;]
 [Appendernull, Pointer, Appender=new, Null, Pointer, Appender()] [Async, Appenderasync, Appender=new, Async, Appender()] [Async, Appender.add, Appender(null, Pointer, Appender);] [Async, Appender.set, Buffer, Size(5);] [Async, Appender.activate, Options();] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(null, Pointer, Appender);] [Try{root.info(", Message");, Thread.sleep(10);root.info(", Message");fail(", Should have thrown exception");}catch(, Null, Pointer, Exceptionex){}] [Root.info(", Message");] [Thread.sleep(10);] [Root.info(", Message");] [Fail(", Should have thrown exception");] [Blockable, Vector, Appenderblockable, Appender=new, Blockable, Vector, Appender()] [Async, Appenderasync=new, Async, Appender()] [Async.add, Appender(blockable, Appender);] [Async.set, Buffer, Size(5);] [Async.set, Location, Info(true);] [Async.set, Blocking(false);] [Async.activate, Options();] [Loggerroot, Logger=, Logger.get, Root, Logger()] [Root, Logger.add, Appender(async);] [Greetergreeter=new, Greeter(root, Logger,100)] [Synchronized(blockable, Appender.get, Monitor()){greeter.run();root, Logger.error(", That's all folks.");}] [Greeter.run();] [Root, Logger.error(", That's all folks.");] [Async.close();] [Vectorevents=blockable, Appender.get, Vector()] [Logging, Eventinitial, Event=(, Logging, Event)events.get(0)] [Logging, Eventdiscard, Event=(, Logging, Event)events.get(events.size()-1)] [Pattern, Layoutlayout=new, Pattern, Layout()] [Layout.set, Conversion, Pattern("%, C:%, L %m%n");] [Layout.activate, Options();] [Stringinitial, Str=layout.format(initial, Event)] [Assert, Equals(, Async, Appender, Test, Case.class.get, Name(),initial, Str.substring(0,, Async, Appender, Test, Case.class.get, Name().length()));] [Stringdiscard, Str=layout.format(discard, Event)] [Assert, Equals("?:? ",discard, Str.substring(0,4));] [Blockable, Vector, Appenderblockable, Appender=new, Blockable, Vector, Appender()] [Async, Appenderasync=new, Async, Appender()] [Async.add, Appender(blockable, Appender);] [Async.set, Buffer, Size(5);] [Async.set, Location, Info(false);] [Async.set, Blocking(false);] [Async.activate, Options();] [Loggerroot, Logger=, Logger.get, Root, Logger()] [Root, Logger.add, Appender(async);] [Greetergreeter=new, Greeter(root, Logger,100)] [Synchronized(blockable, Appender.get, Monitor()){greeter.run();root, Logger.error(", That's all folks.");}] [Greeter.run();] [Root, Logger.error(", That's all folks.");] [Async.close();] [Vectorevents=blockable, Appender.get, Vector()] [Logging, Eventinitial, Event=(, Logging, Event)events.get(0)] [Logging, Eventdiscard, Event=(, Logging, Event)events.get(events.size()-1)] [Pattern, Layoutlayout=new, Pattern, Layout()] [Layout.set, Conversion, Pattern("%, C:%, L %m%n");] [Layout.activate, Options();] [Stringinitial, Str=layout.format(initial, Event)] [Assert, Equals("?:? ",initial, Str.substring(0,4));] [Stringdiscard, Str=layout.format(discard, Event)] [Assert, Equals("?:? ",discard, Str.substring(0,4));] [If(logger==null){thrownew, Illegal, Argument, Exception("logger");}] [Thrownew, Illegal, Argument, Exception("logger");] [This.logger=logger;] [This.repetitions=repetitions;] [Try{for(inti=0;i<repetitions;i++){logger.info(", Hello, , World");, Thread.sleep(1);}}catch(, Interrupted, Exceptionex){, Thread.current, Thread().interrupt();}] [For(inti=0;i<repetitions;i++){logger.info(", Hello, , World");, Thread.sleep(1);}] [Logger.info(", Hello, , World");] [Thread.sleep(1);] [Thread.current, Thread().interrupt();]
 [Synchronized(monitor){super.append(event);if(event.get, Level()==, Level., Fatal){, Loggerlogger=, Logger.get, Logger(event.get, Logger, Name());logger.error(event.get, Message().to, String());logger.warn(event.get, Message().to, String());logger.info(event.get, Message().to, String());logger.debug(event.get, Message().to, String());}}] [Super.append(event);] [If(event.get, Level()==, Level., Fatal){, Loggerlogger=, Logger.get, Logger(event.get, Logger, Name());logger.error(event.get, Message().to, String());logger.warn(event.get, Message().to, String());logger.info(event.get, Message().to, String());logger.debug(event.get, Message().to, String());}] [Loggerlogger=, Logger.get, Logger(event.get, Logger, Name())] [Logger.error(event.get, Message().to, String());] [Logger.warn(event.get, Message().to, String());] [Logger.info(event.get, Message().to, String());] [Logger.debug(event.get, Message().to, String());] [Returnmonitor;]
 [Blockable, Vector, Appenderblockable, Appender=new, Blockable, Vector, Appender()] [Async, Appenderasync=new, Async, Appender()] [Async.add, Appender(blockable, Appender);] [Async.set, Buffer, Size(5);] [Async.set, Location, Info(false);] [Async.activate, Options();] [Loggerroot, Logger=, Logger.get, Root, Logger()] [Root, Logger.add, Appender(async);] [String, Bufferbuf=new, String, Buffer(", Hello")] [Synchronized(blockable, Appender.get, Monitor()){root, Logger.info(buf);buf.append(", , World.");}] [Root, Logger.info(buf);] [Buf.append(", , World.");] [Async.close();] [Vectorevents=blockable, Appender.get, Vector()] [Logging, Eventevent=(, Logging, Event)events.get(0)] [Pattern, Layoutlayout=new, Pattern, Layout()] [Layout.set, Conversion, Pattern("%m");] [Layout.activate, Options();] [Stringmsg=layout.format(event)] [Assert, Equals(", Hello",msg);]
 [Mock, Categorycategory=new, Mock, Category("org.example.foo")] [Category.set, Additivity(false);] [Category.add, Appender(new, Vector, Appender());] [Category.info(", Hello, , World");] [Methodmethod=, Category.class.get, Method("get, Chained, Priority",(, Class[])null)] [Assert, True(method.get, Return, Type()==, Priority.class);] [Loggerlogger=, Logger.get, Logger("org.example.foo")] [Logger.set, Level(, Level., Error);] [Prioritydebug=, Level., Debug] [Logger.l7dlog(debug,", Hello, , World",null);] [Loggerlogger=, Logger.get, Logger("org.example.foo")] [Logger.set, Level(, Level., Error);] [Prioritydebug=, Level., Debug] [Logger.l7dlog(debug,", Hello, , World",new, Object[0],null);] [Loggerlogger=, Logger.get, Logger("org.example.foo")] [Prioritydebug=, Level., Debug] [Logger.set, Priority(debug);] [Repository=new, Hierarchy(this);] [Priorityinfo=, Level., Info] [Forced, Log(, Mock, Category.class.to, String(),info,msg,null);]
@@
 [Test, Suites=new, Test, Suite()] [S.add, Test, Suite(, Logging, Event, Test.class);] [S.add, Test, Suite(org.apache.log4j., Level, Test.class);] [S.add, Test, Suite(org.apache.log4j., Priority, Test.class);] [S.add, Test, Suite(org.apache.log4j., Category, Test.class);] [S.add, Test, Suite(org.apache.log4j., File, Appender, Test.class);] [S.add, Test, Suite(org.apache.log4j., Log, Manager, Test.class);] [S.add, Test, Suite(org.apache.log4j.helpers., Log, Log, Test.class);] [S.add, Test, Suite(org.apache.log4j., Layout, Test.class);] [S.add, Test, Suite(org.apache.log4j.helpers., Date, Layout, Test.class);] [S.add, Test, Suite(org.apache.log4j., Ttcc, Layout, Test.class);] [S.add, Test, Suite(org.apache.log4j.xml., Xml, Layout, Test.class);] [S.add, Test, Suite(org.apache.log4j., Html, Layout, Test.class);] [S.add, Test, Suite(org.apache.log4j., Pattern, Layout, Test.class);] [S.add, Test, Suite(org.apache.log4j.spi., Logging, Event, Test.class);] [S.add, Test, Suite(org.apache.log4j.spi., Throwable, Information, Test.class);] [S.add, Test, Suite(org.apache.log4j.spi., Location, Info, Test.class);] [S.add, Test, Suite(org.apache.log4j., Property, Configurator, Test.class);] [S.add, Test, Suite(org.apache.log4j.net., Smtp, Appender, Test.class);] [S.add, Test, Suite(org.apache.log4j.net., Telnet, Appender, Test.class);] [S.add, Test, Suite(org.apache.log4j., Default, Throwable, Renderer, Test.class);] [S.add, Test, Suite(org.apache.log4j., Enhanced, Throwable, Renderer, Test.class);] [S.add, Test, Suite(org.apache.log4j., Test, Log, Xf.class);] [S.add, Test, Suite(org.apache.log4j., Test, Log, Mf.class);] [S.add, Test, Suite(org.apache.log4j., Test, Log, Sf.class);] [S.add, Test, Suite(org.apache.log4j.pattern., Cached, Date, Format, Test.class);] [S.add, Test, Suite(org.apache.log4j.pattern., Formatting, Info, Test.class);] [S.add, Test, Suite(org.apache.log4j.pattern., Name, Abbreviator, Test.class);] [S.add, Test, Suite(org.apache.log4j.pattern., Pattern, Parser, Test.class);] [S.add, Test, Suite(org.apache.log4j.helpers., Util, Logging, Level, Test.class);] [Returns;]
 [Super.log(, Fqcn,, Level., Debug,message+" "+suffix,null);] [If(repository.is, Disabled(, X, Level., Lethal, Int))return;] [If(, X, Level., Lethal.is, Greater, Or, Equal(this.get, Effective, Level()))forced, Log(, Fqcn,, X, Level., Lethal,message,t);] [If(repository.is, Disabled(, X, Level., Lethal, Int))return;] [If(, X, Level., Lethal.is, Greater, Or, Equal(this.get, Effective, Level()))forced, Log(, Fqcn,, X, Level., Lethal,message,null);] [Return, Log, Manager.get, Logger(name,factory);] [Return, X, Logger.get, Logger(clazz.get, Name());] [Returnsuffix;] [This.suffix=suffix;] [If(repository.is, Disabled(, X, Level., Trace, Int))return;] [If(, X, Level., Trace.is, Greater, Or, Equal(this.get, Effective, Level()))forced, Log(, Fqcn,, X, Level., Trace,message,t);] [If(repository.is, Disabled(, X, Level., Trace, Int))return;] [If(, X, Level., Trace.is, Greater, Or, Equal(this.get, Effective, Level()))forced, Log(, Fqcn,, X, Level., Trace,message,null);] [Returnnew, X, Logger(name);]
@@
 [Logger.get, Logger, Repository().reset, Configuration();] [Common(1);] [Common(2);] [Dom, Configurator.configure("input/xml/custom, Logger"+number+".xml");] [Inti=-1] [Logger.trace(", Message "+++i);] [Logger.debug(", Message "+++i);] [Logger.warn(", Message "+++i);] [Logger.error(", Message "+++i);] [Logger.fatal(", Message "+++i);] [Exceptione=new, Exception(", Just testing")] [Logger.debug(", Message "+++i,e);] [Transformer.transform("output/temp",, Filtered,new, Filter[]{new, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/custom, Logger."+number));] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, X, Logger, Test, Case("test1"));] [Suite.add, Test(new, X, Logger, Test, Case("test2"));] [Returnsuite;]
 [Log, Manager.shutdown();] [Loggerroot=, Logger.get, Root, Logger()] [Booleanroot, Is, Configured=root.get, All, Appenders().has, More, Elements()] [Assert, True(!root, Is, Configured);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Test, Case1("none, Test"));] [Returnsuite;]
 [Log, Manager.shutdown();] [Loggerroot=, Logger.get, Root, Logger()] [Booleanroot, Is, Configured=root.get, All, Appenders().has, More, Elements()] [Assert, True(root, Is, Configured);] [Enumeratione=root.get, All, Appenders()] [Appenderappender=(, Appender)e.next, Element()] [Assert, Equals(appender.get, Name(),", D1");] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Test, Case2("xml, Test"));] [Returnsuite;]
 [Log, Manager.shutdown();] [Loggerroot=, Logger.get, Root, Logger()] [Booleanroot, Is, Configured=root.get, All, Appenders().has, More, Elements()] [Assert, True(root, Is, Configured);] [Enumeratione=root.get, All, Appenders()] [Appenderappender=(, Appender)e.next, Element()] [Assert, Equals(appender.get, Name(),", D3");] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Test, Case3("properties, Test"));] [Returnsuite;]
 [Log, Manager.shutdown();] [Loggerroot=, Logger.get, Root, Logger()] [Booleanroot, Is, Configured=root.get, All, Appenders().has, More, Elements()] [Assert, True(root, Is, Configured);] [Enumeratione=root.get, All, Appenders()] [Appenderappender=(, Appender)e.next, Element()] [Assert, Equals(appender.get, Name(),", D1");] [Assert, Equals(e.has, More, Elements(),false);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Test, Case4("combined, Test"));] [Returnsuite;]
 [Throwable, Rendererr=new, Default, Throwable, Renderer()] [Exceptionex=new, Exception()] [String[]str, Rep=r.do, Render(ex)] [Assert, Not, Null(str, Rep);] [Assert, True(str, Rep.length>0);] [For(inti=0;i<str, Rep.length;i++){assert, Not, Null(str, Rep[i]);}] [Assert, Not, Null(str, Rep[i]);]
 [Log, Manager.reset, Configuration();] [Daily, Rolling, File, Appenderdrfa=new, Daily, Rolling, File, Appender()] [Drfa.set, Name("test, Compute, Check, Period");] [Drfa.set, Date, Pattern("yyyy-, Mm-dd.'log'");] [Drfa.activate, Options();] [Drfa.compute, Check, Period();] [Assert, Equals(drfa.compute, Check, Period(),, Daily, Rolling, File, Appender., Top, Of, Day);] [Drfa.set, Date, Pattern("yyyy-, Mm-dd mm.'log'");] [Assert, Equals(drfa.compute, Check, Period(),, Daily, Rolling, File, Appender., Top, Of, Minute);] [Drfa.set, Date, Pattern("yyyy-, Mm-dd a.'log'");] [Assert, Equals(drfa.compute, Check, Period(),, Daily, Rolling, File, Appender., Half, Day);] [Drfa.set, Date, Pattern("yyyy-, Mm-dd , Hh.'log'");] [Assert, Equals(drfa.compute, Check, Period(),, Daily, Rolling, File, Appender., Top, Of, Hour);] [Drfa.set, Date, Pattern("yyyy-, Mm.'log'");] [Assert, Equals(drfa.compute, Check, Period(),, Daily, Rolling, File, Appender., Top, Of, Month);] [Drfa.set, Date, Pattern("'log', Hh'log'");] [Assert, Equals(drfa.compute, Check, Period(),, Daily, Rolling, File, Appender., Top, Of, Hour);] [Rolling, Calendarrc=new, Rolling, Calendar()] [Rc.set, Type(, Daily, Rolling, File, Appender., Top, Of, Day);] [Calendarc=, Calendar.get, Instance()] [Int[], M31={0,2,4,6,7,9,11}] [For(inti=0;i<, M31.length;i++){for(intd=1;d<=31;d++){for(inth=0;h<23;h++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,10);c.set(, Calendar., Second,10);c.set(, Calendar., Millisecond,88);c.set, Time(rc.get, Next, Check, Date(c.get, Time()));if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);assert, Equals(c.get(, Calendar., Day, Of, Month),1);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);assert, Equals(c.get(, Calendar., Day, Of, Month),d+1);}assert, Equals(c.get(, Calendar., Hour, Of, Day),0);assert, Equals(c.get(, Calendar., Minute),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Millisecond),0);}}}] [For(intd=1;d<=31;d++){for(inth=0;h<23;h++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,10);c.set(, Calendar., Second,10);c.set(, Calendar., Millisecond,88);c.set, Time(rc.get, Next, Check, Date(c.get, Time()));if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);assert, Equals(c.get(, Calendar., Day, Of, Month),1);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);assert, Equals(c.get(, Calendar., Day, Of, Month),d+1);}assert, Equals(c.get(, Calendar., Hour, Of, Day),0);assert, Equals(c.get(, Calendar., Minute),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Millisecond),0);}}] [For(inth=0;h<23;h++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,10);c.set(, Calendar., Second,10);c.set(, Calendar., Millisecond,88);c.set, Time(rc.get, Next, Check, Date(c.get, Time()));if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);assert, Equals(c.get(, Calendar., Day, Of, Month),1);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);assert, Equals(c.get(, Calendar., Day, Of, Month),d+1);}assert, Equals(c.get(, Calendar., Hour, Of, Day),0);assert, Equals(c.get(, Calendar., Minute),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Millisecond),0);}] [C.clear();] [C.set(, Calendar., Year,20);] [C.set(, Calendar., Month,, Calendar., January+, M31[i]);] [C.set(, Calendar., Day, Of, Month,d);] [C.set(, Calendar., Hour, Of, Day,h);] [C.set(, Calendar., Minute,10);] [C.set(, Calendar., Second,10);] [C.set(, Calendar., Millisecond,88);] [C.set, Time(rc.get, Next, Check, Date(c.get, Time()));] [If(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);assert, Equals(c.get(, Calendar., Day, Of, Month),1);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);assert, Equals(c.get(, Calendar., Day, Of, Month),d+1);}] [Assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);] [Assert, Equals(c.get(, Calendar., Day, Of, Month),1);] [Assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);] [Assert, Equals(c.get(, Calendar., Day, Of, Month),d+1);] [Assert, Equals(c.get(, Calendar., Hour, Of, Day),0);] [Assert, Equals(c.get(, Calendar., Minute),0);] [Assert, Equals(c.get(, Calendar., Second),0);] [Assert, Equals(c.get(, Calendar., Millisecond),0);] [Rolling, Calendarrc=new, Rolling, Calendar()] [Rc.set, Type(, Daily, Rolling, File, Appender., Top, Of, Hour);] [Calendarc=, Calendar.get, Instance()] [Int[], M31={0,2,4,6,7,9,11}] [For(inti=0;i<, M31.length;i++){, System.out.println(", Month = "+(, M31[i]+1));for(intd=1;d<=31;d++){for(inth=0;h<23;h++){for(intm=0;m<=59;m++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,m);c.set(, Calendar., Second,12);c.set(, Calendar., Millisecond,88);booleandlt, State0=c.get, Time, Zone().in, Daylight, Time(c.get, Time());c.set, Time(rc.get, Next, Check, Date(c.get, Time()));booleandlt, State1=c.get, Time, Zone().in, Daylight, Time(c.get, Time());assert, Equals(c.get(, Calendar., Millisecond),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Minute),0);if(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}else{if(dlt, State0){assert, Equals(c.get(, Calendar., Hour, Of, Day),h);}else{}}if(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}}}}] [System.out.println(", Month = "+(, M31[i]+1));] [For(intd=1;d<=31;d++){for(inth=0;h<23;h++){for(intm=0;m<=59;m++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,m);c.set(, Calendar., Second,12);c.set(, Calendar., Millisecond,88);booleandlt, State0=c.get, Time, Zone().in, Daylight, Time(c.get, Time());c.set, Time(rc.get, Next, Check, Date(c.get, Time()));booleandlt, State1=c.get, Time, Zone().in, Daylight, Time(c.get, Time());assert, Equals(c.get(, Calendar., Millisecond),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Minute),0);if(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}else{if(dlt, State0){assert, Equals(c.get(, Calendar., Hour, Of, Day),h);}else{}}if(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}}}] [For(inth=0;h<23;h++){for(intm=0;m<=59;m++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,m);c.set(, Calendar., Second,12);c.set(, Calendar., Millisecond,88);booleandlt, State0=c.get, Time, Zone().in, Daylight, Time(c.get, Time());c.set, Time(rc.get, Next, Check, Date(c.get, Time()));booleandlt, State1=c.get, Time, Zone().in, Daylight, Time(c.get, Time());assert, Equals(c.get(, Calendar., Millisecond),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Minute),0);if(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}else{if(dlt, State0){assert, Equals(c.get(, Calendar., Hour, Of, Day),h);}else{}}if(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}}] [For(intm=0;m<=59;m++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,m);c.set(, Calendar., Second,12);c.set(, Calendar., Millisecond,88);booleandlt, State0=c.get, Time, Zone().in, Daylight, Time(c.get, Time());c.set, Time(rc.get, Next, Check, Date(c.get, Time()));booleandlt, State1=c.get, Time, Zone().in, Daylight, Time(c.get, Time());assert, Equals(c.get(, Calendar., Millisecond),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Minute),0);if(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}else{if(dlt, State0){assert, Equals(c.get(, Calendar., Hour, Of, Day),h);}else{}}if(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}] [C.clear();] [C.set(, Calendar., Year,20);] [C.set(, Calendar., Month,, Calendar., January+, M31[i]);] [C.set(, Calendar., Day, Of, Month,d);] [C.set(, Calendar., Hour, Of, Day,h);] [C.set(, Calendar., Minute,m);] [C.set(, Calendar., Second,12);] [C.set(, Calendar., Millisecond,88);] [Booleandlt, State0=c.get, Time, Zone().in, Daylight, Time(c.get, Time())] [C.set, Time(rc.get, Next, Check, Date(c.get, Time()));] [Booleandlt, State1=c.get, Time, Zone().in, Daylight, Time(c.get, Time())] [Assert, Equals(c.get(, Calendar., Millisecond),0);] [Assert, Equals(c.get(, Calendar., Second),0);] [Assert, Equals(c.get(, Calendar., Minute),0);] [If(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}else{if(dlt, State0){assert, Equals(c.get(, Calendar., Hour, Of, Day),h);}else{}}] [Assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);] [If(dlt, State0){assert, Equals(c.get(, Calendar., Hour, Of, Day),h);}else{}] [Assert, Equals(c.get(, Calendar., Hour, Of, Day),h);] [If(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}] [Assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);] [If(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}] [Assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);] [Assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);] [Assert, Equals(c.get(, Calendar., Day, Of, Month),d);] [Assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);] [Rolling, Calendarrc=new, Rolling, Calendar()] [Rc.set, Type(, Daily, Rolling, File, Appender., Top, Of, Minute);] [Int[], S={0,1,5,10,21,30,59}] [Int[], M={0,1,5,10,21,30,59}] [Calendarc=, Calendar.get, Instance()] [Int[], M31={2,9,0,4,6,7,11}] [For(inti=0;i<, M31.length;i++){, System.out.println(", Month = "+(, M31[i]+1));for(intd=1;d<=31;d++){for(inth=0;h<23;h++){for(intm=0;m<, M.length;m++){for(ints=0;s<, S.length;s++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,, M[m]);c.set(, Calendar., Second,, S[s]);c.set(, Calendar., Millisecond,88);c.add(, Calendar., Millisecond,1);booleandlt, State0=c.get, Time, Zone().in, Daylight, Time(c.get, Time());c.set, Time(rc.get, Next, Check, Date(c.get, Time()));c.add(, Calendar., Millisecond,0);booleandlt, State1=c.get, Time, Zone().in, Daylight, Time(c.get, Time());assert, Equals(c.get(, Calendar., Millisecond),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Minute),(, M[m]+1)%60);if(, M[m]==59){if(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}if(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);}}else{if(c.get(, Calendar., Hour, Of, Day)!=h){c.add(, Calendar., Hour, Of, Day,+1);booleandlt, State2=c.get, Time, Zone().in, Daylight, Time(c.get, Time());if(dlt, State1==dlt, State2){fail(", No switch");}}assert, Equals(c.get(, Calendar., Day, Of, Month),d);assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}}}}}] [System.out.println(", Month = "+(, M31[i]+1));] [For(intd=1;d<=31;d++){for(inth=0;h<23;h++){for(intm=0;m<, M.length;m++){for(ints=0;s<, S.length;s++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,, M[m]);c.set(, Calendar., Second,, S[s]);c.set(, Calendar., Millisecond,88);c.add(, Calendar., Millisecond,1);booleandlt, State0=c.get, Time, Zone().in, Daylight, Time(c.get, Time());c.set, Time(rc.get, Next, Check, Date(c.get, Time()));c.add(, Calendar., Millisecond,0);booleandlt, State1=c.get, Time, Zone().in, Daylight, Time(c.get, Time());assert, Equals(c.get(, Calendar., Millisecond),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Minute),(, M[m]+1)%60);if(, M[m]==59){if(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}if(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);}}else{if(c.get(, Calendar., Hour, Of, Day)!=h){c.add(, Calendar., Hour, Of, Day,+1);booleandlt, State2=c.get, Time, Zone().in, Daylight, Time(c.get, Time());if(dlt, State1==dlt, State2){fail(", No switch");}}assert, Equals(c.get(, Calendar., Day, Of, Month),d);assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}}}}] [For(inth=0;h<23;h++){for(intm=0;m<, M.length;m++){for(ints=0;s<, S.length;s++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,, M[m]);c.set(, Calendar., Second,, S[s]);c.set(, Calendar., Millisecond,88);c.add(, Calendar., Millisecond,1);booleandlt, State0=c.get, Time, Zone().in, Daylight, Time(c.get, Time());c.set, Time(rc.get, Next, Check, Date(c.get, Time()));c.add(, Calendar., Millisecond,0);booleandlt, State1=c.get, Time, Zone().in, Daylight, Time(c.get, Time());assert, Equals(c.get(, Calendar., Millisecond),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Minute),(, M[m]+1)%60);if(, M[m]==59){if(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}if(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);}}else{if(c.get(, Calendar., Hour, Of, Day)!=h){c.add(, Calendar., Hour, Of, Day,+1);booleandlt, State2=c.get, Time, Zone().in, Daylight, Time(c.get, Time());if(dlt, State1==dlt, State2){fail(", No switch");}}assert, Equals(c.get(, Calendar., Day, Of, Month),d);assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}}}] [For(intm=0;m<, M.length;m++){for(ints=0;s<, S.length;s++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,, M[m]);c.set(, Calendar., Second,, S[s]);c.set(, Calendar., Millisecond,88);c.add(, Calendar., Millisecond,1);booleandlt, State0=c.get, Time, Zone().in, Daylight, Time(c.get, Time());c.set, Time(rc.get, Next, Check, Date(c.get, Time()));c.add(, Calendar., Millisecond,0);booleandlt, State1=c.get, Time, Zone().in, Daylight, Time(c.get, Time());assert, Equals(c.get(, Calendar., Millisecond),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Minute),(, M[m]+1)%60);if(, M[m]==59){if(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}if(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);}}else{if(c.get(, Calendar., Hour, Of, Day)!=h){c.add(, Calendar., Hour, Of, Day,+1);booleandlt, State2=c.get, Time, Zone().in, Daylight, Time(c.get, Time());if(dlt, State1==dlt, State2){fail(", No switch");}}assert, Equals(c.get(, Calendar., Day, Of, Month),d);assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}}] [For(ints=0;s<, S.length;s++){c.clear();c.set(, Calendar., Year,20);c.set(, Calendar., Month,, Calendar., January+, M31[i]);c.set(, Calendar., Day, Of, Month,d);c.set(, Calendar., Hour, Of, Day,h);c.set(, Calendar., Minute,, M[m]);c.set(, Calendar., Second,, S[s]);c.set(, Calendar., Millisecond,88);c.add(, Calendar., Millisecond,1);booleandlt, State0=c.get, Time, Zone().in, Daylight, Time(c.get, Time());c.set, Time(rc.get, Next, Check, Date(c.get, Time()));c.add(, Calendar., Millisecond,0);booleandlt, State1=c.get, Time, Zone().in, Daylight, Time(c.get, Time());assert, Equals(c.get(, Calendar., Millisecond),0);assert, Equals(c.get(, Calendar., Second),0);assert, Equals(c.get(, Calendar., Minute),(, M[m]+1)%60);if(, M[m]==59){if(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}if(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);}}else{if(c.get(, Calendar., Hour, Of, Day)!=h){c.add(, Calendar., Hour, Of, Day,+1);booleandlt, State2=c.get, Time, Zone().in, Daylight, Time(c.get, Time());if(dlt, State1==dlt, State2){fail(", No switch");}}assert, Equals(c.get(, Calendar., Day, Of, Month),d);assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}] [C.clear();] [C.set(, Calendar., Year,20);] [C.set(, Calendar., Month,, Calendar., January+, M31[i]);] [C.set(, Calendar., Day, Of, Month,d);] [C.set(, Calendar., Hour, Of, Day,h);] [C.set(, Calendar., Minute,, M[m]);] [C.set(, Calendar., Second,, S[s]);] [C.set(, Calendar., Millisecond,88);] [C.add(, Calendar., Millisecond,1);] [Booleandlt, State0=c.get, Time, Zone().in, Daylight, Time(c.get, Time())] [C.set, Time(rc.get, Next, Check, Date(c.get, Time()));] [C.add(, Calendar., Millisecond,0);] [Booleandlt, State1=c.get, Time, Zone().in, Daylight, Time(c.get, Time())] [Assert, Equals(c.get(, Calendar., Millisecond),0);] [Assert, Equals(c.get(, Calendar., Second),0);] [Assert, Equals(c.get(, Calendar., Minute),(, M[m]+1)%60);] [If(, M[m]==59){if(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}if(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);}}else{if(c.get(, Calendar., Hour, Of, Day)!=h){c.add(, Calendar., Hour, Of, Day,+1);booleandlt, State2=c.get, Time, Zone().in, Daylight, Time(c.get, Time());if(dlt, State1==dlt, State2){fail(", No switch");}}assert, Equals(c.get(, Calendar., Day, Of, Month),d);assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}] [If(dlt, State0==dlt, State1){assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);}] [Assert, Equals(c.get(, Calendar., Hour, Of, Day),(h+1)%24);] [If(h==23){assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);if(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}}else{assert, Equals(c.get(, Calendar., Day, Of, Month),d);}] [Assert, Equals(c.get(, Calendar., Day, Of, Month),(d+1)%32);] [If(d==31){assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);}else{assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);}] [Assert, Equals(c.get(, Calendar., Month),(, Calendar., January+, M31[i]+1)%12);] [Assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);] [Assert, Equals(c.get(, Calendar., Day, Of, Month),d);] [If(c.get(, Calendar., Hour, Of, Day)!=h){c.add(, Calendar., Hour, Of, Day,+1);booleandlt, State2=c.get, Time, Zone().in, Daylight, Time(c.get, Time());if(dlt, State1==dlt, State2){fail(", No switch");}}] [C.add(, Calendar., Hour, Of, Day,+1);] [Booleandlt, State2=c.get, Time, Zone().in, Daylight, Time(c.get, Time())] [If(dlt, State1==dlt, State2){fail(", No switch");}] [Fail(", No switch");] [Assert, Equals(c.get(, Calendar., Day, Of, Month),d);] [Assert, Equals(c.get(, Calendar., Month),, Calendar., January+, M31[i]);] [Layoutlayout=new, Simple, Layout()] [Daily, Rolling, File, Appenderappender=new, Daily, Rolling, File, Appender(layout,filename,date, Pattern)] [Assert, Equals(date, Pattern,appender.get, Date, Pattern());] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(appender);] [Root.info(", Hello, , World");] [Assert, True(new, File(filename).exists());] [Try{test3, Param("'.'yyyy","output/drfaTop, Of, Year.log");fail(", Expected illegal state exception.");}catch(, Illegal, State, Exceptionex){assert, Not, Null(ex);}] [Test3, Param("'.'yyyy","output/drfaTop, Of, Year.log");] [Fail(", Expected illegal state exception.");] [Assert, Not, Null(ex);] [Test3, Param("'.'yyyy-, Mm","output/drfaTop, Of, Month.log");] [Test3, Param("'.'yyyy-w","output/drfaTop, Of, Week.log");] [Test3, Param("'.'yyyy-, Mm-dd","output/drfaTop, Of, Day.log");] [Test3, Param("'.'yyyy-, Mm-dd-a","output/drfaHalf, Day.log");] [Test3, Param("'.'yyyy-, Mm-dd-, Hh","output/drfaTop, Of, Hour.log");] [Test3, Param("'.'yyyy-, Mm-dd-, Hh-mm","output/drfaTop, Of, Minute.log");] [Layoutlayout=new, Simple, Layout()] [Daily, Rolling, File, Appenderappender=new, Daily, Rolling, File, Appender(layout,"output/drfaNopattern.log",null)] [Vector, Error, Handlererror, Handler=new, Vector, Error, Handler()] [Appender.set, Error, Handler(error, Handler);] [Appender.roll, Over();] [Assert, Equals(1,error, Handler.size());] [Assert, Equals(", Missing , Date, Pattern option in roll, Over().",error, Handler.get, Message(0));] [Layoutlayout=new, Simple, Layout()] [Stringfilename="output/drfaMinute, Rollover.log"] [Stringpattern="'.'yyyy-, Mm-dd-, Hh-mm"] [Daily, Rolling, File, Appenderappender=new, Daily, Rolling, File, Appender(layout,filename,pattern)] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(appender);] [Filefirst, File=new, File(filename+new, Simple, Date, Format(pattern).format(new, Date()))] [Root.info(", Hello, , World");] [First, File.create, New, File();] [Assert, True(first, File.exists());] [Assert, Equals(0,first, File.length());] [Calendarcal=, Calendar.get, Instance()] [Longnow=cal.get, Time().get, Time()] [Cal.set(, Calendar., Second,3);] [Cal.set(, Calendar., Millisecond,0);] [Cal.add(, Calendar., Minute,1);] [Longuntil=cal.get, Time().get, Time()] [Thread.sleep(until-now);] [Root.info(", Hello, , World");] [Assert, True(first, File.exists());] [Assert, True(first, File.length()>0);] [Intcount1=source.read(buf)] [If(count1>0){combined.write(buf,0,count1);}] [Combined.write(buf,0,count1);] [Source.close();] [Layoutlayout=new, Simple, Layout()] [Stringfilename="output/drfaBlocked, Rollover.log"] [Stringpattern="'.'yyyy-, Mm-dd-, Hh-mm"] [Datestart=new, Date()] [Daily, Rolling, File, Appenderappender=new, Daily, Rolling, File, Appender(layout,filename,pattern)] [Appender.set, Append(false);] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(appender);] [Fileblock1=new, File(filename+new, Simple, Date, Format(pattern).format(start))] [Fileblock2=new, File(filename+new, Simple, Date, Format(pattern).format(new, Date(start.get, Time()+60000)))] [File, Output, Streamos1=new, File, Output, Stream(block1)] [File, Output, Streamos2=new, File, Output, Stream(block2)] [Root.info(", Prior to rollover");] [Thread.sleep(63000-(start.get, Time()%60000));] [Root.info(", Rollover attempt while blocked");] [Os1.close();] [Os2.close();] [Root.info(", Message after block removed");] [Appender.close();] [Stringcombined, Filename="output/drfaBlocked, Rollover.combined"] [File, Output, Streamcombined=new, File, Output, Stream(combined, Filename)] [Byte[]buf=newbyte[500]] [Append(combined,new, File, Input, Stream(block1),buf);] [Append(combined,new, File, Input, Stream(block2),buf);] [Append(combined,new, File, Input, Stream(filename),buf);] [Combined.close();] [Assert, True(, Compare.compare(combined, Filename,"witness/drfaBlocked, Rollover.log"));] [Daily, Rolling, File, Appenderdrfa=new, Daily, Rolling, File, Appender()] [Drfa.set, Date, Pattern("'.'yyyy-ww");] [Intcheck, Period=drfa.compute, Check, Period()] [Assert, Equals(, Daily, Rolling, File, Appender., Top, Of, Week,check, Period);]
 [Returnnew, My, Pattern, Parser(pattern==null?, Default, Conversion, Pattern:pattern);]
 [Returnnew, Enhanced, Pattern, Layout("[%t] %p %c - %m%n");] [Loggerlogger=, Logger.get, Logger("org.apache.log4j., Layout, Test")] [Logging, Eventevent=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Info,", Hello, , World",null)] [Enhanced, Pattern, Layoutlayout=(, Enhanced, Pattern, Layout)create, Layout()] [Stringresult=layout.format(event)] [String, Bufferbuf=new, String, Buffer(100)] [Buf.append('[');] [Buf.append(event.get, Thread, Name());] [Buf.append("] ");] [Buf.append(event.get, Level().to, String());] [Buf.append(' ');] [Buf.append(event.get, Logger, Name());] [Buf.append(" - ");] [Buf.append(event.get, Message());] [Buf.append(, System.get, Property("line.separator"));] [Assert, Equals(buf.to, String(),result);] [Enhanced, Pattern, Layoutlayout=(, Enhanced, Pattern, Layout)create, Layout()] [Assert, Equals("[%t] %p %c - %m%n",layout.get, Conversion, Pattern());] [Assert, Equals("%m%n",, Enhanced, Pattern, Layout., Default, Conversion, Pattern);] [Assert, Equals("%r [%t] %p %c %x - %m%n",, Enhanced, Pattern, Layout., Ttcc, Conversion, Pattern);] [Loggerlogger=, Logger.get, Logger("org.apache.log4j.xml., Pattern, Layout, Test")] [Ndc.clear();] [Char[]msg=newchar[2000]] [For(inti=0;i<msg.length;i++){msg[i]=', A';}] [Msg[i]=', A';] [Logging, Eventevent1=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Debug,new, String(msg),null)] [Enhanced, Pattern, Layoutlayout=(, Enhanced, Pattern, Layout)create, Layout()] [Stringresult=layout.format(event1)] [Logging, Eventevent2=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Warn,", Hello, , World",null)] [Result=layout.format(event2);] [Assert, Equals("[",result.substring(0,1));] [Return, Buf, Size;] [Return, Max, Capacity;]
@@
 [Root.get, Logger, Repository().reset, Configuration();] [Property, Configurator.configure(file, Name);] [Return, Compare.compare(actual,expected);] [Configure("input/pattern/enhanced, Pattern, Layout1.properties");] [Common();] [Transformer.transform(, Temp,, Filtered,new, Filter[]{new, Enhanced, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.1"));] [Configure("input/pattern/enhanced, Pattern, Layout2.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat1,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Iso8601, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.2"));] [Configure("input/pattern/enhanced, Pattern, Layout3.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat1,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Iso8601, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.3"));] [Configure("input/pattern/enhanced, Pattern, Layout4.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat2,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Absolute, Date, And, Time, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.4"));] [Configure("input/pattern/enhanced, Pattern, Layout5.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat2,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Absolute, Date, And, Time, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.5"));] [Configure("input/pattern/enhanced, Pattern, Layout6.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat3,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Absolute, Time, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.6"));] [Configure("input/pattern/enhanced, Pattern, Layout7.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat3,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Absolute, Time, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.7"));] [Configure("input/pattern/enhanced, Pattern, Layout8.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat4,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Relative, Time, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.8"));] [Configure("input/pattern/enhanced, Pattern, Layout9.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat5,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.9"));] [Configure("input/pattern/enhanced, Pattern, Layout10.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat6,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.10"));] [Configure("input/pattern/enhanced, Pattern, Layout11.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat11a,, Pat11b,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.11"));] [Configure("input/pattern/enhanced, Pattern, Layout12.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat12,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.12"));] [Configure("input/pattern/enhanced, Pattern, Layout13.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat13,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.13"));] [Configure("input/pattern/enhanced, Pattern, Layout14.properties");] [Common();] [Transformer.transform(, Temp,, Filtered,new, Filter[]{new, Enhanced, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.14"));] [Java.util., Hashtablecontext=, Mdc.get, Context()] [If(context!=null){context.clear();}] [Context.clear();] [Configure("input/pattern/enhanced, Pattern, Layout.mdc.1.properties");] [Clear, Mdc();] [Mdc.put("key1","va11");] [Mdc.put("key2","va12");] [Logger.debug(", Hello , World");] [Mdc.remove("key1");] [Mdc.remove("key2");] [Transformer.transform(, Temp,, Filtered,new, Filter[]{new, Enhanced, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter(),new, Mdc, Order, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.mdc.1"));] [Configure("input/pattern/enhanced, Pattern, Layout15.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat14,, Exception1,, Exception2,, Exception3,, Exception4})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Enhanced, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter()});] [Assert, True(compare(, Filtered,"witness/pattern/enhanced, Pattern, Layout.15"));] [Finallongstart=new, Date().get, Time()] [Configure("input/pattern/enhanced, Pattern, Layout16.properties");] [Common();] [Finallongend=new, Date().get, Time()] [File, Readerreader=new, File, Reader("output/pattern, Layout16.log")] [Charchars[]=newchar[50]] [Reader.read(chars,0,chars.length);] [Reader.close();] [Simple, Date, Formatformat=new, Simple, Date, Format("yyyy-, Mm-dd , Hh:mm:ss")] [Format.set, Time, Zone(, Time, Zone.get, Time, Zone(", Gmt+0"));] [Stringutc, Str=new, String(chars,0,19)] [Dateutc, Date=format.parse(utc, Str,new, Parse, Position(0))] [Assert, True(utc, Date.get, Time()>=start-1000&&utc, Date.get, Time()<end+1000);] [Stringcst, Str=new, String(chars,21,19)] [Format.set, Time, Zone(, Time, Zone.get, Time, Zone(", Gmt-6"));] [Datecst, Date=format.parse(cst, Str,new, Parse, Position(0))] [Assert, False(cst, Str.equals(utc, Str));] [Assert, True(cst, Date.get, Time()>=start-1000&&cst, Date.get, Time()<end+1000);] [Inti=-1] [Logger.debug(", Message "+++i);] [Root.debug(", Message "+i);] [Logger.info(", Message "+++i);] [Root.info(", Message "+i);] [Logger.warn(", Message "+++i);] [Root.warn(", Message "+i);] [Logger.error(", Message "+++i);] [Root.error(", Message "+i);] [Logger.log(, Level., Fatal,", Message "+++i);] [Root.log(, Level., Fatal,", Message "+i);] [Exceptione=new, Exception(", Just testing")] [Logger.debug(", Message "+++i,e);] [Logger.info(", Message "+++i,e);] [Logger.warn(", Message "+++i,e);] [Logger.error(", Message "+++i,e);] [Logger.log(, Level., Fatal,", Message "+++i,e);] [String, Output, File="output/pattern, Layout.mdc.2"] [String, Witness, File="witness/pattern/enhanced, Pattern, Layout.mdc.2"] [Stringmdc, Msg, Pattern1="%m : %, X%n"] [Stringmdc, Msg, Pattern2="%m : %, X{key1}%n"] [Stringmdc, Msg, Pattern3="%m : %, X{key2}%n"] [Stringmdc, Msg, Pattern4="%m : %, X{key3}%n"] [Stringmdc, Msg, Pattern5="%m : %, X{key1},%, X{key2},%, X{key3}%n"] [Enhanced, Pattern, Layoutlayout=new, Enhanced, Pattern, Layout("%m%n")] [Appenderappender=new, File, Appender(layout,, Output, File,false)] [Root.add, Appender(appender);] [Root.set, Level(, Level., Debug);] [Clear, Mdc();] [Root.debug("starting mdc pattern test");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern1);] [Layout.activate, Options();] [Root.debug("empty mdc, no key specified in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern2);] [Layout.activate, Options();] [Root.debug("empty mdc, key1 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern3);] [Layout.activate, Options();] [Root.debug("empty mdc, key2 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern4);] [Layout.activate, Options();] [Root.debug("empty mdc, key3 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern5);] [Layout.activate, Options();] [Root.debug("empty mdc, key1, key2, and key3 in pattern");] [Mdc.put("key1","value1");] [Mdc.put("key2","value2");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern1);] [Layout.activate, Options();] [Root.debug("filled mdc, no key specified in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern2);] [Layout.activate, Options();] [Root.debug("filled mdc, key1 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern3);] [Layout.activate, Options();] [Root.debug("filled mdc, key2 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern4);] [Layout.activate, Options();] [Root.debug("filled mdc, key3 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern5);] [Layout.activate, Options();] [Root.debug("filled mdc, key1, key2, and key3 in pattern");] [Mdc.remove("key1");] [Mdc.remove("key2");] [Layout.set, Conversion, Pattern("%m%n");] [Layout.activate, Options();] [Root.debug("finished mdc pattern test");] [Transformer.transform(, Output, File,, Filtered,new, Filter[]{new, Enhanced, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter(),new, Mdc, Order, Filter()});] [Assert, True(compare(, Filtered,, Witness, File));] [String, Output, File="output/pattern, Layout.throwable"] [String, Witness, File="witness/pattern/enhanced, Pattern, Layout.throwable"] [Enhanced, Pattern, Layoutlayout=new, Enhanced, Pattern, Layout("%m%n")] [Appenderappender=new, File, Appender(layout,, Output, File,false)] [Root.add, Appender(appender);] [Root.set, Level(, Level., Debug);] [Root.debug("starting throwable pattern test");] [Exceptionex=new, Exception(", Test , Exception")] [Root.debug("plain pattern, no exception");] [Root.debug("plain pattern, with exception",ex);] [Layout.set, Conversion, Pattern("%m%n%throwable");] [Layout.activate, Options();] [Root.debug("%throwable, no exception");] [Root.debug("%throwable, with exception",ex);] [Layout.set, Conversion, Pattern("%m%n%throwable{short}");] [Layout.activate, Options();] [Root.debug("%throwable{short}, no exception");] [Root.debug("%throwable{short}, with exception",ex);] [Layout.set, Conversion, Pattern("%m%n%throwable{none}");] [Layout.activate, Options();] [Root.debug("%throwable{none}, no exception");] [Root.debug("%throwable{none}, with exception",ex);] [Layout.set, Conversion, Pattern("%m%n%throwable{0}");] [Layout.activate, Options();] [Root.debug("%throwable{0}, no exception");] [Root.debug("%throwable{0}, with exception",ex);] [Layout.set, Conversion, Pattern("%m%n%throwable{1}");] [Layout.activate, Options();] [Root.debug("%throwable{1}, no exception");] [Root.debug("%throwable{1}, with exception",ex);] [Layout.set, Conversion, Pattern("%m%n%throwable{100}");] [Layout.activate, Options();] [Root.debug("%throwable{100}, no exception");] [Root.debug("%throwable{100}, with exception",ex);] [String[]trace=new, Throwable, Information(ex).get, Throwable, Str, Rep()] [Layout.set, Conversion, Pattern("%m%n%throwable{"+(2-trace.length)+"}");] [Layout.activate, Options();] [Root.debug("%throwable{-n}, no exception");] [Root.debug("%throwable{-n}, with exception",ex);] [Transformer.transform(, Output, File,, Filtered,new, Filter[]{new, Enhanced, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Enhanced, Junit, Test, Runner, Filter(),new, Mdc, Order, Filter()});] [Assert, True(compare(, Filtered,, Witness, File));]
 [Throwable, Rendererr=new, Enhanced, Throwable, Renderer()] [Exceptionex=new, Exception()] [String[]str, Rep=r.do, Render(ex)] [Assert, Not, Null(str, Rep);] [Assert, True(str, Rep.length>0);] [For(inti=0;i<str, Rep.length;i++){assert, Not, Null(str, Rep[i]);}] [Assert, Not, Null(str, Rep[i]);]
 [If(!, System.get, Property("java.version").starts, With("1.1.")){, Filenew, File=new, File("output/newdir/temp.log");new, File.delete();, Filenew, Dir=new, File("output/newdir");new, Dir.delete();org.apache.log4j., File, Appenderwa=neworg.apache.log4j., File, Appender();wa.set, File("output/newdir/temp.log");wa.set, Layout(new, Pattern, Layout("%m%n"));wa.activate, Options();assert, True(new, File("output/newdir/temp.log").exists());}] [Filenew, File=new, File("output/newdir/temp.log")] [New, File.delete();] [Filenew, Dir=new, File("output/newdir")] [New, Dir.delete();] [Org.apache.log4j., File, Appenderwa=neworg.apache.log4j., File, Appender()] [Wa.set, File("output/newdir/temp.log");] [Wa.set, Layout(new, Pattern, Layout("%m%n"));] [Wa.activate, Options();] [Assert, True(new, File("output/newdir/temp.log").exists());] [Methodmethod=, File, Appender.class.get, Method("get, Threshold",(, Class[])null)] [Assert, True(method.get, Return, Type()==, Priority.class);] [File, Appenderappender=new, File, Appender()] [Prioritydebug=, Level., Debug] [Assert, Null(appender.get, Threshold());] [Appender.set, Threshold(debug);] [Assert, True(appender.get, Threshold()==debug);] [File, Appenderappender=new, File, Appender()] [Prioritydebug=, Level., Debug] [Assert, True(appender.is, As, Severe, As, Threshold(debug));]
 [For(inti=0;i<, Max;i++){e[i]=new, Logging, Event("",cat,, Level., Debug,"e"+i,null);}] [E[i]=new, Logging, Event("",cat,, Level., Debug,"e"+i,null);] [For(intsize=1;size<=128;size*=2){, Bounded, Fif, Obf=new, Bounded, Fifo(size);assert, Equals(bf.get, Max, Size(),size);assert, Null(bf.get());inti;intj;intk;for(i=1;i<2*size;i++){for(j=0;j<i;j++){bf.put(e[j]);assert, Equals(bf.length(),j<size?j+1:size);}intmax=size<j?size:j;j--;for(k=0;k<=j;k++){assert, Equals(bf.length(),max-k>0?max-k:0);, Objectr=bf.get();if(k>=size)assert, Null(r);elseassert, Equals(r,e[k]);}}}] [Bounded, Fif, Obf=new, Bounded, Fifo(size)] [Assert, Equals(bf.get, Max, Size(),size);] [Assert, Null(bf.get());] [Inti] [Intj] [Intk] [For(i=1;i<2*size;i++){for(j=0;j<i;j++){bf.put(e[j]);assert, Equals(bf.length(),j<size?j+1:size);}intmax=size<j?size:j;j--;for(k=0;k<=j;k++){assert, Equals(bf.length(),max-k>0?max-k:0);, Objectr=bf.get();if(k>=size)assert, Null(r);elseassert, Equals(r,e[k]);}}] [For(j=0;j<i;j++){bf.put(e[j]);assert, Equals(bf.length(),j<size?j+1:size);}] [Bf.put(e[j]);] [Assert, Equals(bf.length(),j<size?j+1:size);] [Intmax=size<j?size:j] [J--;] [For(k=0;k<=j;k++){assert, Equals(bf.length(),max-k>0?max-k:0);, Objectr=bf.get();if(k>=size)assert, Null(r);elseassert, Equals(r,e[k]);}] [Assert, Equals(bf.length(),max-k>0?max-k:0);] [Objectr=bf.get()] [If(k>=size)assert, Null(r);elseassert, Equals(r,e[k]);] [Intsize=3] [Bounded, Fif, Obf=new, Bounded, Fifo(size)] [Bf.put(e[0]);] [Assert, Equals(bf.get(),e[0]);] [Assert, Null(bf.get());] [Bf.put(e[1]);] [Assert, Equals(bf.length(),1);] [Bf.put(e[2]);] [Assert, Equals(bf.length(),2);] [Bf.put(e[3]);] [Assert, Equals(bf.length(),3);] [Assert, Equals(bf.get(),e[1]);] [Assert, Equals(bf.length(),2);] [Assert, Equals(bf.get(),e[2]);] [Assert, Equals(bf.length(),1);] [Assert, Equals(bf.get(),e[3]);] [Assert, Equals(bf.length(),0);] [Assert, Null(bf.get());] [Assert, Equals(bf.length(),0);] [Returna<b?a:b;] [Intsize=10] [For(intn=1;n<size*2;n++){for(inti=0;i<size*2;i++){, Bounded, Fif, Obf=new, Bounded, Fifo(size);for(intf=0;f<i;f++){bf.put(e[f]);}bf.resize(n);intexpected, Size=min(n,min(i,size));assert, Equals(bf.length(),expected, Size);for(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c]);}}}] [For(inti=0;i<size*2;i++){, Bounded, Fif, Obf=new, Bounded, Fifo(size);for(intf=0;f<i;f++){bf.put(e[f]);}bf.resize(n);intexpected, Size=min(n,min(i,size));assert, Equals(bf.length(),expected, Size);for(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c]);}}] [Bounded, Fif, Obf=new, Bounded, Fifo(size)] [For(intf=0;f<i;f++){bf.put(e[f]);}] [Bf.put(e[f]);] [Bf.resize(n);] [Intexpected, Size=min(n,min(i,size))] [Assert, Equals(bf.length(),expected, Size);] [For(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c]);}] [Assert, Equals(bf.get(),e[c]);] [Intsize=10] [For(intn=1;n<size*2;n++){for(inti=0;i<size*2;i++){for(intd=0;d<min(i,size);d++){, Bounded, Fif, Obf=new, Bounded, Fifo(size);for(intp=0;p<i;p++){bf.put(e[p]);}for(intg=0;g<d;g++){bf.get();}intx=bf.length();bf.resize(n);intexpected, Size=min(n,x);assert, Equals(bf.length(),expected, Size);for(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c+d]);}assert, Null(bf.get());}}}] [For(inti=0;i<size*2;i++){for(intd=0;d<min(i,size);d++){, Bounded, Fif, Obf=new, Bounded, Fifo(size);for(intp=0;p<i;p++){bf.put(e[p]);}for(intg=0;g<d;g++){bf.get();}intx=bf.length();bf.resize(n);intexpected, Size=min(n,x);assert, Equals(bf.length(),expected, Size);for(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c+d]);}assert, Null(bf.get());}}] [For(intd=0;d<min(i,size);d++){, Bounded, Fif, Obf=new, Bounded, Fifo(size);for(intp=0;p<i;p++){bf.put(e[p]);}for(intg=0;g<d;g++){bf.get();}intx=bf.length();bf.resize(n);intexpected, Size=min(n,x);assert, Equals(bf.length(),expected, Size);for(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c+d]);}assert, Null(bf.get());}] [Bounded, Fif, Obf=new, Bounded, Fifo(size)] [For(intp=0;p<i;p++){bf.put(e[p]);}] [Bf.put(e[p]);] [For(intg=0;g<d;g++){bf.get();}] [Bf.get();] [Intx=bf.length()] [Bf.resize(n);] [Intexpected, Size=min(n,x)] [Assert, Equals(bf.length(),expected, Size);] [For(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c+d]);}] [Assert, Equals(bf.get(),e[c+d]);] [Assert, Null(bf.get());] [Intsize=10] [For(intn=1;n<size*2;n++){for(inti=0;i<size;i++){for(intd=0;d<i;d++){for(intr=0;r<d;r++){, Bounded, Fif, Obf=new, Bounded, Fifo(size);for(intp0=0;p0<i;p0++)bf.put(e[p0]);for(intg=0;g<d;g++)bf.get();for(intp1=0;p1<r;p1++)bf.put(e[i+p1]);intx=bf.length();bf.resize(n);intexpected, Size=min(n,x);assert, Equals(bf.length(),expected, Size);for(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c+d]);}}}}}] [For(inti=0;i<size;i++){for(intd=0;d<i;d++){for(intr=0;r<d;r++){, Bounded, Fif, Obf=new, Bounded, Fifo(size);for(intp0=0;p0<i;p0++)bf.put(e[p0]);for(intg=0;g<d;g++)bf.get();for(intp1=0;p1<r;p1++)bf.put(e[i+p1]);intx=bf.length();bf.resize(n);intexpected, Size=min(n,x);assert, Equals(bf.length(),expected, Size);for(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c+d]);}}}}] [For(intd=0;d<i;d++){for(intr=0;r<d;r++){, Bounded, Fif, Obf=new, Bounded, Fifo(size);for(intp0=0;p0<i;p0++)bf.put(e[p0]);for(intg=0;g<d;g++)bf.get();for(intp1=0;p1<r;p1++)bf.put(e[i+p1]);intx=bf.length();bf.resize(n);intexpected, Size=min(n,x);assert, Equals(bf.length(),expected, Size);for(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c+d]);}}}] [For(intr=0;r<d;r++){, Bounded, Fif, Obf=new, Bounded, Fifo(size);for(intp0=0;p0<i;p0++)bf.put(e[p0]);for(intg=0;g<d;g++)bf.get();for(intp1=0;p1<r;p1++)bf.put(e[i+p1]);intx=bf.length();bf.resize(n);intexpected, Size=min(n,x);assert, Equals(bf.length(),expected, Size);for(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c+d]);}}] [Bounded, Fif, Obf=new, Bounded, Fifo(size)] [For(intp0=0;p0<i;p0++)bf.put(e[p0]);] [For(intg=0;g<d;g++)bf.get();] [For(intp1=0;p1<r;p1++)bf.put(e[i+p1]);] [Intx=bf.length()] [Bf.resize(n);] [Intexpected, Size=min(n,x)] [Assert, Equals(bf.length(),expected, Size);] [For(intc=0;c<expected, Size;c++){assert, Equals(bf.get(),e[c+d]);}] [Assert, Equals(bf.get(),e[c+d]);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Bounded, Fifo, Test, Case("test1"));] [Suite.add, Test(new, Bounded, Fifo, Test, Case("test2"));] [Suite.add, Test(new, Bounded, Fifo, Test, Case("test, Resize1"));] [Suite.add, Test(new, Bounded, Fifo, Test, Case("test, Resize2"));] [Suite.add, Test(new, Bounded, Fifo, Test, Case("test, Resize3"));] [Returnsuite;]
 [For(inti=0;i<, Max;i++){e[i]=new, Logging, Event("",cat,, Level., Debug,"e"+i,null);}] [E[i]=new, Logging, Event("",cat,, Level., Debug,"e"+i,null);] [Intsize=2] [Cyclic, Buffercb=new, Cyclic, Buffer(size)] [Assert, Equals(cb.get, Max, Size(),size);] [Cb.add(e[0]);] [Assert, Equals(cb.length(),1);] [Assert, Equals(cb.get(),e[0]);] [Assert, Equals(cb.length(),0);] [Assert, Null(cb.get());] [Assert, Equals(cb.length(),0);] [Cb=new, Cyclic, Buffer(size);] [Cb.add(e[0]);] [Cb.add(e[1]);] [Assert, Equals(cb.length(),2);] [Assert, Equals(cb.get(),e[0]);] [Assert, Equals(cb.length(),1);] [Assert, Equals(cb.get(),e[1]);] [Assert, Equals(cb.length(),0);] [Assert, Null(cb.get());] [Assert, Equals(cb.length(),0);] [For(intbuf, Size=1;buf, Size<=128;buf, Size*=2)do, Test1(buf, Size);] [Cyclic, Buffercb=new, Cyclic, Buffer(size)] [Assert, Equals(cb.get, Max, Size(),size);] [For(inti=-(size+10);i<(size+10);i++){assert, Null(cb.get(i));}] [Assert, Null(cb.get(i));] [For(inti=0;i<, Max;i++){cb.add(e[i]);intlimit=i<size-1?i:size-1;for(intj=limit;j>=0;j--){assert, Equals(cb.get(j),e[i-(limit-j)]);}assert, Null(cb.get(-1));assert, Null(cb.get(limit+1));}] [Cb.add(e[i]);] [Intlimit=i<size-1?i:size-1] [For(intj=limit;j>=0;j--){assert, Equals(cb.get(j),e[i-(limit-j)]);}] [Assert, Equals(cb.get(j),e[i-(limit-j)]);] [Assert, Null(cb.get(-1));] [Assert, Null(cb.get(limit+1));] [For(intisize=1;isize<=128;isize*=2){do, Test, Resize(isize,isize/2+1,isize/2+1);do, Test, Resize(isize,isize/2+1,isize+10);do, Test, Resize(isize,isize+10,isize/2+1);do, Test, Resize(isize,isize+10,isize+10);}] [Do, Test, Resize(isize,isize/2+1,isize/2+1);] [Do, Test, Resize(isize,isize/2+1,isize+10);] [Do, Test, Resize(isize,isize+10,isize/2+1);] [Do, Test, Resize(isize,isize+10,isize+10);] [Cyclic, Buffercb=new, Cyclic, Buffer(initial, Size)] [For(inti=0;i<number, Of, Adds;i++){cb.add(e[i]);}] [Cb.add(e[i]);] [Cb.resize(new, Size);] [Intoffset=number, Of, Adds-initial, Size] [If(offset<0)offset=0;] [Intlen=new, Size<number, Of, Adds?new, Size:number, Of, Adds] [Len=len<initial, Size?len:initial, Size;] [For(intj=0;j<len;j++){assert, Equals(cb.get(j),e[offset+j]);}] [Assert, Equals(cb.get(j),e[offset+j]);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Cyclic, Buffer, Test, Case("test0"));] [Suite.add, Test(new, Cyclic, Buffer, Test, Case("test1"));] [Suite.add, Test(new, Cyclic, Buffer, Test, Case("test, Resize"));] [Returnsuite;]
 [Returnnew, Mock, Layout();] [Assert, Equals(", Null",, Date, Layout., Null, Date, Format);] [Assert, Equals(", Relative",, Date, Layout., Relative, Time, Date, Format);] [Assert, Equals(", Date, Format",, Date, Layout., Date, Format, Option);] [Assert, Equals(", Time, Zone",, Date, Layout., Timezone, Option);] [String[]options=((, Date, Layout)create, Layout()).get, Option, Strings()] [Assert, Equals(2,options.length);] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Option("d, Atef, Ormat","foobar");] [Assert, Equals(", Foobar",layout.get, Date, Format());] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Option("t, Imez, One","+05:00");] [Assert, Equals("+05:00",layout.get, Time, Zone());] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Date, Format(", Absolute");] [Assert, Equals(", Absolute",layout.get, Date, Format());] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Time, Zone("+05:00");] [Assert, Equals("+05:00",layout.get, Time, Zone());] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Date, Format((, String)null,null);] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Date, Format(", Nu, Ll",null);] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Date, Format("r, Elat, Ive",, Time, Zone.get, Default());] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Date, Format("a, Bsol, Ute",, Time, Zone.get, Default());] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Date, Format("d, Ate",, Time, Zone.get, Default());] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Date, Format("i, So8601",, Time, Zone.get, Default());] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Date, Format(", Hh:mm:ss",, Time, Zone.get, Default());] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Date, Format(", Hh:mm:ss");] [Layout.set, Time, Zone("+05:00");] [Layout.activate, Options();] [Date, Formatformat=new, Simple, Date, Format(", Hh:mm")] [Date, Layoutlayout=(, Date, Layout)create, Layout()] [Layout.set, Date, Format(format,, Time, Zone.get, Default());] [Date, Formatformat=new, Iso8601, Date, Format()] [Calendarcalendar=, Calendar.get, Instance()] [Calendar.clear();] [Calendar.set(1970,0,1,0,0,0);] [Stringactual=format.format(calendar.get, Time())] [Assert, Equals("1970-01-01 00:00:00,000",actual);] [Date, Formatformat=new, Date, Time, Date, Format()] [Calendarcalendar=, Calendar.get, Instance()] [Calendar.clear();] [Calendar.set(1970,0,1,0,0,0);] [Stringactual=format.format(calendar.get, Time())] [Simple, Date, Formatdf=new, Simple, Date, Format("dd , Mmm yyyy , Hh:mm:ss,, Sss")] [Stringexpected=df.format(calendar.get, Time())] [Assert, Equals(expected,actual);] [Assert, Not, Null(pos);] [Assert, Not, Null(date);] [Assert, Null(date, Format);] [Return", Mock";] [Returntrue;]
@@
 [Assert, Equals("log4j.debug",, Log, Log., Debug, Key);] [Assert, Equals("log4j.config, Debug",, Log, Log., Config, Debug, Key);]
 [Props=null;] [Log, Manager.reset, Configuration();] [Stringr] [R=, Option, Converter.subst, Vars("hello world.",null);] [Assert, Equals("hello world.",r);] [R=, Option, Converter.subst, Vars("hello ${, Toto} world.",null);] [Assert, Equals("hello wonderful world.",r);] [Stringr] [R=, Option, Converter.subst, Vars(", Test2 ${key1} mid ${key2} end.",null);] [Assert, Equals(", Test2 value1 mid value2 end.",r);] [Stringr] [R=, Option, Converter.subst, Vars(", Test3 ${unset} mid ${key1} end.",null);] [Assert, Equals(", Test3  mid value1 end.",r);] [Stringval=", Test4 ${incomplete "] [Try{, Option, Converter.subst, Vars(val,null);}catch(, Illegal, Argument, Exceptione){, Stringerror, Msg=e.get, Message();assert, Equals('"'+val+"\" has no closing brace. , Opening brace at position 6.",error, Msg);}] [Option, Converter.subst, Vars(val,null);] [Stringerror, Msg=e.get, Message()] [Assert, Equals('"'+val+"\" has no closing brace. , Opening brace at position 6.",error, Msg);] [Propertiesprops=new, Properties()] [Props.put("p1","x1");] [Props.put("p2","${p1}");] [Stringres=, Option, Converter.subst, Vars("${p2}",props)] [System.out.println(", Result is ["+res+"].");] [Assert, Equals(res,"x1");] [Filefile=new, File("input/filter1.properties")] [Assert, True(file.exists());] [File, Input, Streaminput, Stream=new, File, Input, Stream(file)] [Try{, Option, Converter.select, And, Configure(input, Stream,null,, Log, Manager.get, Logger, Repository());}finally{input, Stream.close();}] [Option, Converter.select, And, Configure(input, Stream,null,, Log, Manager.get, Logger, Repository());] [Input, Stream.close();] [New, Property, Configurator, Test(this.get, Class().get, Name()).validate, Nested();] [Stringval=", Info"] [Levelp=, Option, Converter.to, Level(val,null)] [Assert, Equals(p,, Level., Info);] [Stringval=", Info#org.apache.log4j.xml., X, Level"] [Levelp=, Option, Converter.to, Level(val,null)] [Assert, Equals(p,, Level., Info);] [Stringval=", Trace#org.apache.log4j.xml., X, Level"] [Levelp=, Option, Converter.to, Level(val,null)] [Assert, Equals(p,, X, Level., Trace);] [Stringval=", Tr#org.apache.log4j.xml., X, Level"] [Levelp=, Option, Converter.to, Level(val,null)] [Assert, Equals(p,null);] [Stringval=", Info#org.apache.log4j.xml., Toto"] [Levelp=, Option, Converter.to, Level(val,null)] [Assert, Equals(p,null);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Option, Converter, Test, Case("var, Subst, Test5"));] [Suite.add, Test(new, Option, Converter, Test, Case("var, Subst, Test1"));] [Suite.add, Test(new, Option, Converter, Test, Case("var, Subst, Test2"));] [Suite.add, Test(new, Option, Converter, Test, Case("var, Subst, Test3"));] [Suite.add, Test(new, Option, Converter, Test, Case("var, Subst, Test4"));] [Suite.add, Test(new, Option, Converter, Test, Case("test, Input, Stream"));] [Suite.add, Test(new, Option, Converter, Test, Case("to, Level, Test1"));] [Suite.add, Test(new, Option, Converter, Test, Case("to, Level, Test2"));] [Suite.add, Test(new, Option, Converter, Test, Case("to, Level, Test3"));] [Suite.add, Test(new, Option, Converter, Test, Case("to, Level, Test4"));] [Suite.add, Test(new, Option, Converter, Test, Case("to, Level, Test5"));] [Returnsuite;]
 [Root.get, Logger, Repository().reset, Configuration();] [Stringmdc, Msg, Pattern1="%m : %, X%n"] [Stringmdc, Msg, Pattern2="%m : %, X{key1}%n"] [Stringmdc, Msg, Pattern3="%m : %, X{key2}%n"] [Stringmdc, Msg, Pattern4="%m : %, X{key3}%n"] [Stringmdc, Msg, Pattern5="%m : %, X{key1},%, X{key2},%, X{key3}%n"] [Pattern, Layoutlayout=new, Pattern, Layout(msg, Pattern)] [Appenderappender=new, File, Appender(layout,, Output, File+"Mdc",false)] [Root.add, Appender(appender);] [Root.set, Level(, Level., Debug);] [Root.debug("starting mdc pattern test");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern1);] [Root.debug("empty mdc, no key specified in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern2);] [Root.debug("empty mdc, key1 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern3);] [Root.debug("empty mdc, key2 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern4);] [Root.debug("empty mdc, key3 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern5);] [Root.debug("empty mdc, key1, key2, and key3 in pattern");] [Mdc.put("key1","value1");] [Mdc.put("key2","value2");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern1);] [Root.debug("filled mdc, no key specified in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern2);] [Root.debug("filled mdc, key1 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern3);] [Root.debug("filled mdc, key2 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern4);] [Root.debug("filled mdc, key3 in pattern");] [Layout.set, Conversion, Pattern(mdc, Msg, Pattern5);] [Root.debug("filled mdc, key1, key2, and key3 in pattern");] [Mdc.remove("key1");] [Mdc.remove("key2");] [Layout.set, Conversion, Pattern(msg, Pattern);] [Root.debug("finished mdc pattern test");] [Assert, True(, Compare.compare(, Output, File+"Mdc",, Witness, File+"Mdc"));] [Test, Suitesuite=new, Test, Suite()] [If(!, System.get, Property("java.version").starts, With("1.1.")){suite.add, Test(new, Pattern, Parser, Test, Case("mdc, Pattern"));}] [Suite.add, Test(new, Pattern, Parser, Test, Case("mdc, Pattern"));] [Returnsuite;]
 [Assert, Same(, Util, Logging, Level., Finest,, Util, Logging, Level.to, Level("fi, Ne, St"));]
 [System.out.println(", Tearing down test case.");] [Logger.get, Logger, Repository().reset, Configuration();] [Property, Configurator.configure("input/hierarchy, Threshold1.properties");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/hierarchy, Threshold.1"));] [Property, Configurator.configure("input/hierarchy, Threshold2.properties");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/hierarchy, Threshold.2"));] [Property, Configurator.configure("input/hierarchy, Threshold3.properties");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/hierarchy, Threshold.3"));] [Property, Configurator.configure("input/hierarchy, Threshold4.properties");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/hierarchy, Threshold.4"));] [Property, Configurator.configure("input/hierarchy, Threshold5.properties");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/hierarchy, Threshold.5"));] [Property, Configurator.configure("input/hierarchy, Threshold6.properties");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/hierarchy, Threshold.6"));] [Property, Configurator.configure("input/hierarchy, Threshold7.properties");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/hierarchy, Threshold.7"));] [Property, Configurator.configure("input/hierarchy, Threshold8.properties");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/hierarchy, Threshold.8"));] [Stringold, Thread, Name=, Thread.current, Thread().get, Name()] [Thread.current, Thread().set, Name("main");] [Logger.log(, X, Level., Trace,"m0");] [Logger.debug("m1");] [Logger.info("m2");] [Logger.warn("m3");] [Logger.error("m4");] [Logger.fatal("m5");] [Thread.current, Thread().set, Name(old, Thread, Name);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Hierarchy, Threshold, Test, Case("test1"));] [Suite.add, Test(new, Hierarchy, Threshold, Test, Case("test2"));] [Suite.add, Test(new, Hierarchy, Threshold, Test, Case("test3"));] [Suite.add, Test(new, Hierarchy, Threshold, Test, Case("test4"));] [Suite.add, Test(new, Hierarchy, Threshold, Test, Case("test5"));] [Suite.add, Test(new, Hierarchy, Threshold, Test, Case("test6"));] [Suite.add, Test(new, Hierarchy, Threshold, Test, Case("test7"));] [Suite.add, Test(new, Hierarchy, Threshold, Test, Case("test8"));] [Returnsuite;]
 [Returnnew, Html, Layout();] [Document, Builder, Factoryfactory=, Document, Builder, Factory.new, Instance()] [Factory.set, Namespace, Aware(false);] [Factory.set, Coalescing(true);] [Document, Builderbuilder=factory.new, Document, Builder()] [Readerreader=new, String, Reader(source)] [Returnbuilder.parse(new, Input, Source(reader));] [Loggerlogger=, Logger.get, Logger("org.apache.log4j.xml., Html, Layout, Test")] [Ndc.push(", Ndc goes here");] [Logging, Eventevent=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Info,", Hello, , World",null)] [Html, Layoutlayout=(, Html, Layout)create, Layout()] [Layout.set, Location, Info(true);] [Stringresult=layout.format(event)] [Ndc.pop();] [Stringsrc="<!, Doctype body [ <!, Entity nbsp ' '>]><body>"+result+"</body>"] [Parse(src);] [Assert, Equals("<!, Doctype",create, Layout().get, Header().substring(0,9));] [Html, Layoutlayout=(, Html, Layout)create, Layout()] [Layout.set, Location, Info(true);] [Assert, Equals("<!, Doctype",layout.get, Header().substring(0,9));] [Assert, Equals("</table>",create, Layout().get, Footer().substring(0,8));] [Html, Layoutlayout=new, Html, Layout()] [Assert, Equals(false,layout.get, Location, Info());] [Layout.set, Location, Info(true);] [Assert, Equals(true,layout.get, Location, Info());] [Layout.set, Location, Info(false);] [Assert, Equals(false,layout.get, Location, Info());] [Html, Layoutlayout=new, Html, Layout()] [Layout.activate, Options();] [Html, Layoutlayout=new, Html, Layout()] [Assert, Equals(", Log4, J , Log , Messages",layout.get, Title());] [Layout.set, Title(null);] [Assert, Null(layout.get, Title());] [Stringnew, Title=", A treatise on messages of log persuasion"] [Layout.set, Title(new, Title);] [Assert, Equals(new, Title,layout.get, Title());] [Loggerlogger=, Logger.get, Logger("org.apache.log4j.xml., Html, Layout, Test")] [Ndc.clear();] [Char[]msg=newchar[2000]] [For(inti=0;i<msg.length;i++){msg[i]=', A';}] [Msg[i]=', A';] [Logging, Eventevent1=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Debug,new, String(msg),null)] [Html, Layoutlayout=(, Html, Layout)create, Layout()] [Layout.set, Location, Info(true);] [Stringresult=layout.format(event1)] [Exceptionex=new, Illegal, Argument, Exception("'foo' is not a valid value.")] [Logging, Eventevent2=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Warn,", Hello, , World",ex)] [Result=layout.format(event2);] [Assert, Equals(, Layout., Line, Sep+"<tr>",result.substring(0,, Layout., Line, Sep.length()+4));]
 [Stringproblem, Name="com.example.bar<>&\"'"] [Loggerlogger=, Logger.get, Logger(problem, Name)] [Levellevel=new, Problem, Level(problem, Name)] [Exceptionex=new, Illegal, Argument, Exception(problem, Name)] [Stringthread, Name=, Thread.current, Thread().get, Name()] [Thread.current, Thread().set, Name(problem, Name);] [Ndc.push(problem, Name);] [Hashtablemdc, Map=, Mdc.get, Context()] [If(mdc, Map!=null){mdc, Map.clear();}] [Mdc, Map.clear();] [Mdc.put(problem, Name,problem, Name);] [Logging, Eventevent=new, Logging, Event(problem, Name,logger,level,problem, Name,ex)] [Html, Layoutlayout=(, Html, Layout)create, Layout()] [Stringresult=layout.format(event)] [Mdc, Map=, Mdc.get, Context();] [If(mdc, Map!=null){mdc, Map.clear();}] [Mdc, Map.clear();] [Thread.current, Thread().set, Name(thread, Name);] [String, Bufferbuf=new, String, Buffer("<!, Doctype table [<!, Entity nbsp ' '>]><table>")] [Buf.append(result);] [Buf.append("</table>");] [Stringdoc=buf.to, String()] [For(inti=doc.last, Index, Of("<br>");i!=-1;i=doc.last, Index, Of("<br>",i-1)){buf.replace(i,i+4,"<br/>");}] [Buf.replace(i,i+4,"<br/>");] [Parse(buf.to, String());]
 [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Last("test1"));] [Returnsuite;]
 [Content, Type="text/plain";] [Ignores, Throwable=true;] [Header=null;] [Footer=null;] [Content, Type=expected, Content, Type;] [Ignores, Throwable=expected, Ignores, Throwable;] [Header=expected, Header;] [Footer=expected, Footer;] [Assert, Equals(, System.get, Property("line.separator"),, Layout., Line, Sep);] [Assert, Equals(, Layout., Line, Sep.length(),, Layout., Line, Sep, Len);] [Returnnew, Mock, Layout();] [Assert, Equals(content, Type,create, Layout().get, Content, Type());] [Assert, Equals(ignores, Throwable,create, Layout().ignores, Throwable());] [Assert, Equals(header,create, Layout().get, Header());] [Assert, Equals(footer,create, Layout().get, Footer());] [Loggerlogger=, Logger.get, Logger("org.apache.log4j., Layout, Test")] [Logging, Eventevent=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Info,", Hello, , World",null)] [Stringresult=create, Layout().format(event)] [Assert, Equals(", Mock",result);] [Return", Mock";] [Returntrue;]
@@
 [Int[]skip=newint[]{}] [Serialization, Test, Helper.assert, Serialization, Equals("witness/serialization/info.bin",, Level., Info,skip,, Integer., Max, Value);] [Objectobj=, Serialization, Test, Helper.deserialize, Stream("witness/serialization/info.bin")] [Assert, True(objinstanceof, Level);] [Levelinfo=(, Level)obj] [Assert, Equals(", Info",info.to, String());] [If(!, System.get, Property("java.version").starts, With("1.1.")){assert, True(obj==, Level., Info);}] [Assert, True(obj==, Level., Info);] [Custom, Levelcustom=new, Custom, Level()] [Objectobj=, Serialization, Test, Helper.serialize, Clone(custom)] [Assert, True(objinstanceof, Custom, Level);] [Custom, Levelclone=(, Custom, Level)obj] [Assert, Equals(, Level., Info.level,clone.level);] [Assert, Equals(, Level., Info.level, Str,clone.level, Str);] [Assert, Equals(, Level., Info.syslog, Equivalent,clone.syslog, Equivalent);]
 [Assert, Equals(5000,, Level., Trace, Int);] [Assert, Equals(", Trace",, Level., Trace.to, String());] [Assert, Equals(5000,, Level., Trace.to, Int());] [Assert, Equals(7,, Level., Trace.get, Syslog, Equivalent());] [Leveltrace=, Level.to, Level(5000)] [Assert, Equals(", Trace",trace.to, String());] [Leveltrace=, Level.to, Level(", Trace")] [Assert, Equals(", Trace",trace.to, String());] [Assert, True(, Priority.class.is, Assignable, From(, Level.class));] [Assert, True(, Level., Of, Finstanceof, Level);] [Assert, True(, Level., Fata, Linstanceof, Level);] [Assert, True(, Level., Erro, Rinstanceof, Level);] [Assert, True(, Level., War, Ninstanceof, Level);] [Assert, True(, Level., Inf, Oinstanceof, Level);] [Assert, True(, Level., Debu, Ginstanceof, Level);] [Assert, True(, Level., Trac, Einstanceof, Level);] [Assert, True(, Level., Al, Linstanceof, Level);] [Assert, Equals(3491141966387921974, L,, Level.serial, Version, Uid);] [Levellevel=, Level.to, Level(, Level., All, Int)] [Assert, Equals(", All",level.to, String());] [Levellevel=, Level.to, Level(, Level., Fatal, Int)] [Assert, Equals(", Fatal",level.to, String());] [Levellevel=, Level.to, Level(, Level., Off, Int)] [Assert, Equals(", Off",level.to, String());] [Levellevel=, Level.to, Level(17,, Level., Fatal)] [Assert, Equals(", Fatal",level.to, String());] [Levellevel=, Level.to, Level(null,, Level., Fatal)] [Assert, Equals(", Fatal",level.to, String());] [Levellevel=, Level.to, Level("\u0131nfo")] [Assert, Equals(", Info",level.to, String());] [Localedefault, Locale=, Locale.get, Default()] [Localeturkey=new, Locale("tr",", Tr")] [Locale.set, Default(turkey);] [Levellevel=, Level.to, Level("info")] [Locale.set, Default(default, Locale);] [Assert, Equals(", Info",level.to, String());]
 [This.level=level;] [Loggerroot=, Logger.get, Root, Logger()] [Appender=new, Vector, Appender();] [Root.add, Appender(appender);] [Vectorvector=appender.get, Vector()] [Stringmsg=null] [Switch(vector.size()){case0:break;case1:, Logging, Eventevent=(, Logging, Event)vector.element, At(0);, Assert.assert, Not, Null(event);, Assert.assert, Equals(level,event.get, Level());msg=event.get, Rendered, Message();break;default:, Assert.fail(", More than one request captured");}] [Break;] [Logging, Eventevent=(, Logging, Event)vector.element, At(0)] [Assert.assert, Not, Null(event);] [Assert.assert, Equals(level,event.get, Level());] [Msg=event.get, Rendered, Message();] [Break;] [Assert.fail(", More than one request captured");] [Returnmsg;]
 [Basic, Configurator.reset, Configuration();] [A1=null;] [A2=null;] [Logger=, Logger.get, Logger("test");] [A1=new, File, Appender();] [A1.set, Name("test, Appender1");] [Logger.add, Appender(a1);] [Enumerationenumeration=logger.get, All, Appenders()] [Appendera, Hat=(, Appender)enumeration.next, Element()] [Assert, Equals(a1,a, Hat);] [A1=new, File, Appender();] [A1.set, Name("test, Appender2.1");] [A2=new, File, Appender();] [A2.set, Name("test, Appender2.2");] [Logger=, Logger.get, Logger("test");] [Logger.add, Appender(a1);] [Logger.add, Appender(a2);] [Logger.remove, Appender("test, Appender2.1");] [Enumerationenumeration=logger.get, All, Appenders()] [Appendera, Hat=(, Appender)enumeration.next, Element()] [Assert, Equals(a2,a, Hat);] [Assert, True(!enumeration.has, More, Elements());] [Loggera=, Logger.get, Logger("a")] [Loggerab=, Logger.get, Logger("a.b")] [Counting, Appenderca=new, Counting, Appender()] [A.add, Appender(ca);] [Assert, Equals(ca.counter,0);] [Ab.debug(, Msg);] [Assert, Equals(ca.counter,1);] [Ab.info(, Msg);] [Assert, Equals(ca.counter,2);] [Ab.warn(, Msg);] [Assert, Equals(ca.counter,3);] [Ab.error(, Msg);] [Assert, Equals(ca.counter,4);] [Loggera=, Logger.get, Logger("a")] [Loggerab=, Logger.get, Logger("a.b")] [Loggerabc=, Logger.get, Logger("a.b.c")] [Loggerx=, Logger.get, Logger("x")] [Counting, Appenderca1=new, Counting, Appender()] [Counting, Appenderca2=new, Counting, Appender()] [A.add, Appender(ca1);] [Abc.add, Appender(ca2);] [Assert, Equals(ca1.counter,0);] [Assert, Equals(ca2.counter,0);] [Ab.debug(, Msg);] [Assert, Equals(ca1.counter,1);] [Assert, Equals(ca2.counter,0);] [Abc.debug(, Msg);] [Assert, Equals(ca1.counter,2);] [Assert, Equals(ca2.counter,1);] [X.debug(, Msg);] [Assert, Equals(ca1.counter,2);] [Assert, Equals(ca2.counter,1);] [Loggerroot=, Logger.get, Root, Logger()] [Loggera=, Logger.get, Logger("a")] [Loggerab=, Logger.get, Logger("a.b")] [Loggerabc=, Logger.get, Logger("a.b.c")] [Counting, Appenderca, Root=new, Counting, Appender()] [Counting, Appenderca, A=new, Counting, Appender()] [Counting, Appenderca, Abc=new, Counting, Appender()] [Root.add, Appender(ca, Root);] [A.add, Appender(ca, A);] [Abc.add, Appender(ca, Abc);] [Assert, Equals(ca, Root.counter,0);] [Assert, Equals(ca, A.counter,0);] [Assert, Equals(ca, Abc.counter,0);] [Ab.set, Additivity(false);] [A.debug(, Msg);] [Assert, Equals(ca, Root.counter,1);] [Assert, Equals(ca, A.counter,1);] [Assert, Equals(ca, Abc.counter,0);] [Ab.debug(, Msg);] [Assert, Equals(ca, Root.counter,1);] [Assert, Equals(ca, A.counter,1);] [Assert, Equals(ca, Abc.counter,0);] [Abc.debug(, Msg);] [Assert, Equals(ca, Root.counter,1);] [Assert, Equals(ca, A.counter,1);] [Assert, Equals(ca, Abc.counter,1);] [Counting, Appenderca, Root=new, Counting, Appender()] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(ca, Root);] [Logger, Repositoryh=, Log, Manager.get, Logger, Repository()] [H.set, Threshold((, Level), Level., Info);] [Assert, Equals(ca, Root.counter,0);] [Root.debug(, Msg);] [Assert, Equals(ca, Root.counter,0);] [Root.info(, Msg);] [Assert, Equals(ca, Root.counter,1);] [Root.log(, Level., Warn,, Msg);] [Assert, Equals(ca, Root.counter,2);] [Root.warn(, Msg);] [Assert, Equals(ca, Root.counter,3);] [H.set, Threshold((, Level), Level., Warn);] [Root.debug(, Msg);] [Assert, Equals(ca, Root.counter,3);] [Root.info(, Msg);] [Assert, Equals(ca, Root.counter,3);] [Root.log(, Level., Warn,, Msg);] [Assert, Equals(ca, Root.counter,4);] [Root.error(, Msg);] [Assert, Equals(ca, Root.counter,5);] [Root.log(, Level., Error,, Msg);] [Assert, Equals(ca, Root.counter,6);] [H.set, Threshold(, Level., Off);] [Root.debug(, Msg);] [Assert, Equals(ca, Root.counter,6);] [Root.info(, Msg);] [Assert, Equals(ca, Root.counter,6);] [Root.log(, Level., Warn,, Msg);] [Assert, Equals(ca, Root.counter,6);] [Root.error(, Msg);] [Assert, Equals(ca, Root.counter,6);] [Root.log(, Level., Fatal,, Msg);] [Assert, Equals(ca, Root.counter,6);] [Root.log(, Level., Fatal,, Msg);] [Assert, Equals(ca, Root.counter,6);] [H.set, Threshold(, Level., Off);] [Root.debug(, Msg);] [Assert, Equals(ca, Root.counter,6);] [Root.info(, Msg);] [Assert, Equals(ca, Root.counter,6);] [Root.log(, Level., Warn,, Msg);] [Assert, Equals(ca, Root.counter,6);] [Root.error(, Msg);] [Assert, Equals(ca, Root.counter,6);] [Root.log(, Level., Error,, Msg);] [Assert, Equals(ca, Root.counter,6);] [Root.log(, Level., Fatal,, Msg);] [Assert, Equals(ca, Root.counter,6);] [Loggerroot=, Logger.get, Root, Logger()] [Root.set, Resource, Bundle(rb, Us);] [Resource, Bundlet=root.get, Resource, Bundle()] [Assert, Same(t,rb, Us);] [Loggerx=, Logger.get, Logger("x")] [LoggerxY=, Logger.get, Logger("x.y")] [LoggerxYZ=, Logger.get, Logger("x.y.z")] [T=x.get, Resource, Bundle();] [Assert, Same(t,rb, Us);] [T=xY.get, Resource, Bundle();] [Assert, Same(t,rb, Us);] [T=xYZ.get, Resource, Bundle();] [Assert, Same(t,rb, Us);] [Loggerroot=, Logger.get, Root, Logger()] [Root.set, Resource, Bundle(rb, Us);] [Resource, Bundlet=root.get, Resource, Bundle()] [Assert, Same(t,rb, Us);] [Loggerx=, Logger.get, Logger("x")] [LoggerxY=, Logger.get, Logger("x.y")] [LoggerxYZ=, Logger.get, Logger("x.y.z")] [XY.set, Resource, Bundle(rb, Fr);] [T=x.get, Resource, Bundle();] [Assert, Same(t,rb, Us);] [T=xY.get, Resource, Bundle();] [Assert, Same(t,rb, Fr);] [T=xYZ.get, Resource, Bundle();] [Assert, Same(t,rb, Fr);] [Loggerroot=, Logger.get, Root, Logger()] [Root.set, Resource, Bundle(rb, Us);] [Resource, Bundlet=root.get, Resource, Bundle()] [Assert, Same(t,rb, Us);] [Loggerx=, Logger.get, Logger("x")] [LoggerxY=, Logger.get, Logger("x.y")] [LoggerxYZ=, Logger.get, Logger("x.y.z")] [XY.set, Resource, Bundle(rb, Fr);] [XYZ.set, Resource, Bundle(rb, Ch);] [T=x.get, Resource, Bundle();] [Assert, Same(t,rb, Us);] [T=xY.get, Resource, Bundle();] [Assert, Same(t,rb, Fr);] [T=xYZ.get, Resource, Bundle();] [Assert, Same(t,rb, Ch);] [Loggera=, Logger.get, Logger("a")] [LoggeraB=, Logger.get, Logger("a.b")] [LoggeraBC=, Logger.get, Logger("a.b.c")] [Loggert] [T=, Log, Manager.exists("xx");] [Assert, Null(t);] [T=, Log, Manager.exists("a");] [Assert, Same(a,t);] [T=, Log, Manager.exists("a.b");] [Assert, Same(aB,t);] [T=, Log, Manager.exists("a.b.c");] [Assert, Same(aBC,t);] [Hierarchyh=new, Hierarchy(new, Root, Logger((, Level), Level., Error))] [Loggera0=h.get, Logger("a")] [Assert, Equals("a",a0.get, Name());] [Assert, Null(a0.get, Level());] [Assert, Same(, Level., Error,a0.get, Effective, Level());] [Loggera1=h.get, Logger("a")] [Assert, Same(a0,a1);] [Vector, Appenderappender=new, Vector, Appender()] [Appender.activate, Options();] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(appender);] [Root.set, Level(, Level., Info);] [Loggertracer=, Logger.get, Logger("com.example., Tracer")] [Tracer.set, Level(, Level., Trace);] [Tracer.trace(", Message 1");] [Root.trace(", Discarded , Message");] [Root.trace(", Discarded , Message");] [Vectormsgs=appender.get, Vector()] [Assert, Equals(1,msgs.size());] [Logging, Eventevent=(, Logging, Event)msgs.element, At(0)] [Assert, Equals(, Level., Trace,event.get, Level());] [Assert, Equals(", Message 1",event.get, Message());] [Vector, Appenderappender=new, Vector, Appender()] [Appender.activate, Options();] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(appender);] [Root.set, Level(, Level., Info);] [Loggertracer=, Logger.get, Logger("com.example., Tracer")] [Tracer.set, Level(, Level., Trace);] [Null, Pointer, Exceptionex=new, Null, Pointer, Exception()] [Tracer.trace(", Message 1",ex);] [Root.trace(", Discarded , Message",ex);] [Root.trace(", Discarded , Message",ex);] [Vectormsgs=appender.get, Vector()] [Assert, Equals(1,msgs.size());] [Logging, Eventevent=(, Logging, Event)msgs.element, At(0)] [Assert, Equals(, Level., Trace,event.get, Level());] [Assert, Equals(", Message 1",event.get, Message());] [Vector, Appenderappender=new, Vector, Appender()] [Appender.activate, Options();] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(appender);] [Root.set, Level(, Level., Info);] [Loggertracer=, Logger.get, Logger("com.example., Tracer")] [Tracer.set, Level(, Level., Trace);] [Assert, True(tracer.is, Trace, Enabled());] [Assert, False(root.is, Trace, Enabled());] [Add, Event, Count=remove, Event, Count=0;] [Add, Event, Count++;] [Remove, Event, Count++;] [Returnadd, Event, Count;] [Returnremove, Event, Count;]
 [Counting, Hierarchy, Event, Listenerlistener=new, Counting, Hierarchy, Event, Listener()] [Log, Manager.get, Logger, Repository().add, Hierarchy, Event, Listener(listener);] [Counting, Appenderappender=new, Counting, Appender()] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(appender);] [Assert, Equals(1,listener.get, Add, Event, Count());] [Assert, Equals(0,listener.get, Remove, Event, Count());] [Root.remove, Appender(appender);] [Assert, Equals(1,listener.get, Add, Event, Count());] [Assert, Equals(1,listener.get, Remove, Event, Count());] [Counting, Hierarchy, Event, Listenerlistener=new, Counting, Hierarchy, Event, Listener()] [Log, Manager.get, Logger, Repository().add, Hierarchy, Event, Listener(listener);] [Counting, Appenderappender=new, Counting, Appender()] [Appender.set, Name(", A1");] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(appender);] [Assert, Equals(1,listener.get, Add, Event, Count());] [Assert, Equals(0,listener.get, Remove, Event, Count());] [Root.remove, Appender(appender.get, Name());] [Assert, Equals(1,listener.get, Add, Event, Count());] [Assert, Equals(1,listener.get, Remove, Event, Count());] [Counting, Hierarchy, Event, Listenerlistener=new, Counting, Hierarchy, Event, Listener()] [Log, Manager.get, Logger, Repository().add, Hierarchy, Event, Listener(listener);] [Counting, Appenderappender=new, Counting, Appender()] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(appender);] [Assert, Equals(1,listener.get, Add, Event, Count());] [Assert, Equals(0,listener.get, Remove, Event, Count());] [Root.remove, All, Appenders();] [Assert, Equals(1,listener.get, Add, Event, Count());] [Assert, Equals(1,listener.get, Remove, Event, Count());] [Counting, Hierarchy, Event, Listenerlistener=new, Counting, Hierarchy, Event, Listener()] [Log, Manager.get, Logger, Repository().add, Hierarchy, Event, Listener(listener);] [Counting, Appenderappender=new, Counting, Appender()] [Loggerroot=, Logger.get, Root, Logger()] [Root.add, Appender(appender);] [Assert, Equals(1,listener.get, Add, Event, Count());] [Assert, Equals(0,listener.get, Remove, Event, Count());] [Log, Manager.reset, Configuration();] [Assert, Equals(1,listener.get, Add, Event, Count());] [Assert, Equals(1,listener.get, Remove, Event, Count());] [Counter=0;] [Counter++;] [Returntrue;]
@@
 [Assert, Equals("log4j.properties",, Log, Manager., Default, Configuration, File);] [Assert, Equals("log4j.xml",, Log, Manager., Default, Xml, Configuration, File);] [Assert, Equals("log4j.configuration",, Log, Manager., Default, Configuration, Key);] [Assert, Equals("log4j.configurator, Class",, Log, Manager., Configurator, Class, Key);] [Assert, Equals("log4j.default, Init, Override",, Log, Manager., Default, Init, Override, Key);]
 [If(in==null){returnnull;}] [Returnnull;] [For(inti=0;i<patterns.length;i++){intipos=in.index, Of(patterns[i]);if(ipos>=1){returnin.substring(0,ipos)+replacements[i]+in.substring(ipos+patterns[i].length());}}] [Intipos=in.index, Of(patterns[i])] [If(ipos>=1){returnin.substring(0,ipos)+replacements[i]+in.substring(ipos+patterns[i].length());}] [Returnin.substring(0,ipos)+replacements[i]+in.substring(ipos+patterns[i].length());] [Returnin;]
 [Mdc.clear();] [Mdc.put("key","some value");] [Assert, Equals("some value",, Mdc.get("key"));] [Assert, Equals(1,, Mdc.get, Context().size());] [Mdc.put("key","some value");] [Mdc.remove("key");] [Check, Thread, Locals, For, Leaks();] [Fieldthread, Locals, Field=, Thread.class.get, Declared, Field("thread, Locals")] [Thread, Locals, Field.set, Accessible(true);] [Fieldinheritable, Thread, Locals, Field=, Thread.class.get, Declared, Field("inheritable, Thread, Locals")] [Inheritable, Thread, Locals, Field.set, Accessible(true);] [Classtlm, Class=, Class.for, Name("java.lang., Thread, Local$, Thread, Local, Map")] [Fieldtable, Field=tlm, Class.get, Declared, Field("table")] [Table, Field.set, Accessible(true);] [Threadthread=, Thread.current, Thread()] [Objectthread, Local, Map] [Thread, Local, Map=thread, Locals, Field.get(thread);] [Check, Thread, Local, Map, For, Leaks(thread, Local, Map,table, Field);] [Thread, Local, Map=inheritable, Thread, Locals, Field.get(thread);] [Check, Thread, Local, Map, For, Leaks(thread, Local, Map,table, Field);] [If(map!=null){, Object[]table=(, Object[])internal, Table, Field.get(map);if(table!=null){for(intj=0;j<table.length;j++){if(table[j]!=null){, Objectkey=((, Reference)table[j]).get();, Stringkey, Class, Name=key.get, Class().get, Name();if(key.get, Class()==org.apache.log4j.helpers., Thread, Local, Map.class){fail(", Found a , Thread, Local with key of type ["+key, Class, Name+"]");}}}}}] [Object[]table=(, Object[])internal, Table, Field.get(map)] [If(table!=null){for(intj=0;j<table.length;j++){if(table[j]!=null){, Objectkey=((, Reference)table[j]).get();, Stringkey, Class, Name=key.get, Class().get, Name();if(key.get, Class()==org.apache.log4j.helpers., Thread, Local, Map.class){fail(", Found a , Thread, Local with key of type ["+key, Class, Name+"]");}}}}] [For(intj=0;j<table.length;j++){if(table[j]!=null){, Objectkey=((, Reference)table[j]).get();, Stringkey, Class, Name=key.get, Class().get, Name();if(key.get, Class()==org.apache.log4j.helpers., Thread, Local, Map.class){fail(", Found a , Thread, Local with key of type ["+key, Class, Name+"]");}}}] [If(table[j]!=null){, Objectkey=((, Reference)table[j]).get();, Stringkey, Class, Name=key.get, Class().get, Name();if(key.get, Class()==org.apache.log4j.helpers., Thread, Local, Map.class){fail(", Found a , Thread, Local with key of type ["+key, Class, Name+"]");}}] [Objectkey=((, Reference)table[j]).get()] [Stringkey, Class, Name=key.get, Class().get, Name()] [If(key.get, Class()==org.apache.log4j.helpers., Thread, Local, Map.class){fail(", Found a , Thread, Local with key of type ["+key, Class, Name+"]");}] [Fail(", Found a , Thread, Local with key of type ["+key, Class, Name+"]");]
 [Root.get, Logger, Repository().reset, Configuration();] [Layoutlayout=new, Simple, Layout()] [Appenderappender=new, File, Appender(layout,"output/simple",false)] [Root.add, Appender(appender);] [Common();] [Transformer.transform("output/simple",, Filtered,new, Filter[]{new, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/simple"));] [Layoutlayout=new, Ttcc, Layout(, Absolute, Time, Date, Format., Date, And, Time, Date, Format)] [Appenderappender=new, File, Appender(layout,"output/ttcc",false)] [Root.add, Appender(appender);] [Stringold, Name=, Thread.current, Thread().get, Name()] [Thread.current, Thread().set, Name("main");] [Common();] [Thread.current, Thread().set, Name(old, Name);] [Control, Filtercf1=new, Control, Filter(new, String[]{, Ttcc, Pat,, Ttcc2, Pat,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform("output/ttcc",, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Absolute, Date, And, Time, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/ttcc"));] [Inti=0] [Logger, Err=, Logger.get, Logger(", Err")] [Err.set, Level(, Level., Error);] [Logger, Inf=, Logger.get, Logger(", Inf")] [Inf.set, Level(, Level., Info);] [Logger, Inf, Err=, Logger.get, Logger(", Inf., Err")] [Inf, Err.set, Level(, Level., Error);] [Logger, Deb=, Logger.get, Logger(", Deb")] [Deb.set, Level(, Level., Debug);] [Logger, Trc=, Logger.get, Logger(", Trc")] [Trc.set, Level(, Level., Trace);] [Logger, Inf, Undef=, Logger.get, Logger(", Inf., Undef")] [Logger, Inf, Err, Undef=, Logger.get, Logger(", Inf., Err., Undef")] [Logger, Undef=, Logger.get, Logger(", Undef")] [Err.log(, Level., Fatal,", Message "+i);] [I++;] [Err.error(", Message "+i);] [I++;] [Inf.log(, Level., Fatal,", Message "+i);] [I++;] [Inf.error(", Message "+i);] [I++;] [Inf.warn(", Message "+i);] [I++;] [Inf.info(", Message "+i);] [I++;] [Inf, Undef.log(, Level., Fatal,", Message "+i);] [I++;] [Inf, Undef.error(", Message "+i);] [I++;] [Inf, Undef.warn(", Message "+i);] [I++;] [Inf, Undef.info(", Message "+i);] [I++;] [Inf, Err.log(, Level., Fatal,", Message "+i);] [I++;] [Inf, Err.error(", Message "+i);] [I++;] [Inf, Err, Undef.log(, Level., Fatal,", Message "+i);] [I++;] [Inf, Err, Undef.error(", Message "+i);] [I++;] [Deb.log(, Level., Fatal,", Message "+i);] [I++;] [Deb.error(", Message "+i);] [I++;] [Deb.warn(", Message "+i);] [I++;] [Deb.info(", Message "+i);] [I++;] [Deb.debug(", Message "+i);] [I++;] [Trc.log(, Level., Fatal,", Message "+i);] [I++;] [Trc.error(", Message "+i);] [I++;] [Trc.warn(", Message "+i);] [I++;] [Trc.info(", Message "+i);] [I++;] [Trc.debug(", Message "+i);] [I++;] [Trc.trace(", Message "+i);] [I++;] [Undef.log(, Level., Fatal,", Message "+i);] [I++;] [Undef.error(", Message "+i);] [I++;] [Undef.warn(", Message "+i);] [I++;] [Undef.info(", Message "+i);] [I++;] [Undef.debug(", Message "+i,new, Exception(", Just testing."));] [Intprint, Count=i] [I++;] [Err.warn(", Message "+i);] [I++;] [Err.info(", Message "+i);] [I++;] [Err.debug(", Message "+i);] [I++;] [Inf.debug(", Message "+i);] [I++;] [Inf, Undef.debug(", Message "+i);] [I++;] [Inf, Err.warn(", Message "+i);] [I++;] [Inf, Err.info(", Message "+i);] [I++;] [Inf, Err.debug(", Message "+i);] [I++;] [Inf, Err, Undef.warn(", Message "+i);] [I++;] [Inf, Err, Undef.info(", Message "+i);] [I++;] [Inf, Err, Undef.debug(", Message "+i);] [I++;] [Undef.trace(", Message "+i,new, Exception(", Just testing."));] [I++;] [Inf.info(", Messages should bear numbers 0 through "+print, Count+".");] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Minimum, Test, Case("simple"));] [Suite.add, Test(new, Minimum, Test, Case("ttcc"));] [Returnsuite;]
 [Returnnew, My, Pattern, Parser(pattern==null?, Default, Conversion, Pattern:pattern);] [Layoutlayout=new, My, Pattern, Layout("[counter=%.10#] - %m%n")] [Loggerlogger=, Logger.get, Logger("some.cat")] [Logger.add, Appender(new, Console, Appender(layout,, Console, Appender., System, Out));] [Logger.debug(", Hello, log");] [Logger.info(", Hello again...");]
 [If(c=='#'){add, Converter(new, User, Dir, Pattern, Converter(formatting, Info));current, Literal.set, Length(0);}else{super.finalize, Converter(c);}] [Add, Converter(new, User, Dir, Pattern, Converter(formatting, Info));] [Current, Literal.set, Length(0);] [Super.finalize, Converter(c);] [Return, String.value, Of(++counter);]
@@
 [Inttotal, Tests=0] [Stringprefix=null] [If(args.length==2){total, Tests=, Integer.parse, Int(args[0]);prefix=args[1];}else{usage(", Wrong number of arguments.");}] [Total, Tests=, Integer.parse, Int(args[0]);] [Prefix=args[1];] [Usage(", Wrong number of arguments.");] [Log, Log.debug(", Listening on port "+, Socket, Server, Test, Case., Port);] [Server, Socketserver, Socket=new, Server, Socket(, Socket, Server, Test, Case., Port)] [Mdc.put("host, Id","short, Socket, Server");] [For(inti=1;i<=total, Tests;i++){, Property, Configurator.configure(prefix+i+".properties");, Log, Log.debug(", Waiting to accept a new client.");, Socketsocket=server, Socket.accept();, Log, Log.debug(", Connected to client at "+socket.get, Inet, Address());, Log, Log.debug(", Starting new socket node.");, Socket, Nodesn=new, Socket, Node(socket,, Log, Manager.get, Logger, Repository());, Threadt=new, Thread(sn);t.start();t.join();}] [Property, Configurator.configure(prefix+i+".properties");] [Log, Log.debug(", Waiting to accept a new client.");] [Socketsocket=server, Socket.accept()] [Log, Log.debug(", Connected to client at "+socket.get, Inet, Address());] [Log, Log.debug(", Starting new socket node.");] [Socket, Nodesn=new, Socket, Node(socket,, Log, Manager.get, Logger, Repository())] [Threadt=new, Thread(sn)] [T.start();] [T.join();] [System.err.println(msg);] [System.err.println(", Usage: java "+, Short, Socket, Server.class.get, Name()+" total, Tests config, File, Prefix");] [System.exit(1);]
 [Log, Manager.reset, Configuration();] [Returntrue;]
 [Dom, Configurator.configure("input/xml/smtp, Appender1.xml");] [Smtp, Appenderappender=(, Smtp, Appender), Logger.get, Root, Logger().get, Appender(", A1")] [Triggering, Event, Evaluatorevaluator=appender.get, Evaluator()] [Assert, True(evaluatorinstanceof, Mock, Triggering, Event, Evaluator);]
 [Stringmsg="test, Fallback, Error, Handler, When, Starting"] [Logger.debug(msg);] [Assert, Equals(", Socket, Appender with , Fallback, Error, Handler",msg,secondary.get, Last, Message());] [This.last, Event=event;] [Returnfalse;] [This.closed=true;] [If(this.last, Event!=null)returnthis.last, Event.get, Message().to, String();elsereturn"";]
@@
 [System.out.println(", Tearing down test case.");] [Socket, Appender=null;] [Root, Logger.remove, All, Appenders();] [Socket, Appender=new, Socket, Appender("localhost",, Port);] [Root, Logger.add, Appender(socket, Appender);] [Common(", T1","key1",", Mdc-, Test1");] [Delay(1);] [Control, Filtercf=new, Control, Filter(new, String[]{, Pat1,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/socket, Server.1"));] [Socket, Appender=new, Socket, Appender("localhost",, Port);] [Root, Logger.add, Appender(socket, Appender);] [Common(", T2","key2",", Mdc-, Test2");] [Delay(1);] [Control, Filtercf=new, Control, Filter(new, String[]{, Pat2,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/socket, Server.2"));] [Socket, Appender=new, Socket, Appender("localhost",, Port);] [Socket, Appender.set, Location, Info(true);] [Root, Logger.add, Appender(socket, Appender);] [Common(", T3","key3",", Mdc-, Test3");] [Delay(1);] [Control, Filtercf=new, Control, Filter(new, String[]{, Pat3,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/socket, Server.3"));] [Socket, Appender=new, Socket, Appender("localhost",, Port);] [Socket, Appender.set, Location, Info(true);] [Root, Logger.add, Appender(socket, Appender);] [Ndc.push("some");] [Common(", T4","key4",", Mdc-, Test4");] [Ndc.pop();] [Delay(1);] [If(!, System.get, Property("java.version").starts, With("1.1.")){, Control, Filtercf=new, Control, Filter(new, String[]{, Pat4,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5});, Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});assert, True(, Compare.compare(, Filtered,"witness/socket, Server.4"));}] [Control, Filtercf=new, Control, Filter(new, String[]{, Pat4,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/socket, Server.4"));] [Socket, Appender=new, Socket, Appender("localhost",, Port);] [Socket, Appender.set, Location, Info(true);] [Async, Appenderasync, Appender=new, Async, Appender()] [Async, Appender.set, Location, Info(true);] [Async, Appender.add, Appender(socket, Appender);] [Root, Logger.add, Appender(async, Appender);] [Ndc.push("some5");] [Common(", T5","key5",", Mdc-, Test5");] [Ndc.pop();] [Delay(2);] [If(!, System.get, Property("java.version").starts, With("1.1.")){, Control, Filtercf=new, Control, Filter(new, String[]{, Pat5,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5});, Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});assert, True(, Compare.compare(, Filtered,"witness/socket, Server.5"));}] [Control, Filtercf=new, Control, Filter(new, String[]{, Pat5,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/socket, Server.5"));] [Socket, Appender=new, Socket, Appender("localhost",, Port);] [Socket, Appender.set, Location, Info(true);] [Async, Appenderasync, Appender=new, Async, Appender()] [Async, Appender.set, Location, Info(true);] [Async, Appender.add, Appender(socket, Appender);] [Root, Logger.add, Appender(async, Appender);] [Ndc.push("some6");] [Mdc.put("host, Id","client-test6");] [Common(", T6","key6",", Mdc-, Test6");] [Ndc.pop();] [Mdc.remove("host, Id");] [Delay(2);] [If(!, System.get, Property("java.version").starts, With("1.1.")){, Control, Filtercf=new, Control, Filter(new, String[]{, Pat6,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5});, Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});assert, True(, Compare.compare(, Filtered,"witness/socket, Server.6"));}] [Control, Filtercf=new, Control, Filter(new, String[]{, Pat6,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/socket, Server.6"));] [Socket, Appender=new, Socket, Appender("localhost",, Port);] [Socket, Appender.set, Location, Info(true);] [Root, Logger.add, Appender(socket, Appender);] [Ndc.push("some7");] [Mdc.put("host, Id","client-test7");] [Common(", T7","key7",", Mdc-, Test7");] [Ndc.pop();] [Mdc.remove("host, Id");] [Delay(2);] [If(!, System.get, Property("java.version").starts, With("1.1.")){, Control, Filtercf=new, Control, Filter(new, String[]{, Pat7,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5});, Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});assert, True(, Compare.compare(, Filtered,"witness/socket, Server.7"));}] [Control, Filtercf=new, Control, Filter(new, String[]{, Pat7,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/socket, Server.7"));] [Socket, Appender=new, Socket, Appender("localhost",, Port);] [Socket, Appender.set, Location, Info(true);] [Root, Logger.add, Appender(socket, Appender);] [Ndc.push("some8");] [If(, System.get, Property("java.vendor").index, Of(", Apache")!=-1){, Mdc.put("host, Id","short, Socket, Server");}] [Mdc.put("host, Id","short, Socket, Server");] [Common(", T8","key8",", Mdc-, Test8");] [Ndc.pop();] [Delay(2);] [If(!, System.get, Property("java.version").starts, With("1.1.")){, Control, Filtercf=new, Control, Filter(new, String[]{, Pat8,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5});, Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});assert, True(, Compare.compare(, Filtered,"witness/socket, Server.8"));}] [Control, Filtercf=new, Control, Filter(new, String[]{, Pat8,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/socket, Server.8"));] [Stringold, Thread, Name=, Thread.current, Thread().get, Name()] [Thread.current, Thread().set, Name("main");] [Inti=-1] [Ndc.push(dc);] [Mdc.put(key,o);] [Loggerroot=, Logger.get, Root, Logger()] [Logger.set, Level(, Level., Debug);] [Root, Logger.set, Level(, Level., Debug);] [Logger.log(, X, Level., Trace,", Message "+++i);] [Logger.set, Level(, Level., Trace);] [Root, Logger.set, Level(, Level., Trace);] [Logger.trace(", Message "+++i);] [Root.trace(", Message "+++i);] [Logger.debug(", Message "+++i);] [Root.debug(", Message "+++i);] [Logger.info(", Message "+++i);] [Logger.warn(", Message "+++i);] [Logger.log(, X, Level., Lethal,", Message "+++i);] [Exceptione=new, Exception(", Just testing")] [Logger.debug(", Message "+++i,e);] [Root.error(", Message "+++i,e);] [Ndc.pop();] [Mdc.remove(key);] [Thread.current, Thread().set, Name(old, Thread, Name);] [Try{, Thread.sleep(secs*1000);}catch(, Exceptione){}] [Thread.sleep(secs*1000);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Socket, Server, Test, Case("test1"));] [Suite.add, Test(new, Socket, Server, Test, Case("test2"));] [Suite.add, Test(new, Socket, Server, Test, Case("test3"));] [Suite.add, Test(new, Socket, Server, Test, Case("test4"));] [Suite.add, Test(new, Socket, Server, Test, Case("test5"));] [Suite.add, Test(new, Socket, Server, Test, Case("test6"));] [Suite.add, Test(new, Socket, Server, Test, Case("test7"));] [Suite.add, Test(new, Socket, Server, Test, Case("test8"));] [Returnsuite;]
 [Log, Manager.reset, Configuration();] [Syslog, Appenderappender=new, Syslog, Appender()] [Assert, Equals("user",appender.get, Facility());] [Assert, Equals(false,appender.get, Facility, Printing());] [Assert, Null(appender.get, Layout());] [Assert, Null(appender.get, Syslog, Host());] [Assert, True(appender.requires, Layout());] [Layoutlayout=new, Pattern, Layout()] [Syslog, Appenderappender=new, Syslog, Appender(layout,24)] [Assert, Equals("daemon",appender.get, Facility());] [Assert, Equals(false,appender.get, Facility, Printing());] [Assert, Equals(layout,appender.get, Layout());] [Assert, Null(appender.get, Syslog, Host());] [Assert, True(appender.requires, Layout());] [Layoutlayout=new, Pattern, Layout()] [Syslog, Appenderappender=new, Syslog, Appender(layout,25)] [Assert, Equals("user",appender.get, Facility());] [Assert, Equals(false,appender.get, Facility, Printing());] [Assert, Equals(layout,appender.get, Layout());] [Assert, Null(appender.get, Syslog, Host());] [Assert, True(appender.requires, Layout());] [Layoutlayout=new, Pattern, Layout()] [Syslog, Appenderappender=new, Syslog, Appender(layout,"syslog.example.org",24)] [Assert, Equals("daemon",appender.get, Facility());] [Assert, Equals(false,appender.get, Facility, Printing());] [Assert, Equals(layout,appender.get, Layout());] [Assert, Equals("syslog.example.org",appender.get, Syslog, Host());] [Assert, True(appender.requires, Layout());] [Stringexpected="kern user mail daemon auth syslog lpr news "+"uucp cron authpriv ftp local0 local1 local2 local3 "+"local4 local5 local6 local7 "] [String, Bufferactual=new, String, Buffer()] [For(inti=0;i<=11;i++){actual.append(, Syslog, Appender.get, Facility, String(i<<3));actual.append(' ');}] [Actual.append(, Syslog, Appender.get, Facility, String(i<<3));] [Actual.append(' ');] [For(inti=16;i<=23;i++){actual.append(, Syslog, Appender.get, Facility, String(i<<3));actual.append(' ');}] [Actual.append(, Syslog, Appender.get, Facility, String(i<<3));] [Actual.append(' ');] [Assert, Equals(expected,actual.to, String());] [Assert, Null(, Syslog, Appender.get, Facility, String(1));] [Assert, Null(, Syslog, Appender.get, Facility, String(12<<3));] [Assert, Equals(-1,, Syslog, Appender.get, Facility("bogus"));] [Assert, Equals(-1,, Syslog, Appender.get, Facility(null));] [String[]names=new, String[]{"k, Ern","us, Er",", Ma, Il","daem, On","au, Th","sysl, Og","l, Pr","new, S",", Uucp","cro, N","authpr, Iv","ft, P"}] [For(inti=0;i<=11;i++){assert, Equals(i<<3,, Syslog, Appender.get, Facility(names[i]));}] [Assert, Equals(i<<3,, Syslog, Appender.get, Facility(names[i]));] [String[]names=new, String[]{"l, Ocal0",", Local1","lo, Cal2","loc, Al3","loca, L4","local5",", Lo, Cal6","lo, Cal7"}] [For(inti=0;i<=7;i++){assert, Equals((16+i)<<3,, Syslog, Appender.get, Facility(names[i]));}] [Assert, Equals((16+i)<<3,, Syslog, Appender.get, Facility(names[i]));] [Syslog, Appenderappender=new, Syslog, Appender()] [Assert, False(appender.get, Facility, Printing());] [Appender.set, Facility, Printing(true);] [Assert, True(appender.get, Facility, Printing());] [Appender.set, Facility, Printing(false);] [Assert, False(appender.get, Facility, Printing());] [Assert, Equals(0<<3,, Syslog, Appender., Log, Kern);] [Assert, Equals(1<<3,, Syslog, Appender., Log, User);] [Assert, Equals(2<<3,, Syslog, Appender., Log, Mail);] [Assert, Equals(3<<3,, Syslog, Appender., Log, Daemon);] [Assert, Equals(4<<3,, Syslog, Appender., Log, Auth);] [Assert, Equals(5<<3,, Syslog, Appender., Log, Syslog);] [Assert, Equals(6<<3,, Syslog, Appender., Log, Lpr);] [Assert, Equals(7<<3,, Syslog, Appender., Log, News);] [Assert, Equals(8<<3,, Syslog, Appender., Log, Uucp);] [Assert, Equals(9<<3,, Syslog, Appender., Log, Cron);] [Assert, Equals(10<<3,, Syslog, Appender., Log, Authpriv);] [Assert, Equals(11<<3,, Syslog, Appender., Log, Ftp);] [Assert, Equals(16<<3,, Syslog, Appender., Log, Local0);] [Assert, Equals(17<<3,, Syslog, Appender., Log, Local1);] [Assert, Equals(18<<3,, Syslog, Appender., Log, Local2);] [Assert, Equals(19<<3,, Syslog, Appender., Log, Local3);] [Assert, Equals(20<<3,, Syslog, Appender., Log, Local4);] [Assert, Equals(21<<3,, Syslog, Appender., Log, Local5);] [Assert, Equals(22<<3,, Syslog, Appender., Log, Local6);] [Assert, Equals(23<<3,, Syslog, Appender., Log, Local7);] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Facility("kern");] [Appender.set, Facility(null);] [Assert, Equals("kern",appender.get, Facility());] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Facility("kern");] [Appender.set, Facility(null);] [Assert, Equals("kern",appender.get, Facility());] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Facility("kern");] [Appender.set, Facility("bogus");] [Assert, Equals("user",appender.get, Facility());] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Name("foo");] [Appender.set, Threshold(, Level., Info);] [Appender.set, Syslog, Host("localhost");] [Appender.set, Facility("user");] [Appender.set, Layout(new, Pattern, Layout("%m%n"));] [Vector, Error, Handlererror, Handler=new, Vector, Error, Handler()] [Appender.set, Error, Handler(error, Handler);] [Appender.activate, Options();] [Appender.set, Facility("kern");] [Assert, Equals("kern",appender.get, Facility());] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Threshold(, Level., Error);] [Appender.activate, Options();] [Loggerlogger=, Logger.get, Root, Logger()] [Logger.add, Appender(appender);] [Logger.info(", Should not be logged by , Syslog, Appender, Test.test, Append, Below, Threshold.");] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Name("foo");] [Appender.set, Threshold(, Level., Info);] [Vector, Error, Handlererror, Handler=new, Vector, Error, Handler()] [Appender.set, Error, Handler(error, Handler);] [Appender.set, Layout(new, Pattern, Layout("%m%n"));] [Appender.activate, Options();] [Loggerlogger=, Logger.get, Root, Logger()] [Logger.add, Appender(appender);] [Logger.info(", Should not be logged by , Syslog, Appender, Test.test, Append, No, Host.");] [Assert, Equals(1,error, Handler.size());] [Assert, Equals(", No syslog host is set for , Syslog, Appedender named \"foo\".",error, Handler.get, Message(0));] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Name("foo");] [Appender.set, Threshold(, Level., Info);] [Appender.set, Syslog, Host("localhost");] [Appender.set, Facility("user");] [Appender.set, Layout(new, Pattern, Layout("%m%n"));] [Vector, Error, Handlererror, Handler=new, Vector, Error, Handler()] [Appender.set, Error, Handler(error, Handler);] [Appender.activate, Options();] [Async, Appenderasync, Appender=new, Async, Appender()] [Async, Appender.add, Appender(appender);] [Async, Appender.activate, Options();] [Loggerlogger=, Logger.get, Root, Logger()] [Logger.add, Appender(async, Appender);] [Exceptione=new, Exception(", Expected exception from , Syslog, Appender, Test.test, Append")] [Logger.info(", Expected message from log4j unit test , Syslog, Appender, Test.test, Append.",e);] [Assert, Equals(0,error, Handler.size());] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Syslog, Host("::1");] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Syslog, Host("[::1]");] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Syslog, Host("[::1]:1514");] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Syslog, Host("localhost:1514");] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Syslog, Host("127.0.0.1:1514");] [Datagram, Socketds=new, Datagram, Socket()] [Ds.set, So, Timeout(2000);] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Syslog, Host("localhost:"+ds.get, Local, Port());] [Appender.set, Name("name");] [Appender.set, Header(header);] [Pattern, Layoutpl=new, Pattern, Layout("%m")] [Appender.set, Layout(pl);] [Appender.activate, Options();] [Loggerl=, Logger.get, Root, Logger()] [L.add, Appender(appender);] [If(ex==null){l.info(msg);}else{l.error(msg,ex);}] [L.info(msg);] [L.error(msg,ex);] [Appender.close();] [String[]retval=new, String[packets]] [Byte[]buf=newbyte[1000]] [For(inti=0;i<packets;i++){, Datagram, Packetp=new, Datagram, Packet(buf,0,buf.length);ds.receive(p);retval[i]=new, String(p.get, Data(),0,p.get, Length());}] [Datagram, Packetp=new, Datagram, Packet(buf,0,buf.length)] [Ds.receive(p);] [Retval[i]=new, String(p.get, Data(),0,p.get, Length());] [Ds.close();] [Returnretval;] [Strings=log(false,"greetings",null,1)[0]] [String, Tokenizerst=new, String, Tokenizer(s,"<>() ")] [Assert, Equals("14",st.next, Token());] [Assert, Equals("greetings",st.next, Token());] [W.println(", Mishandled stack trace follows:");] [W.println("");] [W.println(", No tab here");] [W.println("\ttab here");] [W.println("\t");]
 [String[]s=log(false,"greetings",new, Mishandled, Exception(),6)] [String, Tokenizerst=new, String, Tokenizer(s[0],"<>() ")] [Assert, Equals("11",st.next, Token());] [Assert, Equals("greetings",st.next, Token());] [Assert, Equals("<11>, Mishandled stack trace follows:",s[1]);] [Assert, Equals("<11>",s[2]);] [Assert, Equals("<11>, No tab here",s[3]);] [Assert, Equals("<11>"+, Syslog, Appender., Tab+"tab here",s[4]);] [Assert, Equals("<11>"+, Syslog, Appender., Tab,s[5]);] [Datepre, Date=new, Date()] [Strings=log(true,"greetings",null,1)[0]] [Datepost, Date=new, Date()] [Assert, Equals("<14>",s.substring(0,4));] [Stringsyslog, Date, Str=s.substring(4,20)] [Simple, Date, Formatfmt=new, Simple, Date, Format(", Mmm dd , Hh:mm:ss ",, Locale., English)] [Datesyslog, Date=fmt.parse(syslog, Date, Str)] [Calendarcal=, Calendar.get, Instance(, Locale., English)] [Cal.set, Time(syslog, Date);] [Intsyslog, Month=cal.get(, Calendar., Month)] [Intsyslog, Day=cal.get(, Calendar., Date)] [If(syslog, Day<10){assert, Equals(' ',syslog, Date, Str.char, At(4));}] [Assert, Equals(' ',syslog, Date, Str.char, At(4));] [Cal.set, Time(pre, Date);] [Intpre, Month=cal.get(, Calendar., Month)] [Cal.set(, Calendar., Millisecond,0);] [Pre, Date=cal.get, Time();] [Intsyslog, Year] [If(pre, Month==syslog, Month){syslog, Year=cal.get(, Calendar., Year);}else{cal.set, Time(post, Date);syslog, Year=cal.get(, Calendar., Year);}] [Syslog, Year=cal.get(, Calendar., Year);] [Cal.set, Time(post, Date);] [Syslog, Year=cal.get(, Calendar., Year);] [Cal.set, Time(syslog, Date);] [Cal.set(, Calendar., Year,syslog, Year);] [Syslog, Date=cal.get, Time();] [Assert, True(syslog, Date.compare, To(pre, Date)>=0);] [Assert, True(syslog, Date.compare, To(post, Date)<=0);] [Datagram, Socketds=new, Datagram, Socket()] [Ds.set, So, Timeout(2000);] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Syslog, Host("localhost:"+ds.get, Local, Port());] [Appender.set, Name("name");] [Appender.set, Header(false);] [Html, Layoutpl=new, Html, Layout()] [Appender.set, Layout(pl);] [Appender.activate, Options();] [Loggerl=, Logger.get, Root, Logger()] [L.add, Appender(appender);] [L.info(", Hello, , World");] [Appender.close();] [String[]s=new, String[3]] [Byte[]buf=newbyte[1000]] [For(inti=0;i<3;i++){, Datagram, Packetp=new, Datagram, Packet(buf,0,buf.length);ds.receive(p);s[i]=new, String(p.get, Data(),0,p.get, Length());}] [Datagram, Packetp=new, Datagram, Packet(buf,0,buf.length)] [Ds.receive(p);] [S[i]=new, String(p.get, Data(),0,p.get, Length());] [Ds.close();] [Assert, Equals("<14><!, Doctype",s[0].substring(0,13));] [Assert, Equals("<14></table>",s[2].substring(0,12));] [Datagram, Socketds=new, Datagram, Socket()] [Ds.set, So, Timeout(2000);] [Syslog, Appenderappender=new, Syslog, Appender()] [Appender.set, Syslog, Host("localhost:"+ds.get, Local, Port());] [Appender.set, Name("name");] [Appender.set, Header(false);] [Pattern, Layoutpl=new, Pattern, Layout("%m")] [Appender.set, Layout(pl);] [Appender.activate, Options();] [Loggerl=, Logger.get, Root, Logger()] [L.add, Appender(appender);] [String, Buffermsgbuf=new, String, Buffer()] [While(msgbuf.length()<8000){msgbuf.append("0123456789");}] [Msgbuf.append("0123456789");] [Stringmsg=msgbuf.to, String()] [L.info(msg);] [Appender.close();] [String[]s=new, String[8]] [Byte[]buf=newbyte[1200]] [For(inti=0;i<8;i++){, Datagram, Packetp=new, Datagram, Packet(buf,0,buf.length);ds.receive(p);assert, True(p.get, Length()<=1024);s[i]=new, String(p.get, Data(),0,p.get, Length());}] [Datagram, Packetp=new, Datagram, Packet(buf,0,buf.length)] [Ds.receive(p);] [Assert, True(p.get, Length()<=1024);] [S[i]=new, String(p.get, Data(),0,p.get, Length());] [Ds.close();] [String, Bufferrcvbuf=new, String, Buffer(s[0])] [Rcvbuf.delete(0,4);] [For(inti=1;i<8;i++){rcvbuf.set, Length(rcvbuf.length()-3);rcvbuf.append(s[i].substring(s[i].index, Of("...")+3));}] [Rcvbuf.set, Length(rcvbuf.length()-3);] [Rcvbuf.append(s[i].substring(s[i].index, Of("...")+3));] [Assert, Equals(msg.length(),rcvbuf.length());] [Assert, Equals(msg,rcvbuf.to, String());]
 [Try{, Sockets=new, Socket("localhost",port);, Input, Streami=s.get, Input, Stream();while(!, Thread.interrupted()){intc=i.read();if(c==-1)break;bo.write(c);}s.close();}catch(, Io, Exceptione){e.print, Stack, Trace();}] [Sockets=new, Socket("localhost",port)] [Input, Streami=s.get, Input, Stream()] [While(!, Thread.interrupted()){intc=i.read();if(c==-1)break;bo.write(c);}] [Intc=i.read()] [If(c==-1)break;] [Bo.write(c);] [S.close();] [E.print, Stack, Trace();]
 [Intold, Active=, Thread.active, Count()] [Telnet, Appenderta=new, Telnet, Appender()] [Ta.set, Name("ta");] [Ta.set, Port(port);] [Ta.set, Layout(new, Pattern, Layout("%p - %m"));] [Ta.activate, Options();] [Loggerl=, Logger.get, Logger("x")] [L.add, Appender(ta);] [Threadt=new, Read, Thread()] [T.start();] [Thread.sleep(200);] [L.info("hi");] [Thread.sleep(1000);] [Ta.close();] [Thread.sleep(200);] [T.interrupt();] [T.join();] [Strings=bo.to, String()] [Assert, True(s.ends, With(", Info - hi"));] [If(, System.get, Property("java.vendor").index, Of(", Free")==-1){assert, Equals(old, Active,, Thread.active, Count());}] [Assert, Equals(old, Active,, Thread.active, Count());]
 [Log, Manager.shutdown();] [Basic, Configurator.configure(new, Nt, Event, Log, Appender());] [Loggerlogger=, Logger.get, Logger("org.apache.log4j.nt., Nt, Event, Log, Appender, Test")] [Inti=0] [Logger.debug(", Message "+i++);] [Logger.info(", Message "+i++);] [Logger.warn(", Message "+i++);] [Logger.error(", Message "+i++);] [Logger.log(, Level., Fatal,", Message "+i++);] [Logger.debug(", Message "+i++,new, Exception(", Just testing."));]
 [Renderer, Mapmap=new, Renderer, Map()] [Object, Rendererdr=map.get, Default, Renderer()] [Object, Rendererr=map.get(, Integer.class)] [Assert, Equals(r,dr);] [Renderer, Mapmap=new, Renderer, Map()] [Map.put(, Integer.class,ior);] [Object, Rendererr=map.get(, Integer.class)] [Assert, Equals(r,ior);] [Renderer, Mapmap=new, Renderer, Map()] [Map.put(, Number.class,ior);] [Object, Rendererr=map.get(, Integer.class)] [Assert, Equals(r,ior);] [Renderer, Mapmap=new, Renderer, Map()] [Map.put(, Object.class,oor);] [Object, Rendererr=map.get(, Integer.class)] [Assert, Equals(r,oor);] [Renderer, Mapmap=new, Renderer, Map()] [Map.put(, Object.class,oor);] [Map.put(, Number.class,nor);] [Map.put(, Integer.class,ior);] [Object, Rendererr=map.get(, Integer.class)] [Assert, Equals(r,ior);] [Renderer, Mapmap=new, Renderer, Map()] [Map.put(, Object.class,oor);] [Map.put(, Number.class,nor);] [Object, Rendererr=map.get(, Integer.class)] [Assert, Equals(r,nor);] [Renderer, Mapmap=new, Renderer, Map()] [Classcomparable=null] [Try{comparable=, Class.for, Name("java.lang., Comparable");}catch(, Exceptionex){return;}] [Comparable=, Class.for, Name("java.lang., Comparable");] [Return;] [Map.put(comparable,cor);] [Object, Rendererr=map.get(, Integer.class)] [Assert, Equals(r,cor);] [Renderer, Mapmap=new, Renderer, Map()] [Map.put(, Serializable.class,sor);] [Object, Rendererr=map.get(, Integer.class)] [Assert, Equals(r,sor);] [Renderer, Mapmap=new, Renderer, Map()] [Map.put(, Y.class,yor);] [Object, Rendererr=map.get(, B.class)] [Assert, Equals(r,yor);] [Renderer, Mapmap=new, Renderer, Map()] [Map.put(, X.class,xor);] [Object, Rendererr=map.get(, B.class)] [Assert, Equals(r,xor);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Or, Test, Case("test1"));] [Suite.add, Test(new, Or, Test, Case("test2"));] [Suite.add, Test(new, Or, Test, Case("test3"));] [Suite.add, Test(new, Or, Test, Case("test4"));] [Suite.add, Test(new, Or, Test, Case("test5"));] [Suite.add, Test(new, Or, Test, Case("test6"));] [Suite.add, Test(new, Or, Test, Case("test7"));] [Suite.add, Test(new, Or, Test, Case("test8"));] [Suite.add, Test(new, Or, Test, Case("test9"));] [Suite.add, Test(new, Or, Test, Case("test10"));] [Returnsuite;]
 [This.name=name;] [Returnname;] [Return(", Ut, Object, Renderer: "+name);]
@
@
 [Date, Formatdf=new, Simple, Date, Format(", Hh:mm:ss,, Sss")] [Df.set, Time, Zone(time, Zone);] [Returndf;] [Date, Formatgmt, Format=new, Cached, Date, Format(create, Absolute, Time, Date, Format(, Gmt),1000)] [Longticks=12601, L*86400000, L] [Datejul1=new, Date(ticks)] [Assert, Equals("00:00:00,000",gmt, Format.format(jul1));] [Dateplus8ms=new, Date(ticks+8)] [Assert, Equals("00:00:00,008",gmt, Format.format(plus8ms));] [Dateplus17ms=new, Date(ticks+17)] [Assert, Equals("00:00:00,017",gmt, Format.format(plus17ms));] [Dateplus237ms=new, Date(ticks+237)] [Assert, Equals("00:00:00,237",gmt, Format.format(plus237ms));] [Dateplus1415ms=new, Date(ticks+1415)] [Assert, Equals("00:00:01,415",gmt, Format.format(plus1415ms));] [Datejul2=new, Date(12602, L*86400000, L)] [Date, Formatgmt, Format=new, Cached, Date, Format(create, Absolute, Time, Date, Format(, Gmt),1000)] [Date, Formatchicago, Format=new, Cached, Date, Format(create, Absolute, Time, Date, Format(, Chicago),1000)] [Assert, Equals("00:00:00,000",gmt, Format.format(jul2));] [Assert, Equals("19:00:00,000",chicago, Format.format(jul2));] [Assert, Equals("00:00:00,000",gmt, Format.format(jul2));] [Date, Formatgmt, Format=new, Cached, Date, Format(create, Absolute, Time, Date, Format(, Gmt),1000)] [Longticks=-7, L*86400000, L] [Datejul1=new, Date(ticks+8)] [Assert, Equals("00:00:00,008",gmt, Format.format(jul1));] [Dateplus8ms=new, Date(ticks+16)] [Assert, Equals("00:00:00,016",gmt, Format.format(plus8ms));] [Dateplus17ms=new, Date(ticks+23)] [Assert, Equals("00:00:00,023",gmt, Format.format(plus17ms));] [Dateplus237ms=new, Date(ticks+245)] [Assert, Equals("00:00:00,245",gmt, Format.format(plus237ms));] [Dateplus1415ms=new, Date(ticks+1423)] [Assert, Equals("00:00:01,423",gmt, Format.format(plus1415ms));] [Simple, Date, Formatbase, Format=new, Simple, Date, Format(", Eee, , Mmm dd, , Hh:mm:ss., Sss z",, Locale., English)] [Date, Formatcached, Format=new, Cached, Date, Format(base, Format,1000)] [Longticks=11141, L*86400000, L] [Datejul1=new, Date(ticks)] [Assert, Equals(base, Format.format(jul1),cached, Format.format(jul1));] [Dateplus8ms=new, Date(ticks+8)] [Base, Format.format(plus8ms);] [Cached, Format.format(plus8ms);] [Assert, Equals(base, Format.format(plus8ms),cached, Format.format(plus8ms));] [Dateplus17ms=new, Date(ticks+17)] [Assert, Equals(base, Format.format(plus17ms),cached, Format.format(plus17ms));] [Dateplus237ms=new, Date(ticks+237)] [Assert, Equals(base, Format.format(plus237ms),cached, Format.format(plus237ms));] [Dateplus1415ms=new, Date(ticks+1415)] [Assert, Equals(base, Format.format(plus1415ms),cached, Format.format(plus1415ms));] [Localethai=new, Locale("th",", Th")] [Simple, Date, Formatbase, Format=new, Simple, Date, Format(", Eee, , Mmm dd, , Hh:mm:ss., Sss z",thai)] [Date, Formatcached, Format=new, Cached, Date, Format(base, Format,1000)] [Longticks=11141, L*86400000, L] [Stringsx] [Datejul1=new, Date(ticks)] [Sx=cached, Format.format(jul1);] [System.out.println(base, Format.format(jul1));] [System.out.println(sx);] [Assert, Equals(base, Format.format(jul1),sx);] [Sx=cached, Format.format(jul1);] [System.out.println(base, Format.format(jul1));] [System.out.println(sx);] [Assert, Equals(base, Format.format(jul1),sx);] [Dateplus8ms=new, Date(ticks+8)] [Sx=cached, Format.format(plus8ms);] [System.out.println(base, Format.format(plus8ms));] [System.out.println(sx);] [Assert, Equals(base, Format.format(plus8ms),sx);] [Dateplus17ms=new, Date(ticks+17)] [Assert, Equals(base, Format.format(plus17ms),cached, Format.format(plus17ms));] [Dateplus237ms=new, Date(ticks+237)] [Assert, Equals(base, Format.format(plus237ms),cached, Format.format(plus237ms));] [Dateplus1415ms=new, Date(ticks+1415)] [Assert, Equals(base, Format.format(plus1415ms),cached, Format.format(plus1415ms));] [Assert, Not, Null(new, Cached, Date, Format(new, Simple, Date, Format(),1000).get, Number, Format());] [Date, Formatbase, Format=new, Simple, Date, Format("yyyy-, Mm-dd , Hh:mm:ss,, Sss")] [Base, Format.set, Time, Zone(, Gmt);] [Date, Formatcached, Format=new, Cached, Date, Format(base, Format,1000)] [Datejul4=new, Date(12603, L*86400000, L)] [Assert, Equals("2004-07-04 00:00:00,000",cached, Format.format(jul4));] [Cached, Format.set, Time, Zone(, Time, Zone.get, Time, Zone(", Gmt-6"));] [Assert, Equals("2004-07-03 18:00:00,000",cached, Format.format(jul4));] [Date, Formatbase, Format=new, Simple, Date, Format("yyyy-, Mmmm-dd , Hh:mm:ss,, Ss z",, Locale., Us)] [Date, Formatcached, Format=new, Cached, Date, Format(base, Format,1000)] [Time, Zonecet=, Time, Zone.get, Time, Zone(", Gmt+1")] [Cached, Format.set, Time, Zone(cet);] [Calendarc=, Calendar.get, Instance()] [C.set(2004,, Calendar., December,12,20,0);] [C.set(, Calendar., Second,37);] [C.set(, Calendar., Millisecond,23);] [C.set, Time, Zone(cet);] [Stringexpected=base, Format.format(c.get, Time())] [Strings=cached, Format.format(c.get, Time())] [Assert, Equals(expected,s);] [C.set(2005,, Calendar., January,1,0,0);] [C.set(, Calendar., Second,13);] [C.set(, Calendar., Millisecond,905);] [Expected=base, Format.format(c.get, Time());] [S=cached, Format.format(c.get, Time());] [Assert, Equals(expected,s);] [Date, Formatbase, Format=new, Simple, Date, Format(", Mmmm , Sss , Eeeeee",, Locale., Us)] [Date, Formatcached, Format=new, Cached, Date, Format(base, Format,1000)] [Time, Zonecet=, Time, Zone.get, Time, Zone(", Gmt+1")] [Cached, Format.set, Time, Zone(cet);] [Calendarc=, Calendar.get, Instance()] [C.set(2004,, Calendar., October,5,20,0);] [C.set(, Calendar., Second,37);] [C.set(, Calendar., Millisecond,23);] [C.set, Time, Zone(cet);] [Stringexpected=base, Format.format(c.get, Time())] [Strings=cached, Format.format(c.get, Time())] [Assert, Equals(expected,s);] [C.set(2004,, Calendar., November,1,0,0);] [C.set(, Calendar., Millisecond,23);] [Expected=base, Format.format(c.get, Time());] [S=cached, Format.format(c.get, Time());] [Assert, Equals(expected,s);] [C.set(, Calendar., Millisecond,984);] [Expected=base, Format.format(c.get, Time());] [S=cached, Format.format(c.get, Time());] [Assert, Equals(expected,s);] [Stringbad, Pattern="ss,, Ss0"] [Simple, Date, Formatsimple, Format=new, Simple, Date, Format(bad, Pattern)] [Simple, Date, Formatbase, Format=new, Simple, Date, Format(bad, Pattern)] [Date, Formatgmt, Format=new, Cached, Date, Format(simple, Format,1000)] [Gmt, Format.set, Time, Zone(, Gmt);] [Base, Format.set, Time, Zone(, Gmt);] [Longticks=11142, L*86400000, L] [Datejul2=new, Date(ticks+120)] [Stringexpected=base, Format.format(jul2)] [Assert, Equals(expected,gmt, Format.format(jul2));] [Jul2.set, Time(ticks+87);] [Expected=base, Format.format(jul2);] [Assert, Equals(expected,gmt, Format.format(jul2));] [Simple, Date, Formatdf=new, Simple, Date, Format("yyyy-, Mm-dd , Hh:mm:ss,, Sss")] [Longticks=11142, L*86400000, L] [Stringformatted=df.format(new, Date(ticks))] [Intmillisecond, Start=, Cached, Date, Format.find, Millisecond, Start(ticks,formatted,df)] [Assert, Equals(20,millisecond, Start);] [Simple, Date, Formatdf=new, Simple, Date, Format("yyyy-, Mm-dd")] [Longticks=11142, L*86400000, L] [Stringformatted=df.format(new, Date(ticks))] [Intmillisecond, Start=, Cached, Date, Format.find, Millisecond, Start(ticks,formatted,df)] [Assert, Equals(, Cached, Date, Format., No, Milliseconds,millisecond, Start);] [Simple, Date, Formatdf=new, Simple, Date, Format(", Hh:mm:ss,, Sss")] [Longticks=11142, L*86400000, L] [Stringformatted=df.format(new, Date(ticks))] [Intmillisecond, Start=, Cached, Date, Format.find, Millisecond, Start(ticks,formatted,df)] [Assert, Equals(9,millisecond, Start);] [Simple, Date, Formatdf=new, Simple, Date, Format(", Hh:mm:ss,, S")] [Longticks=11142, L*86400000, L] [Stringformatted=df.format(new, Date(ticks))] [Intmillisecond, Start=, Cached, Date, Format.find, Millisecond, Start(ticks,formatted,df)] [Assert, Equals(, Cached, Date, Format., Unrecognized, Milliseconds,millisecond, Start);] [Simple, Date, Formatdf=new, Simple, Date, Format(", Hh:mm:ss,, Ss")] [Longticks=11142, L*86400000, L] [Stringformatted=df.format(new, Date(ticks))] [Intmillisecond, Start=, Cached, Date, Format.find, Millisecond, Start(ticks,formatted,df)] [Assert, Equals(, Cached, Date, Format., Unrecognized, Milliseconds,millisecond, Start);] [Datejul2=new, Date(12602, L*86400000, L)] [Stringbad, Pattern=", Hh:mm:ss,, Sss , Hh:mm:ss,, Sss"] [Simple, Date, Formatsimple, Format=new, Simple, Date, Format(bad, Pattern)] [Simple, Format.set, Time, Zone(, Gmt);] [Date, Formatcached, Format=new, Cached, Date, Format(simple, Format,1000)] [Strings=cached, Format.format(jul2)] [Assert, Equals("00:00:00,000 00:00:00,000",s);] [Jul2.set, Time(jul2.get, Time()+120);] [Assert, Equals("00:00:00,120 00:00:00,120",simple, Format.format(jul2));] [S=cached, Format.format(jul2);] [Intmax, Valid=, Cached, Date, Format.get, Maximum, Cache, Validity(bad, Pattern)] [Assert, Equals(1,max, Valid);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Cached, Date, Format, Test("test5"));] [Returnsuite;]
 [Formatting, Infofield=, Formatting, Info.get, Default()] [Assert, Not, Null(field);] [Assert, Equals(0,field.get, Min, Length());] [Assert, Equals(, Integer., Max, Value,field.get, Max, Length());] [Assert, Equals(false,field.is, Left, Aligned());] [Formatting, Infofield=new, Formatting, Info(true,3,6)] [Assert, Not, Null(field);] [Assert, Equals(3,field.get, Min, Length());] [Assert, Equals(6,field.get, Max, Length());] [Assert, Equals(true,field.is, Left, Aligned());] [String, Bufferbuf=new, String, Buffer("foobar")] [Formatting, Infofield=new, Formatting, Info(true,0,3)] [Field.format(2,buf);] [Assert, Equals("fobar",buf.to, String());] [String, Bufferbuf=new, String, Buffer("foobar")] [Formatting, Infofield=new, Formatting, Info(false,5,10)] [Field.format(2,buf);] [Assert, Equals("fo obar",buf.to, String());] [String, Bufferbuf=new, String, Buffer("foobar")] [Formatting, Infofield=new, Formatting, Info(true,5,10)] [Field.format(2,buf);] [Assert, Equals("foobar ",buf.to, String());]
 [Name, Abbreviatorabbrev=, Name, Abbreviator.get, Default, Abbreviator()] [Assert, Not, Null(abbrev);] [Name, Abbreviatorabbrev=, Name, Abbreviator.get, Abbreviator("0")] [String, Bufferbuf=new, String, Buffer(", Debug - ")] [Intfield, Start=buf.length()] [Buf.append("org.example.foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - ",buf.to, String());] [Name, Abbreviatorabbrev=, Name, Abbreviator.get, Abbreviator("   ")] [Name, Abbreviatordefault, Abbrev=, Name, Abbreviator.get, Default, Abbreviator()] [Assert, True(abbrev==default, Abbrev);] [Name, Abbreviatorabbrev=, Name, Abbreviator.get, Abbreviator("1")] [String, Bufferbuf=new, String, Buffer(", Debug - ")] [Intfield, Start=buf.length()] [Buf.append("org.example.foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - ",buf.to, String());] [Name, Abbreviatorabbrev=, Name, Abbreviator.get, Abbreviator(" 1 ")] [String, Bufferbuf=new, String, Buffer(", Debug - ")] [Intfield, Start=buf.length()] [Buf.append("org.example.foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - ",buf.to, String());] [Name, Abbreviatorabbrev=, Name, Abbreviator.get, Abbreviator("2")] [String, Bufferbuf=new, String, Buffer(", Debug - ")] [Intfield, Start=buf.length()] [Buf.append("org.example.foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - foo.bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - foo.bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - bar",buf.to, String());] [Name, Abbreviatorabbrev=, Name, Abbreviator.get, Abbreviator("1.")] [String, Bufferbuf=new, String, Buffer(", Debug - ")] [Intfield, Start=buf.length()] [Buf.append("org.example.foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - o.e.f.bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("org.example.foo.");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - o.e.f.",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - f.bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - ",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append(".");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - .",buf.to, String());] [Name, Abbreviatorabbrev=, Name, Abbreviator.get, Abbreviator("1~.")] [String, Bufferbuf=new, String, Buffer(", Debug - ")] [Intfield, Start=buf.length()] [Buf.append("org.example.foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - o~.e~.f~.bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("org.example.foo.");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - o~.e~.f~.",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - f~.bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - ",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append(".");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - .",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("o.e.f.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - o.e.f.bar",buf.to, String());] [Name, Abbreviatorabbrev=, Name, Abbreviator.get, Abbreviator("1.*.2")] [String, Bufferbuf=new, String, Buffer(", Debug - ")] [Intfield, Start=buf.length()] [Buf.append("org.example.foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - o.example.fo.bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("org.example.foo.");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - o.example.fo.",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - f.bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - ",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append(".");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - .",buf.to, String());] [Name, Abbreviatorabbrev=, Name, Abbreviator.get, Abbreviator("-1")] [String, Bufferbuf=new, String, Buffer(", Debug - ")] [Intfield, Start=buf.length()] [Buf.append("org.example.foo.bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - example.foo.bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append("bar");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - bar",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - ",buf.to, String());] [Buf.set, Length(0);] [Buf.append(", Debug - ");] [Field, Start=buf.length();] [Buf.append(".");] [Abbrev.abbreviate(field, Start,buf);] [Assert, Equals(", Debug - ",buf.to, String());]
 [Return, Instance;] [To, Append, To.append("343");]
 [Event=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Info,"msg 1",null);] [Listconverters=new, Array, List()] [Listfields=new, Array, List()] [Pattern, Parser.parse(pattern,converters,fields,registry,, Pattern, Parser.get, Pattern, Layout, Rules());] [Assert, Equals(converters.size(),fields.size());] [String, Bufferbuf=new, String, Buffer()] [Iteratorconverter, Iter=converters.iterator()] [Iteratorfield, Iter=fields.iterator()] [While(converter, Iter.has, Next()){intfield, Start=buf.length();((, Pattern, Converter)converter, Iter.next()).format(event,buf);((, Formatting, Info)field, Iter.next()).format(field, Start,buf);}] [Intfield, Start=buf.length()] [((, Pattern, Converter)converter, Iter.next()).format(event,buf);] [((, Formatting, Info)field, Iter.next()).format(field, Start,buf);] [Returnbuf.to, String();] [Hash, Maprule, Registry=new, Hash, Map(5)] [Rule, Registry.put("z343",, Num343, Pattern, Converter.class.get, Name());] [Stringresult=convert("%z343",rule, Registry,event)] [Assert, Equals("343",result);] [Hash, Maprule, Registry=new, Hash, Map(5)] [Rule, Registry.put("n343",, Num343, Pattern, Converter.class.get, Name());] [Stringresult=convert("%n343",rule, Registry,event)] [Assert, Equals("343",result);] [Stringresult=convert("%, foobar",null,event)] [Assert, Equals("%, foobar",result);] [Stringresult=convert("xyz %, foobar",null,event)] [Assert, Equals("xyz %, foobar",result);] [Stringresult=convert("hello %-5level - %m%n",null,event)] [Assert, Equals("hello , Info  - msg 1"+, Layout., Line, Sep,result);] [Stringresult=convert("%relative %-5level [%thread] %logger - %m%n",null,event)] [Longexpected, Relative, Time=event.time, Stamp-, Logging, Event.get, Start, Time()] [Assert, Equals(expected, Relative, Time+" , Info  [main] "+logger.get, Name()+" - msg 1"+, Layout., Line, Sep,result);] [Stringresult=convert("%d{, Hh:mm:ss}{, Gmt} %d{, Hh:mm:ss} %c  - %m",null,event)] [Simple, Date, Formatdate, Format=new, Simple, Date, Format(", Hh:mm:ss")] [Stringlocal, Time=date, Format.format(new, Date(event.time, Stamp))] [Date, Format.set, Time, Zone(, Time, Zone.get, Time, Zone(", Gmt"));] [Stringutc, Time=date, Format.format(new, Date(event.time, Stamp))] [String, Bufferbuf=new, String, Buffer(utc, Time)] [Buf.append(' ');] [Buf.append(local, Time);] [Buf.append(" org.foobar  - msg 1");] [Assert, Equals(buf.to, String(),result);] [Stringresult=convert("%bogus",null,event)] [Assert, Equals("%bogus",result);] [Stringresult=convert("%more",null,event)] [Assert, Equals("msg 1ore",result);] [Stringresult=convert("foo%m{yyyy., Mm.dd",null,event)] [Assert, Equals("foomsg 1{yyyy., Mm.dd",result);] [Assert, True(rules.size()>0);] [Iteratoriter=rules.values().iterator()] [Class[]factory, Sig=new, Class[]{, Class.for, Name("[, Ljava.lang., String;")}] [Object[]factory, Arg=new, Object[]{null}] [While(iter.has, Next()){, Classrule, Class=(, Class)iter.next();, Methodfactory=rule, Class.get, Method("new, Instance",factory, Sig);, Objectconverter=factory.invoke(null,factory, Arg);assert, True(converter!=null);}] [Classrule, Class=(, Class)iter.next()] [Methodfactory=rule, Class.get, Method("new, Instance",factory, Sig)] [Objectconverter=factory.invoke(null,factory, Arg)] [Assert, True(converter!=null);] [Assert, Factories(, Pattern, Parser.get, Pattern, Layout, Rules());] [Assert, Factories(, Pattern, Parser.get, File, Name, Pattern, Rules());]
 [Returnnew, Pattern, Layout("[%t] %p %c - %m%n");] [Loggerlogger=, Logger.get, Logger("org.apache.log4j., Layout, Test")] [Logging, Eventevent=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Info,", Hello, , World",null)] [Pattern, Layoutlayout=(, Pattern, Layout)create, Layout()] [Stringresult=layout.format(event)] [String, Bufferbuf=new, String, Buffer(100)] [Buf.append('[');] [Buf.append(event.get, Thread, Name());] [Buf.append("] ");] [Buf.append(event.get, Level().to, String());] [Buf.append(' ');] [Buf.append(event.get, Logger, Name());] [Buf.append(" - ");] [Buf.append(event.get, Message());] [Buf.append(, System.get, Property("line.separator"));] [Assert, Equals(buf.to, String(),result);] [Pattern, Layoutlayout=(, Pattern, Layout)create, Layout()] [Assert, Equals("[%t] %p %c - %m%n",layout.get, Conversion, Pattern());] [Assert, Equals("%m%n",, Pattern, Layout., Default, Conversion, Pattern);] [Assert, Equals("%r [%t] %p %c %x - %m%n",, Pattern, Layout., Ttcc, Conversion, Pattern);] [Loggerlogger=, Logger.get, Logger("org.apache.log4j.xml., Pattern, Layout, Test")] [Ndc.clear();] [Char[]msg=newchar[2000]] [For(inti=0;i<msg.length;i++){msg[i]=', A';}] [Msg[i]=', A';] [Logging, Eventevent1=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Debug,new, String(msg),null)] [Pattern, Layoutlayout=(, Pattern, Layout)create, Layout()] [Stringresult=layout.format(event1)] [Logging, Eventevent2=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Warn,", Hello, , World",null)] [Result=layout.format(event2);] [Assert, Equals("[",result.substring(0,1));] [Return, Buf, Size;] [Return, Max, Capacity;]
@
 [Root.get, Logger, Repository().reset, Configuration();] [Property, Configurator.configure("input/pattern, Layout1.properties");] [Common();] [Transformer.transform(, Temp,, Filtered,new, Filter[]{new, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.1"));] [Property, Configurator.configure("input/pattern, Layout2.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat1,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Iso8601, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.2"));] [Property, Configurator.configure("input/pattern, Layout3.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat1,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Iso8601, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.3"));] [Property, Configurator.configure("input/pattern, Layout4.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat2,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Absolute, Date, And, Time, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.4"));] [Property, Configurator.configure("input/pattern, Layout5.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat2,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Absolute, Date, And, Time, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.5"));] [Property, Configurator.configure("input/pattern, Layout6.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat3,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Absolute, Time, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.6"));] [Property, Configurator.configure("input/pattern, Layout7.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat3,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Absolute, Time, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.7"));] [Property, Configurator.configure("input/pattern, Layout8.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat4,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Relative, Time, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.8"));] [Property, Configurator.configure("input/pattern, Layout9.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat5,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.9"));] [Property, Configurator.configure("input/pattern, Layout10.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat6,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.10"));] [Property, Configurator.configure("input/pattern, Layout11.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat11a,, Pat11b,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.11"));] [Property, Configurator.configure("input/pattern, Layout12.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat12,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.12"));] [Property, Configurator.configure("input/pattern, Layout13.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat13,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.13"));] [Property, Configurator.configure("input/pattern, Layout14.properties");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Pat14,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf1,new, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/pattern, Layout.14"));] [Property, Configurator.configure("input/pattern, Layout.mdc.1.properties");] [Mdc.put("key1","va11");] [Mdc.put("key2","va12");] [Logger.debug(", Hello , World");] [Mdc.remove("key1");] [Mdc.remove("key2");] [Assert, True(, Compare.compare(, Temp,"witness/pattern, Layout.mdc.1"));] [Property, Configurator.configure("input/pattern, Layout.mdc.1.properties");] [Mdc.put("key1","va11");] [Mdc.put("key2","va12");] [Logger.debug(", Hello , World");] [Mdc.clear();] [Logger.debug(", Hello , World");] [Assert, True(, Compare.compare(, Temp,"witness/pattern, Layout.mdc.clear"));] [Stringold, Thread, Name=, Thread.current, Thread().get, Name()] [Thread.current, Thread().set, Name("main");] [Inti=-1] [Logger.trace(", Message "+++i);] [Root.trace(", Message "+i);] [Logger.debug(", Message "+++i);] [Root.debug(", Message "+i);] [Logger.info(", Message "+++i);] [Root.info(", Message "+i);] [Logger.warn(", Message "+++i);] [Root.warn(", Message "+i);] [Logger.error(", Message "+++i);] [Root.error(", Message "+i);] [Logger.log(, Level., Fatal,", Message "+++i);] [Root.log(, Level., Fatal,", Message "+i);] [Exceptione=new, Exception(", Just testing")] [Logger.trace(", Message "+++i,e);] [Logger.debug(", Message "+++i,e);] [Logger.info(", Message "+++i,e);] [Logger.warn(", Message "+++i,e);] [Logger.error(", Message "+++i,e);] [Logger.log(, Level., Fatal,", Message "+++i,e);] [Thread.current, Thread().set, Name(old, Thread, Name);]
 [Assert, Equals(, Integer., Max, Value,, Priority., Off, Int);] [Assert, Equals(50000,, Priority., Fatal, Int);] [Assert, Equals(40000,, Priority., Error, Int);] [Assert, Equals(30000,, Priority., Warn, Int);] [Assert, Equals(20000,, Priority., Info, Int);] [Assert, Equals(10000,, Priority., Debug, Int);] [Assert, Equals(, Integer., Min, Value,, Priority., All, Int);] [Assert, True(, Priority., Fata, Linstanceof, Level);] [Assert, True(, Priority., Erro, Rinstanceof, Level);] [Assert, True(, Priority., War, Ninstanceof, Level);] [Assert, True(, Priority., Inf, Oinstanceof, Level);] [Assert, True(, Priority., Debu, Ginstanceof, Level);] [Assert, False(, Priority., Debug.equals(null));] [Assert, True(, Priority., Debug.equals(, Level., Debug));] [Priority[]priorities=, Priority.get, All, Possible, Priorities()] [Assert, Equals(5,priorities.length);] [Assert, True(, Priority.to, Priority(", Debug")==, Level., Debug);] [Assert, True(, Priority.to, Priority(, Priority., Debug, Int)==, Level., Debug);] [Assert, True(, Priority.to, Priority("foo",, Priority., Debug)==, Priority., Debug);] [Assert, True(, Priority.to, Priority(17,, Priority., Debug)==, Priority., Debug);] [Prioritylevel=, Priority.to, Priority("\u0131nfo")] [Assert, Equals(", Info",level.to, String());] [Localedefault, Locale=, Locale.get, Default()] [Localeturkey=new, Locale("tr",", Tr")] [Locale.set, Default(turkey);] [Prioritylevel=, Priority.to, Priority("info")] [Locale.set, Default(default, Locale);] [Assert, Equals(", Info",level.to, String());]
 [Stringfile, Name="output/badescape.properties"] [File, Writerwriter=new, File, Writer(file, Name)] [Writer.write("log4j.root, Logger=\\u, Xx41");] [Writer.close();] [Property, Configurator.configure(file, Name);] [Filefile=new, File(file, Name)] [Assert, True(file.delete());] [Assert, False(file.exists());] [Filefile=new, File("output/unclosed.properties")] [File, Writerwriter=new, File, Writer(file)] [Writer.write("log4j.root, Logger=debug");] [Writer.close();] [Ur, Lurl=file.to, Url()] [Property, Configurator.configure(url);] [Assert, True(file.delete());] [Assert, False(file.exists());] [Filefile=new, File("output/urlbadescape.properties")] [File, Writerwriter=new, File, Writer(file)] [Writer.write("log4j.root, Logger=\\u, Xx41");] [Writer.close();] [Ur, Lurl=file.to, Url()] [Property, Configurator.configure(url);] [Assert, True(file.delete());] [Assert, False(file.exists());] [Filefile=new, File("input/filter1.properties")] [Assert, True(file.exists());] [File, Input, Streaminput, Stream=new, File, Input, Stream(file)] [Try{, Property, Configurator.configure(input, Stream);}finally{input, Stream.close();}] [Property, Configurator.configure(input, Stream);] [Input, Stream.close();] [This.validate, Nested();] [Log, Manager.reset, Configuration();] [Rolling, File, Appenderrfa=(, Rolling, File, Appender), Logger.get, Logger("org.apache.log4j., Property, Configurator, Test").get, Appender(", Rolling")] [Fixed, Window, Rolling, Policyrolling, Policy=(, Fixed, Window, Rolling, Policy)rfa.get, Rolling, Policy()] [Assert, Equals("filter, Base-test1.log",rolling, Policy.get, Active, File, Name());] [Assert, Equals("filter, Based-test1.%i",rolling, Policy.get, File, Name, Pattern());] [Assert, Equals(0,rolling, Policy.get, Min, Index());] [Assert, True(rolling, Policy.is, Activated());] [Filter, Based, Triggering, Policytriggering, Policy=(, Filter, Based, Triggering, Policy)rfa.get, Triggering, Policy()] [Level, Range, Filterfilter=(, Level, Range, Filter)triggering, Policy.get, Filter()] [Assert, True(, Level., Info.equals(filter.get, Level, Min()));] [Filedir=new, File("output")] [Dir.mkdirs();] [Filefile=new, File("output/properties.jar")] [Zip, Output, Streamzos=new, Zip, Output, Stream(new, File, Output, Stream(file))] [Zos.put, Next, Entry(new, Zip, Entry(, Log, Manager., Default, Configuration, File));] [Zos.write("log4j.root, Logger=debug".get, Bytes());] [Zos.close, Entry();] [Zos.close();] [Ur, Lurl=new, Url("jar:"+file.to, Url()+"!/"+, Log, Manager., Default, Configuration, File)] [Property, Configurator.configure(url);] [Assert, True(file.delete());] [Assert, False(file.exists());] [Vector, Appenderappender=new, Vector, Appender()] [Appender.set, Name(", A1");] [Logger.get, Root, Logger().add, Appender(appender);] [Propertiesprops=new, Properties()] [Props.put("log4j.reset","true");] [Property, Configurator.configure(props);] [Assert, Null(, Logger.get, Root, Logger().get, Appender(", A1"));] [Log, Manager.reset, Configuration();] [Activated=true;] [Returnactivated;]
 [Min, Index=-1;] [Returnactive, File, Name;] [Active, File, Name=val;] [Returnfile, Name, Pattern;] [File, Name, Pattern=val;] [Returnmin, Index;] [Min, Index=val;]
 [Activated=true;] [Returnactivated;]
 [Filter=val;] [Returnfilter;]
 [Returnrolling, Policy;] [Rolling, Policy=policy;] [Returntriggering, Policy;] [Triggering, Policy=policy;] [Returnappend;] [Append=val;] [Returntrue;]
 [Try{, Property, Configurator.configure("input/filter1.properties");this.validate, Nested();}finally{, Log, Manager.reset, Configuration();}] [Property, Configurator.configure("input/filter1.properties");] [This.validate, Nested();] [Log, Manager.reset, Configuration();] [Activated=true;] [Returnactivated;] [Returnnew, String[0];] [Show, Version=v;] [Returnshow, Version;]
 [Propertiesprops=new, Properties()] [Props.put("log4j.throwable, Renderer","org.apache.log4j., Property, Configurator, Test$, Mock, Throwable, Renderer");] [Props.put("log4j.throwable, Renderer.show, Version","false");] [Property, Configurator.configure(props);] [Throwable, Renderer, Supportrepo=(, Throwable, Renderer, Support), Log, Manager.get, Logger, Repository()] [Mock, Throwable, Rendererrenderer=(, Mock, Throwable, Renderer)repo.get, Throwable, Renderer()] [Log, Manager.reset, Configuration();] [Assert, Not, Null(renderer);] [Assert, Equals(true,renderer.is, Activated());] [Assert, Equals(false,renderer.get, Show, Version());]
 [Log, Manager.get, Logger, Repository().shutdown();] [Input, Streamis=, Rewrite, Appender, Test.class.get, Resource, As, Stream(resource, Name)] [Document, Builder, Factoryfactory=, Document, Builder, Factory.new, Instance()] [Factory.set, Namespace, Aware(false);] [Document, Builderbuilder=factory.new, Document, Builder()] [Documentdoc=builder.parse(is)] [Dom, Configurator.configure(doc.get, Document, Element());] [Configure("map.xml");] [Loggerlogger=, Logger.get, Logger(, Rewrite, Appender, Test.class)] [Logger.info(", Message 0");] [Mdc.put("p1",", Hola");] [Mapmsg=new, Tree, Map()] [Msg.put("p1",", Hello");] [Msg.put("p2",", World");] [Msg.put("x1",", Mundo");] [Logger.info(msg);] [Msg.put("message",", Message 1");] [Logger.info(msg);] [Assert, True(, Compare.compare(, Rewrite, Appender, Test.class,"temp","map.log"));] [This.p2=p2;] [This.x1=x1;] [Returnp2;] [Returnx1;] [Return", I am bean.";]
 [This.msg=msg;] [Returnmsg;]
 [Configure("reflection.xml");] [Loggerlogger=, Logger.get, Logger(, Rewrite, Appender, Test.class)] [Logger.info(", Message 0");] [Logger.info(new, Base, Bean(", Hello",", World"));] [Mdc.put("p1",", Hola");] [Mdc.put("p2","p2");] [Logger.info(new, Message, Bean(", Welcome to , The , Hub",", Hello",", World"));] [Assert, True(, Compare.compare(, Rewrite, Appender, Test.class,"temp","reflection.log"));] [Configure("property.xml");] [Loggerlogger=, Logger.get, Logger(, Rewrite, Appender, Test.class)] [Logger.info(", Message 0");] [Mdc.put("p1",", Hola");] [Logger.info(", Message 1");] [Assert, True(, Compare.compare(, Rewrite, Appender, Test.class,"temp","property.log"));]
 [Log, Manager.reset, Configuration();] [Loggerlogger=, Logger.get, Logger(, Rfa, Test, Case.class)] [Property, Configurator.configure("input/, Rfa1.properties");] [For(inti=0;i<25;i++){if(i<10){logger.debug(", Hello---"+i);}elseif(i<100){logger.debug(", Hello--"+i);}}] [If(i<10){logger.debug(", Hello---"+i);}elseif(i<100){logger.debug(", Hello--"+i);}] [Logger.debug(", Hello---"+i);] [Logger.debug(", Hello--"+i);] [Assert, True(new, File("output/, Rfa-test1.log").exists());] [Assert, True(new, File("output/, Rfa-test1.log.1").exists());] [Loggerlogger=, Logger.get, Logger(, Rfa, Test, Case.class)] [Loggerroot=, Logger.get, Root, Logger()] [Pattern, Layoutlayout=new, Pattern, Layout("%m\n")] [Org.apache.log4j., Rolling, File, Appenderrfa=neworg.apache.log4j., Rolling, File, Appender()] [Rfa.set, Name(", Rolling");] [Rfa.set, Layout(layout);] [Rfa.set, Append(false);] [Rfa.set, Max, Backup, Index(3);] [Rfa.set, Maximum, File, Size(100);] [Rfa.set, File("output/, Rfa-test2.log");] [Rfa.activate, Options();] [Root.add, Appender(rfa);] [For(inti=0;i<55;i++){if(i<10){logger.debug(", Hello---"+i);}elseif(i<100){logger.debug(", Hello--"+i);}}] [If(i<10){logger.debug(", Hello---"+i);}elseif(i<100){logger.debug(", Hello--"+i);}] [Logger.debug(", Hello---"+i);] [Logger.debug(", Hello--"+i);] [Assert, True(new, File("output/, Rfa-test2.log").exists());] [Assert, True(new, File("output/, Rfa-test2.log.1").exists());] [Assert, True(new, File("output/, Rfa-test2.log.2").exists());] [Assert, True(new, File("output/, Rfa-test2.log.3").exists());] [Assert, False(new, File("output/, Rfa-test2.log.4").exists());] [Simple, Layoutlayout=new, Simple, Layout()] [Rolling, File, Appenderappender=new, Rolling, File, Appender(layout,"output/rfa2param.log")] [Assert, Equals(1,appender.get, Max, Backup, Index());] [Assert, Equals(10*1024*1024,appender.get, Maximum, File, Size());] [Simple, Layoutlayout=new, Simple, Layout()] [Rolling, File, Appenderappender=new, Rolling, File, Appender(layout,"output/rfa3param.log",false)] [Assert, Equals(1,appender.get, Max, Backup, Index());] [Loggerlogger=, Logger.get, Logger(, Rfa, Test, Case.class)] [Loggerroot=, Logger.get, Root, Logger()] [Pattern, Layoutlayout=new, Pattern, Layout("%m\n")] [Org.apache.log4j., Rolling, File, Appenderrfa=neworg.apache.log4j., Rolling, File, Appender()] [Rfa.set, Name(", Rolling");] [Rfa.set, Layout(layout);] [Rfa.set, Append(false);] [Rfa.set, Max, Backup, Index(10);] [Rfa.set, Maximum, File, Size(100);] [Rfa.set, File("output/, Rfa-dot1.log");] [Rfa.activate, Options();] [Root.add, Appender(rfa);] [New, File("output/, Rfa-dot1.log.2").delete();] [File, Writerdot1=new, File, Writer("output/, Rfa-dot1.log.1")] [Dot1.write(", Locked file");] [File, Writerdot5=new, File, Writer("output/, Rfa-dot1.log.5")] [Dot5.write(", Unlocked file");] [Dot5.close();] [For(inti=0;i<15;i++){if(i<10){logger.debug(", Hello---"+i);}elseif(i<100){logger.debug(", Hello--"+i);}}] [If(i<10){logger.debug(", Hello---"+i);}elseif(i<100){logger.debug(", Hello--"+i);}] [Logger.debug(", Hello---"+i);] [Logger.debug(", Hello--"+i);] [Dot1.close();] [For(inti=15;i<25;i++){logger.debug(", Hello--"+i);}] [Logger.debug(", Hello--"+i);] [Rfa.close();] [Assert, True(new, File("output/, Rfa-dot1.log.7").exists());] [If(new, File("output/, Rfa-dot1.log.2").length()<15){assert, Equals(50,new, File("output/, Rfa-dot1.log").length());assert, Equals(200,new, File("output/, Rfa-dot1.log.1").length());}else{assert, True(new, File("output/, Rfa-dot1.log").exists());assert, True(new, File("output/, Rfa-dot1.log.1").exists());assert, True(new, File("output/, Rfa-dot1.log.2").exists());assert, True(new, File("output/, Rfa-dot1.log.3").exists());assert, False(new, File("output/, Rfa-dot1.log.4").exists());}] [Assert, Equals(50,new, File("output/, Rfa-dot1.log").length());] [Assert, Equals(200,new, File("output/, Rfa-dot1.log.1").length());] [Assert, True(new, File("output/, Rfa-dot1.log").exists());] [Assert, True(new, File("output/, Rfa-dot1.log.1").exists());] [Assert, True(new, File("output/, Rfa-dot1.log.2").exists());] [Assert, True(new, File("output/, Rfa-dot1.log.3").exists());] [Assert, False(new, File("output/, Rfa-dot1.log.4").exists());] [Loggerlogger=, Logger.get, Logger(, Rfa, Test, Case.class)] [Loggerroot=, Logger.get, Root, Logger()] [Pattern, Layoutlayout=new, Pattern, Layout("%m\n")] [Org.apache.log4j., Rolling, File, Appenderrfa=neworg.apache.log4j., Rolling, File, Appender()] [Rfa.set, Name(", Rolling");] [Rfa.set, Layout(layout);] [Rfa.set, Append(false);] [Rfa.set, Max, Backup, Index(10);] [Rfa.set, Maximum, File, Size(100);] [Rfa.set, File("output/, Rfa-dot3.log");] [Rfa.activate, Options();] [Root.add, Appender(rfa);] [New, File("output/, Rfa-dot3.log.1").delete();] [New, File("output/, Rfa-dot3.log.2").delete();] [New, File("output/, Rfa-dot3.log.4").delete();] [File, Writerdot3=new, File, Writer("output/, Rfa-dot3.log.3")] [Dot3.write(", Locked file");] [File, Writerdot5=new, File, Writer("output/, Rfa-dot3.log.5")] [Dot5.write(", Unlocked file");] [Dot5.close();] [For(inti=0;i<15;i++){if(i<10){logger.debug(", Hello---"+i);}elseif(i<100){logger.debug(", Hello--"+i);}}] [If(i<10){logger.debug(", Hello---"+i);}elseif(i<100){logger.debug(", Hello--"+i);}] [Logger.debug(", Hello---"+i);] [Logger.debug(", Hello--"+i);] [Dot3.close();] [For(inti=15;i<35;i++){logger.debug(", Hello--"+i);}] [Logger.debug(", Hello--"+i);] [Rfa.close();] [Assert, True(new, File("output/, Rfa-dot3.log.8").exists());] [If(new, File("output/, Rfa-dot3.log.5").exists()){assert, Equals(50,new, File("output/, Rfa-dot3.log").length());assert, Equals(100,new, File("output/, Rfa-dot3.log.1").length());assert, Equals(200,new, File("output/, Rfa-dot3.log.2").length());}else{assert, True(new, File("output/, Rfa-dot3.log").exists());assert, True(new, File("output/, Rfa-dot3.log.1").exists());assert, True(new, File("output/, Rfa-dot3.log.2").exists());assert, True(new, File("output/, Rfa-dot3.log.3").exists());assert, False(new, File("output/, Rfa-dot3.log.4").exists());}] [Assert, Equals(50,new, File("output/, Rfa-dot3.log").length());] [Assert, Equals(100,new, File("output/, Rfa-dot3.log.1").length());] [Assert, Equals(200,new, File("output/, Rfa-dot3.log.2").length());] [Assert, True(new, File("output/, Rfa-dot3.log").exists());] [Assert, True(new, File("output/, Rfa-dot3.log.1").exists());] [Assert, True(new, File("output/, Rfa-dot3.log.2").exists());] [Assert, True(new, File("output/, Rfa-dot3.log.3").exists());] [Assert, False(new, File("output/, Rfa-dot3.log.4").exists());]
 [Final, Stringclass, Name=, Location, Info, Test.class.get, Name()] [Final, Stringmethod, Name="test, Four, Param, Constructor"] [Final, Stringfile, Name=", Location, Info, Test.java"] [Final, Stringline, Number="41"] [Location, Infoli=new, Location, Info(file, Name,class, Name,method, Name,line, Number)] [Assert, Equals(class, Name,li.get, Class, Name());] [Assert, Equals(method, Name,li.get, Method, Name());] [Assert, Equals(file, Name,li.get, File, Name());] [Assert, Equals(line, Number,li.get, Line, Number());] [Assert, Equals(class, Name+"."+method, Name+"("+file, Name+":"+line, Number+")",li.full, Info);] [Returnnew, Location, Info(new, Throwable(),, Name, Substring.class.get, Name());]
 [Return, Name, Substring.get, Info();]
 [Location, Infoli=, Name, Substring, Caller.get, Info()] [Assert, Equals(, Name, Substring, Caller.class.get, Name(),li.get, Class, Name());] [Assert, Equals("get, Info",li.get, Method, Name());]
 [Loggerroot=, Logger.get, Root, Logger()] [Logging, Eventevent=new, Logging, Event(root.get, Class().get, Name(),root,, Level., Info,", Hello, world.",null)] [Int[]skip=newint[]{352,353,354,355,356}] [Serialization, Test, Helper.assert, Serialization, Equals("witness/serialization/simple.bin",event,skip,237);] [Loggerroot=, Logger.get, Root, Logger()] [Exceptionex=new, Exception(", Don't panic")] [Logging, Eventevent=new, Logging, Event(root.get, Class().get, Name(),root,, Level., Info,", Hello, world.",ex)] [Int[]skip=newint[]{352,353,354,355,356}] [Serialization, Test, Helper.assert, Serialization, Equals("witness/serialization/exception.bin",event,skip,237);] [Loggerroot=, Logger.get, Root, Logger()] [Logging, Eventevent=new, Logging, Event(root.get, Class().get, Name(),root,, Level., Info,", Hello, world.",null)] [Event.get, Location, Information();] [Int[]skip=newint[]{352,353,354,355,356}] [Serialization, Test, Helper.assert, Serialization, Equals("witness/serialization/location.bin",event,skip,237);] [Loggerroot=, Logger.get, Root, Logger()] [Ndc.push("ndc test");] [Logging, Eventevent=new, Logging, Event(root.get, Class().get, Name(),root,, Level., Info,", Hello, world.",null)] [Int[]skip=newint[]{352,353,354,355,356}] [Serialization, Test, Helper.assert, Serialization, Equals("witness/serialization/ndc.bin",event,skip,237);] [Loggerroot=, Logger.get, Root, Logger()] [Mdc.put("mdckey","mdcvalue");] [Logging, Eventevent=new, Logging, Event(root.get, Class().get, Name(),root,, Level., Info,", Hello, world.",null)] [Int[]skip=newint[]{352,353,354,355,356}] [Serialization, Test, Helper.assert, Serialization, Equals("witness/serialization/mdc.bin",event,skip,237);] [Objectobj=, Serialization, Test, Helper.deserialize, Stream("witness/serialization/simple.bin")] [Assert, True(objinstanceof, Logging, Event);] [Logging, Eventevent=(, Logging, Event)obj] [Assert, Equals(", Hello, world.",event.get, Message());] [Assert, Equals(, Level., Info,event.get, Level());] [Objectobj=, Serialization, Test, Helper.deserialize, Stream("witness/serialization/exception.bin")] [Assert, True(objinstanceof, Logging, Event);] [Logging, Eventevent=(, Logging, Event)obj] [Assert, Equals(", Hello, world.",event.get, Message());] [Assert, Equals(, Level., Info,event.get, Level());] [Objectobj=, Serialization, Test, Helper.deserialize, Stream("witness/serialization/location.bin")] [Assert, True(objinstanceof, Logging, Event);] [Logging, Eventevent=(, Logging, Event)obj] [Assert, Equals(", Hello, world.",event.get, Message());] [Assert, Equals(, Level., Info,event.get, Level());] [Categoryroot=, Logger.get, Root, Logger()] [Priorityinfo=, Level., Info] [Stringcat, Name=, Logger.class.to, String()] [Logging, Eventevent=new, Logging, Event(cat, Name,root,info,", Hello, world.",null)] [Assert, Equals(cat, Name,event.fqn, Of, Category, Class);] [Categoryroot=, Logger.get, Root, Logger()] [Priorityinfo=, Level., Info] [Stringcat, Name=, Logger.class.to, String()] [Logging, Eventevent=new, Logging, Event(cat, Name,root,0, L,info,", Hello, world.",null)] [Priorityerror=, Level., Error] [Event.level=error;] [Assert, Equals(, Level., Error,event.level);] [Categoryroot=, Logger.get, Root, Logger()] [Prioritylevel=, Level., Info] [Logging, Eventevent=new, Logging, Event(null,root,0, L,level,", Hello, world.",null)] [Location, Infoinfo=event.get, Location, Information()] [Assert, Not, Null(info);] [If(info!=null){assert, Equals("?",info.get, Line, Number());assert, Equals("?",info.get, Class, Name());assert, Equals("?",info.get, File, Name());assert, Equals("?",info.get, Method, Name());}] [Assert, Equals("?",info.get, Line, Number());] [Assert, Equals("?",info.get, Class, Name());] [Assert, Equals("?",info.get, File, Name());] [Assert, Equals("?",info.get, Method, Name());] [Thrownew, Runtime, Exception();]
 [Categoryroot=, Logger.get, Root, Logger()] [Priorityinfo=, Level., Info] [Stringcat, Name=, Logger.class.to, String()] [Bad, Messagemsg=new, Bad, Message()] [Logging, Eventevent=new, Logging, Event(cat, Name,root,0, L,info,msg,null)] [Event.get, Rendered, Message();]
 [S.print((, Object)"print(, Object)");] [S.print("print(char[])".to, Char, Array());] [S.print("print(, String)");] [S.println((, Object)"println(, Object)");] [S.println("println(char[])".to, Char, Array());] [S.println("println(, String)");] [S.write("write(char[])".to, Char, Array());] [S.write("write(char[], int, int)".to, Char, Array(),2,8);] [S.write("write(, String, int, int)",2,8);]
 [Throwable, Informationti=new, Throwable, Information(new, Overridden, Throwable())] [String[]rep=ti.get, Throwable, Str, Rep()] [Assert, Equals(4,rep.length);] [Assert, Equals("print(, Object)print(char[])print(, String)println(, Object)",rep[0]);] [Assert, Equals("println(char[])",rep[1]);] [Assert, Equals("println(, String)",rep[2]);] [Assert, Equals("write(char[])ite(charite(, Stri",rep[3]);] [S.print(true);] [S.print('a');] [S.print(1);] [S.print(2, L);] [S.print(, Float., Max, Value);] [S.print(, Double., Min, Value);] [S.println(true);] [S.println('a');] [S.println(1);] [S.println(2, L);] [S.println(, Float., Max, Value);] [S.println(, Double., Min, Value);] [S.write(', C');]
 [Throwable, Informationti=new, Throwable, Information(new, Not, Overridden, Throwable())] [String[]rep=ti.get, Throwable, Str, Rep()] [Assert, Equals(7,rep.length);] [String, Bufferbuf=new, String, Buffer(, String.value, Of(true))] [Buf.append('a');] [Buf.append(, String.value, Of(1));] [Buf.append(, String.value, Of(2, L));] [Buf.append(, String.value, Of(, Float., Max, Value));] [Buf.append(, String.value, Of(, Double., Min, Value));] [Buf.append(, String.value, Of(true));] [Assert, Equals(buf.to, String(),rep[0]);] [Assert, Equals("a",rep[1]);] [Assert, Equals(, String.value, Of(1),rep[2]);] [Assert, Equals(, String.value, Of(2, L),rep[3]);] [Assert, Equals(, String.value, Of(, Float., Max, Value),rep[4]);] [Assert, Equals(, String.value, Of(, Double., Min, Value),rep[5]);] [Assert, Equals(", C",rep[6]);] [S.print((, Object)null);] [S.print((, String)null);] [S.println((, Object)null);] [S.println((, String)null);]
 [Throwable, Informationti=new, Throwable, Information(new, Null, Throwable())] [String[]rep=ti.get, Throwable, Str, Rep()] [Assert, Equals(2,rep.length);] [Stringnull, Str=, String.value, Of((, Object)null)] [Assert, Equals(null, Str+null, Str+null, Str,rep[0]);] [Assert, Equals(null, Str,rep[1]);]
 [Throwable, Informationti=new, Throwable, Information(new, Empty, Throwable())] [String[]rep=ti.get, Throwable, Str, Rep()] [Assert, Equals(0,rep.length);] [Stack, Trace=trace;] [S.print(stack, Trace);]
 [Throwable, Informationti=new, Throwable, Information(new, String, Throwable("\n"))] [String[]rep=ti.get, Throwable, Str, Rep()] [Assert, Equals(1,rep.length);] [Assert, Equals("",rep[0]);] [Throwable, Informationti=new, Throwable, Information(new, String, Throwable("\r"))] [String[]rep=ti.get, Throwable, Str, Rep()] [Assert, Equals(1,rep.length);] [Assert, Equals("",rep[0]);] [Throwable, Informationti=new, Throwable, Information(new, String, Throwable(", Line1\r, Line2\n, Line3\r\n, Line4\n\r, Line6"))] [String[]rep=ti.get, Throwable, Str, Rep()] [Assert, Equals(6,rep.length);] [Assert, Equals(", Line1",rep[0]);] [Assert, Equals(", Line2",rep[1]);] [Assert, Equals(", Line3",rep[2]);] [Assert, Equals(", Line4",rep[3]);] [Assert, Equals("",rep[4]);] [Assert, Equals(", Line6",rep[5]);] [Throwable, Informationti=new, Throwable, Information(new, String, Throwable("\n "))] [String[]rep=ti.get, Throwable, Str, Rep()] [Assert, Equals(2,rep.length);] [Assert, Equals("",rep[0]);] [Assert, Equals(" ",rep[1]);] [Throwablet=new, String, Throwable(", Hello, , World")] [Throwable, Informationti=new, Throwable, Information(t)] [Assert, Same(t,ti.get, Throwable());] [Throwable, Informationti=new, Throwable, Information(new, String, Throwable(", Hello, , World"))] [String[]rep=ti.get, Throwable, Str, Rep()] [Assert, Equals(", Hello, , World",rep[0]);] [Rep[0]=", Bonjour, , Monde";] [String[]rep2=ti.get, Throwable, Str, Rep()] [Assert, Equals(", Hello, , World",rep2[0]);] [S.print(", Nasty, Exception");] [Thrownew, Runtime, Exception(", Intentional exception");]
 [Throwable, Informationti=new, Throwable, Information(new, Nasty, Throwable())] [String[]rep=ti.get, Throwable, Str, Rep()] [Assert, Equals(", Nasty, Exception",rep[0]);]
 [Length=args.length;] [If(, Length==0){, System.err.println(", Usage: java "+, Stress, Category.class.get, Name()+" name1 ... name, N\n.");, System.exit(1);}] [System.err.println(", Usage: java "+, Stress, Category.class.get, Name()+" name1 ... name, N\n.");] [System.exit(1);] [If(, Length>=7){, System.err.println(", This stress test suffers from combinatorial explosion.\n"+", Invoking with seven arguments takes about 90 minutes even on fast machines");}] [System.err.println(", This stress test suffers from combinatorial explosion.\n"+", Invoking with seven arguments takes about 90 minutes even on fast machines");] [Names=new, String[, Length];] [For(inti=0;i<, Length;i++){names[i]=args[i];}] [Names[i]=args[i];] [Cat=new, Logger[, Length];] [Ct=new, Ct[, Length];] [Permute(0);] [If(n==, Length)create, Loop(0);elsefor(inti=n;i<, Length;i++){swap(names,n,i);permute(n+1);swap(names,n,i);}] [Swap(names,n,i);] [Permute(n+1);] [Swap(names,n,i);] [Stringt=names[i]] [Names[i]=names[j];] [Names[j]=t;] [System.out.print(", Current permutation is - ");] [For(inti=0;i<, Length;i++){, System.out.print(names[i]+" ");}] [System.out.print(names[i]+" ");] [System.out.println();] [If(n==, Length){for(inti=0;i<, Length;i++){if(ct[i]==null)cat[i]=null;else{cat[i]=, Logger.get, Logger(ct[i].catstr);cat[i].set, Level(ct[i].level);}}test();, Hierarchyh=(, Hierarchy), Log, Manager.get, Logger, Repository();h.clear();}else{ct[n]=null;create, Loop(n+1);ct[n]=new, Ct(names[n],null);create, Loop(n+1);intr=random.next, Int();if(r<0)r=-r;ct[n]=new, Ct(names[n],level[r%5]);create, Loop(n+1);}] [For(inti=0;i<, Length;i++){if(ct[i]==null)cat[i]=null;else{cat[i]=, Logger.get, Logger(ct[i].catstr);cat[i].set, Level(ct[i].level);}}] [If(ct[i]==null)cat[i]=null;else{cat[i]=, Logger.get, Logger(ct[i].catstr);cat[i].set, Level(ct[i].level);}] [Cat[i]=, Logger.get, Logger(ct[i].catstr);] [Cat[i].set, Level(ct[i].level);] [Test();] [Hierarchyh=(, Hierarchy), Log, Manager.get, Logger, Repository()] [H.clear();] [Ct[n]=null;] [Create, Loop(n+1);] [Ct[n]=new, Ct(names[n],null);] [Create, Loop(n+1);] [Intr=random.next, Int()] [If(r<0)r=-r;] [Ct[n]=new, Ct(names[n],level[r%5]);] [Create, Loop(n+1);] [For(inti=0;i<, Length;i++){if(!check, Correctness(i)){, System.out.println(", Failed stress test.");permutation, Dump();ct, Dump();cat, Dump();, System.exit(1);}}] [If(!check, Correctness(i)){, System.out.println(", Failed stress test.");permutation, Dump();ct, Dump();cat, Dump();, System.exit(1);}] [System.out.println(", Failed stress test.");] [Permutation, Dump();] [Ct, Dump();] [Cat, Dump();] [System.exit(1);] [For(intj=0;j<, Length;j++){if(ct[j]!=null), System.out.println("ct ["+j+"] = ("+ct[j].catstr+","+ct[j].level+")");else, System.out.println("ct ["+j+"] = undefined");}] [If(ct[j]!=null), System.out.println("ct ["+j+"] = ("+ct[j].catstr+","+ct[j].level+")");else, System.out.println("ct ["+j+"] = undefined");] [For(intj=0;j<, Length;j++){if(cat[j]!=null), System.out.println("cat["+j+"] = ("+cat[j].name+","+cat[j].get, Level()+")");else, System.out.println("cat["+j+"] = undefined");}] [If(cat[j]!=null), System.out.println("cat["+j+"] = ("+cat[j].name+","+cat[j].get, Level()+")");else, System.out.println("cat["+j+"] = undefined");] [C, Tlocal, Ct=ct[i]] [If(local, Ct==null)returntrue;] [Levelexpected=get, Expected, Prioriy(local, Ct)] [Levelpurported=cat[i].get, Effective, Level()] [If(expected!=purported){, System.out.println(", Expected level for "+local, Ct.catstr+" is "+expected);, System.out.println(", Purported level for "+cat[i].name+" is "+purported);returnfalse;}] [System.out.println(", Expected level for "+local, Ct.catstr+" is "+expected);] [System.out.println(", Purported level for "+cat[i].name+" is "+purported);] [Returnfalse;] [Returntrue;] [Levellevel=ct, Param.level] [If(level!=null)returnlevel;] [Stringcatstr=ct, Param.catstr] [For(inti=catstr.last, Index, Of('.',catstr.length()-1);i>=0;i=catstr.last, Index, Of('.',i-1)){, Stringsubstr=catstr.substring(0,i);for(intj=0;j<, Length;j++){if(ct[j]!=null&&substr.equals(ct[j].catstr)){, Levelp=ct[j].level;if(p!=null)returnp;}}}] [Stringsubstr=catstr.substring(0,i)] [For(intj=0;j<, Length;j++){if(ct[j]!=null&&substr.equals(ct[j].catstr)){, Levelp=ct[j].level;if(p!=null)returnp;}}] [If(ct[j]!=null&&substr.equals(ct[j].catstr)){, Levelp=ct[j].level;if(p!=null)returnp;}] [Levelp=ct[j].level] [If(p!=null)returnp;] [Returndefault, Level;] [This.catstr=catstr;] [This.level=level;]
@
 [Try{return(, Level), Level.class.get, Field(", Trace").get(null);}catch(, Exceptionex){returnnew, Level(5000,", Trace",7);}] [Return(, Level), Level.class.get, Field(", Trace").get(null);] [Returnnew, Level(5000,", Trace",7);] [Log, Manager.reset, Configuration();] [Char, Array, Writerwriter=new, Char, Array, Writer()] [Pattern, Layoutlayout=new, Pattern, Layout("%, C")] [Writer, Appenderappender=new, Writer, Appender(layout,writer)] [Appender.activate, Options();] [Logger.get, Root, Logger().add, Appender(appender);] [Log, Mf.debug(logger,null,, Math., Pi);] [Assert, Equals(, Test, Log, Mf.class.get, Name(),writer.to, String());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Mf.trace(logger,null,, Math., Pi);] [Assert, Null(capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Mf.trace(logger,", Hello, , World",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Mf.trace(logger,", Hello, {.",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Mf.trace(logger,", Hello, {0}, World",new, Object[0]);] [Assert, Equals(", Hello, {0}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Mf.trace(logger,", Hello, {0}",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Mf.trace(logger,", Hello, {0}",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Intval=42] [Log, Mf.trace(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Byteval=42] [Log, Mf.trace(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Shortval=42] [Log, Mf.trace(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Longval=42] [Log, Mf.trace(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Charval=', C'] [Log, Mf.trace(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Booleanval=true] [Log, Mf.trace(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Floatval=3.14f] [Number, Formatformat=, Number, Format.get, Instance()] [Log, Mf.trace(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration "+format.format(val),capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Doubleval=3.14] [Number, Formatformat=, Number, Format.get, Instance()] [Log, Mf.trace(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration "+format.format(val),capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Mf.trace(logger,"{1}, {0}.",", World",", Hello");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Mf.trace(logger,"{1}{2} {0}.",", World",", Hello",",");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Mf.trace(logger,"{1}{2} {0}{3}",", World",", Hello",",",".");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Object[]args=new, Object[]{", World",", Hello",",","."}] [Log, Mf.trace(logger,"{1}{2} {0}{3}",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Object[]args=null] [Log, Mf.trace(logger,"{1}{2} {0}{3}",args);] [Assert, Equals("{1}{2} {0}{3}",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,null,, Math., Pi);] [Assert, Equals(null,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,", Hello, , World",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,", Hello, {.",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,", Hello, {0}, World",new, Object[0]);] [Assert, Equals(", Hello, {0}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,", Hello, {0}",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,", Hello, {0}",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Intval=42] [Log, Mf.debug(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Byteval=42] [Log, Mf.debug(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Shortval=42] [Log, Mf.debug(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Longval=42] [Log, Mf.debug(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Charval=', C'] [Log, Mf.debug(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Booleanval=true] [Log, Mf.debug(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,", Iteration {0}",(float), Math., Pi);] [Stringexpected=, Message, Format.format(", Iteration {0}",new, Object[]{new, Float(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,", Iteration {0}",, Math., Pi);] [Stringexpected=, Message, Format.format(", Iteration {0}",new, Object[]{new, Double(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,"{1}, {0}.",", World",", Hello");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,"{1}{2} {0}.",", World",", Hello",",");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,"{1}{2} {0}{3}",", World",", Hello",",",".");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Object[]args=new, Object[]{", World",", Hello",",","."}] [Log, Mf.debug(logger,"{1}{2} {0}{3}",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Dateepoch=new, Date(0)] [Log, Mf.debug(logger,", Iteration {0}",epoch);] [Stringexpected=, Message, Format.format(", Iteration {0}",new, Object[]{epoch})] [Stringexpected2=", Iteration "+, Date, Format.get, Date, Time, Instance(, Date, Format., Short,, Date, Format., Short).format(epoch)] [Stringactual=capture.get, Message()] [If(, System.get, Property("java.vendor").index, Of(", Free")==-1){assert, Equals(expected,actual);}] [Assert, Equals(expected,actual);] [Assert, Equals(expected2,actual);] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Object[]args=null] [Log, Mf.debug(logger,"{1}{2} {0}{3}",args);] [Assert, Equals("{1}{2} {0}{3}",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,"{0, number, percent}",, Math., Pi);] [Stringexpected=, Message, Format.format("{0, number, percent}",new, Object[]{new, Double(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,"{0}{0, number, percent}",, Math., Pi);] [Stringexpected=, Message, Format.format("{0}{0, number, percent}",new, Object[]{new, Double(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Mf.debug(logger,"'{0}'",", World");] [Assert, Equals("{0}",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,null,, Math., Pi);] [Assert, Null(capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,", Hello, , World",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,", Hello, {.",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,", Hello, {0}, World",new, Object[0]);] [Assert, Equals(", Hello, {0}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,", Hello, {0}",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,", Hello, {0}",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Intval=42] [Log, Mf.info(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Byteval=42] [Log, Mf.info(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Shortval=42] [Log, Mf.info(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Longval=42] [Log, Mf.info(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Charval=', C'] [Log, Mf.info(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Booleanval=true] [Log, Mf.info(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,", Iteration {0}",(float), Math., Pi);] [Stringexpected=, Message, Format.format(", Iteration {0}",new, Object[]{new, Float(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,", Iteration {0}",, Math., Pi);] [Stringexpected=, Message, Format.format(", Iteration {0}",new, Object[]{new, Double(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,"{1}, {0}.",", World",", Hello");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,"{1}{2} {0}.",", World",", Hello",",");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,"{1}{2} {0}{3}",", World",", Hello",",",".");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Object[]args=new, Object[]{", World",", Hello",",","."}] [Log, Mf.info(logger,"{1}{2} {0}{3}",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Mf.warn(logger,null,, Math., Pi);] [Assert, Null(capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Mf.warn(logger,", Hello, , World",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Mf.warn(logger,", Hello, {.",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Mf.warn(logger,", Hello, {0}, World",new, Object[0]);] [Assert, Equals(", Hello, {0}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Mf.warn(logger,", Hello, {0}",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Mf.warn(logger,", Hello, {0}",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Intval=42] [Log, Mf.warn(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Byteval=42] [Log, Mf.warn(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Shortval=42] [Log, Mf.warn(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Longval=42] [Log, Mf.warn(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Charval=', C'] [Log, Mf.warn(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Booleanval=true] [Log, Mf.warn(logger,", Iteration {0}",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Mf.warn(logger,", Iteration {0}",(float), Math., Pi);] [Stringexpected=, Message, Format.format(", Iteration {0}",new, Object[]{new, Float(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Mf.warn(logger,", Iteration {0}",, Math., Pi);] [Stringexpected=, Message, Format.format(", Iteration {0}",new, Object[]{new, Double(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Mf.warn(logger,"{1}, {0}.",", World",", Hello");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Mf.warn(logger,"{1}{2} {0}.",", World",", Hello",",");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Mf.warn(logger,"{1}{2} {0}{3}",", World",", Hello",",",".");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Object[]args=new, Object[]{", World",", Hello",",","."}] [Log, Mf.warn(logger,"{1}{2} {0}{3}",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.log(logger,, Level., Error,null,, Math., Pi);] [Assert, Null(capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.log(logger,, Level., Error,", Hello, , World",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.log(logger,, Level., Error,", Hello, {.",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.log(logger,, Level., Error,", Hello, {0}, World",new, Object[0]);] [Assert, Equals(", Hello, {0}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.log(logger,, Level., Error,", Hello, {0}",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.log(logger,, Level., Error,", Hello, {0}",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Intval=42] [Log, Mf.log(logger,, Level., Error,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Byteval=42] [Log, Mf.log(logger,, Level., Error,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Shortval=42] [Log, Mf.log(logger,, Level., Error,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Longval=42] [Log, Mf.log(logger,, Level., Error,", Iteration {0}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Charval=', C'] [Log, Mf.log(logger,, Level., Error,", Iteration {0}",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Booleanval=true] [Log, Mf.log(logger,, Level., Error,", Iteration {0}",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.log(logger,, Level., Error,", Iteration {0}",(float), Math., Pi);] [Stringexpected=, Message, Format.format(", Iteration {0}",new, Object[]{new, Float(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.log(logger,, Level., Error,", Iteration {0}",, Math., Pi);] [Stringexpected=, Message, Format.format(", Iteration {0}",new, Object[]{new, Double(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.log(logger,, Level., Error,"{1}, {0}.",", World",", Hello");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.log(logger,, Level., Error,"{1}{2} {0}.",", World",", Hello",",");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.log(logger,, Level., Error,"{1}{2} {0}{3}",", World",", Hello",",",".");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Object[]args=new, Object[]{", World",", Hello",",","."}] [Log, Mf.log(logger,, Level., Error,"{1}{2} {0}{3}",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,null,", Iteration0",, Math., Pi);] [Assert, Equals(", Iteration0",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,null,, Math., Pi);] [Assert, Null(capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Hello1",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Malformed",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Hello2",new, Object[0]);] [Assert, Equals(", Hello, {0}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Hello3",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Hello3",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Intval=42] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Byteval=42] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Shortval=42] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Longval=42] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Charval=', C'] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Booleanval=true] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",(float), Math., Pi);] [Stringexpected=, Message, Format.format(", Iteration {0}",new, Object[]{new, Float(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",, Math., Pi);] [Stringexpected=, Message, Format.format(", Iteration {0}",new, Object[]{new, Double(, Math., Pi)})] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Hello4",", World",", Hello");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Hello5",", World",", Hello",",");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Hello6",", World",", Hello",",",".");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Object[]args=new, Object[]{", World",", Hello",",","."}] [Log, Mf.logrb(logger,, Level., Error,, Bundle, Name,", Hello6",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,", Hello, {9}{0}",", World");] [Assert, Equals(", Hello, {9}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,"{1}, {9}{0}",", World",", Hello");] [Assert, Equals(", Hello, {9}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Mf.info(logger,"{1}, {9}{0}",new, Object[]{", World",", Hello",null,null,null,null,null,null,null,", New "});] [Assert, Equals(", Hello, , New , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Stringpattern=", Hello, {/}{0}{:}"] [Log, Mf.info(logger,pattern,", World");] [Assert, Equals(pattern,capture.get, Message());]
 [Try{return(, Level), Level.class.get, Field(", Trace").get(null);}catch(, Exceptionex){returnnew, Level(5000,", Trace",7);}] [Return(, Level), Level.class.get, Field(", Trace").get(null);] [Returnnew, Level(5000,", Trace",7);] [Log, Manager.reset, Configuration();] [Char, Array, Writerwriter=new, Char, Array, Writer()] [Pattern, Layoutlayout=new, Pattern, Layout("%, C")] [Writer, Appenderappender=new, Writer, Appender(layout,writer)] [Appender.activate, Options();] [Logger.get, Root, Logger().add, Appender(appender);] [Log, Sf.debug(logger,null,, Math., Pi);] [Assert, Equals(, Test, Log, Sf.class.get, Name(),writer.to, String());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Sf.trace(logger,null,, Math., Pi);] [Assert, Null(capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Sf.trace(logger,", Hello, , World",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Sf.trace(logger,", Hello, {.",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Sf.trace(logger,", Hello, {}, World",new, Object[0]);] [Assert, Equals(", Hello, {}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Sf.trace(logger,", Hello, {}",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Sf.trace(logger,", Hello, {}",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Intval=42] [Log, Sf.trace(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Byteval=42] [Log, Sf.trace(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Shortval=42] [Log, Sf.trace(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Longval=42] [Log, Sf.trace(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Charval=', C'] [Log, Sf.trace(logger,", Iteration {}",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Booleanval=true] [Log, Sf.trace(logger,", Iteration {}",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Floatval=3.14f] [Log, Sf.trace(logger,", Iteration {}",val);] [Assert, Equals(", Iteration "+, String.value, Of(val),capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Doubleval=3.14] [Log, Sf.trace(logger,", Iteration {}",val);] [Assert, Equals(", Iteration "+, String.value, Of(val),capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Sf.trace(logger,"{}, {}.",", Hello",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Sf.trace(logger,"{}{} {}.",", Hello",",",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Log, Sf.trace(logger,"{}{} {}{}",", Hello",",",", World",".");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Object[]args=new, Object[]{", Hello",",",", World","."}] [Log, Sf.trace(logger,"{}{} {}{}",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Trace)] [Logger.set, Level(, Trace);] [Object[]args=null] [Log, Sf.trace(logger,"{}{} {}{}",args);] [Assert, Equals("{}{} {}{}",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Sf.debug(logger,null,, Math., Pi);] [Assert, Null(capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Sf.debug(logger,", Hello, , World",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Sf.debug(logger,", Hello, {.",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Sf.debug(logger,", Hello, {}, World",new, Object[0]);] [Assert, Equals(", Hello, {}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Sf.debug(logger,", Hello, {}",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Sf.debug(logger,", Hello, {}",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Intval=42] [Log, Sf.debug(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Byteval=42] [Log, Sf.debug(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Shortval=42] [Log, Sf.debug(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Longval=42] [Log, Sf.debug(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Charval=', C'] [Log, Sf.debug(logger,", Iteration {}",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Booleanval=true] [Log, Sf.debug(logger,", Iteration {}",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Floatval=3.14f] [Log, Sf.debug(logger,", Iteration {}",val);] [Assert, Equals(", Iteration "+, String.value, Of(val),capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Doubleval=3.14] [Log, Sf.debug(logger,", Iteration {}",val);] [Assert, Equals(", Iteration "+, String.value, Of(val),capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Sf.debug(logger,"{}, {}.",", Hello",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Sf.debug(logger,"{}{} {}.",", Hello",",",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Log, Sf.debug(logger,"{}{} {}{}",", Hello",",",", World",".");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Object[]args=new, Object[]{", Hello",",",", World","."}] [Log, Sf.debug(logger,"{}{} {}{}",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Object[]args=null] [Log, Sf.debug(logger,"{}{} {}{}",args);] [Assert, Equals("{}{} {}{}",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Sf.info(logger,null,, Math., Pi);] [Assert, Null(capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Sf.info(logger,", Hello, , World",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Sf.info(logger,", Hello, {.",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Sf.info(logger,", Hello, {}, World",new, Object[0]);] [Assert, Equals(", Hello, {}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Sf.info(logger,", Hello, {}",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Sf.info(logger,", Hello, {}",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Intval=42] [Log, Sf.info(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Byteval=42] [Log, Sf.info(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Shortval=42] [Log, Sf.info(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Longval=42] [Log, Sf.info(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Charval=', C'] [Log, Sf.info(logger,", Iteration {}",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Booleanval=true] [Log, Sf.info(logger,", Iteration {}",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Floatval=3.14f] [Log, Sf.info(logger,", Iteration {}",val);] [Assert, Equals(", Iteration "+, String.value, Of(val),capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Doubleval=3.14] [Log, Sf.info(logger,", Iteration {}",val);] [Assert, Equals(", Iteration "+, String.value, Of(val),capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Sf.info(logger,"{}, {}.",", Hello",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Sf.info(logger,"{}{} {}.",", Hello",",",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Object[]args=new, Object[]{", Hello",",",", World","."}] [Log, Sf.info(logger,"{}{} {}{}",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Sf.warn(logger,null,, Math., Pi);] [Assert, Null(capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Sf.warn(logger,", Hello, , World",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Sf.warn(logger,", Hello, {.",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Sf.warn(logger,", Hello, {}, World",new, Object[0]);] [Assert, Equals(", Hello, {}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Sf.warn(logger,", Hello, {}",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Sf.warn(logger,", Hello, {}",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Intval=42] [Log, Sf.warn(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Byteval=42] [Log, Sf.warn(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Shortval=42] [Log, Sf.warn(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Longval=42] [Log, Sf.warn(logger,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Charval=', C'] [Log, Sf.warn(logger,", Iteration {}",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Booleanval=true] [Log, Sf.warn(logger,", Iteration {}",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Floatval=3.14f] [Log, Sf.warn(logger,", Iteration {}",val);] [Assert, Equals(", Iteration "+, String.value, Of(val),capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Doubleval=3.14] [Log, Sf.warn(logger,", Iteration {}",val);] [Assert, Equals(", Iteration "+, String.value, Of(val),capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Sf.warn(logger,"{}, {}.",", Hello",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Sf.warn(logger,"{}{} {}.",", Hello",",",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Log, Sf.warn(logger,"{}{} {}{}",", Hello",",",", World",".");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Warn)] [Object[]args=new, Object[]{", Hello",",",", World","."}] [Log, Sf.warn(logger,"{}{} {}{}",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.log(logger,, Level., Error,null,, Math., Pi);] [Assert, Null(capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.log(logger,, Level., Error,", Hello, , World",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.log(logger,, Level., Error,", Hello, {.",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.log(logger,, Level., Error,", Hello, {}, World",new, Object[0]);] [Assert, Equals(", Hello, {}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.log(logger,, Level., Error,", Hello, {}",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.log(logger,, Level., Error,", Hello, {}",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Intval=42] [Log, Sf.log(logger,, Level., Error,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Byteval=42] [Log, Sf.log(logger,, Level., Error,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Shortval=42] [Log, Sf.log(logger,, Level., Error,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Longval=42] [Log, Sf.log(logger,, Level., Error,", Iteration {}",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Charval=', C'] [Log, Sf.log(logger,, Level., Error,", Iteration {}",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Booleanval=true] [Log, Sf.log(logger,, Level., Error,", Iteration {}",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.log(logger,, Level., Error,", Iteration {}",(float), Math., Pi);] [Stringexpected=", Iteration "+, String.value, Of(new, Float(, Math., Pi))] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.log(logger,, Level., Error,", Iteration {}",, Math., Pi);] [Stringexpected=", Iteration "+, String.value, Of(new, Double(, Math., Pi))] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.log(logger,, Level., Error,"{}, {}.",", Hello",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.log(logger,, Level., Error,"{}{} {}.",", Hello",",",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.log(logger,, Level., Error,"{}{} {}{}",", Hello",",",", World",".");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Object[]args=new, Object[]{", Hello",",",", World","."}] [Log, Sf.log(logger,, Level., Error,"{}{} {}{}",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,null,", Iteration0",, Math., Pi);] [Assert, Equals(", Iteration0",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,null,, Math., Pi);] [Assert, Null(capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Hello1",, Math., Pi);] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Malformed",, Math., Pi);] [Assert, Equals(", Hello, {.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Hello2",new, Object[0]);] [Assert, Equals(", Hello, {}, World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Hello3",", World");] [Assert, Equals(", Hello, , World",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Hello3",(, Object)null);] [Assert, Equals(", Hello, null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Intval=42] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Byteval=42] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Shortval=42] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Longval=42] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration 42",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Charval=', C'] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration , C",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Booleanval=true] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",val);] [Assert, Equals(", Iteration true",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",(float), Math., Pi);] [Stringexpected=", Iteration "+, String.value, Of(new, Float(, Math., Pi))] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Iteration0",, Math., Pi);] [Stringexpected=", Iteration "+, String.value, Of(new, Double(, Math., Pi))] [Assert, Equals(expected,capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Hello4",", Hello",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Hello5",", Hello",",",", World");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Hello6",", Hello",",",", World",".");] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Error)] [Object[]args=new, Object[]{", Hello",",",", World","."}] [Log, Sf.logrb(logger,, Level., Error,, Bundle, Name,", Hello6",args);] [Assert, Equals(", Hello, , World.",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Sf.info(logger,"\\{}\\{{}}, , World}\\{",", Hello");] [Assert, Equals("{}{, Hello}, , World}{",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Info)] [Log, Sf.info(logger,"\\{}\\{{}}, {}}{}\\{",", Hello",", World");] [Assert, Equals("{}{, Hello}, , World}{}{",capture.get, Message());]
 [Log, Manager.reset, Configuration();] [Thrownew, Null, Pointer, Exception();]
 [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.entering(logger,null,null);] [Assert, Equals("null.null , Entry",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.entering(logger,null,null,(, String)null);] [Assert, Equals("null.null , Entry null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.entering(logger,null,null,(, Object[])null);] [Assert, Equals("null.null , Entry {}",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.entering(logger,", Some, Class","some, Method");] [Assert, Equals(", Some, Class.some, Method , Entry",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.entering(logger,", Some, Class","some, Method","some, Param");] [Assert, Equals(", Some, Class.some, Method , Entry some, Param",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.entering(logger,", Some, Class","some, Method",, Bad, Stringifier., Instance);] [Assert, Equals(", Some, Class.some, Method , Entry ?",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.entering(logger,", Some, Class","some, Method",new, Object[]{"param1",, Bad, Stringifier., Instance});] [Assert, Equals(", Some, Class.some, Method , Entry {param1,?}",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.exiting(logger,null,null);] [Assert, Equals("null.null , Return",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.exiting(logger,null,null,(, String)null);] [Assert, Equals("null.null , Return null",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.exiting(logger,", Some, Class","some, Method");] [Assert, Equals(", Some, Class.some, Method , Return",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.exiting(logger,", Some, Class","some, Method","some, Value");] [Assert, Equals(", Some, Class.some, Method , Return some, Value",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.exiting(logger,", Some, Class","some, Method",, Bad, Stringifier., Instance);] [Assert, Equals(", Some, Class.some, Method , Return ?",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.throwing(logger,null,null,null);] [Assert, Equals("null.null , Throw",capture.get, Message());] [Log, Capturecapture=new, Log, Capture(, Level., Debug)] [Logger.set, Level(, Level., Debug);] [Log, Xf.throwing(logger,", Some, Class","some, Method",new, Illegal, Argument, Exception());] [Assert, Equals(", Some, Class.some, Method , Throw",capture.get, Message());]
 [Returnnew, Ttcc, Layout();] [Ndc.clear();] [Ndc.push(", Ndc goes here");] [Loggerlogger=, Logger.get, Logger("org.apache.log4j., Layout, Test")] [Logging, Eventevent=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Info,", Hello, , World",null)] [Ttcc, Layoutlayout=(, Ttcc, Layout)create, Layout()] [Stringresult=layout.format(event)] [Ndc.pop();] [String, Bufferbuf=new, String, Buffer(100)] [Layout.date, Format(buf,event);] [Buf.append('[');] [Buf.append(event.get, Thread, Name());] [Buf.append("] ");] [Buf.append(event.get, Level().to, String());] [Buf.append(' ');] [Buf.append(event.get, Logger, Name());] [Buf.append(' ');] [Buf.append(", Ndc goes here");] [Buf.append(" - ");] [Buf.append(event.get, Message());] [Buf.append(, System.get, Property("line.separator"));] [Assert, Equals(buf.to, String(),result);] [Ttcc, Layoutlayout=new, Ttcc, Layout()] [Assert, Equals(true,layout.get, Thread, Printing());] [Layout.set, Thread, Printing(false);] [Assert, Equals(false,layout.get, Thread, Printing());] [Layout.set, Thread, Printing(true);] [Assert, Equals(true,layout.get, Thread, Printing());] [Ttcc, Layoutlayout=new, Ttcc, Layout()] [Assert, Equals(true,layout.get, Category, Prefixing());] [Layout.set, Category, Prefixing(false);] [Assert, Equals(false,layout.get, Category, Prefixing());] [Layout.set, Category, Prefixing(true);] [Assert, Equals(true,layout.get, Category, Prefixing());] [Ttcc, Layoutlayout=new, Ttcc, Layout()] [Assert, Equals(true,layout.get, Context, Printing());] [Layout.set, Context, Printing(false);] [Assert, Equals(false,layout.get, Context, Printing());] [Layout.set, Context, Printing(true);] [Assert, Equals(true,layout.get, Context, Printing());]
 [Stringpat="/"+, Filter., Absolute, Date, And, Time, Pat+"/"] [If(util.match(pat,in)){returnutil.substitute("s/"+, Filter., Absolute, Date, And, Time, Pat+"//",in);}else{returnin;}] [Returnutil.substitute("s/"+, Filter., Absolute, Date, And, Time, Pat+"//",in);] [Returnin;]
 [Stringpat="/"+, Filter., Absolute, Time, Pat+"/"] [If(util.match(pat,in)){returnutil.substitute("s/"+, Filter., Absolute, Time, Pat+"//",in);}else{returnin;}] [Returnutil.substitute("s/"+, Filter., Absolute, Time, Pat+"//",in);] [Returnin;]
 [Buffered, Readerin1=new, Buffered, Reader(new, File, Reader(file1))] [Buffered, Readerin2=new, Buffered, Reader(new, File, Reader(file2))] [Strings1] [Intline, Counter=0] [While((s1=in1.read, Line())!=null){line, Counter++;, Strings2=in2.read, Line();if(!s1.equals(s2)){, System.out.println(", Files ["+file1+"] and ["+file2+"] differ on line "+line, Counter);, System.out.println(", One reads:  ["+s1+"].");, System.out.println(", Other reads:["+s2+"].");returnfalse;}}] [Line, Counter++;] [Strings2=in2.read, Line()] [If(!s1.equals(s2)){, System.out.println(", Files ["+file1+"] and ["+file2+"] differ on line "+line, Counter);, System.out.println(", One reads:  ["+s1+"].");, System.out.println(", Other reads:["+s2+"].");returnfalse;}] [System.out.println(", Files ["+file1+"] and ["+file2+"] differ on line "+line, Counter);] [System.out.println(", One reads:  ["+s1+"].");] [System.out.println(", Other reads:["+s2+"].");] [Returnfalse;] [If(in2.read()!=-1){, System.out.println(", File ["+file2+"] longer than file ["+file1+"].");returnfalse;}] [System.out.println(", File ["+file2+"] longer than file ["+file1+"].");] [Returnfalse;] [Returntrue;] [Stringresource, Name=file, Name] [If(file, Name.starts, With("witness/")){resource, Name=file, Name.substring(file, Name.last, Index, Of('/')+1);}] [Resource, Name=file, Name.substring(file, Name.last, Index, Of('/')+1);] [Input, Streamis=test, Class.get, Resource, As, Stream(resource, Name)] [If(is==null){, Filefile=new, File(file, Name);if(file.exists()){is=new, File, Input, Stream(file);}else{thrownew, File, Not, Found, Exception(", Resource "+resource, Name+" not found");}}] [Filefile=new, File(file, Name)] [If(file.exists()){is=new, File, Input, Stream(file);}else{thrownew, File, Not, Found, Exception(", Resource "+resource, Name+" not found");}] [Is=new, File, Input, Stream(file);] [Thrownew, File, Not, Found, Exception(", Resource "+resource, Name+" not found");] [Returnis;] [Buffered, Readerin1=new, Buffered, Reader(new, File, Reader(file1))] [Buffered, Readerin2=new, Buffered, Reader(new, Input, Stream, Reader(open(test, Class,file2)))] [Try{returncompare(test, Class,file1,file2,in1,in2);}finally{in1.close();in2.close();}] [Returncompare(test, Class,file1,file2,in1,in2);] [In1.close();] [In2.close();] [Strings1] [Intline, Counter=0] [While((s1=in1.read, Line())!=null){line, Counter++;, Strings2=in2.read, Line();if(!s1.equals(s2)){, System.out.println(", Files ["+file1+"] and ["+file2+"] differ on line "+line, Counter);, System.out.println(", One reads:  ["+s1+"].");, System.out.println(", Other reads:["+s2+"].");output, File(test, Class,file1);output, File(test, Class,file2);returnfalse;}}] [Line, Counter++;] [Strings2=in2.read, Line()] [If(!s1.equals(s2)){, System.out.println(", Files ["+file1+"] and ["+file2+"] differ on line "+line, Counter);, System.out.println(", One reads:  ["+s1+"].");, System.out.println(", Other reads:["+s2+"].");output, File(test, Class,file1);output, File(test, Class,file2);returnfalse;}] [System.out.println(", Files ["+file1+"] and ["+file2+"] differ on line "+line, Counter);] [System.out.println(", One reads:  ["+s1+"].");] [System.out.println(", Other reads:["+s2+"].");] [Output, File(test, Class,file1);] [Output, File(test, Class,file2);] [Returnfalse;] [If(in2.read()!=-1){, System.out.println(", File ["+file2+"] longer than file ["+file1+"].");output, File(test, Class,file1);output, File(test, Class,file2);returnfalse;}] [System.out.println(", File ["+file2+"] longer than file ["+file1+"].");] [Output, File(test, Class,file1);] [Output, File(test, Class,file2);] [Returnfalse;] [Returntrue;] [Input, Streamis=open(test, Class,file)] [Buffered, Readerin1=new, Buffered, Reader(new, Input, Stream, Reader(is))] [Strings1] [Intline, Counter=0] [System.out.println("--------------------------------");] [System.out.println(", Contents of "+file+":");] [While((s1=in1.read, Line())!=null){line, Counter++;, System.out.print(line, Counter);if(line, Counter<10){, System.out.print("   : ");}elseif(line, Counter<100){, System.out.print("  : ");}elseif(line, Counter<1000){, System.out.print(" : ");}else{, System.out.print(": ");}, System.out.println(s1);}] [Line, Counter++;] [System.out.print(line, Counter);] [If(line, Counter<10){, System.out.print("   : ");}elseif(line, Counter<100){, System.out.print("  : ");}elseif(line, Counter<1000){, System.out.print(" : ");}else{, System.out.print(": ");}] [System.out.print("   : ");] [System.out.print("  : ");] [System.out.print(" : ");] [System.out.print(": ");] [System.out.println(s1);] [In1.close();]
 [This.allowed, Patterns=allowed, Patterns;] [Intlen=allowed, Patterns.length] [For(inti=0;i<len;i++){if(util.match("/"+allowed, Patterns[i]+"/",in)){returnin;}}] [If(util.match("/"+allowed, Patterns[i]+"/",in)){returnin;}] [Returnin;] [Thrownew, Unexpected, Format, Exception("["+in+"]");]
 [If(in==null){returnnull;}] [Returnnull;] [If(in.index, Of("at junit.framework., Test, Case.run, Test")!=-1){return"\tat java.lang.reflect., Method.invoke(, X)\n\t"+in.trim();}] [Return"\tat java.lang.reflect., Method.invoke(, X)\n\t"+in.trim();] [For(inti=0;i<, Patterns.length;i++){if(in.index, Of(, Patterns[i])!=-1){returnnull;}}] [If(in.index, Of(, Patterns[i])!=-1){returnnull;}] [Returnnull;] [If(util.match("/\\sat /",in)){return"\t"+in.trim();}] [Return"\t"+in.trim();] [Returnin;]
 [Line, Pattern=, Pattern.compile("\\(.*:\\d{1,4}\\)");] [Native, Pattern=, Pattern.compile("\\(, Native , Method\\)");] [If(line, Pattern.matcher(in).find()){returnline, Pattern.matcher(in).replace, All("(, X)");}elseif(native, Pattern.matcher(in).find()){returnnative, Pattern.matcher(in).replace, All("(, X)");}else{returnin;}] [Returnline, Pattern.matcher(in).replace, All("(, X)");] [Returnnative, Pattern.matcher(in).replace, All("(, X)");] [Returnin;]
 [Stringpat="/"+, Iso8601, Pat+"/"] [If(util.match(pat,in)){returnutil.substitute("s/"+, Iso8601, Pat+"//",in);}else{returnin;}] [Returnutil.substitute("s/"+, Iso8601, Pat+"//",in);] [Returnin;]
 [If(in==null){returnnull;}] [Returnnull;] [If(util.match("/at org.eclipse.jdt.internal.junit.runner., Remote, Test, Runner/",in)){returnnull;}elseif(util.match("/at org.apache.tools.ant.taskdefs.optional.junit., J, Unit, Test, Runner/",in)){returnnull;}elseif(util.match("/at com.intellij/",in)){returnnull;}elseif(in.index, Of("at junit.")>=0&&in.index, Of("ui., Test, Runner")>=0){returnnull;}elseif(in.index, Of("org.apache.maven")>=0){returnnull;}elseif(in.index, Of("junit.internal")>=0){returnnull;}elseif(in.index, Of(", J, Unit4, Test, Adapter")>=0){returnnull;}elseif(util.match("/\\sat /",in)){return"\t"+in.trim();}else{returnin;}] [Returnnull;] [Returnnull;] [Returnnull;] [Returnnull;] [Returnnull;] [Returnnull;] [Returnnull;] [Return"\t"+in.trim();] [Returnin;]
 [If(util.match("/\\(.*:\\d{1,4}\\)/",in)){returnutil.substitute("s/:\\d{1,4}\\)/:, Xxx)/",in);}else{if(in.index, Of(", , Compiled , Code")>=0){returnutil.substitute("s/, , Compiled , Code/:, Xxx/",in);}returnin;}] [Returnutil.substitute("s/:\\d{1,4}\\)/:, Xxx)/",in);] [If(in.index, Of(", , Compiled , Code")>=0){returnutil.substitute("s/, , Compiled , Code/:, Xxx/",in);}] [Returnutil.substitute("s/, , Compiled , Code/:, Xxx/",in);] [Returnin;]
 [Stringpat="/"+, Filter., Relative, Time, Pat+"/"] [If(util.match(pat,in)){returnutil.substitute("s/"+, Filter., Relative, Time, Pat+"//",in);}else{returnin;}] [Returnutil.substitute("s/"+, Filter., Relative, Time, Pat+"//",in);] [Returnin;]
 [Byte, Array, Output, Streammem, Out=new, Byte, Array, Output, Stream()] [Object, Output, Streamobj, Out=new, Object, Output, Stream(mem, Out)] [Obj, Out.write, Object(obj);] [Obj, Out.close();] [Byte, Array, Input, Streamsrc=new, Byte, Array, Input, Stream(mem, Out.to, Byte, Array())] [Object, Input, Streamobj, Is=new, Object, Input, Stream(src)] [Returnobj, Is.read, Object();] [File, Input, Streamfile, Is=new, File, Input, Stream(witness)] [Object, Input, Streamobj, Is=new, Object, Input, Stream(file, Is)] [Returnobj, Is.read, Object();] [Byte, Array, Output, Streammem, Out=new, Byte, Array, Output, Stream()] [Object, Output, Streamobj, Out=new, Object, Output, Stream(mem, Out)] [Obj, Out.write, Object(obj);] [Obj, Out.close();] [Assert, Stream, Equals(witness,mem, Out.to, Byte, Array(),skip,end, Compare);] [Filewitness, File=new, File(witness)] [If(witness, File.exists()){intskip, Index=0;byte[]expected=newbyte[actual.length];, File, Input, Streamis=new, File, Input, Stream(witness, File);intbytes, Read=is.read(expected);is.close();if(bytes, Read<end, Compare){, Test, Case.assert, Equals(bytes, Read,actual.length);}intend, Scan=actual.length;if(end, Scan>end, Compare){end, Scan=end, Compare;}for(inti=0;i<end, Scan;i++){if((skip, Index<skip.length)&&(skip[skip, Index]==i)){skip, Index++;}else{if(expected[i]!=actual[i]){, Test, Case.assert, Equals(", Difference at offset "+i,expected[i],actual[i]);}}}}else{, File, Output, Streamos=new, File, Output, Stream(witness, File);os.write(actual);os.close();, Test, Case.fail(", Writing witness file "+witness);}] [Intskip, Index=0] [Byte[]expected=newbyte[actual.length]] [File, Input, Streamis=new, File, Input, Stream(witness, File)] [Intbytes, Read=is.read(expected)] [Is.close();] [If(bytes, Read<end, Compare){, Test, Case.assert, Equals(bytes, Read,actual.length);}] [Test, Case.assert, Equals(bytes, Read,actual.length);] [Intend, Scan=actual.length] [If(end, Scan>end, Compare){end, Scan=end, Compare;}] [End, Scan=end, Compare;] [For(inti=0;i<end, Scan;i++){if((skip, Index<skip.length)&&(skip[skip, Index]==i)){skip, Index++;}else{if(expected[i]!=actual[i]){, Test, Case.assert, Equals(", Difference at offset "+i,expected[i],actual[i]);}}}] [If((skip, Index<skip.length)&&(skip[skip, Index]==i)){skip, Index++;}else{if(expected[i]!=actual[i]){, Test, Case.assert, Equals(", Difference at offset "+i,expected[i],actual[i]);}}] [Skip, Index++;] [If(expected[i]!=actual[i]){, Test, Case.assert, Equals(", Difference at offset "+i,expected[i],actual[i]);}] [Test, Case.assert, Equals(", Difference at offset "+i,expected[i],actual[i]);] [File, Output, Streamos=new, File, Output, Stream(witness, File)] [Os.write(actual);] [Os.close();] [Test, Case.fail(", Writing witness file "+witness);]
 [If(in==null){returnnull;}] [Returnnull;] [If(util.match("/at sun.reflect/",in)){returnnull;}] [Returnnull;] [If(in.index, Of("at java.lang.reflect.")>=0){returnnull;}] [Returnnull;] [If(in.index, Of(", Compiled , Code")>=0){if(in.index, Of("junit.framework., Test, Suite")>=0){returnutil.substitute("s/, Compiled , Code/, Test, Suite.java:, Xxx/",in);}}] [If(in.index, Of("junit.framework., Test, Suite")>=0){returnutil.substitute("s/, Compiled , Code/, Test, Suite.java:, Xxx/",in);}] [Returnutil.substitute("s/, Compiled , Code/, Test, Suite.java:, Xxx/",in);] [If(util.match("/\\(, Method.java:.*\\)/",in)){returnutil.substitute("s/\\(, Method.java:.*\\)/(, Native , Method)/",in);}] [Returnutil.substitute("s/\\(, Method.java:.*\\)/(, Native , Method)/",in);] [Returnin;]
 [Stringline] [Buffered, Readerinput=new, Buffered, Reader(new, File, Reader(in))] [Print, Streamoutput=new, Print, Stream(new, File, Output, Stream(out,false))] [While((line=input.read, Line())!=null){for(inti=0;i<filters.length;i++){line=filters[i].filter(line);}if(line!=null){output.println(line);}}] [For(inti=0;i<filters.length;i++){line=filters[i].filter(line);}] [Line=filters[i].filter(line);] [If(line!=null){output.println(line);}] [Output.println(line);] [Stringline] [Buffered, Readerinput=new, Buffered, Reader(new, File, Reader(in))] [Print, Streamoutput=new, Print, Stream(new, File, Output, Stream(out))] [While((line=input.read, Line())!=null){line=filter.filter(line);output.println(line);}] [Line=filter.filter(line);] [Output.println(line);]
@
 [If(util.match("/line=\"\\d{1,3}\"/",in)){returnutil.substitute("s/line=\"\\d{1,3}\"/line=\", X\"/",in);}elseif(util.match("/line=\"?\"/",in)){returnutil.substitute("s/line=\"?\"/line=\", X\"/",in);}else{returnin;}] [Returnutil.substitute("s/line=\"\\d{1,3}\"/line=\", X\"/",in);] [Returnutil.substitute("s/line=\"?\"/line=\", X\"/",in);] [Returnin;]
 [If(util.match("/timestamp=\"\\d{10,13}\"/",in)){returnutil.substitute("s/timestamp=\"\\d{10,13}\"/timestamp=\", Xxx\"/",in);}else{returnin;}] [Returnutil.substitute("s/timestamp=\"\\d{10,13}\"/timestamp=\", Xxx\"/",in);] [Returnin;]
 [Log, Manager.reset, Configuration();] [Externally, Rolled, File, Appenderappender=new, Externally, Rolled, File, Appender()] [Assert, Equals(0,appender.get, Port());] [Socketsocket=new, Socket((, String)null,port)] [Data, Input, Streamreader=new, Data, Input, Stream(socket.get, Input, Stream())] [Data, Output, Streamwriter=new, Data, Output, Stream(socket.get, Output, Stream())] [Writer.write, Utf(msg);] [Stringresponse=reader.read, Utf()] [Assert, Equals(expected, Response,response);] [Reader.close();] [Writer.close();] [Socket.close();] [Externally, Rolled, File, Appendererfa=new, Externally, Rolled, File, Appender()] [Intport=5500] [Loggerlogger=, Logger.get, Logger(, Rfa, Test, Case.class)] [Loggerroot=, Logger.get, Root, Logger()] [Pattern, Layoutlayout=new, Pattern, Layout("%m\n")] [Erfa.set, Layout(layout);] [Erfa.set, Append(false);] [Erfa.set, Max, Backup, Index(2);] [Erfa.set, Port(port);] [Erfa.set, File("output/, Erfa-test2.log");] [Try{erfa.activate, Options();}catch(, Security, Exceptionex){return;}] [Erfa.activate, Options();] [Return;] [Try{, Thread.sleep(100);}catch(, Interrupted, Exceptionex){}] [Thread.sleep(100);] [Root.add, Appender(erfa);] [For(inti=0;i<55;i++){if(i<10){logger.debug(", Hello---"+i);}elseif(i<100){logger.debug(", Hello--"+i);}if((i%10)==9){try{send, Message(port,", Roll, Over",", Ok");}catch(, Security, Exceptionex){return;}}}] [If(i<10){logger.debug(", Hello---"+i);}elseif(i<100){logger.debug(", Hello--"+i);}] [Logger.debug(", Hello---"+i);] [Logger.debug(", Hello--"+i);] [If((i%10)==9){try{send, Message(port,", Roll, Over",", Ok");}catch(, Security, Exceptionex){return;}}] [Try{send, Message(port,", Roll, Over",", Ok");}catch(, Security, Exceptionex){return;}] [Send, Message(port,", Roll, Over",", Ok");] [Return;] [Try{send, Message(port,", That's all folks.",", Expecting [, Roll, Over] string.");}catch(, Security, Exceptionex){return;}] [Send, Message(port,", That's all folks.",", Expecting [, Roll, Over] string.");] [Return;] [Assert, True(new, File("output/, Erfa-test2.log").exists());] [Assert, True(new, File("output/, Erfa-test2.log.1").exists());] [Assert, True(new, File("output/, Erfa-test2.log.2").exists());] [Assert, False(new, File("output/, Erfa-test2.log.3").exists());]
 [Root.get, Logger, Repository().reset, Configuration();] [Dom, Configurator.configure("input/xml/fallback1.xml");] [Appenderprimary=root.get, Appender(", Primary")] [Error, Handlereh=primary.get, Error, Handler()] [Assert, Not, Null(eh);] [Common();] [Control, Filtercf=new, Control, Filter(new, String[]{, Test1, Pat,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/fallback1"));] [Property, Configurator.configure("input/fallback1.properties");] [Appenderprimary=root.get, Appender(", Primary")] [Error, Handlereh=primary.get, Error, Handler()] [Assert, Not, Null(eh);] [Common();] [Control, Filtercf=new, Control, Filter(new, String[]{, Test1, Pat,, Exception1,, Exception2,, Exception3})] [Transformer.transform(, Temp,, Filtered,new, Filter[]{cf,new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/fallback1"));] [Inti=-1] [Logger.debug(", Message "+++i);] [Root.debug(", Message "+i);] [Logger.info(", Message "+++i);] [Root.info(", Message "+i);] [Logger.warn(", Message "+++i);] [Root.warn(", Message "+i);] [Logger.error(", Message "+++i);] [Root.error(", Message "+i);] [Logger.log(, Level., Fatal,", Message "+++i);] [Root.log(, Level., Fatal,", Message "+i);] [Exceptione=new, Exception(", Just testing")] [Logger.debug(", Message "+++i,e);] [Root.debug(", Message "+i,e);] [Logger.error(", Message "+++i,e);] [Root.error(", Message "+i,e);]
 [Root.get, Logger, Repository().reset, Configuration();] [Layoutlayout=new, Simple, Layout()] [Appenderappender=new, File, Appender(layout,, Accept, File,false)] [Level, Match, Filtermatch, Filter=new, Level, Match, Filter()] [Appender.add, Filter(match, Filter);] [Appender.add, Filter(new, Deny, All, Filter());] [Root.add, Appender(appender);] [Root.set, Level(, Level., Trace);] [Level[]level, Array=new, Level[]{, Level., Trace,, Level., Debug,, Level., Info,, Level., Warn,, Level., Error,, Level., Fatal}] [For(intx=0;x<level, Array.length;x++){match, Filter.set, Level, To, Match(level, Array[x].to, String());common("pass "+x+"; filter set to accept only "+level, Array[x].to, String()+" msgs");}] [Match, Filter.set, Level, To, Match(level, Array[x].to, String());] [Common("pass "+x+"; filter set to accept only "+level, Array[x].to, String()+" msgs");] [Transformer.transform(, Accept, File,, Accept, Filtered,new, Line, Number, Filter());] [Assert, True(, Compare.compare(, Accept, Filtered,, Accept, Witness));] [Layoutlayout=new, Simple, Layout()] [Appenderappender=new, File, Appender(layout,, Deny, File,false)] [Level, Match, Filtermatch, Filter=new, Level, Match, Filter()] [Match, Filter.set, Accept, On, Match(false);] [Appender.add, Filter(match, Filter);] [Root.add, Appender(appender);] [Root.set, Level(, Level., Trace);] [Level[]level, Array=new, Level[]{, Level., Trace,, Level., Debug,, Level., Info,, Level., Warn,, Level., Error,, Level., Fatal}] [For(intx=0;x<level, Array.length;x++){match, Filter.set, Level, To, Match(level, Array[x].to, String());common("pass "+x+"; filter set to deny only "+level, Array[x].to, String()+" msgs");}] [Match, Filter.set, Level, To, Match(level, Array[x].to, String());] [Common("pass "+x+"; filter set to deny only "+level, Array[x].to, String()+" msgs");] [Transformer.transform(, Deny, File,, Deny, Filtered,new, Line, Number, Filter());] [Assert, True(, Compare.compare(, Deny, Filtered,, Deny, Witness));] [Loggerlogger=, Logger.get, Logger("test")] [Logger.trace(msg);] [Logger.debug(msg);] [Logger.info(msg);] [Logger.warn(msg);] [Logger.error(msg);] [Logger.fatal(msg);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Level, Match, Filter, Test, Case("accept"));] [Suite.add, Test(new, Level, Match, Filter, Test, Case("deny"));] [Returnsuite;]
 [Vector=new, Vector();] [Try{, Thread.sleep(100);}catch(, Exceptione){}] [Thread.sleep(100);] [Vector.add, Element(event);] [Returnvector;] [If(this.closed)return;] [This.closed=true;] [Returnclosed;] [Returnfalse;]
 [This.logger=logger;] [Returnlogger;] [Error(message,e,error, Code,null);] [Error(message,null,-1,null);] [Errors.add, Element(new, Object[]{message,e,new, Integer(error, Code),event});] [Return(, String)((, Object[])errors.element, At(index))[0];] [Return(, Exception)((, Object[])errors.element, At(index))[1];] [Return((, Integer)((, Object[])errors.element, At(index))[2]).int, Value();] [Return(, Logging, Event)((, Object[])errors.element, At(index))[3];] [Returnerrors.size();] [This.appender=appender;] [Returnappender;] [This.backup, Appender=appender;] [Returnbackup, Appender;]
 [Root.get, Logger, Repository().reset, Configuration();] [Dom, Configurator.configure("input/xml/custom, Level1.xml");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/custom, Level.1"));] [Dom, Configurator.configure("input/xml/custom, Level2.xml");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/custom, Level.2"));] [Dom, Configurator.configure("input/xml/custom, Level3.xml");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/custom, Level.3"));] [Dom, Configurator.configure("input/xml/custom, Level4.xml");] [Common();] [Assert, True(, Compare.compare(, Temp,"witness/custom, Level.4"));] [Inti=0] [Logger.debug(", Message "+++i);] [Logger.info(", Message "+++i);] [Logger.warn(", Message "+++i);] [Logger.error(", Message "+++i);] [Logger.log(, X, Level., Trace,", Message "+++i);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Custom, Level, Test, Case("test1"));] [Suite.add, Test(new, Custom, Level, Test, Case("test2"));] [Suite.add, Test(new, Custom, Level, Test, Case("test3"));] [Suite.add, Test(new, Custom, Level, Test, Case("test4"));] [Returnsuite;]
 [Root.get, Logger, Repository().reset, Configuration();] [Dom, Configurator.configure("input/xml/, Dom, Test, Case1.xml");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Test11, A, Pat,, Test11, B, Pat,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Control, Filtercf2=new, Control, Filter(new, String[]{, Test12, Pat,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp, A1,, Filtered, A1,new, Filter[]{cf1,new, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Transformer.transform(, Temp, A2,, Filtered, A2,new, Filter[]{cf2,new, Line, Number, Filter(),new, Iso8601, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered, A1,"witness/dom., A1.1"));] [Assert, True(, Compare.compare(, Filtered, A2,"witness/dom., A2.1"));] [Dom, Configurator.configure("input/xml/, Dom, Test4.xml");] [Common();] [Control, Filtercf1=new, Control, Filter(new, String[]{, Test11, A, Pat,, Test11, B, Pat,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Control, Filtercf2=new, Control, Filter(new, String[]{, Test12, Pat,, Exception1,, Exception2,, Exception3,, Exception4,, Exception5})] [Transformer.transform(, Temp, A1+".4",, Filtered, A1+".4",new, Filter[]{cf1,new, Line, Number, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Transformer.transform(, Temp, A2+".4",, Filtered, A2+".4",new, Filter[]{cf2,new, Line, Number, Filter(),new, Iso8601, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Assert, True(, Compare.compare(, Filtered, A1+".4","witness/dom., A1.4"));] [Assert, True(, Compare.compare(, Filtered, A2+".4","witness/dom., A2.4"));] [Stringold, Thread, Name=, Thread.current, Thread().get, Name()] [Thread.current, Thread().set, Name("main");] [Inti=-1] [Logger.trace(", Message "+++i);] [Root.trace(", Message "+i);] [Logger.debug(", Message "+++i);] [Root.debug(", Message "+i);] [Logger.info(", Message "+++i);] [Root.info(", Message "+i);] [Logger.warn(", Message "+++i);] [Root.warn(", Message "+i);] [Logger.error(", Message "+++i);] [Root.error(", Message "+i);] [Logger.log(, Level., Fatal,", Message "+++i);] [Root.log(, Level., Fatal,", Message "+i);] [Exceptione=new, Exception(", Just testing")] [Logger.debug(", Message "+++i,e);] [Root.debug(", Message "+i,e);] [Logger.error(", Message "+++i,e);] [Root.error(", Message "+i,e);] [Thread.current, Thread().set, Name(old, Thread, Name);]
 [Additivity=true;] [Loggerlogger=new, Custom, Logger(name)] [Assert, False(additivity);] [Returnlogger;] [Additivity=new, Val;]
@
 [Dom, Configurator.configure("input/xml/categoryfactory1.xml");] [Loggerlogger1=, Logger.get, Logger("org.apache.log4j.xml., Dom, Test, Case.test, Category, Factory1.1")] [Assert, True(logger1instanceof, Custom, Logger);] [Loggerlogger2=, Logger.get, Logger("org.apache.log4j.xml., Dom, Test, Case.test, Category, Factory1.2")] [Assert, False(logger2instanceof, Custom, Logger);] [Dom, Configurator.configure("input/xml/categoryfactory2.xml");] [Loggerlogger1=, Logger.get, Logger("org.apache.log4j.xml., Dom, Test, Case.test, Category, Factory2.1")] [Assert, True(logger1instanceof, Custom, Logger);] [Loggerlogger2=, Logger.get, Logger("org.apache.log4j.xml., Dom, Test, Case.test, Category, Factory2.2")] [Assert, False(logger2instanceof, Custom, Logger);] [Dom, Configurator.configure("input/xml/loggerfactory1.xml");] [Loggerlogger1=, Logger.get, Logger("org.apache.log4j.xml., Dom, Test, Case.test, Logger, Factory1.1")] [Assert, True(logger1instanceof, Custom, Logger);] [Loggerlogger2=, Logger.get, Logger("org.apache.log4j.xml., Dom, Test, Case.test, Logger, Factory1.2")] [Assert, False(logger2instanceof, Custom, Logger);] [Vector, Appenderappender=new, Vector, Appender()] [Appender.set, Name(", V1");] [Logger.get, Root, Logger().add, Appender(appender);] [Dom, Configurator.configure("input/xml/test, Reset.xml");] [Assert, Null(, Logger.get, Root, Logger().get, Appender(", V1"));] [Dom, Configurator.configure, And, Watch("input/xml/, Dom, Test, Case1.xml");] [Assert, Not, Null(, Logger.get, Root, Logger().get, Appender(", A1"));] [Dom, Configuratorconfigurator=new, Dom, Configurator(){protected, Stringsubst(final, Stringvalue){if("output/temp., A1".equals(value)){return"output/subst-test., A1";}returnvalue;}}] [If("output/temp., A1".equals(value)){return"output/subst-test., A1";}] [Return"output/subst-test., A1";] [Returnvalue;] [Configurator.do, Configure("input/xml/, Dom, Test, Case1.xml",, Log, Manager.get, Logger, Repository());] [File, Appendera1=(, File, Appender), Logger.get, Root, Logger().get, Appender(", A1")] [Stringfile=a1.get, File()] [Assert, Equals("output/subst-test., A1",file);] [Activated=true;] [Returnactivated;] [Returnnew, String[0];] [Show, Version=v;] [Returnshow, Version;]
 [Dom, Configurator.configure("input/xml/throwable, Renderer1.xml");] [Throwable, Renderer, Supportrepo=(, Throwable, Renderer, Support), Log, Manager.get, Logger, Repository()] [Mock, Throwable, Rendererrenderer=(, Mock, Throwable, Renderer)repo.get, Throwable, Renderer()] [Log, Manager.reset, Configuration();] [Assert, Not, Null(renderer);] [Assert, Equals(true,renderer.is, Activated());] [Assert, Equals(false,renderer.get, Show, Version());] [Fileinput=new, File("input/xml/default, Init.xml")] [System.out.println(input.get, Absolute, Path());] [Input, Streamis=new, File, Input, Stream(input)] [Filedir=new, File("output")] [Dir.mkdirs();] [Filefile=new, File("output/xml.jar")] [Zip, Output, Streamzos=new, Zip, Output, Stream(new, File, Output, Stream(file))] [Zos.put, Next, Entry(new, Zip, Entry("log4j.xml"));] [Intlen] [Byte[]buf=newbyte[1024]] [While((len=is.read(buf))>0){zos.write(buf,0,len);}] [Zos.write(buf,0,len);] [Zos.close, Entry();] [Zos.close();] [Ur, Lurl=new, Url("jar:"+file.to, Url()+"!/log4j.xml")] [Dom, Configurator.configure(url);] [Assert, True(file.delete());] [Assert, False(file.exists());]
 [Return(, Level)to, Level(s, Arg,, X, Level., Trace);] [If(s, Arg==null){returndefault, Value;}] [Returndefault, Value;] [Stringstring, Val=s, Arg.to, Upper, Case()] [If(string, Val.equals(, Trace, Str)){return, X, Level., Trace;}elseif(string, Val.equals(, Lethal, Str)){return, X, Level., Lethal;}] [Return, X, Level., Trace;] [Return, X, Level., Lethal;] [Return, Level.to, Level(s, Arg,(, Level)default, Value);] [Switch(i){case, Trace, Int:return, X, Level., Trace;case, Lethal, Int:return, X, Level., Lethal;}] [Return, X, Level., Trace;] [Return, X, Level., Lethal;] [Return, Level.to, Level(i);]
 [Set, Up();] [Returnnew, Xml, Layout();] [Document, Builder, Factoryfactory=, Document, Builder, Factory.new, Instance()] [Factory.set, Namespace, Aware(false);] [Factory.set, Coalescing(true);] [Document, Builderbuilder=factory.new, Document, Builder()] [Readerreader=new, String, Reader(source)] [Documentdoc=builder.parse(new, Input, Source(reader))] [Returndoc.get, Document, Element();] [Assert, Equals("log4j:event",element.get, Tag, Name());] [Assert, Equals(event.get, Logger, Name(),element.get, Attribute("logger"));] [Assert, Equals(, Long.to, String(event.time, Stamp),element.get, Attribute("timestamp"));] [Assert, Equals(event.get, Level().to, String(),element.get, Attribute("level"));] [Assert, Equals(event.get, Thread, Name(),element.get, Attribute("thread"));] [Assert, Equals("log4j:message",element.get, Tag, Name());] [Nodemessage, Node=element.get, First, Child()] [Assert, Not, Null(message, Node);] [Assert, Equals(, Node., Text, Node,message, Node.get, Node, Type());] [Assert, Equals(message,message, Node.get, Node, Value());] [Assert, Null(message, Node.get, Next, Sibling());] [Assert, Equals("log4j:, Ndc",element.get, Tag, Name());] [Nodemessage, Node=element.get, First, Child()] [Assert, Not, Null(message, Node);] [Assert, Equals(, Node., Text, Node,message, Node.get, Node, Type());] [Assert, Equals(message,message, Node.get, Node, Value());] [Assert, Null(message, Node.get, Next, Sibling());] [Assert, Equals("log4j:throwable",element.get, Tag, Name());] [Nodemessage, Node=element.get, First, Child()] [Assert, Not, Null(message, Node);] [Assert, Equals(, Node., Text, Node,message, Node.get, Node, Type());] [Stringmsg=ex.to, String()] [Assert, Equals(msg,message, Node.get, Node, Value().substring(0,msg.length()));] [Assert, Null(message, Node.get, Next, Sibling());] [Assert, Equals("log4j:properties",element.get, Tag, Name());] [Intchild, Node, Count=0] [For(, Nodechild=element.get, First, Child();child!=null;child=child.get, Next, Sibling()){if(child.get, Node, Type()==, Node., Element, Node){assert, Equals("log4j:data",child.get, Node, Name());, Elementchild, Element=(, Element)child;assert, Equals(key,child, Element.get, Attribute("name"));assert, Equals(value,child, Element.get, Attribute("value"));child, Node, Count++;}}] [If(child.get, Node, Type()==, Node., Element, Node){assert, Equals("log4j:data",child.get, Node, Name());, Elementchild, Element=(, Element)child;assert, Equals(key,child, Element.get, Attribute("name"));assert, Equals(value,child, Element.get, Attribute("value"));child, Node, Count++;}] [Assert, Equals("log4j:data",child.get, Node, Name());] [Elementchild, Element=(, Element)child] [Assert, Equals(key,child, Element.get, Attribute("name"));] [Assert, Equals(value,child, Element.get, Attribute("value"));] [Child, Node, Count++;] [Assert, Equals(1,child, Node, Count);] [Loggerlogger=, Logger.get, Logger("org.apache.log4j.xml., Xml, Layout, Test")] [Logging, Eventevent=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Info,", Hello, , World",null)] [Xml, Layoutlayout=(, Xml, Layout)create, Layout()] [Stringresult=layout.format(event)] [Elementparsed, Result=parse(result)] [Check, Event, Element(parsed, Result,event);] [Intchild, Element, Count=0] [For(, Nodenode=parsed, Result.get, First, Child();node!=null;node=node.get, Next, Sibling()){switch(node.get, Node, Type()){case, Node., Element, Node:child, Element, Count++;check, Message, Element((, Element)node,", Hello, , World");break;case, Node., Comment, Node:break;case, Node., Text, Node:break;default:fail(", Unexpected node type");break;}}] [Switch(node.get, Node, Type()){case, Node., Element, Node:child, Element, Count++;check, Message, Element((, Element)node,", Hello, , World");break;case, Node., Comment, Node:break;case, Node., Text, Node:break;default:fail(", Unexpected node type");break;}] [Child, Element, Count++;] [Check, Message, Element((, Element)node,", Hello, , World");] [Break;] [Break;] [Break;] [Fail(", Unexpected node type");] [Break;] [Assert, Equals(1,child, Element, Count);] [Loggerlogger=, Logger.get, Logger("org.apache.log4j.xml., Xml, Layout, Test")] [Exceptionex=new, Illegal, Argument, Exception("'foo' is not a valid name")] [Logging, Eventevent=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Info,", Hello, , World",ex)] [Xml, Layoutlayout=(, Xml, Layout)create, Layout()] [Stringresult=layout.format(event)] [Elementparsed, Result=parse(result)] [Check, Event, Element(parsed, Result,event);] [Intchild, Element, Count=0] [For(, Nodenode=parsed, Result.get, First, Child();node!=null;node=node.get, Next, Sibling()){switch(node.get, Node, Type()){case, Node., Element, Node:child, Element, Count++;if(child, Element, Count==1){check, Message, Element((, Element)node,", Hello, , World");}else{check, Throwable, Element((, Element)node,ex);}break;case, Node., Comment, Node:break;case, Node., Text, Node:break;default:fail(", Unexpected node type");break;}}] [Switch(node.get, Node, Type()){case, Node., Element, Node:child, Element, Count++;if(child, Element, Count==1){check, Message, Element((, Element)node,", Hello, , World");}else{check, Throwable, Element((, Element)node,ex);}break;case, Node., Comment, Node:break;case, Node., Text, Node:break;default:fail(", Unexpected node type");break;}] [Child, Element, Count++;] [If(child, Element, Count==1){check, Message, Element((, Element)node,", Hello, , World");}else{check, Throwable, Element((, Element)node,ex);}] [Check, Message, Element((, Element)node,", Hello, , World");] [Check, Throwable, Element((, Element)node,ex);] [Break;] [Break;] [Break;] [Fail(", Unexpected node type");] [Break;] [Assert, Equals(2,child, Element, Count);] [Loggerlogger=, Logger.get, Logger("org.apache.log4j.xml., Xml, Layout, Test")] [Ndc.push(", Ndc goes here");] [Logging, Eventevent=new, Logging, Event("org.apache.log4j., Logger",logger,, Level., Info,", Hello, , World",null)] [Xml, Layoutlayout=(, Xml, Layout)create, Layout()] [Stringresult=layout.format(event)] [Ndc.pop();] [Elementparsed, Result=parse(result)] [Check, Event, Element(parsed, Result,event);] [Intchild, Element, Count=0] [For(, Nodenode=parsed, Result.get, First, Child();node!=null;node=node.get, Next, Sibling()){switch(node.get, Node, Type()){case, Node., Element, Node:child, Element, Count++;if(child, Element, Count==1){check, Message, Element((, Element)node,", Hello, , World");}else{check, Ndc, Element((, Element)node,", Ndc goes here");}break;case, Node., Comment, Node:break;case, Node., Text, Node:break;default:fail(", Unexpected node type");break;}}] [Switch(node.get, Node, Type()){case, Node., Element, Node:child, Element, Count++;if(child, Element, Count==1){check, Message, Element((, Element)node,", Hello, , World");}else{check, Ndc, Element((, Element)node,", Ndc goes here");}break;case, Node., Comment, Node:break;case, Node., Text, Node:break;default:fail(", Unexpected node type");break;}] [Child, Element, Count++;] [If(child, Element, Count==1){check, Message, Element((, Element)node,", Hello, , World");}else{check, Ndc, Element((, Element)node,", Ndc goes here");}] [Check, Message, Element((, Element)node,", Hello, , World");] [Check, Ndc, Element((, Element)node,", Ndc goes here");] [Break;] [Break;] [Break;] [Fail(", Unexpected node type");] [Break;] [Assert, Equals(2,child, Element, Count);] [Xml, Layoutlayout=new, Xml, Layout()] [Assert, Equals(false,layout.get, Location, Info());] [Layout.set, Location, Info(true);] [Assert, Equals(true,layout.get, Location, Info());] [Layout.set, Location, Info(false);] [Assert, Equals(false,layout.get, Location, Info());] [Xml, Layoutlayout=new, Xml, Layout()] [Layout.activate, Options();]
 [Stringproblem, Name="com.example.bar<>&\"'"] [Loggerlogger=, Logger.get, Logger(problem, Name)] [Levellevel=new, Problem, Level(problem, Name)] [Exceptionex=new, Illegal, Argument, Exception(problem, Name)] [Stringthread, Name=, Thread.current, Thread().get, Name()] [Thread.current, Thread().set, Name(problem, Name);] [Ndc.push(problem, Name);] [Hashtablemdc, Map=, Mdc.get, Context()] [If(mdc, Map!=null){mdc, Map.clear();}] [Mdc, Map.clear();] [Mdc.put(problem, Name,problem, Name);] [Logging, Eventevent=new, Logging, Event(problem, Name,logger,level,problem, Name,ex)] [Xml, Layoutlayout=(, Xml, Layout)create, Layout()] [Layout.set, Properties(true);] [Stringresult=layout.format(event)] [Mdc, Map=, Mdc.get, Context();] [If(mdc, Map!=null){mdc, Map.clear();}] [Mdc, Map.clear();] [Thread.current, Thread().set, Name(thread, Name);] [Elementparsed, Result=parse(result)] [Check, Event, Element(parsed, Result,event);] [Intchild, Element, Count=0] [For(, Nodenode=parsed, Result.get, First, Child();node!=null;node=node.get, Next, Sibling()){switch(node.get, Node, Type()){case, Node., Element, Node:child, Element, Count++;switch(child, Element, Count){case1:check, Message, Element((, Element)node,problem, Name);break;case2:check, Ndc, Element((, Element)node,problem, Name);break;case3:check, Throwable, Element((, Element)node,ex);break;case4:check, Properties, Element((, Element)node,problem, Name,problem, Name);break;default:fail(", Unexpected element");break;}break;case, Node., Comment, Node:break;case, Node., Text, Node:break;default:fail(", Unexpected node type");break;}}] [Switch(node.get, Node, Type()){case, Node., Element, Node:child, Element, Count++;switch(child, Element, Count){case1:check, Message, Element((, Element)node,problem, Name);break;case2:check, Ndc, Element((, Element)node,problem, Name);break;case3:check, Throwable, Element((, Element)node,ex);break;case4:check, Properties, Element((, Element)node,problem, Name,problem, Name);break;default:fail(", Unexpected element");break;}break;case, Node., Comment, Node:break;case, Node., Text, Node:break;default:fail(", Unexpected node type");break;}] [Child, Element, Count++;] [Switch(child, Element, Count){case1:check, Message, Element((, Element)node,problem, Name);break;case2:check, Ndc, Element((, Element)node,problem, Name);break;case3:check, Throwable, Element((, Element)node,ex);break;case4:check, Properties, Element((, Element)node,problem, Name,problem, Name);break;default:fail(", Unexpected element");break;}] [Check, Message, Element((, Element)node,problem, Name);] [Break;] [Check, Ndc, Element((, Element)node,problem, Name);] [Break;] [Check, Throwable, Element((, Element)node,ex);] [Break;] [Check, Properties, Element((, Element)node,problem, Name,problem, Name);] [Break;] [Fail(", Unexpected element");] [Break;] [Break;] [Break;] [Break;] [Fail(", Unexpected node type");] [Break;] [Loggerlogger=, Logger.get, Logger("com.example.bar")] [Levellevel=, Level., Info] [Stringndc, Message="<envelope><faultstring><![, Cdata[, The , Effective, Date]]></faultstring><envelope>"] [Ndc.push(ndc, Message);] [Logging, Eventevent=new, Logging, Event("com.example.bar",logger,level,", Hello, , World",null)] [Layoutlayout=create, Layout()] [Stringresult=layout.format(event)] [Ndc.clear();] [Elementparsed, Result=parse(result)] [Node, Listndcs=parsed, Result.get, Elements, By, Tag, Name("log4j:, Ndc")] [Assert, Equals(1,ndcs.get, Length());] [String, Bufferbuf=new, String, Buffer()] [For(, Nodechild=ndcs.item(0).get, First, Child();child!=null;child=child.get, Next, Sibling()){buf.append(child.get, Node, Value());}] [Buf.append(child.get, Node, Value());] [Assert, Equals(ndc, Message,buf.to, String());] [Loggerlogger=, Logger.get, Logger("com.example.bar")] [Levellevel=, Level., Info] [Stringexception, Message="<envelope><faultstring><![, Cdata[, The , Effective, Date]]></faultstring><envelope>"] [Logging, Eventevent=new, Logging, Event("com.example.bar",logger,level,", Hello, , World",new, Exception(exception, Message))] [Layoutlayout=create, Layout()] [Stringresult=layout.format(event)] [Elementparsed, Result=parse(result)] [Node, Listthrowables=parsed, Result.get, Elements, By, Tag, Name("log4j:throwable")] [Assert, Equals(1,throwables.get, Length());] [String, Bufferbuf=new, String, Buffer()] [For(, Nodechild=throwables.item(0).get, First, Child();child!=null;child=child.get, Next, Sibling()){buf.append(child.get, Node, Value());}] [Buf.append(child.get, Node, Value());] [Assert, True(buf.to, String().index, Of(exception, Message)!=-1);]
 [Root.get, Logger, Repository().reset, Configuration();] [Xml, Layoutxml, Layout=new, Xml, Layout()] [Root.add, Appender(new, File, Appender(xml, Layout,, Temp,false));] [Common();] [Transformer.transform(, Temp,, Filtered,new, Filter[]{new, Line, Number, Filter(),new, Xml, Timestamp, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/xml, Layout.1"));] [Xml, Layoutxml, Layout=new, Xml, Layout()] [Xml, Layout.set, Location, Info(true);] [Root.add, Appender(new, File, Appender(xml, Layout,, Temp,false));] [Common();] [Transformer.transform(, Temp,, Filtered,new, Filter[]{new, Line, Number, Filter(),new, Xml, Timestamp, Filter(),new, Xml, Line, Attribute, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/xml, Layout.2"));] [Xml, Layoutxml, Layout=new, Xml, Layout()] [Xml, Layout.set, Location, Info(true);] [Root.add, Appender(new, File, Appender(xml, Layout,, Temp,false));] [Stringold, Thread, Name=, Thread.current, Thread().get, Name()] [Thread.current, Thread().set, Name("main");] [Logger.trace(", Message with embedded <![, Cdata[<hello>hi</hello>]]>.");] [Logger.debug(", Message with embedded <![, Cdata[<hello>hi</hello>]]>.");] [Thread.current, Thread().set, Name(old, Thread, Name);] [Transformer.transform(, Temp,, Filtered,new, Filter[]{new, Line, Number, Filter(),new, Xml, Timestamp, Filter(),new, Xml, Line, Attribute, Filter(),new, Sun, Reflect, Filter(),new, Junit, Test, Runner, Filter()});] [Transformer.transform(, Temp,, Filtered,new, Filter[]{new, Line, Number, Filter(),new, Xml, Timestamp, Filter(),new, Xml, Line, Attribute, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/xml, Layout.3"));] [Xml, Layoutxml, Layout=new, Xml, Layout()] [Root.add, Appender(new, File, Appender(xml, Layout,, Temp,false));] [Stringold, Thread, Name=, Thread.current, Thread().get, Name()] [Thread.current, Thread().set, Name("main");] [Logger.debug("hi");] [Logger.debug(null);] [Exceptione=new, Exception((, String)null)] [Logger.debug("hi",e);] [Thread.current, Thread().set, Name(old, Thread, Name);] [Transformer.transform(, Temp,, Filtered,new, Filter[]{new, Line, Number, Filter(),new, Xml, Timestamp, Filter(),new, Junit, Test, Runner, Filter(),new, Sun, Reflect, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/xml, Layout.null"));] [Xml, Layoutxml, Layout=new, Xml, Layout()] [Xml, Layout.set, Properties(true);] [Root.add, Appender(new, File, Appender(xml, Layout,, Temp,false));] [Hashtablecontext=, Mdc.get, Context()] [If(context!=null){context.clear();}] [Context.clear();] [Mdc.put("key1","val1");] [Mdc.put("key2","val2");] [Logger.debug(", Hello");] [Transformer.transform(, Temp,, Filtered,new, Filter[]{new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Xml, Timestamp, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/xml, Layout.mdc.1"));] [Xml, Layoutxml, Layout=new, Xml, Layout()] [Xml, Layout.set, Properties(true);] [Root.add, Appender(new, File, Appender(xml, Layout,, Temp,false));] [Hashtablecontext=, Mdc.get, Context()] [If(context!=null){context.clear();}] [Context.clear();] [Mdc.put("blah, Attribute","<blah value='blah'>");] [Mdc.put("<blah, Key value='blah'/>","blah, Value");] [Logger.debug(", Hello");] [Transformer.transform(, Temp,, Filtered,new, Filter[]{new, Line, Number, Filter(),new, Junit, Test, Runner, Filter(),new, Xml, Timestamp, Filter()});] [Assert, True(, Compare.compare(, Filtered,"witness/xml, Layout.mdc.2"));] [Stringold, Thread, Name=, Thread.current, Thread().get, Name()] [Thread.current, Thread().set, Name("main");] [Inti=-1] [New, X();] [Logger.trace(", Message "+++i);] [Root.trace(", Message "+i);] [Logger.debug(", Message "+++i);] [Root.debug(", Message "+i);] [Logger.info(", Message "+++i);] [Root.info(", Message "+i);] [Logger.warn(", Message "+++i);] [Root.warn(", Message "+i);] [Logger.error(", Message "+++i);] [Root.error(", Message "+i);] [Logger.log(, Level., Fatal,", Message "+++i);] [Root.log(, Level., Fatal,", Message "+i);] [Exceptione=new, Exception(", Just testing")] [Logger.debug(", Message "+++i,e);] [Root.debug(", Message "+i,e);] [Logger.error(", Message "+++i,e);] [Root.error(", Message "+i,e);] [Thread.current, Thread().set, Name(old, Thread, Name);] [Test, Suitesuite=new, Test, Suite()] [Suite.add, Test(new, Xml, Layout, Test, Case("basic"));] [Suite.add, Test(new, Xml, Layout, Test, Case("location, Info"));] [Suite.add, Test(new, Xml, Layout, Test, Case("test, Cdata"));] [Suite.add, Test(new, Xml, Layout, Test, Case("test, Null"));] [Suite.add, Test(new, Xml, Layout, Test, Case("test, Mdc"));] [Suite.add, Test(new, Xml, Layout, Test, Case("test, Mdc, Escaped"));] [Returnsuite;] [Logger.info("in , X() constructor");]
@
