Class@@AsyncAppenderTestCase setUp tearDown LogManager closeTest asyncAppender "async-CloseTest" asyncAppender vectorAppender root asyncAppender root "m1" asyncAppender root "m2" assertEquals v.size() 1 test2 asyncAppender "async-test2" asyncAppender vectorAppender root asyncAppender root "m1" asyncAppender root "m2" assertEquals v.size() 1 assertTrue vectorAppender.isClosed() test3 asyncAppender "async-test3" asyncAppender vectorAppender root asyncAppender root "message"+i System.out "Done loop." System.out asyncAppender root "m2" assertEquals v.size() LEN assertTrue vectorAppender.isClosed()
Class@@NullPointerAppender append close requiresLayout testBadAppender asyncAppender nullPointerAppender asyncAppender 5 asyncAppender root nullPointerAppender root "Message" Thread 10 root "Message" fail "Should have thrown exception" testLocationInfoTrue async blockableAppender async 5 async true async false async rootLogger async greeter rootLogger "That's all folks." async layout "%C:%L %m%n" layout assertEquals AsyncAppenderTestCase.class.getName() initialStr.substring(0,AsyncAppenderTestCase.class.getName().length()) assertEquals "?:? " discardStr.substring(0,4) testLocationInfoFalse async blockableAppender async 5 async false async false async rootLogger async greeter rootLogger "That's all folks." async layout "%C:%L %m%n" layout assertEquals "?:? " initialStr.substring(0,4) assertEquals "?:? " discardStr.substring(0,4)
Class@@Greeter run logger "Hello, World" Thread 1 Thread.currentThread()
Class@@BlockableVectorAppender append logger event.getMessage().toString() logger event.getMessage().toString() logger event.getMessage().toString() logger event.getMessage().toString() getMonitor testMutableMessage async blockableAppender async 5 async false async rootLogger async rootLogger buf buf ", World." async layout "%m" layout assertEquals "Hello" msg
Class@@CategoryTest testForcedLog category false category newVectorAppender() category "Hello, World" testGetChainedPriorityReturnType assertTrue method.getReturnType()==Priority.class testL7dlog logger Level.ERROR logger debug "Hello, World" null testL7dlog4Param logger Level.ERROR logger debug "Hello, World" newObject[0] null testSetPriority logger debug
Class@@MockCategory info forcedLog MockCategory.class.toString() info msg null
Class@@CoreTestSuite suite s LoggingEventTest.class s org.apache.log4j.LevelTest.class s org.apache.log4j.PriorityTest.class s org.apache.log4j.CategoryTest.class s org.apache.log4j.FileAppenderTest.class s org.apache.log4j.LogManagerTest.class s org.apache.log4j.helpers.LogLogTest.class s org.apache.log4j.LayoutTest.class s org.apache.log4j.helpers.DateLayoutTest.class s org.apache.log4j.TTCCLayoutTest.class s org.apache.log4j.xml.XMLLayoutTest.class s org.apache.log4j.HTMLLayoutTest.class s org.apache.log4j.PatternLayoutTest.class s org.apache.log4j.spi.LoggingEventTest.class s org.apache.log4j.spi.ThrowableInformationTest.class s org.apache.log4j.spi.LocationInfoTest.class s org.apache.log4j.PropertyConfiguratorTest.class s org.apache.log4j.net.SMTPAppenderTest.class s org.apache.log4j.net.TelnetAppenderTest.class s org.apache.log4j.DefaultThrowableRendererTest.class s org.apache.log4j.EnhancedThrowableRendererTest.class s org.apache.log4j.TestLogXF.class s org.apache.log4j.TestLogMF.class s org.apache.log4j.TestLogSF.class s org.apache.log4j.pattern.CachedDateFormatTest.class s org.apache.log4j.pattern.FormattingInfoTest.class s org.apache.log4j.pattern.NameAbbreviatorTest.class s org.apache.log4j.pattern.PatternParserTest.class s org.apache.log4j.helpers.UtilLoggingLevelTest.class
Class@@XLogger activateOptions debug lethal forcedLog FQCN XLevel.LETHAL message t lethal forcedLog FQCN XLevel.LETHAL message null getLogger getLogger getSuffix setSuffix trace forcedLog FQCN XLevel.TRACE message t trace forcedLog FQCN XLevel.TRACE message null
Class@@XFactory makeNewLoggerInstance
Class@@XLoggerTestCase tearDown logger.getLoggerRepository() test1 common 1 test2 common 2 common DOMConfigurator "input/xml/customLogger"+number+".xml" logger "Message "+++i logger "Message "+++i logger "Message "+++i logger "Message "+++i logger "Message "+++i logger "Message "+++i e Transformer "output/temp" FILTERED newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/customLogger."+number) suite suite newXLoggerTestCase("test1") suite newXLoggerTestCase("test2")
Class@@TestCase1 setUp tearDown LogManager noneTest assertTrue !rootIsConfigured suite suite newTestCase1("noneTest")
Class@@TestCase2 setUp tearDown LogManager xmlTest assertTrue rootIsConfigured assertEquals appender.getName() "D1" suite suite newTestCase2("xmlTest")
Class@@TestCase3 setUp tearDown LogManager propertiesTest assertTrue rootIsConfigured assertEquals appender.getName() "D3" suite suite newTestCase3("propertiesTest")
Class@@TestCase4 setUp tearDown LogManager combinedTest assertTrue rootIsConfigured assertEquals appender.getName() "D1" assertEquals e.hasMoreElements() false suite suite newTestCase4("combinedTest")
Class@@DefaultThrowableRendererTest testDefaultRender assertNotNull strRep assertTrue strRep.length>0 assertNotNull strRep[i]
Class@@DRFATestCase tearDown LogManager testComputeCheckPeriod drfa "testComputeCheckPeriod" drfa "yyyy-MM-dd.'log'" drfa drfa assertEquals drfa.computeCheckPeriod() DailyRollingFileAppender.TOP_OF_DAY drfa "yyyy-MM-dd mm.'log'" assertEquals drfa.computeCheckPeriod() DailyRollingFileAppender.TOP_OF_MINUTE drfa "yyyy-MM-dd a.'log'" assertEquals drfa.computeCheckPeriod() DailyRollingFileAppender.HALF_DAY drfa "yyyy-MM-dd HH.'log'" assertEquals drfa.computeCheckPeriod() DailyRollingFileAppender.TOP_OF_HOUR drfa "yyyy-MM.'log'" assertEquals drfa.computeCheckPeriod() DailyRollingFileAppender.TOP_OF_MONTH drfa "'log'HH'log'" assertEquals drfa.computeCheckPeriod() DailyRollingFileAppender.TOP_OF_HOUR testRC1 rc DailyRollingFileAppender.TOP_OF_DAY c c Calendar.YEAR 20 c Calendar.MONTH Calendar.JANUARY+M31[i] c Calendar.DAY_OF_MONTH d c Calendar.HOUR_OF_DAY h c Calendar.MINUTE 10 c Calendar.SECOND 10 c Calendar.MILLISECOND 88 c rc.getNextCheckDate(c.getTime()) assertEquals c.get(Calendar.MONTH) (Calendar.JANUARY+M31[i]+1)%12 assertEquals c.get(Calendar.DAY_OF_MONTH) 1 assertEquals c.get(Calendar.MONTH) Calendar.JANUARY+M31[i] assertEquals c.get(Calendar.DAY_OF_MONTH) d+1 assertEquals c.get(Calendar.HOUR_OF_DAY) 0 assertEquals c.get(Calendar.MINUTE) 0 assertEquals c.get(Calendar.SECOND) 0 assertEquals c.get(Calendar.MILLISECOND) 0 testRC2 rc DailyRollingFileAppender.TOP_OF_HOUR System.out "Month = "+(M31[i]+1) c c Calendar.YEAR 20 c Calendar.MONTH Calendar.JANUARY+M31[i] c Calendar.DAY_OF_MONTH d c Calendar.HOUR_OF_DAY h c Calendar.MINUTE m c Calendar.SECOND 12 c Calendar.MILLISECOND 88 c rc.getNextCheckDate(c.getTime()) assertEquals c.get(Calendar.MILLISECOND) 0 assertEquals c.get(Calendar.SECOND) 0 assertEquals c.get(Calendar.MINUTE) 0 assertEquals c.get(Calendar.HOUR_OF_DAY) (h+1)%24 assertEquals c.get(Calendar.HOUR_OF_DAY) h assertEquals c.get(Calendar.DAY_OF_MONTH) (d+1)%32 assertEquals c.get(Calendar.MONTH) (Calendar.JANUARY+M31[i]+1)%12 assertEquals c.get(Calendar.MONTH) Calendar.JANUARY+M31[i] assertEquals c.get(Calendar.DAY_OF_MONTH) d assertEquals c.get(Calendar.MONTH) Calendar.JANUARY+M31[i] testRC3 rc DailyRollingFileAppender.TOP_OF_MINUTE System.out "Month = "+(M31[i]+1) c c Calendar.YEAR 20 c Calendar.MONTH Calendar.JANUARY+M31[i] c Calendar.DAY_OF_MONTH d c Calendar.HOUR_OF_DAY h c Calendar.MINUTE M[m] c Calendar.SECOND S[s] c Calendar.MILLISECOND 88 c Calendar.MILLISECOND 1 c rc.getNextCheckDate(c.getTime()) c Calendar.MILLISECOND 0 assertEquals c.get(Calendar.MILLISECOND) 0 assertEquals c.get(Calendar.SECOND) 0 assertEquals c.get(Calendar.MINUTE) (M[m]+1)%60 assertEquals c.get(Calendar.HOUR_OF_DAY) (h+1)%24 assertEquals c.get(Calendar.DAY_OF_MONTH) (d+1)%32 assertEquals c.get(Calendar.MONTH) (Calendar.JANUARY+M31[i]+1)%12 assertEquals c.get(Calendar.MONTH) Calendar.JANUARY+M31[i] assertEquals c.get(Calendar.DAY_OF_MONTH) d c Calendar.HOUR_OF_DAY +1 fail "No switch" assertEquals c.get(Calendar.DAY_OF_MONTH) d assertEquals c.get(Calendar.MONTH) Calendar.JANUARY+M31[i] test3Param assertEquals datePattern appender.getDatePattern() root appender root "Hello, World" assertTrue newFile(filename).exists() testTopOfYear test3Param "'.'yyyy" "output/drfa_topOfYear.log" fail "Expected illegal state exception." assertNotNull ex testTopOfMonth test3Param "'.'yyyy-MM" "output/drfa_topOfMonth.log" testTopOfWeek test3Param "'.'yyyy-w" "output/drfa_topOfWeek.log" testTopOfDay test3Param "'.'yyyy-MM-dd" "output/drfa_topOfDay.log" testHalfDay test3Param "'.'yyyy-MM-dd-a" "output/drfa_halfDay.log" testTopOfHour test3Param "'.'yyyy-MM-dd-HH" "output/drfa_topOfHour.log" testTopOfMinute test3Param "'.'yyyy-MM-dd-HH-mm" "output/drfa_topOfMinute.log" testRolloverNoPattern appender errorHandler appender assertEquals 1 errorHandler.size() assertEquals "Missing DatePattern option in rollOver()." errorHandler.getMessage(0) testMinuteRollover root appender root "Hello, World" firstFile assertTrue firstFile.exists() assertEquals 0 firstFile.length() cal Calendar.SECOND 3 cal Calendar.MILLISECOND 0 cal Calendar.MINUTE 1 Thread until-now root "Hello, World" assertTrue firstFile.exists() assertTrue firstFile.length()>0 append combined buf 0 count1 source testBlockedRollover appender false root appender root "Prior to rollover" Thread 63000-(start.getTime()%60000) root "Rollover attempt while blocked" os1 os2 root "Message after block removed" appender append combined newFileInputStream(block1) buf append combined newFileInputStream(block2) buf append combined newFileInputStream(filename) buf combined assertTrue Compare.compare(combinedFilename,"witness/drfa_blockedRollover.log") testWeeklyRollover drfa "'.'yyyy-ww" assertEquals DailyRollingFileAppender.TOP_OF_WEEK checkPeriod
Class@@EnhancedMyPatternLayout createPatternParser
Class@@EnhancedPatternLayoutTest createLayout testFormat buf '[' buf event.getThreadName() buf "] " buf event.getLevel().toString() buf ' ' buf event.getLoggerName() buf " - " buf event.getMessage() buf System.getProperty("line.separator") assertEquals buf.toString() result testGetPatternFormat assertEquals "[%t] %p %c - %m%n" layout.getConversionPattern() testDefaultConversionPattern assertEquals "%m%n" EnhancedPatternLayout.DEFAULT_CONVERSION_PATTERN testTTCCConversionPattern assertEquals "%r [%t] %p %c %x - %m%n" EnhancedPatternLayout.TTCC_CONVERSION_PATTERN testFormatResize NDC assertEquals "[" result.substring(0,1)
Class@@DerivedPatternLayout getBufSize getMaxCapacity
Class@@EnhancedPatternLayoutTestCase setUp tearDown root.getLoggerRepository() configure PropertyConfigurator fileName compare test1 configure "input/pattern/enhancedPatternLayout1.properties" common Transformer TEMP FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.1") test2 configure "input/pattern/enhancedPatternLayout2.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.2") test3 configure "input/pattern/enhancedPatternLayout3.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.3") test4 configure "input/pattern/enhancedPatternLayout4.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.4") test5 configure "input/pattern/enhancedPatternLayout5.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.5") test6 configure "input/pattern/enhancedPatternLayout6.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.6") test7 configure "input/pattern/enhancedPatternLayout7.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.7") test8 configure "input/pattern/enhancedPatternLayout8.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newRelativeTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.8") test9 configure "input/pattern/enhancedPatternLayout9.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.9") test10 configure "input/pattern/enhancedPatternLayout10.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.10") test11 configure "input/pattern/enhancedPatternLayout11.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.11") test12 configure "input/pattern/enhancedPatternLayout12.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.12") test13 configure "input/pattern/enhancedPatternLayout13.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.13") test14 configure "input/pattern/enhancedPatternLayout14.properties" common Transformer TEMP FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.14") clearMDC context testMDC1 configure "input/pattern/enhancedPatternLayout.mdc.1.properties" clearMDC MDC "key1" "va11" MDC "key2" "va12" logger "Hello World" MDC "key1" MDC "key2" Transformer TEMP FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.mdc.1") test15 configure "input/pattern/enhancedPatternLayout15.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()} assertTrue compare(FILTERED,"witness/pattern/enhancedPatternLayout.15") test16 configure "input/pattern/enhancedPatternLayout16.properties" common reader chars 0 chars.length reader format TimeZone.getTimeZone("GMT+0") assertTrue utcDate.getTime()>=start-1000&&utcDate.getTime()<end+1000 format TimeZone.getTimeZone("GMT-6") assertFalse cstStr.equals(utcStr) assertTrue cstDate.getTime()>=start-1000&&cstDate.getTime()<end+1000 common logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger Level.FATAL "Message "+++i root Level.FATAL "Message "+i logger "Message "+++i e logger "Message "+++i e logger "Message "+++i e logger "Message "+++i e logger Level.FATAL "Message "+++i e testMDC2 root appender root Level.DEBUG clearMDC root "starting mdc pattern test" layout mdcMsgPattern1 layout root "empty mdc, no key specified in pattern" layout mdcMsgPattern2 layout root "empty mdc, key1 in pattern" layout mdcMsgPattern3 layout root "empty mdc, key2 in pattern" layout mdcMsgPattern4 layout root "empty mdc, key3 in pattern" layout mdcMsgPattern5 layout root "empty mdc, key1, key2, and key3 in pattern" MDC "key1" "value1" MDC "key2" "value2" layout mdcMsgPattern1 layout root "filled mdc, no key specified in pattern" layout mdcMsgPattern2 layout root "filled mdc, key1 in pattern" layout mdcMsgPattern3 layout root "filled mdc, key2 in pattern" layout mdcMsgPattern4 layout root "filled mdc, key3 in pattern" layout mdcMsgPattern5 layout root "filled mdc, key1, key2, and key3 in pattern" MDC "key1" MDC "key2" layout "%m%n" layout root "finished mdc pattern test" Transformer OUTPUT_FILE FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()} assertTrue compare(FILTERED,WITNESS_FILE) testThrowable root appender root Level.DEBUG root "starting throwable pattern test" root "plain pattern, no exception" root "plain pattern, with exception" ex layout "%m%n%throwable" layout root "%throwable, no exception" root "%throwable, with exception" ex layout "%m%n%throwable{short}" layout root "%throwable{short}, no exception" root "%throwable{short}, with exception" ex layout "%m%n%throwable{none}" layout root "%throwable{none}, no exception" root "%throwable{none}, with exception" ex layout "%m%n%throwable{0}" layout root "%throwable{0}, no exception" root "%throwable{0}, with exception" ex layout "%m%n%throwable{1}" layout root "%throwable{1}, no exception" root "%throwable{1}, with exception" ex layout "%m%n%throwable{100}" layout root "%throwable{100}, no exception" root "%throwable{100}, with exception" ex layout "%m%n%throwable{"+(2-trace.length)+"}" layout root "%throwable{-n}, no exception" root "%throwable{-n}, with exception" ex Transformer OUTPUT_FILE FILTERED newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()} assertTrue compare(FILTERED,WITNESS_FILE)
Class@@EnhancedThrowableRendererTest testEnhancedRender assertNotNull strRep assertTrue strRep.length>0 assertNotNull strRep[i]
Class@@FileAppenderTest testDirectoryCreation newFile newDir wa "output/newdir/temp.log" wa newPatternLayout("%m%n") wa assertTrue newFile("output/newdir/temp.log").exists() testGetThresholdReturnType assertTrue method.getReturnType()==Priority.class testgetSetThreshold assertNull appender.getThreshold() appender debug assertTrue appender.getThreshold()==debug testIsAsSevereAsThreshold assertTrue appender.isAsSevereAsThreshold(debug)
Class@@BoundedFIFOTestCase setUp test1 assertEquals bf.getMaxSize() size assertNull bf.get() bf e[j] assertEquals bf.length() j<size?j+1:size assertEquals bf.length() max-k>0?max-k:0 assertNull r assertEquals r e[k] test2 bf e[0] assertEquals bf.get() e[0] assertNull bf.get() bf e[1] assertEquals bf.length() 1 bf e[2] assertEquals bf.length() 2 bf e[3] assertEquals bf.length() 3 assertEquals bf.get() e[1] assertEquals bf.length() 2 assertEquals bf.get() e[2] assertEquals bf.length() 1 assertEquals bf.get() e[3] assertEquals bf.length() 0 assertNull bf.get() assertEquals bf.length() 0 min testResize1 bf e[f] bf n assertEquals bf.length() expectedSize assertEquals bf.get() e[c] testResize2 bf e[p] bf bf n assertEquals bf.length() expectedSize assertEquals bf.get() e[c+d] assertNull bf.get() testResize3 bf e[p0] bf bf e[i+p1] bf n assertEquals bf.length() expectedSize assertEquals bf.get() e[c+d] suite suite newBoundedFIFOTestCase("test1") suite newBoundedFIFOTestCase("test2") suite newBoundedFIFOTestCase("testResize1") suite newBoundedFIFOTestCase("testResize2") suite newBoundedFIFOTestCase("testResize3")
Class@@CyclicBufferTestCase setUp test0 assertEquals cb.getMaxSize() size cb e[0] assertEquals cb.length() 1 assertEquals cb.get() e[0] assertEquals cb.length() 0 assertNull cb.get() assertEquals cb.length() 0 cb e[0] cb e[1] assertEquals cb.length() 2 assertEquals cb.get() e[0] assertEquals cb.length() 1 assertEquals cb.get() e[1] assertEquals cb.length() 0 assertNull cb.get() assertEquals cb.length() 0 test1 doTest1 bufSize doTest1 assertEquals cb.getMaxSize() size assertNull cb.get(i) cb e[i] assertEquals cb.get(j) e[i-(limit-j)] assertNull cb.get(-1) assertNull cb.get(limit+1) testResize doTestResize isize isize/2+1 isize/2+1 doTestResize isize isize/2+1 isize+10 doTestResize isize isize+10 isize/2+1 doTestResize isize isize+10 isize+10 doTestResize cb e[i] cb newSize assertEquals cb.get(j) e[offset+j] suite suite newCyclicBufferTestCase("test0") suite newCyclicBufferTestCase("test1") suite newCyclicBufferTestCase("testResize")
Class@@DateLayoutTest createLayout testNullDateFormat assertEquals "NULL" DateLayout.NULL_DATE_FORMAT testRelativeTimeDateFormat assertEquals "RELATIVE" DateLayout.RELATIVE_TIME_DATE_FORMAT testDateFormatOption assertEquals "DateFormat" DateLayout.DATE_FORMAT_OPTION testTimeZoneOption assertEquals "TimeZone" DateLayout.TIMEZONE_OPTION testGetOptionStrings assertEquals 2 options.length testSetOptionDateFormat layout "dAtefOrmat" "foobar" assertEquals "FOOBAR" layout.getDateFormat() testSetOptionTimeZone layout "tImezOne" "+05:00" assertEquals "+05:00" layout.getTimeZone() testSetDateFormat layout "ABSOLUTE" assertEquals "ABSOLUTE" layout.getDateFormat() testSetTimeZone layout "+05:00" assertEquals "+05:00" layout.getTimeZone() testSetDateFormatNull layout (String)null null testSetDateFormatNullString layout "NuLL" null testSetDateFormatRelative layout "rElatIve" TimeZone.getDefault() testSetDateFormatAbsolute layout "aBsolUte" TimeZone.getDefault() testSetDateFormatDateTime layout "dAte" TimeZone.getDefault() testSetDateFormatISO8601 layout "iSo8601" TimeZone.getDefault() testSetDateFormatSimple layout "HH:mm:ss" TimeZone.getDefault() testActivateOptions layout "HH:mm:ss" layout "+05:00" layout testSetDateFormatWithFormat layout format TimeZone.getDefault() testISO8601Format calendar calendar 1970 0 1 0 0 0 assertEquals "1970-01-01 00:00:00,000" actual testDateTimeFormat calendar calendar 1970 0 1 0 0 0 assertEquals expected actual
Class@@MockLayout assertNotNull pos assertNotNull date assertNull dateFormat format activateOptions ignoresThrowable
Class@@LogLogTest testDebugKey assertEquals "log4j.debug" LogLog.DEBUG_KEY testConfigDebugKey assertEquals "log4j.configDebug" LogLog.CONFIG_DEBUG_KEY
Class@@OptionConverterTestCase setUp props "TOTO" "wonderful" props "key1" "value1" props "key2" "value2" props "line.separator" System.getProperty("line.separator") props "java.home" System.getProperty("java.home") System props tearDown LogManager varSubstTest1 assertEquals "hello world." r assertEquals "hello wonderful world." r varSubstTest2 assertEquals "Test2 value1 mid value2 end." r varSubstTest3 assertEquals "Test3  mid value1 end." r varSubstTest4 OptionConverter val null assertEquals '"'+val+"\" has no closing brace. Opening brace at position 6." errorMsg varSubstTest5 props "p1" "x1" props "p2" "${p1}" System.out "Result is ["+res+"]." assertEquals res "x1" testInputStream assertTrue file.exists() OptionConverter inputStream null LogManager.getLoggerRepository() inputStream newPropertyConfiguratorTest(this.getClass().getName()) toLevelTest1 assertEquals p Level.INFO toLevelTest2 assertEquals p Level.INFO toLevelTest3 assertEquals p XLevel.TRACE toLevelTest4 assertEquals p null toLevelTest5 assertEquals p null suite suite newOptionConverterTestCase("varSubstTest5") suite newOptionConverterTestCase("varSubstTest1") suite newOptionConverterTestCase("varSubstTest2") suite newOptionConverterTestCase("varSubstTest3") suite newOptionConverterTestCase("varSubstTest4") suite newOptionConverterTestCase("testInputStream") suite newOptionConverterTestCase("toLevelTest1") suite newOptionConverterTestCase("toLevelTest2") suite newOptionConverterTestCase("toLevelTest3") suite newOptionConverterTestCase("toLevelTest4") suite newOptionConverterTestCase("toLevelTest5")
Class@@PatternParserTestCase setUp root tearDown root.getLoggerRepository() mdcPattern root appender root Level.DEBUG root "starting mdc pattern test" layout mdcMsgPattern1 root "empty mdc, no key specified in pattern" layout mdcMsgPattern2 root "empty mdc, key1 in pattern" layout mdcMsgPattern3 root "empty mdc, key2 in pattern" layout mdcMsgPattern4 root "empty mdc, key3 in pattern" layout mdcMsgPattern5 root "empty mdc, key1, key2, and key3 in pattern" MDC "key1" "value1" MDC "key2" "value2" layout mdcMsgPattern1 root "filled mdc, no key specified in pattern" layout mdcMsgPattern2 root "filled mdc, key1 in pattern" layout mdcMsgPattern3 root "filled mdc, key2 in pattern" layout mdcMsgPattern4 root "filled mdc, key3 in pattern" layout mdcMsgPattern5 root "filled mdc, key1, key2, and key3 in pattern" MDC "key1" MDC "key2" layout msgPattern root "finished mdc pattern test" assertTrue Compare.compare(OUTPUT_FILE+"_mdc",WITNESS_FILE+"_mdc") suite suite newPatternParserTestCase("mdcPattern")
Class@@UtilLoggingLevelTest testToLevelFINEST assertSame UtilLoggingLevel.FINEST UtilLoggingLevel.toLevel("fiNeSt")
Class@@HierarchyThresholdTestCase setUp tearDown System.out "Tearing down test case." logger.getLoggerRepository() test1 PropertyConfigurator "input/hierarchyThreshold1.properties" common assertTrue Compare.compare(TEMP,"witness/hierarchyThreshold.1") test2 PropertyConfigurator "input/hierarchyThreshold2.properties" common assertTrue Compare.compare(TEMP,"witness/hierarchyThreshold.2") test3 PropertyConfigurator "input/hierarchyThreshold3.properties" common assertTrue Compare.compare(TEMP,"witness/hierarchyThreshold.3") test4 PropertyConfigurator "input/hierarchyThreshold4.properties" common assertTrue Compare.compare(TEMP,"witness/hierarchyThreshold.4") test5 PropertyConfigurator "input/hierarchyThreshold5.properties" common assertTrue Compare.compare(TEMP,"witness/hierarchyThreshold.5") test6 PropertyConfigurator "input/hierarchyThreshold6.properties" common assertTrue Compare.compare(TEMP,"witness/hierarchyThreshold.6") test7 PropertyConfigurator "input/hierarchyThreshold7.properties" common assertTrue Compare.compare(TEMP,"witness/hierarchyThreshold.7") test8 PropertyConfigurator "input/hierarchyThreshold8.properties" common assertTrue Compare.compare(TEMP,"witness/hierarchyThreshold.8") common Thread.currentThread() "main" logger XLevel.TRACE "m0" logger "m1" logger "m2" logger "m3" logger "m4" logger "m5" Thread.currentThread() oldThreadName suite suite newHierarchyThresholdTestCase("test1") suite newHierarchyThresholdTestCase("test2") suite newHierarchyThresholdTestCase("test3") suite newHierarchyThresholdTestCase("test4") suite newHierarchyThresholdTestCase("test5") suite newHierarchyThresholdTestCase("test6") suite newHierarchyThresholdTestCase("test7") suite newHierarchyThresholdTestCase("test8")
Class@@HTMLLayoutTest createLayout parse factory false factory true testFormat NDC "NDC goes here" layout true NDC parse src testGetHeader assertEquals "<!DOCTYPE" createLayout().getHeader().substring(0,9) testGetHeaderWithLocation layout true assertEquals "<!DOCTYPE" layout.getHeader().substring(0,9) testGetFooter assertEquals "</table>" createLayout().getFooter().substring(0,8) testGetSetLocationInfo assertEquals false layout.getLocationInfo() layout true assertEquals true layout.getLocationInfo() layout false assertEquals false layout.getLocationInfo() testActivateOptions layout testGetSetTitle assertEquals "Log4J Log Messages" layout.getTitle() layout null assertNull layout.getTitle() layout newTitle assertEquals newTitle layout.getTitle() testFormatResize NDC layout true assertEquals Layout.LINE_SEP+"<tr>" result.substring(0,Layout.LINE_SEP.length()+4)
Class@@ProblemLevel testProblemCharacters Thread.currentThread() problemName NDC problemName mdcMap MDC problemName problemName mdcMap Thread.currentThread() threadName buf result buf "</table>" buf i i+4 "<br/>" parse buf.toString()
Class@@Last test1 suite suite newLast("test1")
Class@@LayoutTest testLineSep assertEquals System.getProperty("line.separator") Layout.LINE_SEP testLineSepLen assertEquals Layout.LINE_SEP.length() Layout.LINE_SEP_LEN createLayout testGetContentType assertEquals contentType createLayout().getContentType() testIgnoresThrowable assertEquals ignoresThrowable createLayout().ignoresThrowable() testGetHeader assertEquals header createLayout().getHeader() testGetFooter assertEquals footer createLayout().getFooter() testFormat assertEquals "Mock" result
Class@@MockLayout format activateOptions ignoresThrowable
Class@@LevelTest testSerializeINFO SerializationTestHelper "witness/serialization/info.bin" Level.INFO skip Integer.MAX_VALUE testDeserializeINFO assertTrue objinstanceofLevel assertEquals "INFO" info.toString() assertTrue obj==Level.INFO testCustomLevelSerialization assertTrue objinstanceofCustomLevel assertEquals Level.INFO.level clone.level assertEquals Level.INFO.levelStr clone.levelStr assertEquals Level.INFO.syslogEquivalent clone.syslogEquivalent
Class@@CustomLevel testTraceInt assertEquals 5000 Level.TRACE_INT testTrace assertEquals "TRACE" Level.TRACE.toString() assertEquals 5000 Level.TRACE.toInt() assertEquals 7 Level.TRACE.getSyslogEquivalent() testIntToTrace assertEquals "TRACE" trace.toString() testStringToTrace assertEquals "TRACE" trace.toString() testLevelExtendsPriority assertTrue Priority.class.isAssignableFrom(Level.class) testOFF assertTrue Level.OFFinstanceofLevel testFATAL assertTrue Level.FATALinstanceofLevel testERROR assertTrue Level.ERRORinstanceofLevel testWARN assertTrue Level.WARNinstanceofLevel testINFO assertTrue Level.INFOinstanceofLevel testDEBUG assertTrue Level.DEBUGinstanceofLevel testTRACE assertTrue Level.TRACEinstanceofLevel testALL assertTrue Level.ALLinstanceofLevel testSerialVersionUID assertEquals 3491141966387921974L Level.serialVersionUID testIntToAll assertEquals "ALL" level.toString() testIntToFatal assertEquals "FATAL" level.toString() testIntToOff assertEquals "OFF" level.toString() testToLevelUnrecognizedInt assertEquals "FATAL" level.toString() testToLevelNull assertEquals "FATAL" level.toString() testDotlessLowerI assertEquals "INFO" level.toString() testDottedLowerI Locale turkey Locale defaultLocale assertEquals "INFO" level.toString()
Class@@LogCapture root appender getMessage Assert event Assert level event.getLevel() Assert "More than one request captured"
Class@@LoggerTestCase setUp assertNotNull rbUS assertNotNull "Got a null resource bundle." rbFR assertNotNull "Got a null resource bundle." rbCH tearDown BasicConfigurator testAppender1 a1 "testAppender1" logger a1 assertEquals a1 aHat testAppender2 a1 "testAppender2.1" a2 "testAppender2.2" logger a1 logger a2 logger "testAppender2.1" assertEquals a2 aHat assertTrue !enumeration.hasMoreElements() testAdditivity1 a ca assertEquals ca.counter 0 ab MSG assertEquals ca.counter 1 ab MSG assertEquals ca.counter 2 ab MSG assertEquals ca.counter 3 ab MSG assertEquals ca.counter 4 testAdditivity2 a ca1 abc ca2 assertEquals ca1.counter 0 assertEquals ca2.counter 0 ab MSG assertEquals ca1.counter 1 assertEquals ca2.counter 0 abc MSG assertEquals ca1.counter 2 assertEquals ca2.counter 1 x MSG assertEquals ca1.counter 2 assertEquals ca2.counter 1 testAdditivity3 root caRoot a caA abc caABC assertEquals caRoot.counter 0 assertEquals caA.counter 0 assertEquals caABC.counter 0 ab false a MSG assertEquals caRoot.counter 1 assertEquals caA.counter 1 assertEquals caABC.counter 0 ab MSG assertEquals caRoot.counter 1 assertEquals caA.counter 1 assertEquals caABC.counter 0 abc MSG assertEquals caRoot.counter 1 assertEquals caA.counter 1 assertEquals caABC.counter 1 testDisable1 root caRoot h (Level)Level.INFO assertEquals caRoot.counter 0 root MSG assertEquals caRoot.counter 0 root MSG assertEquals caRoot.counter 1 root Level.WARN MSG assertEquals caRoot.counter 2 root MSG assertEquals caRoot.counter 3 h (Level)Level.WARN root MSG assertEquals caRoot.counter 3 root MSG assertEquals caRoot.counter 3 root Level.WARN MSG assertEquals caRoot.counter 4 root MSG assertEquals caRoot.counter 5 root Level.ERROR MSG assertEquals caRoot.counter 6 h Level.OFF root MSG assertEquals caRoot.counter 6 root MSG assertEquals caRoot.counter 6 root Level.WARN MSG assertEquals caRoot.counter 6 root MSG assertEquals caRoot.counter 6 root Level.FATAL MSG assertEquals caRoot.counter 6 root Level.FATAL MSG assertEquals caRoot.counter 6 h Level.OFF root MSG assertEquals caRoot.counter 6 root MSG assertEquals caRoot.counter 6 root Level.WARN MSG assertEquals caRoot.counter 6 root MSG assertEquals caRoot.counter 6 root Level.ERROR MSG assertEquals caRoot.counter 6 root Level.FATAL MSG assertEquals caRoot.counter 6 testRB1 root rbUS assertSame t rbUS assertSame t rbUS assertSame t rbUS assertSame t rbUS testRB2 root rbUS assertSame t rbUS x_y rbFR assertSame t rbUS assertSame t rbFR assertSame t rbFR testRB3 root rbUS assertSame t rbUS x_y rbFR x_y_z rbCH assertSame t rbUS assertSame t rbFR assertSame t rbCH testExists assertNull t assertSame a t assertSame a_b t assertSame a_b_c t testHierarchy1 assertEquals "a" a0.getName() assertNull a0.getLevel() assertSame Level.ERROR a0.getEffectiveLevel() assertSame a0 a1 testTrace appender root appender root Level.INFO tracer Level.TRACE tracer "Message 1" root "Discarded Message" root "Discarded Message" assertEquals 1 msgs.size() assertEquals Level.TRACE event.getLevel() assertEquals "Message 1" event.getMessage() testTraceWithException appender root appender root Level.INFO tracer Level.TRACE tracer "Message 1" ex root "Discarded Message" ex root "Discarded Message" ex assertEquals 1 msgs.size() assertEquals Level.TRACE event.getLevel() assertEquals "Message 1" event.getMessage() testIsTraceEnabled appender root appender root Level.INFO tracer Level.TRACE assertTrue tracer.isTraceEnabled() assertFalse root.isTraceEnabled()
Class@@CountingHierarchyEventListener addAppenderEvent removeAppenderEvent getAddEventCount getRemoveEventCount testAppenderEvent1 LogManager.getLoggerRepository() listener root appender assertEquals 1 listener.getAddEventCount() assertEquals 0 listener.getRemoveEventCount() root appender assertEquals 1 listener.getAddEventCount() assertEquals 1 listener.getRemoveEventCount() testAppenderEvent2 LogManager.getLoggerRepository() listener appender "A1" root appender assertEquals 1 listener.getAddEventCount() assertEquals 0 listener.getRemoveEventCount() root appender.getName() assertEquals 1 listener.getAddEventCount() assertEquals 1 listener.getRemoveEventCount() testAppenderEvent3 LogManager.getLoggerRepository() listener root appender assertEquals 1 listener.getAddEventCount() assertEquals 0 listener.getRemoveEventCount() root assertEquals 1 listener.getAddEventCount() assertEquals 1 listener.getRemoveEventCount() testAppenderEvent4 LogManager.getLoggerRepository() listener root appender assertEquals 1 listener.getAddEventCount() assertEquals 0 listener.getRemoveEventCount() LogManager assertEquals 1 listener.getAddEventCount() assertEquals 1 listener.getRemoveEventCount()
Class@@CountingAppender close append requiresLayout
Class@@LogManagerTest testDefaultConfigurationFile assertEquals "log4j.properties" LogManager.DEFAULT_CONFIGURATION_FILE testDefaultXmlConfigurationFile assertEquals "log4j.xml" LogManager.DEFAULT_XML_CONFIGURATION_FILE testDefaultConfigurationKey assertEquals "log4j.configuration" LogManager.DEFAULT_CONFIGURATION_KEY testConfiguratorClassKey assertEquals "log4j.configuratorClass" LogManager.CONFIGURATOR_CLASS_KEY testDefaultInitOverrideKey assertEquals "log4j.defaultInitOverride" LogManager.DEFAULT_INIT_OVERRIDE_KEY
Class@@MDCOrderFilter filter
Class@@MDCTestCase setUp MDC tearDown MDC testPut MDC "key" "some value" assertEquals "some value" MDC.get("key") assertEquals 1 MDC.getContext().size() testRemoveLastKey MDC "key" "some value" MDC "key" checkThreadLocalsForLeaks checkThreadLocalsForLeaks threadLocalsField true inheritableThreadLocalsField true tableField true checkThreadLocalMapForLeaks threadLocalMap tableField checkThreadLocalMapForLeaks threadLocalMap tableField checkThreadLocalMapForLeaks fail "Found a ThreadLocal with key of type ["+keyClassName+"]"
Class@@MinimumTestCase setUp root tearDown root.getLoggerRepository() simple root appender common Transformer "output/simple" FILTERED newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/simple") ttcc root appender Thread.currentThread() "main" common Thread.currentThread() oldName Transformer "output/ttcc" FILTERED newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/ttcc") common ERR Level.ERROR INF Level.INFO INF_ERR Level.ERROR DEB Level.DEBUG TRC Level.TRACE ERR Level.FATAL "Message "+i ERR "Message "+i INF Level.FATAL "Message "+i INF "Message "+i INF "Message "+i INF "Message "+i INF_UNDEF Level.FATAL "Message "+i INF_UNDEF "Message "+i INF_UNDEF "Message "+i INF_UNDEF "Message "+i INF_ERR Level.FATAL "Message "+i INF_ERR "Message "+i INF_ERR_UNDEF Level.FATAL "Message "+i INF_ERR_UNDEF "Message "+i DEB Level.FATAL "Message "+i DEB "Message "+i DEB "Message "+i DEB "Message "+i DEB "Message "+i TRC Level.FATAL "Message "+i TRC "Message "+i TRC "Message "+i TRC "Message "+i TRC "Message "+i TRC "Message "+i UNDEF Level.FATAL "Message "+i UNDEF "Message "+i UNDEF "Message "+i UNDEF "Message "+i UNDEF "Message "+i newException("Just testing.") ERR "Message "+i ERR "Message "+i ERR "Message "+i INF "Message "+i INF_UNDEF "Message "+i INF_ERR "Message "+i INF_ERR "Message "+i INF_ERR "Message "+i INF_ERR_UNDEF "Message "+i INF_ERR_UNDEF "Message "+i INF_ERR_UNDEF "Message "+i UNDEF "Message "+i newException("Just testing.") INF "Messages should bear numbers 0 through "+printCount+"." suite suite newMinimumTestCase("simple") suite newMinimumTestCase("ttcc")
Class@@MyPatternLayout createPatternParser main logger newConsoleAppender(layout,ConsoleAppender.SYSTEM_OUT) logger "Hello, log" logger "Hello again..."
Class@@MyPatternParser finalizeConverter addConverter newUserDirPatternConverter(formattingInfo) currentLiteral 0
Class@@UserDirPatternConverter convert
Class@@ShortSocketServer main usage "Wrong number of arguments." LogLog "Listening on port "+SocketServerTestCase.PORT MDC "hostID" "shortSocketServer" PropertyConfigurator prefix+i+".properties" LogLog "Waiting to accept a new client." LogLog "Connected to client at "+socket.getInetAddress() LogLog "Starting new socket node." t t usage System.err msg System.err "Usage: java "+ShortSocketServer.class.getName()+" totalTests configFilePrefix" System 1
Class@@SMTPAppenderTest tearDown LogManager
Class@@MockTriggeringEventEvaluator isTriggeringEvent testTrigger DOMConfigurator "input/xml/smtpAppender1.xml" assertTrue evaluatorinstanceofMockTriggeringEventEvaluator
Class@@SocketAppenderTest setUp DOMConfigurator "input/xml/SocketAppenderTestConfig.xml" tearDown testFallbackErrorHandlerWhenStarting logger msg assertEquals "SocketAppender with FallbackErrorHandler" msg secondary.getLastMessage()
Class@@LastOnlyAppender append requiresLayout close getLastMessage
Class@@SocketServerTestCase setUp System.out "Setting up test case." tearDown System.out "Tearing down test case." rootLogger test1 rootLogger socketAppender common "T1" "key1" "MDC-TEST1" delay 1 Transformer TEMP FILTERED newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/socketServer.1") test2 rootLogger socketAppender common "T2" "key2" "MDC-TEST2" delay 1 Transformer TEMP FILTERED newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/socketServer.2") test3 socketAppender true rootLogger socketAppender common "T3" "key3" "MDC-TEST3" delay 1 Transformer TEMP FILTERED newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/socketServer.3") test4 socketAppender true rootLogger socketAppender NDC "some" common "T4" "key4" "MDC-TEST4" NDC delay 1 Transformer TEMP FILTERED newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/socketServer.4") test5 socketAppender true asyncAppender true asyncAppender socketAppender rootLogger asyncAppender NDC "some5" common "T5" "key5" "MDC-TEST5" NDC delay 2 Transformer TEMP FILTERED newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/socketServer.5") test6 socketAppender true asyncAppender true asyncAppender socketAppender rootLogger asyncAppender NDC "some6" MDC "hostID" "client-test6" common "T6" "key6" "MDC-TEST6" NDC MDC "hostID" delay 2 Transformer TEMP FILTERED newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/socketServer.6") test7 socketAppender true rootLogger socketAppender NDC "some7" MDC "hostID" "client-test7" common "T7" "key7" "MDC-TEST7" NDC MDC "hostID" delay 2 Transformer TEMP FILTERED newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/socketServer.7") test8 socketAppender true rootLogger socketAppender NDC "some8" MDC "hostID" "shortSocketServer" common "T8" "key8" "MDC-TEST8" NDC delay 2 Transformer TEMP FILTERED newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/socketServer.8") common Thread.currentThread() "main" NDC dc MDC key o logger Level.DEBUG rootLogger Level.DEBUG logger XLevel.TRACE "Message "+++i logger Level.TRACE rootLogger Level.TRACE logger "Message "+++i root "Message "+++i logger "Message "+++i root "Message "+++i logger "Message "+++i logger "Message "+++i logger XLevel.LETHAL "Message "+++i logger "Message "+++i e root "Message "+++i e NDC MDC key Thread.currentThread() oldThreadName delay Thread secs*1000 suite suite newSocketServerTestCase("test1") suite newSocketServerTestCase("test2") suite newSocketServerTestCase("test3") suite newSocketServerTestCase("test4") suite newSocketServerTestCase("test5") suite newSocketServerTestCase("test6") suite newSocketServerTestCase("test7") suite newSocketServerTestCase("test8")
Class@@SyslogAppenderTest tearDown LogManager testDefaultConstructor assertEquals "user" appender.getFacility() assertEquals false appender.getFacilityPrinting() assertNull appender.getLayout() assertNull appender.getSyslogHost() assertTrue appender.requiresLayout() testTwoParamConstructor assertEquals "daemon" appender.getFacility() assertEquals false appender.getFacilityPrinting() assertEquals layout appender.getLayout() assertNull appender.getSyslogHost() assertTrue appender.requiresLayout() testTwoParamConstructorBadFacility assertEquals "user" appender.getFacility() assertEquals false appender.getFacilityPrinting() assertEquals layout appender.getLayout() assertNull appender.getSyslogHost() assertTrue appender.requiresLayout() testThreeParamConstructor assertEquals "daemon" appender.getFacility() assertEquals false appender.getFacilityPrinting() assertEquals layout appender.getLayout() assertEquals "syslog.example.org" appender.getSyslogHost() assertTrue appender.requiresLayout() testGetFacilityString actual SyslogAppender.getFacilityString(i<<3) actual ' ' actual SyslogAppender.getFacilityString(i<<3) actual ' ' assertEquals expected actual.toString() testGetFacilityStringUnexpected assertNull SyslogAppender.getFacilityString(1) assertNull SyslogAppender.getFacilityString(12<<3) testGetFacilityBogus assertEquals -1 SyslogAppender.getFacility("bogus") testGetFacilityNull assertEquals -1 SyslogAppender.getFacility(null) testGetFacilitySystemNames assertEquals i<<3 SyslogAppender.getFacility(names[i]) testGetFacilityLocalNames assertEquals (16+i)<<3 SyslogAppender.getFacility(names[i]) testSetFacilityPrinting assertFalse appender.getFacilityPrinting() appender true assertTrue appender.getFacilityPrinting() appender false assertFalse appender.getFacilityPrinting() testConstants assertEquals 0<<3 SyslogAppender.LOG_KERN assertEquals 1<<3 SyslogAppender.LOG_USER assertEquals 2<<3 SyslogAppender.LOG_MAIL assertEquals 3<<3 SyslogAppender.LOG_DAEMON assertEquals 4<<3 SyslogAppender.LOG_AUTH assertEquals 5<<3 SyslogAppender.LOG_SYSLOG assertEquals 6<<3 SyslogAppender.LOG_LPR assertEquals 7<<3 SyslogAppender.LOG_NEWS assertEquals 8<<3 SyslogAppender.LOG_UUCP assertEquals 9<<3 SyslogAppender.LOG_CRON assertEquals 10<<3 SyslogAppender.LOG_AUTHPRIV assertEquals 11<<3 SyslogAppender.LOG_FTP assertEquals 16<<3 SyslogAppender.LOG_LOCAL0 assertEquals 17<<3 SyslogAppender.LOG_LOCAL1 assertEquals 18<<3 SyslogAppender.LOG_LOCAL2 assertEquals 19<<3 SyslogAppender.LOG_LOCAL3 assertEquals 20<<3 SyslogAppender.LOG_LOCAL4 assertEquals 21<<3 SyslogAppender.LOG_LOCAL5 assertEquals 22<<3 SyslogAppender.LOG_LOCAL6 assertEquals 23<<3 SyslogAppender.LOG_LOCAL7 testSetFacilityKern appender "kern" appender null assertEquals "kern" appender.getFacility() testSetFacilityNull appender "kern" appender null assertEquals "kern" appender.getFacility() testSetFacilityBogus appender "kern" appender "bogus" assertEquals "user" appender.getFacility() testSetFacilityAfterActivation appender "foo" appender Level.INFO appender "localhost" appender "user" appender newPatternLayout("%m%n") appender errorHandler appender appender "kern" assertEquals "kern" appender.getFacility() testAppendBelowThreshold appender Level.ERROR appender logger appender logger "Should not be logged by SyslogAppenderTest.testAppendBelowThreshold." testAppendNoHost appender "foo" appender Level.INFO appender errorHandler appender newPatternLayout("%m%n") appender logger appender logger "Should not be logged by SyslogAppenderTest.testAppendNoHost." assertEquals 1 errorHandler.size() assertEquals "No syslog host is set for SyslogAppedender named \"foo\"." errorHandler.getMessage(0) testAppend appender "foo" appender Level.INFO appender "localhost" appender "user" appender newPatternLayout("%m%n") appender errorHandler appender asyncAppender appender asyncAppender logger asyncAppender logger "Expected message from log4j unit test SyslogAppenderTest.testAppend." e assertEquals 0 errorHandler.size() testIPv6 appender "::1" testIPv6InBrackets appender "[::1]" testIPv6AndPort appender "[::1]:1514" testHostNameAndPort appender "localhost:1514" testIPv4AndPort appender "127.0.0.1:1514" log ds 2000 appender "localhost:"+ds.getLocalPort() appender "name" appender header appender pl appender l appender l msg l msg ex appender ds p ds testActualLogging assertEquals "14" st.nextToken() assertEquals "greetings" st.nextToken()
Class@@MishandledException printStackTrace w "Mishandled stack trace follows:" w "" w "No tab here" w "\ttab here" w "\t" testBadTabbing assertEquals "11" st.nextToken() assertEquals "greetings" st.nextToken() assertEquals "<11>Mishandled stack trace follows:" s[1] assertEquals "<11>" s[2] assertEquals "<11>No tab here" s[3] assertEquals "<11>"+SyslogAppender.TAB+"tab here" s[4] assertEquals "<11>"+SyslogAppender.TAB s[5] testHeaderLogging assertEquals "<14>" s.substring(0,4) cal syslogDate assertEquals ' ' syslogDateStr.charAt(4) cal preDate cal Calendar.MILLISECOND 0 cal postDate cal syslogDate cal Calendar.YEAR syslogYear assertTrue syslogDate.compareTo(preDate)>=0 assertTrue syslogDate.compareTo(postDate)<=0 testLayoutHeader ds 2000 appender "localhost:"+ds.getLocalPort() appender "name" appender false appender pl appender l appender l "Hello, World" appender ds p ds assertEquals "<14><!DOCTYPE" s[0].substring(0,13) assertEquals "<14></table>" s[2].substring(0,12) testBigPackets ds 2000 appender "localhost:"+ds.getLocalPort() appender "name" appender false appender pl appender l appender msgbuf "0123456789" l msg appender ds p assertTrue p.getLength()<=1024 ds rcvbuf 0 4 rcvbuf rcvbuf.length()-3 rcvbuf s[i].substring(s[i].indexOf("...")+3) assertEquals msg.length() rcvbuf.length() assertEquals msg rcvbuf.toString()
Class@@TelnetAppenderTest
Class@@ReadThread run bo c s e testIt ta "ta" ta port ta newPatternLayout("%p - %m") ta l ta t Thread 200 l "hi" Thread 1000 ta Thread 200 t t assertTrue s.endsWith("INFO - hi") assertEquals oldActive Thread.activeCount()
Class@@NTEventLogAppenderTest tearDown LogManager testSimple BasicConfigurator newNTEventLogAppender() logger "Message "+i++ logger "Message "+i++ logger "Message "+i++ logger "Message "+i++ logger Level.FATAL "Message "+i++ logger "Message "+i++ newException("Just testing.")
Class@@ORTestCase setUp test1 assertEquals r dr test2 map Integer.class ior assertEquals r ior test3 map Number.class ior assertEquals r ior test4 map Object.class oor assertEquals r oor test5 map Object.class oor map Number.class nor map Integer.class ior assertEquals r ior test6 map Object.class oor map Number.class nor assertEquals r nor test7 map comparable cor assertEquals r cor test8 map Serializable.class sor assertEquals r sor test9 map Y.class yor assertEquals r yor test10 map X.class xor assertEquals r xor suite suite newORTestCase("test1") suite newORTestCase("test2") suite newORTestCase("test3") suite newORTestCase("test4") suite newORTestCase("test5") suite newORTestCase("test6") suite newORTestCase("test7") suite newORTestCase("test8") suite newORTestCase("test9") suite newORTestCase("test10")
Class@@UTObjectRenderer doRender toString
Class@@A
Class@@B
Class@@CachedDateFormatTest createAbsoluteTimeDateFormat df timeZone test1 assertEquals "00:00:00,000" gmtFormat.format(jul1) assertEquals "00:00:00,008" gmtFormat.format(plus8ms) assertEquals "00:00:00,017" gmtFormat.format(plus17ms) assertEquals "00:00:00,237" gmtFormat.format(plus237ms) assertEquals "00:00:01,415" gmtFormat.format(plus1415ms) test2 assertEquals "00:00:00,000" gmtFormat.format(jul2) assertEquals "19:00:00,000" chicagoFormat.format(jul2) assertEquals "00:00:00,000" gmtFormat.format(jul2) test3 assertEquals "00:00:00,008" gmtFormat.format(jul1) assertEquals "00:00:00,016" gmtFormat.format(plus8ms) assertEquals "00:00:00,023" gmtFormat.format(plus17ms) assertEquals "00:00:00,245" gmtFormat.format(plus237ms) assertEquals "00:00:01,423" gmtFormat.format(plus1415ms) test4 assertEquals baseFormat.format(jul1) cachedFormat.format(jul1) baseFormat plus8ms cachedFormat plus8ms assertEquals baseFormat.format(plus8ms) cachedFormat.format(plus8ms) assertEquals baseFormat.format(plus17ms) cachedFormat.format(plus17ms) assertEquals baseFormat.format(plus237ms) cachedFormat.format(plus237ms) assertEquals baseFormat.format(plus1415ms) cachedFormat.format(plus1415ms) test5 System.out baseFormat.format(jul1) System.out sx assertEquals baseFormat.format(jul1) sx System.out baseFormat.format(jul1) System.out sx assertEquals baseFormat.format(jul1) sx System.out baseFormat.format(plus8ms) System.out sx assertEquals baseFormat.format(plus8ms) sx assertEquals baseFormat.format(plus17ms) cachedFormat.format(plus17ms) assertEquals baseFormat.format(plus237ms) cachedFormat.format(plus237ms) assertEquals baseFormat.format(plus1415ms) cachedFormat.format(plus1415ms) test6 assertNotNull newCachedDateFormat(newSimpleDateFormat(),1000).getNumberFormat() test8 baseFormat GMT assertEquals "2004-07-04 00:00:00,000" cachedFormat.format(jul4) cachedFormat TimeZone.getTimeZone("GMT-6") assertEquals "2004-07-03 18:00:00,000" cachedFormat.format(jul4) test9 cachedFormat cet c 2004 Calendar.DECEMBER 12 20 0 c Calendar.SECOND 37 c Calendar.MILLISECOND 23 c cet assertEquals expected s c 2005 Calendar.JANUARY 1 0 0 c Calendar.SECOND 13 c Calendar.MILLISECOND 905 assertEquals expected s test10 cachedFormat cet c 2004 Calendar.OCTOBER 5 20 0 c Calendar.SECOND 37 c Calendar.MILLISECOND 23 c cet assertEquals expected s c 2004 Calendar.NOVEMBER 1 0 0 c Calendar.MILLISECOND 23 assertEquals expected s c Calendar.MILLISECOND 984 assertEquals expected s test11 gmtFormat GMT baseFormat GMT assertEquals expected gmtFormat.format(jul2) jul2 ticks+87 assertEquals expected gmtFormat.format(jul2) test12 assertEquals 20 millisecondStart test13 assertEquals CachedDateFormat.NO_MILLISECONDS millisecondStart test14 assertEquals 9 millisecondStart test15 assertEquals CachedDateFormat.UNRECOGNIZED_MILLISECONDS millisecondStart test16 assertEquals CachedDateFormat.UNRECOGNIZED_MILLISECONDS millisecondStart test17 simpleFormat GMT assertEquals "00:00:00,000 00:00:00,000" s jul2 jul2.getTime()+120 assertEquals "00:00:00,120 00:00:00,120" simpleFormat.format(jul2) assertEquals 1 maxValid xsuite suite newCachedDateFormatTest("test5")
Class@@FormattingInfoTest testGetDefault assertNotNull field assertEquals 0 field.getMinLength() assertEquals Integer.MAX_VALUE field.getMaxLength() assertEquals false field.isLeftAligned() testConstructor assertNotNull field assertEquals 3 field.getMinLength() assertEquals 6 field.getMaxLength() assertEquals true field.isLeftAligned() testTruncate field 2 buf assertEquals "fobar" buf.toString() testPadLeft field 2 buf assertEquals "fo obar" buf.toString() testPadRight field 2 buf assertEquals "foobar " buf.toString()
Class@@NameAbbreviatorTest testGetDefault assertNotNull abbrev testZero buf "org.example.foo.bar" abbrev fieldStart buf assertEquals "DEBUG - " buf.toString() testBlank assertTrue abbrev==defaultAbbrev testOne buf "org.example.foo.bar" abbrev fieldStart buf assertEquals "DEBUG - bar" buf.toString() buf 0 buf "DEBUG - " buf "bar" abbrev fieldStart buf assertEquals "DEBUG - bar" buf.toString() buf 0 buf "DEBUG - " abbrev fieldStart buf assertEquals "DEBUG - " buf.toString() testBlankOne buf "org.example.foo.bar" abbrev fieldStart buf assertEquals "DEBUG - bar" buf.toString() buf 0 buf "DEBUG - " buf "bar" abbrev fieldStart buf assertEquals "DEBUG - bar" buf.toString() buf 0 buf "DEBUG - " abbrev fieldStart buf assertEquals "DEBUG - " buf.toString() testTwo buf "org.example.foo.bar" abbrev fieldStart buf assertEquals "DEBUG - foo.bar" buf.toString() buf 0 buf "DEBUG - " buf "foo.bar" abbrev fieldStart buf assertEquals "DEBUG - foo.bar" buf.toString() buf 0 buf "DEBUG - " buf "bar" abbrev fieldStart buf assertEquals "DEBUG - bar" buf.toString() testOneDot buf "org.example.foo.bar" abbrev fieldStart buf assertEquals "DEBUG - o.e.f.bar" buf.toString() buf 0 buf "DEBUG - " buf "org.example.foo." abbrev fieldStart buf assertEquals "DEBUG - o.e.f." buf.toString() buf 0 buf "DEBUG - " buf "foo.bar" abbrev fieldStart buf assertEquals "DEBUG - f.bar" buf.toString() buf 0 buf "DEBUG - " buf "bar" abbrev fieldStart buf assertEquals "DEBUG - bar" buf.toString() buf 0 buf "DEBUG - " abbrev fieldStart buf assertEquals "DEBUG - " buf.toString() buf 0 buf "DEBUG - " buf "." abbrev fieldStart buf assertEquals "DEBUG - ." buf.toString() testOneTildeDot buf "org.example.foo.bar" abbrev fieldStart buf assertEquals "DEBUG - o~.e~.f~.bar" buf.toString() buf 0 buf "DEBUG - " buf "org.example.foo." abbrev fieldStart buf assertEquals "DEBUG - o~.e~.f~." buf.toString() buf 0 buf "DEBUG - " buf "foo.bar" abbrev fieldStart buf assertEquals "DEBUG - f~.bar" buf.toString() buf 0 buf "DEBUG - " buf "bar" abbrev fieldStart buf assertEquals "DEBUG - bar" buf.toString() buf 0 buf "DEBUG - " abbrev fieldStart buf assertEquals "DEBUG - " buf.toString() buf 0 buf "DEBUG - " buf "." abbrev fieldStart buf assertEquals "DEBUG - ." buf.toString() buf 0 buf "DEBUG - " buf "o.e.f.bar" abbrev fieldStart buf assertEquals "DEBUG - o.e.f.bar" buf.toString() testMulti buf "org.example.foo.bar" abbrev fieldStart buf assertEquals "DEBUG - o.example.fo.bar" buf.toString() buf 0 buf "DEBUG - " buf "org.example.foo." abbrev fieldStart buf assertEquals "DEBUG - o.example.fo." buf.toString() buf 0 buf "DEBUG - " buf "foo.bar" abbrev fieldStart buf assertEquals "DEBUG - f.bar" buf.toString() buf 0 buf "DEBUG - " buf "bar" abbrev fieldStart buf assertEquals "DEBUG - bar" buf.toString() buf 0 buf "DEBUG - " abbrev fieldStart buf assertEquals "DEBUG - " buf.toString() buf 0 buf "DEBUG - " buf "." abbrev fieldStart buf assertEquals "DEBUG - ." buf.toString() testMinusOne buf "org.example.foo.bar" abbrev fieldStart buf assertEquals "DEBUG - example.foo.bar" buf.toString() buf 0 buf "DEBUG - " buf "bar" abbrev fieldStart buf assertEquals "DEBUG - bar" buf.toString() buf 0 buf "DEBUG - " abbrev fieldStart buf assertEquals "DEBUG - " buf.toString() buf 0 buf "DEBUG - " buf "." abbrev fieldStart buf assertEquals "DEBUG - " buf.toString()
Class@@Num343PatternConverter newInstance format toAppendTo "343"
Class@@PatternParserTest convert PatternParser pattern converters fields registry PatternParser.getPatternLayoutRules() assertEquals converters.size() fields.size() ((PatternConverter)converterIter.next()) event buf ((FormattingInfo)fieldIter.next()) fieldStart buf testNewWord ruleRegistry "z343" Num343PatternConverter.class.getName() assertEquals "343" result testNewWord2 ruleRegistry "n343" Num343PatternConverter.class.getName() assertEquals "343" result testBogusWord1 assertEquals "%, foobar" result testBogusWord2 assertEquals "xyz %, foobar" result testBasic1 assertEquals "hello INFO  - msg 1"+Layout.LINE_SEP result testBasic2 assertEquals expectedRelativeTime+" INFO  [main] "+logger.getName()+" - msg 1"+Layout.LINE_SEP result testMultiOption dateFormat TimeZone.getTimeZone("GMT") buf ' ' buf localTime buf " org.foobar  - msg 1" assertEquals buf.toString() result testBogus assertEquals "%bogus" result testMore assertEquals "msg 1ore" result testMalformedOption assertEquals "foomsg 1{yyyy.MM.dd" result assertFactories assertTrue rules.size()>0 assertTrue converter!=null testPatternLayoutFactories assertFactories PatternParser.getPatternLayoutRules() testFileNamePatternFactories assertFactories PatternParser.getFileNamePatternRules()
Class@@PatternLayoutTest createLayout testFormat buf '[' buf event.getThreadName() buf "] " buf event.getLevel().toString() buf ' ' buf event.getLoggerName() buf " - " buf event.getMessage() buf System.getProperty("line.separator") assertEquals buf.toString() result testGetPatternFormat assertEquals "[%t] %p %c - %m%n" layout.getConversionPattern() testDefaultConversionPattern assertEquals "%m%n" PatternLayout.DEFAULT_CONVERSION_PATTERN testTTCCConversionPattern assertEquals "%r [%t] %p %c %x - %m%n" PatternLayout.TTCC_CONVERSION_PATTERN testFormatResize NDC assertEquals "[" result.substring(0,1)
Class@@DerivedPatternLayout getBufSize getMaxCapacity
Class@@PatternLayoutTestCase setUp tearDown root.getLoggerRepository() test1 PropertyConfigurator "input/patternLayout1.properties" common Transformer TEMP FILTERED newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.1") test2 PropertyConfigurator "input/patternLayout2.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.2") test3 PropertyConfigurator "input/patternLayout3.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.3") test4 PropertyConfigurator "input/patternLayout4.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.4") test5 PropertyConfigurator "input/patternLayout5.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.5") test6 PropertyConfigurator "input/patternLayout6.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.6") test7 PropertyConfigurator "input/patternLayout7.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.7") test8 PropertyConfigurator "input/patternLayout8.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newRelativeTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.8") test9 PropertyConfigurator "input/patternLayout9.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.9") test10 PropertyConfigurator "input/patternLayout10.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.10") test11 PropertyConfigurator "input/patternLayout11.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.11") test12 PropertyConfigurator "input/patternLayout12.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.12") test13 PropertyConfigurator "input/patternLayout13.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.13") test14 PropertyConfigurator "input/patternLayout14.properties" common Transformer TEMP FILTERED newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED,"witness/patternLayout.14") testMDC1 PropertyConfigurator "input/patternLayout.mdc.1.properties" MDC "key1" "va11" MDC "key2" "va12" logger "Hello World" MDC "key1" MDC "key2" assertTrue Compare.compare(TEMP,"witness/patternLayout.mdc.1") testMDCClear PropertyConfigurator "input/patternLayout.mdc.1.properties" MDC "key1" "va11" MDC "key2" "va12" logger "Hello World" MDC logger "Hello World" assertTrue Compare.compare(TEMP,"witness/patternLayout.mdc.clear") common Thread.currentThread() "main" logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger Level.FATAL "Message "+++i root Level.FATAL "Message "+i logger "Message "+++i e logger "Message "+++i e logger "Message "+++i e logger "Message "+++i e logger "Message "+++i e logger Level.FATAL "Message "+++i e Thread.currentThread() oldThreadName
Class@@PriorityTest testOffInt assertEquals Integer.MAX_VALUE Priority.OFF_INT testFatalInt assertEquals 50000 Priority.FATAL_INT testErrorInt assertEquals 40000 Priority.ERROR_INT testWarnInt assertEquals 30000 Priority.WARN_INT testInfoInt assertEquals 20000 Priority.INFO_INT testDebugInt assertEquals 10000 Priority.DEBUG_INT testAllInt assertEquals Integer.MIN_VALUE Priority.ALL_INT testFatal assertTrue Priority.FATALinstanceofLevel testERROR assertTrue Priority.ERRORinstanceofLevel testWARN assertTrue Priority.WARNinstanceofLevel testINFO assertTrue Priority.INFOinstanceofLevel testDEBUG assertTrue Priority.DEBUGinstanceofLevel testEqualsNull assertFalse Priority.DEBUG.equals(null) testEqualsLevel assertTrue Priority.DEBUG.equals(Level.DEBUG) testGetAllPossiblePriorities assertEquals 5 priorities.length testToPriorityString assertTrue Priority.toPriority("DEBUG")==Level.DEBUG testToPriorityInt assertTrue Priority.toPriority(Priority.DEBUG_INT)==Level.DEBUG testToPriorityStringPriority assertTrue Priority.toPriority("foo",Priority.DEBUG)==Priority.DEBUG testToPriorityIntPriority assertTrue Priority.toPriority(17,Priority.DEBUG)==Priority.DEBUG testDotlessLowerI assertEquals "INFO" level.toString() testDottedLowerI Locale turkey Locale defaultLocale assertEquals "INFO" level.toString()
Class@@PropertyConfiguratorTest testBadUnicodeEscape writer "log4j.rootLogger=\\uXX41" writer PropertyConfigurator fileName assertTrue file.delete() assertFalse file.exists() testURL writer "log4j.rootLogger=debug" writer PropertyConfigurator url assertTrue file.delete() assertFalse file.exists() testURLBadEscape writer "log4j.rootLogger=\\uXX41" writer PropertyConfigurator url assertTrue file.delete() assertFalse file.exists() testInputStream assertTrue file.exists() PropertyConfigurator inputStream inputStream this LogManager validateNested assertEquals "filterBase-test1.log" rollingPolicy.getActiveFileName() assertEquals "filterBased-test1.%i" rollingPolicy.getFileNamePattern() assertEquals 0 rollingPolicy.getMinIndex() assertTrue rollingPolicy.isActivated() assertTrue Level.INFO.equals(filter.getLevelMin()) testJarURL dir zos newZipEntry(LogManager.DEFAULT_CONFIGURATION_FILE) zos "log4j.rootLogger=debug".getBytes() zos zos PropertyConfigurator url assertTrue file.delete() assertFalse file.exists() testReset appender "A1" Logger.getRootLogger() appender props "log4j.reset" "true" PropertyConfigurator props assertNull Logger.getRootLogger().getAppender("A1") LogManager
Class@@RollingPolicy activateOptions isActivated
Class@@FixedWindowRollingPolicy getActiveFileName setActiveFileName getFileNamePattern setFileNamePattern getMinIndex setMinIndex
Class@@TriggeringPolicy activateOptions isActivated
Class@@FilterBasedTriggeringPolicy setFilter getFilter
Class@@RollingFileAppender getRollingPolicy setRollingPolicy getTriggeringPolicy setTriggeringPolicy getAppend setAppend close requiresLayout append testNested PropertyConfigurator "input/filter1.properties" this LogManager
Class@@MockThrowableRenderer activateOptions isActivated doRender setShowVersion getShowVersion testThrowableRenderer props "log4j.throwableRenderer" "org.apache.log4j.PropertyConfiguratorTest$MockThrowableRenderer" props "log4j.throwableRenderer.showVersion" "false" PropertyConfigurator props LogManager assertNotNull renderer assertEquals true renderer.isActivated() assertEquals false renderer.getShowVersion()
Class@@RewriteAppenderTest setUp LogManager.getLoggerRepository() context tearDown LogManager.getLoggerRepository() configure factory false DOMConfigurator doc.getDocumentElement() testMapPolicy configure "map.xml" logger "Message 0" MDC "p1" "Hola" msg "p1" "Hello" msg "p2" "World" msg "x1" "Mundo" logger msg msg "message" "Message 1" logger msg assertTrue Compare.compare(RewriteAppenderTest.class,"temp","map.log")
Class@@BaseBean getP2 getX1 toString
Class@@MessageBean getMessage testReflectionPolicy configure "reflection.xml" logger "Message 0" logger newBaseBean("Hello","World") MDC "p1" "Hola" MDC "p2" "p2" logger newMessageBean("Welcome to The Hub","Hello","World") assertTrue Compare.compare(RewriteAppenderTest.class,"temp","reflection.log") testPropertyPolicy configure "property.xml" logger "Message 0" MDC "p1" "Hola" logger "Message 1" assertTrue Compare.compare(RewriteAppenderTest.class,"temp","property.log")
Class@@RFATestCase tearDown LogManager test1 PropertyConfigurator "input/RFA1.properties" logger "Hello---"+i logger "Hello--"+i assertTrue newFile("output/RFA-test1.log").exists() assertTrue newFile("output/RFA-test1.log.1").exists() test2 rfa "ROLLING" rfa layout rfa false rfa 3 rfa 100 rfa "output/RFA-test2.log" rfa root rfa logger "Hello---"+i logger "Hello--"+i assertTrue newFile("output/RFA-test2.log").exists() assertTrue newFile("output/RFA-test2.log.1").exists() assertTrue newFile("output/RFA-test2.log.2").exists() assertTrue newFile("output/RFA-test2.log.3").exists() assertFalse newFile("output/RFA-test2.log.4").exists() test2ParamConstructor assertEquals 1 appender.getMaxBackupIndex() assertEquals 10*1024*1024 appender.getMaximumFileSize() test3ParamConstructor assertEquals 1 appender.getMaxBackupIndex() testLockDotOne rfa "ROLLING" rfa layout rfa false rfa 10 rfa 100 rfa "output/RFA-dot1.log" rfa root rfa newFile("output/RFA-dot1.log.2") dot1 "Locked file" dot5 "Unlocked file" dot5 logger "Hello---"+i logger "Hello--"+i dot1 logger "Hello--"+i rfa assertTrue newFile("output/RFA-dot1.log.7").exists() assertEquals 50 newFile("output/RFA-dot1.log").length() assertEquals 200 newFile("output/RFA-dot1.log.1").length() assertTrue newFile("output/RFA-dot1.log").exists() assertTrue newFile("output/RFA-dot1.log.1").exists() assertTrue newFile("output/RFA-dot1.log.2").exists() assertTrue newFile("output/RFA-dot1.log.3").exists() assertFalse newFile("output/RFA-dot1.log.4").exists() testLockDotThree rfa "ROLLING" rfa layout rfa false rfa 10 rfa 100 rfa "output/RFA-dot3.log" rfa root rfa newFile("output/RFA-dot3.log.1") newFile("output/RFA-dot3.log.2") newFile("output/RFA-dot3.log.4") dot3 "Locked file" dot5 "Unlocked file" dot5 logger "Hello---"+i logger "Hello--"+i dot3 logger "Hello--"+i rfa assertTrue newFile("output/RFA-dot3.log.8").exists() assertEquals 50 newFile("output/RFA-dot3.log").length() assertEquals 100 newFile("output/RFA-dot3.log.1").length() assertEquals 200 newFile("output/RFA-dot3.log.2").length() assertTrue newFile("output/RFA-dot3.log").exists() assertTrue newFile("output/RFA-dot3.log.1").exists() assertTrue newFile("output/RFA-dot3.log.2").exists() assertTrue newFile("output/RFA-dot3.log.3").exists() assertFalse newFile("output/RFA-dot3.log.4").exists()
Class@@LocationInfoTest testFourParamConstructor assertEquals className li.getClassName() assertEquals methodName li.getMethodName() assertEquals fileName li.getFileName() assertEquals lineNumber li.getLineNumber() assertEquals className+"."+methodName+"("+fileName+":"+lineNumber+")" li.fullInfo
Class@@NameSubstring getInfo
Class@@NameSubstringCaller getInfo testLocationInfo assertEquals NameSubstringCaller.class.getName() li.getClassName() assertEquals "getInfo" li.getMethodName()
Class@@LoggingEventTest testSerializationSimple SerializationTestHelper "witness/serialization/simple.bin" event skip 237 testSerializationWithException SerializationTestHelper "witness/serialization/exception.bin" event skip 237 testSerializationWithLocation event SerializationTestHelper "witness/serialization/location.bin" event skip 237 testSerializationNDC NDC "ndc test" SerializationTestHelper "witness/serialization/ndc.bin" event skip 237 testSerializationMDC MDC "mdckey" "mdcvalue" SerializationTestHelper "witness/serialization/mdc.bin" event skip 237 testDeserializationSimple assertTrue objinstanceofLoggingEvent assertEquals "Hello, world." event.getMessage() assertEquals Level.INFO event.getLevel() testDeserializationWithException assertTrue objinstanceofLoggingEvent assertEquals "Hello, world." event.getMessage() assertEquals Level.INFO event.getLevel() testDeserializationWithLocation assertTrue objinstanceofLoggingEvent assertEquals "Hello, world." event.getMessage() assertEquals Level.INFO event.getLevel() testFQNOfCategoryClass assertEquals catName event.fqnOfCategoryClass testLevel assertEquals Level.ERROR event.level testLocationInfoNoFQCN assertNotNull info assertEquals "?" info.getLineNumber() assertEquals "?" info.getClassName() assertEquals "?" info.getFileName() assertEquals "?" info.getMethodName()
Class@@BadMessage toString testBadMessage event
Class@@ThrowableInformationTest
Class@@OverriddenThrowable printStackTrace s (Object)"print(Object)" s "print(char[])".toCharArray() s "print(String)" s (Object)"println(Object)" s "println(char[])".toCharArray() s "println(String)" s "write(char[])".toCharArray() s "write(char[], int, int)".toCharArray() 2 8 s "write(String, int, int)" 2 8 testOverriddenBehavior assertEquals 4 rep.length assertEquals "print(Object)print(char[])print(String)println(Object)" rep[0] assertEquals "println(char[])" rep[1] assertEquals "println(String)" rep[2] assertEquals "write(char[])ite(charite(Stri" rep[3]
Class@@NotOverriddenThrowable printStackTrace s true s 'a' s 1 s 2L s Float.MAX_VALUE s Double.MIN_VALUE s true s 'a' s 1 s 2L s Float.MAX_VALUE s Double.MIN_VALUE s 'C' testNotOverriddenBehavior assertEquals 7 rep.length buf 'a' buf String.valueOf(1) buf String.valueOf(2L) buf String.valueOf(Float.MAX_VALUE) buf String.valueOf(Double.MIN_VALUE) buf String.valueOf(true) assertEquals buf.toString() rep[0] assertEquals "a" rep[1] assertEquals String.valueOf(1) rep[2] assertEquals String.valueOf(2L) rep[3] assertEquals String.valueOf(Float.MAX_VALUE) rep[4] assertEquals String.valueOf(Double.MIN_VALUE) rep[5] assertEquals "C" rep[6]
Class@@NullThrowable printStackTrace s (Object)null s (String)null s (Object)null s (String)null testNull assertEquals 2 rep.length assertEquals nullStr+nullStr+nullStr rep[0] assertEquals nullStr rep[1]
Class@@EmptyThrowable printStackTrace testEmpty assertEquals 0 rep.length
Class@@StringThrowable printStackTrace s stackTrace testLineFeed assertEquals 1 rep.length assertEquals "" rep[0] testCarriageReturn assertEquals 1 rep.length assertEquals "" rep[0] testParsing assertEquals 6 rep.length assertEquals "Line1" rep[0] assertEquals "Line2" rep[1] assertEquals "Line3" rep[2] assertEquals "Line4" rep[3] assertEquals "" rep[4] assertEquals "Line6" rep[5] testLineFeedBlank assertEquals 2 rep.length assertEquals "" rep[0] assertEquals " " rep[1] testGetThrowable assertSame t ti.getThrowable() testIsolation assertEquals "Hello, World" rep[0] assertEquals "Hello, World" rep2[0]
Class@@NastyThrowable printStackTrace s "NastyException" testNastyException assertEquals "NastyException" rep[0]
Class@@StressCategory main System.err "Usage: java "+StressCategory.class.getName()+" name1 ... nameN\n." System 1 System.err "This stress test suffers from combinatorial explosion.\n"+"Invoking with seven arguments takes about 90 minutes even on fast machines" permute 0 permute createLoop 0 swap names n i permute n+1 swap names n i swap permutationDump System.out "Current permutation is - " System.out names[i]+" " System.out createLoop cat[i] ct[i].level test h createLoop n+1 createLoop n+1 createLoop n+1 test System.out "Failed stress test." permutationDump ctDump catDump System 1 ctDump System.out "ct ["+j+"] = ("+ct[j].catstr+","+ct[j].level+")" System.out "ct ["+j+"] = undefined" catDump System.out "cat["+j+"] = ("+cat[j].name+","+cat[j].getLevel()+")" System.out "cat["+j+"] = undefined" checkCorrectness System.out "Expected level for "+localCT.catstr+" is "+expected System.out "Purported level for "+cat[i].name+" is "+purported getExpectedPrioriy
Class@@CT
Class@@TestLogMF getTraceLevel tearDown LogManager testClassName appender Logger.getRootLogger() appender LogMF logger null Math.PI assertEquals TestLogMF.class.getName() writer.toString() testTraceNullPattern logger TRACE LogMF logger null Math.PI assertNull capture.getMessage() testTraceNoArg logger TRACE LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testTraceBadPattern logger TRACE LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testTraceMissingArg logger TRACE LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testTraceString logger TRACE LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testTraceNull logger TRACE LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testTraceInt logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceByte logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceShort logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceLong logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testTraceChar logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testTraceBoolean logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testTraceFloat logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration "+format.format(val) capture.getMessage() testTraceDouble logger TRACE LogMF logger "Iteration {0}" val assertEquals "Iteration "+format.format(val) capture.getMessage() testTraceTwoArg logger TRACE LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testTraceThreeArg logger TRACE LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testTraceFourArg logger TRACE LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testTraceArrayArg logger TRACE LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testTraceNullArrayArg logger TRACE LogMF logger "{1}{2} {0}{3}" args assertEquals "{1}{2} {0}{3}" capture.getMessage() testDebugNullPattern LogMF logger null Math.PI assertEquals null capture.getMessage() testDebugNoArg LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testDebugBadPattern LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testDebugMissingArg LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testDebugString LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testDebugNull LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testDebugInt LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugByte LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugShort LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugLong LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testDebugChar LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testDebugBoolean LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testDebugFloat LogMF logger "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testDebugDouble LogMF logger "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testDebugTwoArg LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testDebugThreeArg LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testDebugFourArg LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testDebugArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testDebugDate LogMF logger "Iteration {0}" epoch assertEquals expected actual assertEquals expected2 actual testDebugNullArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "{1}{2} {0}{3}" capture.getMessage() testDebugPercent LogMF logger "{0, number, percent}" Math.PI assertEquals expected capture.getMessage() testDebugFullPrecisionAndPercent LogMF logger "{0}{0, number, percent}" Math.PI assertEquals expected capture.getMessage() testDebugQuoted LogMF logger "'{0}'" "World" assertEquals "{0}" capture.getMessage() testInfoNullPattern LogMF logger null Math.PI assertNull capture.getMessage() testInfoNoArg LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testInfoBadPattern LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testInfoMissingArg LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testInfoString LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testInfoNull LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testInfoInt LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoByte LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoShort LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoLong LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testInfoChar LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testInfoBoolean LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testInfoFloat LogMF logger "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testInfoDouble LogMF logger "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testInfoTwoArg LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testInfoThreeArg LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testInfoFourArg LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testInfoArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testWarnNullPattern LogMF logger null Math.PI assertNull capture.getMessage() testWarnNoArg LogMF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testWarnBadPattern LogMF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testWarnMissingArg LogMF logger "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testWarnString LogMF logger "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testWarnNull LogMF logger "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testWarnInt LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnByte LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnShort LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnLong LogMF logger "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testWarnChar LogMF logger "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testWarnBoolean LogMF logger "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testWarnFloat LogMF logger "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testWarnDouble LogMF logger "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testWarnTwoArg LogMF logger "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testWarnThreeArg LogMF logger "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testWarnFourArg LogMF logger "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testWarnArrayArg LogMF logger "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testLogNullPattern LogMF logger Level.ERROR null Math.PI assertNull capture.getMessage() testLogNoArg LogMF logger Level.ERROR "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testLogBadPattern LogMF logger Level.ERROR "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testLogMissingArg LogMF logger Level.ERROR "Hello, {0}World" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testLogString LogMF logger Level.ERROR "Hello, {0}" "World" assertEquals "Hello, World" capture.getMessage() testLogNull LogMF logger Level.ERROR "Hello, {0}" (Object)null assertEquals "Hello, null" capture.getMessage() testLogInt LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogByte LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogShort LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogLong LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration 42" capture.getMessage() testLogChar LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration C" capture.getMessage() testLogBoolean LogMF logger Level.ERROR "Iteration {0}" val assertEquals "Iteration true" capture.getMessage() testLogFloat LogMF logger Level.ERROR "Iteration {0}" (float)Math.PI assertEquals expected capture.getMessage() testLogDouble LogMF logger Level.ERROR "Iteration {0}" Math.PI assertEquals expected capture.getMessage() testLogTwoArg LogMF logger Level.ERROR "{1}, {0}." "World" "Hello" assertEquals "Hello, World." capture.getMessage() testLogThreeArg LogMF logger Level.ERROR "{1}{2} {0}." "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testLogFourArg LogMF logger Level.ERROR "{1}{2} {0}{3}" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testLogArrayArg LogMF logger Level.ERROR "{1}{2} {0}{3}" args assertEquals "Hello, World." capture.getMessage() testLogrbNullBundle LogMF logger Level.ERROR null "Iteration0" Math.PI assertEquals "Iteration0" capture.getMessage() testLogrbNullKey LogMF logger Level.ERROR BUNDLE_NAME null Math.PI assertNull capture.getMessage() testLogrbNoArg LogMF logger Level.ERROR BUNDLE_NAME "Hello1" Math.PI assertEquals "Hello, World" capture.getMessage() testLogrbBadPattern LogMF logger Level.ERROR BUNDLE_NAME "Malformed" Math.PI assertEquals "Hello, {." capture.getMessage() testLogrbMissingArg LogMF logger Level.ERROR BUNDLE_NAME "Hello2" newObject[0] assertEquals "Hello, {0}World" capture.getMessage() testLogrbString LogMF logger Level.ERROR BUNDLE_NAME "Hello3" "World" assertEquals "Hello, World" capture.getMessage() testLogrbNull LogMF logger Level.ERROR BUNDLE_NAME "Hello3" (Object)null assertEquals "Hello, null" capture.getMessage() testLogrbInt LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbByte LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbShort LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbLong LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbChar LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration C" capture.getMessage() testLogrbBoolean LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration true" capture.getMessage() testLogrbFloat LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" (float)Math.PI assertEquals expected capture.getMessage() testLogrbDouble LogMF logger Level.ERROR BUNDLE_NAME "Iteration0" Math.PI assertEquals expected capture.getMessage() testLogrbTwoArg LogMF logger Level.ERROR BUNDLE_NAME "Hello4" "World" "Hello" assertEquals "Hello, World." capture.getMessage() testLogrbThreeArg LogMF logger Level.ERROR BUNDLE_NAME "Hello5" "World" "Hello" "," assertEquals "Hello, World." capture.getMessage() testLogrbFourArg LogMF logger Level.ERROR BUNDLE_NAME "Hello6" "World" "Hello" "," "." assertEquals "Hello, World." capture.getMessage() testLogrbArrayArg LogMF logger Level.ERROR BUNDLE_NAME "Hello6" args assertEquals "Hello, World." capture.getMessage() testInfo1ParamBrace9 LogMF logger "Hello, {9}{0}" "World" assertEquals "Hello, {9}World" capture.getMessage() testInfo2ParamBrace9 LogMF logger "{1}, {9}{0}" "World" "Hello" assertEquals "Hello, {9}World" capture.getMessage() testInfo10ParamBrace9 LogMF logger "{1}, {9}{0}" newObject[]{"World","Hello",null,null,null,null,null,null,null,"New "} assertEquals "Hello, New World" capture.getMessage() testInfo1ParamBraceSlashColon LogMF logger pattern "World" assertEquals pattern capture.getMessage()
Class@@TestLogSF getTraceLevel tearDown LogManager testClassName appender Logger.getRootLogger() appender LogSF logger null Math.PI assertEquals TestLogSF.class.getName() writer.toString() testTraceNullPattern logger TRACE LogSF logger null Math.PI assertNull capture.getMessage() testTraceNoArg logger TRACE LogSF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testTraceBadPattern logger TRACE LogSF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testTraceMissingArg logger TRACE LogSF logger "Hello, {}World" newObject[0] assertEquals "Hello, {}World" capture.getMessage() testTraceString logger TRACE LogSF logger "Hello, {}" "World" assertEquals "Hello, World" capture.getMessage() testTraceNull logger TRACE LogSF logger "Hello, {}" (Object)null assertEquals "Hello, null" capture.getMessage() testTraceInt logger TRACE LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testTraceByte logger TRACE LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testTraceShort logger TRACE LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testTraceLong logger TRACE LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testTraceChar logger TRACE LogSF logger "Iteration {}" val assertEquals "Iteration C" capture.getMessage() testTraceBoolean logger TRACE LogSF logger "Iteration {}" val assertEquals "Iteration true" capture.getMessage() testTraceFloat logger TRACE LogSF logger "Iteration {}" val assertEquals "Iteration "+String.valueOf(val) capture.getMessage() testTraceDouble logger TRACE LogSF logger "Iteration {}" val assertEquals "Iteration "+String.valueOf(val) capture.getMessage() testTraceTwoArg logger TRACE LogSF logger "{}, {}." "Hello" "World" assertEquals "Hello, World." capture.getMessage() testTraceThreeArg logger TRACE LogSF logger "{}{} {}." "Hello" "," "World" assertEquals "Hello, World." capture.getMessage() testTraceFourArg logger TRACE LogSF logger "{}{} {}{}" "Hello" "," "World" "." assertEquals "Hello, World." capture.getMessage() testTraceArrayArg logger TRACE LogSF logger "{}{} {}{}" args assertEquals "Hello, World." capture.getMessage() testTraceNullArrayArg logger TRACE LogSF logger "{}{} {}{}" args assertEquals "{}{} {}{}" capture.getMessage() testDebugNullPattern LogSF logger null Math.PI assertNull capture.getMessage() testDebugNoArg LogSF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testDebugBadPattern LogSF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testDebugMissingArg LogSF logger "Hello, {}World" newObject[0] assertEquals "Hello, {}World" capture.getMessage() testDebugString LogSF logger "Hello, {}" "World" assertEquals "Hello, World" capture.getMessage() testDebugNull LogSF logger "Hello, {}" (Object)null assertEquals "Hello, null" capture.getMessage() testDebugInt LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testDebugByte LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testDebugShort LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testDebugLong LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testDebugChar LogSF logger "Iteration {}" val assertEquals "Iteration C" capture.getMessage() testDebugBoolean LogSF logger "Iteration {}" val assertEquals "Iteration true" capture.getMessage() testDebugFloat LogSF logger "Iteration {}" val assertEquals "Iteration "+String.valueOf(val) capture.getMessage() testDebugDouble LogSF logger "Iteration {}" val assertEquals "Iteration "+String.valueOf(val) capture.getMessage() testDebugTwoArg LogSF logger "{}, {}." "Hello" "World" assertEquals "Hello, World." capture.getMessage() testDebugThreeArg LogSF logger "{}{} {}." "Hello" "," "World" assertEquals "Hello, World." capture.getMessage() testDebugFourArg LogSF logger "{}{} {}{}" "Hello" "," "World" "." assertEquals "Hello, World." capture.getMessage() testDebugArrayArg LogSF logger "{}{} {}{}" args assertEquals "Hello, World." capture.getMessage() testDebugNullArrayArg LogSF logger "{}{} {}{}" args assertEquals "{}{} {}{}" capture.getMessage() testInfoNullPattern LogSF logger null Math.PI assertNull capture.getMessage() testInfoNoArg LogSF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testInfoBadPattern LogSF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testInfoMissingArg LogSF logger "Hello, {}World" newObject[0] assertEquals "Hello, {}World" capture.getMessage() testInfoString LogSF logger "Hello, {}" "World" assertEquals "Hello, World" capture.getMessage() testInfoNull LogSF logger "Hello, {}" (Object)null assertEquals "Hello, null" capture.getMessage() testInfoInt LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testInfoByte LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testInfoShort LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testInfoLong LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testInfoChar LogSF logger "Iteration {}" val assertEquals "Iteration C" capture.getMessage() testInfoBoolean LogSF logger "Iteration {}" val assertEquals "Iteration true" capture.getMessage() testInfoFloat LogSF logger "Iteration {}" val assertEquals "Iteration "+String.valueOf(val) capture.getMessage() testInfoDouble LogSF logger "Iteration {}" val assertEquals "Iteration "+String.valueOf(val) capture.getMessage() testInfoTwoArg LogSF logger "{}, {}." "Hello" "World" assertEquals "Hello, World." capture.getMessage() testInfoThreeArg LogSF logger "{}{} {}." "Hello" "," "World" assertEquals "Hello, World." capture.getMessage() testInfoArrayArg LogSF logger "{}{} {}{}" args assertEquals "Hello, World." capture.getMessage() testWarnNullPattern LogSF logger null Math.PI assertNull capture.getMessage() testWarnNoArg LogSF logger "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testWarnBadPattern LogSF logger "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testWarnMissingArg LogSF logger "Hello, {}World" newObject[0] assertEquals "Hello, {}World" capture.getMessage() testWarnString LogSF logger "Hello, {}" "World" assertEquals "Hello, World" capture.getMessage() testWarnNull LogSF logger "Hello, {}" (Object)null assertEquals "Hello, null" capture.getMessage() testWarnInt LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testWarnByte LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testWarnShort LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testWarnLong LogSF logger "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testWarnChar LogSF logger "Iteration {}" val assertEquals "Iteration C" capture.getMessage() testWarnBoolean LogSF logger "Iteration {}" val assertEquals "Iteration true" capture.getMessage() testWarnFloat LogSF logger "Iteration {}" val assertEquals "Iteration "+String.valueOf(val) capture.getMessage() testWarnDouble LogSF logger "Iteration {}" val assertEquals "Iteration "+String.valueOf(val) capture.getMessage() testWarnTwoArg LogSF logger "{}, {}." "Hello" "World" assertEquals "Hello, World." capture.getMessage() testWarnThreeArg LogSF logger "{}{} {}." "Hello" "," "World" assertEquals "Hello, World." capture.getMessage() testWarnFourArg LogSF logger "{}{} {}{}" "Hello" "," "World" "." assertEquals "Hello, World." capture.getMessage() testWarnArrayArg LogSF logger "{}{} {}{}" args assertEquals "Hello, World." capture.getMessage() testLogNullPattern LogSF logger Level.ERROR null Math.PI assertNull capture.getMessage() testLogNoArg LogSF logger Level.ERROR "Hello, World" Math.PI assertEquals "Hello, World" capture.getMessage() testLogBadPattern LogSF logger Level.ERROR "Hello, {." Math.PI assertEquals "Hello, {." capture.getMessage() testLogMissingArg LogSF logger Level.ERROR "Hello, {}World" newObject[0] assertEquals "Hello, {}World" capture.getMessage() testLogString LogSF logger Level.ERROR "Hello, {}" "World" assertEquals "Hello, World" capture.getMessage() testLogNull LogSF logger Level.ERROR "Hello, {}" (Object)null assertEquals "Hello, null" capture.getMessage() testLogInt LogSF logger Level.ERROR "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testLogByte LogSF logger Level.ERROR "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testLogShort LogSF logger Level.ERROR "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testLogLong LogSF logger Level.ERROR "Iteration {}" val assertEquals "Iteration 42" capture.getMessage() testLogChar LogSF logger Level.ERROR "Iteration {}" val assertEquals "Iteration C" capture.getMessage() testLogBoolean LogSF logger Level.ERROR "Iteration {}" val assertEquals "Iteration true" capture.getMessage() testLogFloat LogSF logger Level.ERROR "Iteration {}" (float)Math.PI assertEquals expected capture.getMessage() testLogDouble LogSF logger Level.ERROR "Iteration {}" Math.PI assertEquals expected capture.getMessage() testLogTwoArg LogSF logger Level.ERROR "{}, {}." "Hello" "World" assertEquals "Hello, World." capture.getMessage() testLogThreeArg LogSF logger Level.ERROR "{}{} {}." "Hello" "," "World" assertEquals "Hello, World." capture.getMessage() testLogFourArg LogSF logger Level.ERROR "{}{} {}{}" "Hello" "," "World" "." assertEquals "Hello, World." capture.getMessage() testLogArrayArg LogSF logger Level.ERROR "{}{} {}{}" args assertEquals "Hello, World." capture.getMessage() testLogrbNullBundle LogSF logger Level.ERROR null "Iteration0" Math.PI assertEquals "Iteration0" capture.getMessage() testLogrbNullKey LogSF logger Level.ERROR BUNDLE_NAME null Math.PI assertNull capture.getMessage() testLogrbNoArg LogSF logger Level.ERROR BUNDLE_NAME "Hello1" Math.PI assertEquals "Hello, World" capture.getMessage() testLogrbBadPattern LogSF logger Level.ERROR BUNDLE_NAME "Malformed" Math.PI assertEquals "Hello, {." capture.getMessage() testLogrbMissingArg LogSF logger Level.ERROR BUNDLE_NAME "Hello2" newObject[0] assertEquals "Hello, {}World" capture.getMessage() testLogrbString LogSF logger Level.ERROR BUNDLE_NAME "Hello3" "World" assertEquals "Hello, World" capture.getMessage() testLogrbNull LogSF logger Level.ERROR BUNDLE_NAME "Hello3" (Object)null assertEquals "Hello, null" capture.getMessage() testLogrbInt LogSF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbByte LogSF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbShort LogSF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbLong LogSF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration 42" capture.getMessage() testLogrbChar LogSF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration C" capture.getMessage() testLogrbBoolean LogSF logger Level.ERROR BUNDLE_NAME "Iteration0" val assertEquals "Iteration true" capture.getMessage() testLogrbFloat LogSF logger Level.ERROR BUNDLE_NAME "Iteration0" (float)Math.PI assertEquals expected capture.getMessage() testLogrbDouble LogSF logger Level.ERROR BUNDLE_NAME "Iteration0" Math.PI assertEquals expected capture.getMessage() testLogrbTwoArg LogSF logger Level.ERROR BUNDLE_NAME "Hello4" "Hello" "World" assertEquals "Hello, World." capture.getMessage() testLogrbThreeArg LogSF logger Level.ERROR BUNDLE_NAME "Hello5" "Hello" "," "World" assertEquals "Hello, World." capture.getMessage() testLogrbFourArg LogSF logger Level.ERROR BUNDLE_NAME "Hello6" "Hello" "," "World" "." assertEquals "Hello, World." capture.getMessage() testLogrbArrayArg LogSF logger Level.ERROR BUNDLE_NAME "Hello6" args assertEquals "Hello, World." capture.getMessage() testEscapeOneParam LogSF logger "\\{}\\{{}}, World}\\{" "Hello" assertEquals "{}{Hello}, World}{" capture.getMessage() testEscapeTwoParam LogSF logger "\\{}\\{{}}, {}}{}\\{" "Hello" "World" assertEquals "{}{Hello}, World}{}{" capture.getMessage()
Class@@TestLogXF tearDown LogManager
Class@@BadStringifier toString testEnteringNullNull logger Level.DEBUG LogXF logger null null assertEquals "null.null ENTRY" capture.getMessage() testEnteringNullNullNull logger Level.DEBUG LogXF logger null null (String)null assertEquals "null.null ENTRY null" capture.getMessage() testEnteringNullNullNullArray logger Level.DEBUG LogXF logger null null (Object[])null assertEquals "null.null ENTRY {}" capture.getMessage() testEntering logger Level.DEBUG LogXF logger "SomeClass" "someMethod" assertEquals "SomeClass.someMethod ENTRY" capture.getMessage() testEnteringWithParam logger Level.DEBUG LogXF logger "SomeClass" "someMethod" "someParam" assertEquals "SomeClass.someMethod ENTRY someParam" capture.getMessage() testEnteringWithBadParam logger Level.DEBUG LogXF logger "SomeClass" "someMethod" BadStringifier.INSTANCE assertEquals "SomeClass.someMethod ENTRY ?" capture.getMessage() testEnteringWithBadParams logger Level.DEBUG LogXF logger "SomeClass" "someMethod" newObject[]{"param1",BadStringifier.INSTANCE} assertEquals "SomeClass.someMethod ENTRY {param1,?}" capture.getMessage() testExitingNullNull logger Level.DEBUG LogXF logger null null assertEquals "null.null RETURN" capture.getMessage() testExitingNullNullNull logger Level.DEBUG LogXF logger null null (String)null assertEquals "null.null RETURN null" capture.getMessage() testExiting logger Level.DEBUG LogXF logger "SomeClass" "someMethod" assertEquals "SomeClass.someMethod RETURN" capture.getMessage() testExitingWithValue logger Level.DEBUG LogXF logger "SomeClass" "someMethod" "someValue" assertEquals "SomeClass.someMethod RETURN someValue" capture.getMessage() testExitingWithBadValue logger Level.DEBUG LogXF logger "SomeClass" "someMethod" BadStringifier.INSTANCE assertEquals "SomeClass.someMethod RETURN ?" capture.getMessage() testThrowingNullNullNull logger Level.DEBUG LogXF logger null null null assertEquals "null.null THROW" capture.getMessage() testThrowing logger Level.DEBUG LogXF logger "SomeClass" "someMethod" newIllegalArgumentException() assertEquals "SomeClass.someMethod THROW" capture.getMessage()
Class@@TTCCLayoutTest createLayout testFormat NDC NDC "NDC goes here" NDC layout buf event buf '[' buf event.getThreadName() buf "] " buf event.getLevel().toString() buf ' ' buf event.getLoggerName() buf ' ' buf "NDC goes here" buf " - " buf event.getMessage() buf System.getProperty("line.separator") assertEquals buf.toString() result testGetSetThreadPrinting assertEquals true layout.getThreadPrinting() layout false assertEquals false layout.getThreadPrinting() layout true assertEquals true layout.getThreadPrinting() testGetSetCategoryPrefixing assertEquals true layout.getCategoryPrefixing() layout false assertEquals false layout.getCategoryPrefixing() layout true assertEquals true layout.getCategoryPrefixing() testGetSetContextPrinting assertEquals true layout.getContextPrinting() layout false assertEquals false layout.getContextPrinting() layout true assertEquals true layout.getContextPrinting()
Class@@AbsoluteDateAndTimeFilter filter
Class@@AbsoluteTimeFilter filter
Class@@Compare compare System.out "Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter System.out "One reads:  ["+s1+"]." System.out "Other reads:["+s2+"]." System.out "File ["+file2+"] longer than file ["+file1+"]." open compare in1 in2 compare System.out "Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter System.out "One reads:  ["+s1+"]." System.out "Other reads:["+s2+"]." outputFile testClass file1 outputFile testClass file2 System.out "File ["+file2+"] longer than file ["+file1+"]." outputFile testClass file1 outputFile testClass file2 outputFile System.out "--------------------------------" System.out "Contents of "+file+":" System.out lineCounter System.out "   : " System.out "  : " System.out " : " System.out ": " System.out s1 in1
Class@@ControlFilter filter
Class@@EnhancedJunitTestRunnerFilter filter
Class@@EnhancedLineNumberFilter filter filter
Class@@ISO8601Filter filter
Class@@JunitTestRunnerFilter filter
Class@@LineNumberFilter filter
Class@@RelativeTimeFilter filter
Class@@SerializationTestHelper serializeClone objOut obj objOut deserializeStream assertSerializationEquals objOut obj objOut assertStreamEquals witness memOut.toByteArray() skip endCompare assertStreamEquals is TestCase bytesRead actual.length TestCase "Difference at offset "+i expected[i] actual[i] os actual os TestCase "Writing witness file "+witness
Class@@SunReflectFilter filter
Class@@Transformer transform output line transform output line
Class@@UnexpectedFormatException
Class@@XMLLineAttributeFilter filter
Class@@XMLTimestampFilter filter
Class@@ERFATestCase tearDown LogManager testConstructor assertEquals 0 appender.getPort() sendMessage writer msg assertEquals expectedResponse response reader writer socket testRollover erfa layout erfa false erfa 2 erfa port erfa "output/ERFA-test2.log" erfa Thread 100 root erfa logger "Hello---"+i logger "Hello--"+i sendMessage port "RollOver" "OK" sendMessage port "That's all folks." "Expecting [RollOver] string." assertTrue newFile("output/ERFA-test2.log").exists() assertTrue newFile("output/ERFA-test2.log.1").exists() assertTrue newFile("output/ERFA-test2.log.2").exists() assertFalse newFile("output/ERFA-test2.log.3").exists()
Class@@ErrorHandlerTestCase setUp tearDown root.getLoggerRepository() test1 DOMConfigurator "input/xml/fallback1.xml" assertNotNull eh common Transformer TEMP FILTERED newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/fallback1") test2 PropertyConfigurator "input/fallback1.properties" assertNotNull eh common Transformer TEMP FILTERED newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/fallback1") common logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger Level.FATAL "Message "+++i root Level.FATAL "Message "+i logger "Message "+++i e root "Message "+i e logger "Message "+++i e root "Message "+i e
Class@@LevelMatchFilterTestCase setUp root tearDown root.getLoggerRepository() accept appender matchFilter appender newDenyAllFilter() root appender root Level.TRACE matchFilter levelArray[x].toString() common "pass "+x+"; filter set to accept only "+levelArray[x].toString()+" msgs" Transformer ACCEPT_FILE ACCEPT_FILTERED newLineNumberFilter() assertTrue Compare.compare(ACCEPT_FILTERED,ACCEPT_WITNESS) deny matchFilter false appender matchFilter root appender root Level.TRACE matchFilter levelArray[x].toString() common "pass "+x+"; filter set to deny only "+levelArray[x].toString()+" msgs" Transformer DENY_FILE DENY_FILTERED newLineNumberFilter() assertTrue Compare.compare(DENY_FILTERED,DENY_WITNESS) common logger msg logger msg logger msg logger msg logger msg logger msg suite suite newLevelMatchFilterTestCase("accept") suite newLevelMatchFilterTestCase("deny")
Class@@VectorAppender activateOptions append Thread 100 vector event getVector close isClosed requiresLayout
Class@@VectorErrorHandler setLogger getLogger activateOptions error error message e errorCode null error error message null -1 null error errors newObject[]{message,e,newInteger(errorCode),event} getMessage getException getErrorCode getEvent size setAppender getAppender setBackupAppender getBackupAppender
Class@@CustomLevelTestCase setUp tearDown root.getLoggerRepository() test1 DOMConfigurator "input/xml/customLevel1.xml" common assertTrue Compare.compare(TEMP,"witness/customLevel.1") test2 DOMConfigurator "input/xml/customLevel2.xml" common assertTrue Compare.compare(TEMP,"witness/customLevel.2") test3 DOMConfigurator "input/xml/customLevel3.xml" common assertTrue Compare.compare(TEMP,"witness/customLevel.3") test4 DOMConfigurator "input/xml/customLevel4.xml" common assertTrue Compare.compare(TEMP,"witness/customLevel.4") common logger "Message "+++i logger "Message "+++i logger "Message "+++i logger "Message "+++i logger XLevel.TRACE "Message "+++i suite suite newCustomLevelTestCase("test1") suite newCustomLevelTestCase("test2") suite newCustomLevelTestCase("test3") suite newCustomLevelTestCase("test4")
Class@@DOMTestCase setUp tearDown root.getLoggerRepository() test1 DOMConfigurator "input/xml/DOMTestCase1.xml" common Transformer TEMP_A1 FILTERED_A1 newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} Transformer TEMP_A2 FILTERED_A2 newFilter[]{cf2,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED_A1,"witness/dom.A1.1") assertTrue Compare.compare(FILTERED_A2,"witness/dom.A2.1") test4 DOMConfigurator "input/xml/DOMTest4.xml" common Transformer TEMP_A1+".4" FILTERED_A1+".4" newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} Transformer TEMP_A2+".4" FILTERED_A2+".4" newFilter[]{cf2,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()} assertTrue Compare.compare(FILTERED_A1+".4","witness/dom.A1.4") assertTrue Compare.compare(FILTERED_A2+".4","witness/dom.A2.4") common Thread.currentThread() "main" logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger Level.FATAL "Message "+++i root Level.FATAL "Message "+i logger "Message "+++i e root "Message "+i e logger "Message "+++i e root "Message "+i e Thread.currentThread() oldThreadName
Class@@CustomLogger
Class@@CustomLoggerFactory makeNewLoggerInstance assertFalse additivity setAdditivity
Class@@CustomErrorHandler activateOptions setLogger error error error setAppender setBackupAppender testCategoryFactory1 DOMConfigurator "input/xml/categoryfactory1.xml" assertTrue logger1instanceofCustomLogger assertFalse logger2instanceofCustomLogger testCategoryFactory2 DOMConfigurator "input/xml/categoryfactory2.xml" assertTrue logger1instanceofCustomLogger assertFalse logger2instanceofCustomLogger testLoggerFactory1 DOMConfigurator "input/xml/loggerfactory1.xml" assertTrue logger1instanceofCustomLogger assertFalse logger2instanceofCustomLogger testReset appender "V1" Logger.getRootLogger() appender DOMConfigurator "input/xml/testReset.xml" assertNull Logger.getRootLogger().getAppender("V1") testConfigureAndWatch DOMConfigurator "input/xml/DOMTestCase1.xml" assertNotNull Logger.getRootLogger().getAppender("A1") testOverrideSubst subst configurator "input/xml/DOMTestCase1.xml" LogManager.getLoggerRepository() assertEquals "output/subst-test.A1" file
Class@@MockThrowableRenderer activateOptions isActivated doRender setShowVersion getShowVersion testThrowableRenderer1 DOMConfigurator "input/xml/throwableRenderer1.xml" LogManager assertNotNull renderer assertEquals true renderer.isActivated() assertEquals false renderer.getShowVersion() testJarURL System.out input.getAbsolutePath() dir zos newZipEntry("log4j.xml") zos buf 0 len zos zos DOMConfigurator url assertTrue file.delete() assertFalse file.exists()
Class@@XLevel toLevel toLevel toLevel
Class@@XMLLayoutTest setUp NDC MDC.getContext() tearDown setUp createLayout parse factory false factory true checkEventElement assertEquals "log4j:event" element.getTagName() assertEquals event.getLoggerName() element.getAttribute("logger") assertEquals Long.toString(event.timeStamp) element.getAttribute("timestamp") assertEquals event.getLevel().toString() element.getAttribute("level") assertEquals event.getThreadName() element.getAttribute("thread") checkMessageElement assertEquals "log4j:message" element.getTagName() assertNotNull messageNode assertEquals Node.TEXT_NODE messageNode.getNodeType() assertEquals message messageNode.getNodeValue() assertNull messageNode.getNextSibling() checkNDCElement assertEquals "log4j:NDC" element.getTagName() assertNotNull messageNode assertEquals Node.TEXT_NODE messageNode.getNodeType() assertEquals message messageNode.getNodeValue() assertNull messageNode.getNextSibling() checkThrowableElement assertEquals "log4j:throwable" element.getTagName() assertNotNull messageNode assertEquals Node.TEXT_NODE messageNode.getNodeType() assertEquals msg messageNode.getNodeValue().substring(0,msg.length()) assertNull messageNode.getNextSibling() checkPropertiesElement assertEquals "log4j:properties" element.getTagName() assertEquals "log4j:data" child.getNodeName() assertEquals key childElement.getAttribute("name") assertEquals value childElement.getAttribute("value") assertEquals 1 childNodeCount testFormat checkEventElement parsedResult event checkMessageElement (Element)node "Hello, World" fail "Unexpected node type" assertEquals 1 childElementCount testFormatWithException checkEventElement parsedResult event checkMessageElement (Element)node "Hello, World" checkThrowableElement (Element)node ex fail "Unexpected node type" assertEquals 2 childElementCount testFormatWithNDC NDC "NDC goes here" NDC checkEventElement parsedResult event checkMessageElement (Element)node "Hello, World" checkNDCElement (Element)node "NDC goes here" fail "Unexpected node type" assertEquals 2 childElementCount testGetSetLocationInfo assertEquals false layout.getLocationInfo() layout true assertEquals true layout.getLocationInfo() layout false assertEquals false layout.getLocationInfo() testActivateOptions layout
Class@@ProblemLevel testProblemCharacters Thread.currentThread() problemName NDC problemName mdcMap MDC problemName problemName layout true mdcMap Thread.currentThread() threadName checkEventElement parsedResult event checkMessageElement (Element)node problemName checkNDCElement (Element)node problemName checkThrowableElement (Element)node ex checkPropertiesElement (Element)node problemName problemName fail "Unexpected element" fail "Unexpected node type" testNDCWithCDATA NDC ndcMessage NDC assertEquals 1 ndcs.getLength() buf child.getNodeValue() assertEquals ndcMessage buf.toString() testExceptionWithCDATA assertEquals 1 throwables.getLength() buf child.getNodeValue() assertTrue buf.toString().indexOf(exceptionMessage)!=-1
Class@@XMLLayoutTestCase setUp root Level.TRACE logger Level.TRACE tearDown root.getLoggerRepository() basic root newFileAppender(xmlLayout,TEMP,false) common Transformer TEMP FILTERED newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/xmlLayout.1") locationInfo xmlLayout true root newFileAppender(xmlLayout,TEMP,false) common Transformer TEMP FILTERED newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/xmlLayout.2") testCDATA xmlLayout true root newFileAppender(xmlLayout,TEMP,false) Thread.currentThread() "main" logger "Message with embedded <![CDATA[<hello>hi</hello>]]>." logger "Message with embedded <![CDATA[<hello>hi</hello>]]>." Thread.currentThread() oldThreadName Transformer TEMP FILTERED newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()} Transformer TEMP FILTERED newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter()} assertTrue Compare.compare(FILTERED,"witness/xmlLayout.3") testNull root newFileAppender(xmlLayout,TEMP,false) Thread.currentThread() "main" logger "hi" logger null logger "hi" e Thread.currentThread() oldThreadName Transformer TEMP FILTERED newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()} assertTrue Compare.compare(FILTERED,"witness/xmlLayout.null") testMDC xmlLayout true root newFileAppender(xmlLayout,TEMP,false) context MDC "key1" "val1" MDC "key2" "val2" logger "Hello" Transformer TEMP FILTERED newFilter[]{newLineNumberFilter(),newJunitTestRunnerFilter(),newXMLTimestampFilter()} assertTrue Compare.compare(FILTERED,"witness/xmlLayout.mdc.1") testMDCEscaped xmlLayout true root newFileAppender(xmlLayout,TEMP,false) context MDC "blahAttribute" "<blah value='blah'>" MDC "<blahKey value='blah'/>" "blahValue" logger "Hello" Transformer TEMP FILTERED newFilter[]{newLineNumberFilter(),newJunitTestRunnerFilter(),newXMLTimestampFilter()} assertTrue Compare.compare(FILTERED,"witness/xmlLayout.mdc.2") common Thread.currentThread() "main" logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger "Message "+++i root "Message "+i logger Level.FATAL "Message "+++i root Level.FATAL "Message "+i logger "Message "+++i e root "Message "+i e logger "Message "+++i e root "Message "+i e Thread.currentThread() oldThreadName suite suite newXMLLayoutTestCase("basic") suite newXMLLayoutTestCase("locationInfo") suite newXMLLayoutTestCase("testCDATA") suite newXMLLayoutTestCase("testNull") suite newXMLLayoutTestCase("testMDC") suite newXMLLayoutTestCase("testMDCEscaped")
Class@@X logger "in X() constructor"