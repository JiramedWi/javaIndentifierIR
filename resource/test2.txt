Class!!AsyncAppenderTestCase
Method!!setUp
Method!!tearDown
TypeName!!LogManager
Method!!closeTest
TypeName!!asyncAppender
argumentName!!"async-CloseTest"
TypeName!!asyncAppender
argumentName!!vectorAppender
TypeName!!root
argumentName!!asyncAppender
TypeName!!root
argumentName!!"m1"
TypeName!!asyncAppender
TypeName!!root
argumentName!!"m2"
MethodName!!assertEquals
argumentName!!v.size()
argumentName!!1
Method!!test2
TypeName!!asyncAppender
argumentName!!"async-test2"
TypeName!!asyncAppender
argumentName!!vectorAppender
TypeName!!root
argumentName!!asyncAppender
TypeName!!root
argumentName!!"m1"
TypeName!!asyncAppender
TypeName!!root
argumentName!!"m2"
MethodName!!assertEquals
argumentName!!v.size()
argumentName!!1
MethodName!!assertTrue
argumentName!!vectorAppender.isClosed()
Method!!test3
TypeName!!asyncAppender
argumentName!!"async-test3"
TypeName!!asyncAppender
argumentName!!vectorAppender
TypeName!!root
argumentName!!asyncAppender
TypeName!!root
argumentName!!"message"+i
TypeName!!System.out
argumentName!!"Done loop."
TypeName!!System.out
TypeName!!asyncAppender
TypeName!!root
argumentName!!"m2"
MethodName!!assertEquals
argumentName!!v.size()
argumentName!!LEN
MethodName!!assertTrue
argumentName!!vectorAppender.isClosed()
Class!!NullPointerAppender
Method!!append
Method!!close
Method!!requiresLayout
Method!!testBadAppender
TypeName!!asyncAppender
argumentName!!nullPointerAppender
TypeName!!asyncAppender
argumentName!!5
TypeName!!asyncAppender
TypeName!!root
argumentName!!nullPointerAppender
TypeName!!root
argumentName!!"Message"
TypeName!!Thread
argumentName!!10
TypeName!!root
argumentName!!"Message"
MethodName!!fail
argumentName!!"Should have thrown exception"
Method!!testLocationInfoTrue
TypeName!!async
argumentName!!blockableAppender
TypeName!!async
argumentName!!5
TypeName!!async
argumentName!!true
TypeName!!async
argumentName!!false
TypeName!!async
TypeName!!rootLogger
argumentName!!async
TypeName!!greeter
TypeName!!rootLogger
argumentName!!"That's all folks."
TypeName!!async
TypeName!!layout
argumentName!!"%C:%L %m%n"
TypeName!!layout
MethodName!!assertEquals
argumentName!!AsyncAppenderTestCase.class.getName()
argumentName!!initialStr.substring(0,AsyncAppenderTestCase.class.getName().length())
MethodName!!assertEquals
argumentName!!"?:? "
argumentName!!discardStr.substring(0,4)
Method!!testLocationInfoFalse
TypeName!!async
argumentName!!blockableAppender
TypeName!!async
argumentName!!5
TypeName!!async
argumentName!!false
TypeName!!async
argumentName!!false
TypeName!!async
TypeName!!rootLogger
argumentName!!async
TypeName!!greeter
TypeName!!rootLogger
argumentName!!"That's all folks."
TypeName!!async
TypeName!!layout
argumentName!!"%C:%L %m%n"
TypeName!!layout
MethodName!!assertEquals
argumentName!!"?:? "
argumentName!!initialStr.substring(0,4)
MethodName!!assertEquals
argumentName!!"?:? "
argumentName!!discardStr.substring(0,4)
Class!!Greeter
Method!!run
TypeName!!logger
argumentName!!"Hello, World"
TypeName!!Thread
argumentName!!1
PrimaryName!!Thread.currentThread()
Class!!BlockableVectorAppender
Method!!append
TypeName!!logger
argumentName!!event.getMessage().toString()
TypeName!!logger
argumentName!!event.getMessage().toString()
TypeName!!logger
argumentName!!event.getMessage().toString()
TypeName!!logger
argumentName!!event.getMessage().toString()
Method!!getMonitor
Method!!testMutableMessage
TypeName!!async
argumentName!!blockableAppender
TypeName!!async
argumentName!!5
TypeName!!async
argumentName!!false
TypeName!!async
TypeName!!rootLogger
argumentName!!async
TypeName!!rootLogger
argumentName!!buf
TypeName!!buf
argumentName!!", World."
TypeName!!async
TypeName!!layout
argumentName!!"%m"
TypeName!!layout
MethodName!!assertEquals
argumentName!!"Hello"
argumentName!!msg
Class!!CategoryTest
Method!!testForcedLog
TypeName!!category
argumentName!!false
TypeName!!category
argumentName!!newVectorAppender()
TypeName!!category
argumentName!!"Hello, World"
Method!!testGetChainedPriorityReturnType
MethodName!!assertTrue
argumentName!!method.getReturnType()==Priority.class
Method!!testL7dlog
TypeName!!logger
argumentName!!Level.ERROR
TypeName!!logger
argumentName!!debug
argumentName!!"Hello, World"
argumentName!!null
Method!!testL7dlog4Param
TypeName!!logger
argumentName!!Level.ERROR
TypeName!!logger
argumentName!!debug
argumentName!!"Hello, World"
argumentName!!newObject[0]
argumentName!!null
Method!!testSetPriority
TypeName!!logger
argumentName!!debug
Class!!MockCategory
Method!!info
MethodName!!forcedLog
argumentName!!MockCategory.class.toString()
argumentName!!info
argumentName!!msg
argumentName!!null
Class!!CoreTestSuite
Method!!suite
TypeName!!s
argumentName!!LoggingEventTest.class
TypeName!!s
argumentName!!org.apache.log4j.LevelTest.class
TypeName!!s
argumentName!!org.apache.log4j.PriorityTest.class
TypeName!!s
argumentName!!org.apache.log4j.CategoryTest.class
TypeName!!s
argumentName!!org.apache.log4j.FileAppenderTest.class
TypeName!!s
argumentName!!org.apache.log4j.LogManagerTest.class
TypeName!!s
argumentName!!org.apache.log4j.helpers.LogLogTest.class
TypeName!!s
argumentName!!org.apache.log4j.LayoutTest.class
TypeName!!s
argumentName!!org.apache.log4j.helpers.DateLayoutTest.class
TypeName!!s
argumentName!!org.apache.log4j.TTCCLayoutTest.class
TypeName!!s
argumentName!!org.apache.log4j.xml.XMLLayoutTest.class
TypeName!!s
argumentName!!org.apache.log4j.HTMLLayoutTest.class
TypeName!!s
argumentName!!org.apache.log4j.PatternLayoutTest.class
TypeName!!s
argumentName!!org.apache.log4j.spi.LoggingEventTest.class
TypeName!!s
argumentName!!org.apache.log4j.spi.ThrowableInformationTest.class
TypeName!!s
argumentName!!org.apache.log4j.spi.LocationInfoTest.class
TypeName!!s
argumentName!!org.apache.log4j.PropertyConfiguratorTest.class
TypeName!!s
argumentName!!org.apache.log4j.net.SMTPAppenderTest.class
TypeName!!s
argumentName!!org.apache.log4j.net.TelnetAppenderTest.class
TypeName!!s
argumentName!!org.apache.log4j.DefaultThrowableRendererTest.class
TypeName!!s
argumentName!!org.apache.log4j.EnhancedThrowableRendererTest.class
TypeName!!s
argumentName!!org.apache.log4j.TestLogXF.class
TypeName!!s
argumentName!!org.apache.log4j.TestLogMF.class
TypeName!!s
argumentName!!org.apache.log4j.TestLogSF.class
TypeName!!s
argumentName!!org.apache.log4j.pattern.CachedDateFormatTest.class
TypeName!!s
argumentName!!org.apache.log4j.pattern.FormattingInfoTest.class
TypeName!!s
argumentName!!org.apache.log4j.pattern.NameAbbreviatorTest.class
TypeName!!s
argumentName!!org.apache.log4j.pattern.PatternParserTest.class
TypeName!!s
argumentName!!org.apache.log4j.helpers.UtilLoggingLevelTest.class
Class!!XLogger
Method!!activateOptions
Method!!debug
Method!!lethal
MethodName!!forcedLog
argumentName!!FQCN
argumentName!!XLevel.LETHAL
argumentName!!message
argumentName!!t
Method!!lethal
MethodName!!forcedLog
argumentName!!FQCN
argumentName!!XLevel.LETHAL
argumentName!!message
argumentName!!null
Method!!getLogger
Method!!getLogger
Method!!getSuffix
Method!!setSuffix
Method!!trace
MethodName!!forcedLog
argumentName!!FQCN
argumentName!!XLevel.TRACE
argumentName!!message
argumentName!!t
Method!!trace
MethodName!!forcedLog
argumentName!!FQCN
argumentName!!XLevel.TRACE
argumentName!!message
argumentName!!null
Class!!XFactory
Method!!makeNewLoggerInstance
Class!!XLoggerTestCase
Method!!tearDown
PrimaryName!!logger.getLoggerRepository()
Method!!test1
MethodName!!common
argumentName!!1
Method!!test2
MethodName!!common
argumentName!!2
Method!!common
TypeName!!DOMConfigurator
argumentName!!"input/xml/customLogger"+number+".xml"
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!Transformer
argumentName!!"output/temp"
argumentName!!FILTERED
argumentName!!newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/customLogger."+number)
Method!!suite
TypeName!!suite
argumentName!!newXLoggerTestCase("test1")
TypeName!!suite
argumentName!!newXLoggerTestCase("test2")
Class!!TestCase1
Method!!setUp
Method!!tearDown
TypeName!!LogManager
Method!!noneTest
MethodName!!assertTrue
argumentName!!!rootIsConfigured
Method!!suite
TypeName!!suite
argumentName!!newTestCase1("noneTest")
Class!!TestCase2
Method!!setUp
Method!!tearDown
TypeName!!LogManager
Method!!xmlTest
MethodName!!assertTrue
argumentName!!rootIsConfigured
MethodName!!assertEquals
argumentName!!appender.getName()
argumentName!!"D1"
Method!!suite
TypeName!!suite
argumentName!!newTestCase2("xmlTest")
Class!!TestCase3
Method!!setUp
Method!!tearDown
TypeName!!LogManager
Method!!propertiesTest
MethodName!!assertTrue
argumentName!!rootIsConfigured
MethodName!!assertEquals
argumentName!!appender.getName()
argumentName!!"D3"
Method!!suite
TypeName!!suite
argumentName!!newTestCase3("propertiesTest")
Class!!TestCase4
Method!!setUp
Method!!tearDown
TypeName!!LogManager
Method!!combinedTest
MethodName!!assertTrue
argumentName!!rootIsConfigured
MethodName!!assertEquals
argumentName!!appender.getName()
argumentName!!"D1"
MethodName!!assertEquals
argumentName!!e.hasMoreElements()
argumentName!!false
Method!!suite
TypeName!!suite
argumentName!!newTestCase4("combinedTest")
Class!!DefaultThrowableRendererTest
Method!!testDefaultRender
MethodName!!assertNotNull
argumentName!!strRep
MethodName!!assertTrue
argumentName!!strRep.length>0
MethodName!!assertNotNull
argumentName!!strRep[i]
Class!!DRFATestCase
Method!!tearDown
TypeName!!LogManager
Method!!testComputeCheckPeriod
TypeName!!drfa
argumentName!!"testComputeCheckPeriod"
TypeName!!drfa
argumentName!!"yyyy-MM-dd.'log'"
TypeName!!drfa
TypeName!!drfa
MethodName!!assertEquals
argumentName!!drfa.computeCheckPeriod()
argumentName!!DailyRollingFileAppender.TOP_OF_DAY
TypeName!!drfa
argumentName!!"yyyy-MM-dd mm.'log'"
MethodName!!assertEquals
argumentName!!drfa.computeCheckPeriod()
argumentName!!DailyRollingFileAppender.TOP_OF_MINUTE
TypeName!!drfa
argumentName!!"yyyy-MM-dd a.'log'"
MethodName!!assertEquals
argumentName!!drfa.computeCheckPeriod()
argumentName!!DailyRollingFileAppender.HALF_DAY
TypeName!!drfa
argumentName!!"yyyy-MM-dd HH.'log'"
MethodName!!assertEquals
argumentName!!drfa.computeCheckPeriod()
argumentName!!DailyRollingFileAppender.TOP_OF_HOUR
TypeName!!drfa
argumentName!!"yyyy-MM.'log'"
MethodName!!assertEquals
argumentName!!drfa.computeCheckPeriod()
argumentName!!DailyRollingFileAppender.TOP_OF_MONTH
TypeName!!drfa
argumentName!!"'log'HH'log'"
MethodName!!assertEquals
argumentName!!drfa.computeCheckPeriod()
argumentName!!DailyRollingFileAppender.TOP_OF_HOUR
Method!!testRC1
TypeName!!rc
argumentName!!DailyRollingFileAppender.TOP_OF_DAY
TypeName!!c
TypeName!!c
argumentName!!Calendar.YEAR
argumentName!!20
TypeName!!c
argumentName!!Calendar.MONTH
argumentName!!Calendar.JANUARY+M31[i]
TypeName!!c
argumentName!!Calendar.DAY_OF_MONTH
argumentName!!d
TypeName!!c
argumentName!!Calendar.HOUR_OF_DAY
argumentName!!h
TypeName!!c
argumentName!!Calendar.MINUTE
argumentName!!10
TypeName!!c
argumentName!!Calendar.SECOND
argumentName!!10
TypeName!!c
argumentName!!Calendar.MILLISECOND
argumentName!!88
TypeName!!c
argumentName!!rc.getNextCheckDate(c.getTime())
MethodName!!assertEquals
argumentName!!c.get(Calendar.MONTH)
argumentName!!(Calendar.JANUARY+M31[i]+1)%12
MethodName!!assertEquals
argumentName!!c.get(Calendar.DAY_OF_MONTH)
argumentName!!1
MethodName!!assertEquals
argumentName!!c.get(Calendar.MONTH)
argumentName!!Calendar.JANUARY+M31[i]
MethodName!!assertEquals
argumentName!!c.get(Calendar.DAY_OF_MONTH)
argumentName!!d+1
MethodName!!assertEquals
argumentName!!c.get(Calendar.HOUR_OF_DAY)
argumentName!!0
MethodName!!assertEquals
argumentName!!c.get(Calendar.MINUTE)
argumentName!!0
MethodName!!assertEquals
argumentName!!c.get(Calendar.SECOND)
argumentName!!0
MethodName!!assertEquals
argumentName!!c.get(Calendar.MILLISECOND)
argumentName!!0
Method!!testRC2
TypeName!!rc
argumentName!!DailyRollingFileAppender.TOP_OF_HOUR
TypeName!!System.out
argumentName!!"Month = "+(M31[i]+1)
TypeName!!c
TypeName!!c
argumentName!!Calendar.YEAR
argumentName!!20
TypeName!!c
argumentName!!Calendar.MONTH
argumentName!!Calendar.JANUARY+M31[i]
TypeName!!c
argumentName!!Calendar.DAY_OF_MONTH
argumentName!!d
TypeName!!c
argumentName!!Calendar.HOUR_OF_DAY
argumentName!!h
TypeName!!c
argumentName!!Calendar.MINUTE
argumentName!!m
TypeName!!c
argumentName!!Calendar.SECOND
argumentName!!12
TypeName!!c
argumentName!!Calendar.MILLISECOND
argumentName!!88
TypeName!!c
argumentName!!rc.getNextCheckDate(c.getTime())
MethodName!!assertEquals
argumentName!!c.get(Calendar.MILLISECOND)
argumentName!!0
MethodName!!assertEquals
argumentName!!c.get(Calendar.SECOND)
argumentName!!0
MethodName!!assertEquals
argumentName!!c.get(Calendar.MINUTE)
argumentName!!0
MethodName!!assertEquals
argumentName!!c.get(Calendar.HOUR_OF_DAY)
argumentName!!(h+1)%24
MethodName!!assertEquals
argumentName!!c.get(Calendar.HOUR_OF_DAY)
argumentName!!h
MethodName!!assertEquals
argumentName!!c.get(Calendar.DAY_OF_MONTH)
argumentName!!(d+1)%32
MethodName!!assertEquals
argumentName!!c.get(Calendar.MONTH)
argumentName!!(Calendar.JANUARY+M31[i]+1)%12
MethodName!!assertEquals
argumentName!!c.get(Calendar.MONTH)
argumentName!!Calendar.JANUARY+M31[i]
MethodName!!assertEquals
argumentName!!c.get(Calendar.DAY_OF_MONTH)
argumentName!!d
MethodName!!assertEquals
argumentName!!c.get(Calendar.MONTH)
argumentName!!Calendar.JANUARY+M31[i]
Method!!testRC3
TypeName!!rc
argumentName!!DailyRollingFileAppender.TOP_OF_MINUTE
TypeName!!System.out
argumentName!!"Month = "+(M31[i]+1)
TypeName!!c
TypeName!!c
argumentName!!Calendar.YEAR
argumentName!!20
TypeName!!c
argumentName!!Calendar.MONTH
argumentName!!Calendar.JANUARY+M31[i]
TypeName!!c
argumentName!!Calendar.DAY_OF_MONTH
argumentName!!d
TypeName!!c
argumentName!!Calendar.HOUR_OF_DAY
argumentName!!h
TypeName!!c
argumentName!!Calendar.MINUTE
argumentName!!M[m]
TypeName!!c
argumentName!!Calendar.SECOND
argumentName!!S[s]
TypeName!!c
argumentName!!Calendar.MILLISECOND
argumentName!!88
TypeName!!c
argumentName!!Calendar.MILLISECOND
argumentName!!1
TypeName!!c
argumentName!!rc.getNextCheckDate(c.getTime())
TypeName!!c
argumentName!!Calendar.MILLISECOND
argumentName!!0
MethodName!!assertEquals
argumentName!!c.get(Calendar.MILLISECOND)
argumentName!!0
MethodName!!assertEquals
argumentName!!c.get(Calendar.SECOND)
argumentName!!0
MethodName!!assertEquals
argumentName!!c.get(Calendar.MINUTE)
argumentName!!(M[m]+1)%60
MethodName!!assertEquals
argumentName!!c.get(Calendar.HOUR_OF_DAY)
argumentName!!(h+1)%24
MethodName!!assertEquals
argumentName!!c.get(Calendar.DAY_OF_MONTH)
argumentName!!(d+1)%32
MethodName!!assertEquals
argumentName!!c.get(Calendar.MONTH)
argumentName!!(Calendar.JANUARY+M31[i]+1)%12
MethodName!!assertEquals
argumentName!!c.get(Calendar.MONTH)
argumentName!!Calendar.JANUARY+M31[i]
MethodName!!assertEquals
argumentName!!c.get(Calendar.DAY_OF_MONTH)
argumentName!!d
TypeName!!c
argumentName!!Calendar.HOUR_OF_DAY
argumentName!!+1
MethodName!!fail
argumentName!!"No switch"
MethodName!!assertEquals
argumentName!!c.get(Calendar.DAY_OF_MONTH)
argumentName!!d
MethodName!!assertEquals
argumentName!!c.get(Calendar.MONTH)
argumentName!!Calendar.JANUARY+M31[i]
Method!!test3Param
MethodName!!assertEquals
argumentName!!datePattern
argumentName!!appender.getDatePattern()
TypeName!!root
argumentName!!appender
TypeName!!root
argumentName!!"Hello, World"
MethodName!!assertTrue
argumentName!!newFile(filename).exists()
Method!!testTopOfYear
MethodName!!test3Param
argumentName!!"'.'yyyy"
argumentName!!"output/drfa_topOfYear.log"
MethodName!!fail
argumentName!!"Expected illegal state exception."
MethodName!!assertNotNull
argumentName!!ex
Method!!testTopOfMonth
MethodName!!test3Param
argumentName!!"'.'yyyy-MM"
argumentName!!"output/drfa_topOfMonth.log"
Method!!testTopOfWeek
MethodName!!test3Param
argumentName!!"'.'yyyy-w"
argumentName!!"output/drfa_topOfWeek.log"
Method!!testTopOfDay
MethodName!!test3Param
argumentName!!"'.'yyyy-MM-dd"
argumentName!!"output/drfa_topOfDay.log"
Method!!testHalfDay
MethodName!!test3Param
argumentName!!"'.'yyyy-MM-dd-a"
argumentName!!"output/drfa_halfDay.log"
Method!!testTopOfHour
MethodName!!test3Param
argumentName!!"'.'yyyy-MM-dd-HH"
argumentName!!"output/drfa_topOfHour.log"
Method!!testTopOfMinute
MethodName!!test3Param
argumentName!!"'.'yyyy-MM-dd-HH-mm"
argumentName!!"output/drfa_topOfMinute.log"
Method!!testRolloverNoPattern
TypeName!!appender
argumentName!!errorHandler
TypeName!!appender
MethodName!!assertEquals
argumentName!!1
argumentName!!errorHandler.size()
MethodName!!assertEquals
argumentName!!"Missing DatePattern option in rollOver()."
argumentName!!errorHandler.getMessage(0)
Method!!testMinuteRollover
TypeName!!root
argumentName!!appender
TypeName!!root
argumentName!!"Hello, World"
TypeName!!firstFile
MethodName!!assertTrue
argumentName!!firstFile.exists()
MethodName!!assertEquals
argumentName!!0
argumentName!!firstFile.length()
TypeName!!cal
argumentName!!Calendar.SECOND
argumentName!!3
TypeName!!cal
argumentName!!Calendar.MILLISECOND
argumentName!!0
TypeName!!cal
argumentName!!Calendar.MINUTE
argumentName!!1
TypeName!!Thread
argumentName!!until-now
TypeName!!root
argumentName!!"Hello, World"
MethodName!!assertTrue
argumentName!!firstFile.exists()
MethodName!!assertTrue
argumentName!!firstFile.length()>0
Method!!append
TypeName!!combined
argumentName!!buf
argumentName!!0
argumentName!!count1
TypeName!!source
Method!!testBlockedRollover
TypeName!!appender
argumentName!!false
TypeName!!root
argumentName!!appender
TypeName!!root
argumentName!!"Prior to rollover"
TypeName!!Thread
argumentName!!63000-(start.getTime()%60000)
TypeName!!root
argumentName!!"Rollover attempt while blocked"
TypeName!!os1
TypeName!!os2
TypeName!!root
argumentName!!"Message after block removed"
TypeName!!appender
MethodName!!append
argumentName!!combined
argumentName!!newFileInputStream(block1)
argumentName!!buf
MethodName!!append
argumentName!!combined
argumentName!!newFileInputStream(block2)
argumentName!!buf
MethodName!!append
argumentName!!combined
argumentName!!newFileInputStream(filename)
argumentName!!buf
TypeName!!combined
MethodName!!assertTrue
argumentName!!Compare.compare(combinedFilename,"witness/drfa_blockedRollover.log")
Method!!testWeeklyRollover
TypeName!!drfa
argumentName!!"'.'yyyy-ww"
MethodName!!assertEquals
argumentName!!DailyRollingFileAppender.TOP_OF_WEEK
argumentName!!checkPeriod
Class!!EnhancedMyPatternLayout
Method!!createPatternParser
Class!!EnhancedPatternLayoutTest
Method!!createLayout
Method!!testFormat
TypeName!!buf
argumentName!!'['
TypeName!!buf
argumentName!!event.getThreadName()
TypeName!!buf
argumentName!!"] "
TypeName!!buf
argumentName!!event.getLevel().toString()
TypeName!!buf
argumentName!!' '
TypeName!!buf
argumentName!!event.getLoggerName()
TypeName!!buf
argumentName!!" - "
TypeName!!buf
argumentName!!event.getMessage()
TypeName!!buf
argumentName!!System.getProperty("line.separator")
MethodName!!assertEquals
argumentName!!buf.toString()
argumentName!!result
Method!!testGetPatternFormat
MethodName!!assertEquals
argumentName!!"[%t] %p %c - %m%n"
argumentName!!layout.getConversionPattern()
Method!!testDefaultConversionPattern
MethodName!!assertEquals
argumentName!!"%m%n"
argumentName!!EnhancedPatternLayout.DEFAULT_CONVERSION_PATTERN
Method!!testTTCCConversionPattern
MethodName!!assertEquals
argumentName!!"%r [%t] %p %c %x - %m%n"
argumentName!!EnhancedPatternLayout.TTCC_CONVERSION_PATTERN
Method!!testFormatResize
TypeName!!NDC
MethodName!!assertEquals
argumentName!!"["
argumentName!!result.substring(0,1)
Class!!DerivedPatternLayout
Method!!getBufSize
Method!!getMaxCapacity
Class!!EnhancedPatternLayoutTestCase
Method!!setUp
Method!!tearDown
PrimaryName!!root.getLoggerRepository()
Method!!configure
TypeName!!PropertyConfigurator
argumentName!!fileName
Method!!compare
Method!!test1
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout1.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.1")
Method!!test2
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout2.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.2")
Method!!test3
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout3.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.3")
Method!!test4
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout4.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.4")
Method!!test5
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout5.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.5")
Method!!test6
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout6.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.6")
Method!!test7
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout7.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.7")
Method!!test8
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout8.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newRelativeTimeFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.8")
Method!!test9
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout9.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.9")
Method!!test10
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout10.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.10")
Method!!test11
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout11.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.11")
Method!!test12
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout12.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.12")
Method!!test13
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout13.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.13")
Method!!test14
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout14.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.14")
Method!!clearMDC
TypeName!!context
Method!!testMDC1
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout.mdc.1.properties"
MethodName!!clearMDC
TypeName!!MDC
argumentName!!"key1"
argumentName!!"va11"
TypeName!!MDC
argumentName!!"key2"
argumentName!!"va12"
TypeName!!logger
argumentName!!"Hello World"
TypeName!!MDC
argumentName!!"key1"
TypeName!!MDC
argumentName!!"key2"
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.mdc.1")
Method!!test15
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout15.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,"witness/pattern/enhancedPatternLayout.15")
Method!!test16
MethodName!!configure
argumentName!!"input/pattern/enhancedPatternLayout16.properties"
MethodName!!common
TypeName!!reader
argumentName!!chars
argumentName!!0
argumentName!!chars.length
TypeName!!reader
TypeName!!format
argumentName!!TimeZone.getTimeZone("GMT+0")
MethodName!!assertTrue
argumentName!!utcDate.getTime()>=start-1000&&utcDate.getTime()<end+1000
TypeName!!format
argumentName!!TimeZone.getTimeZone("GMT-6")
MethodName!!assertFalse
argumentName!!cstStr.equals(utcStr)
MethodName!!assertTrue
argumentName!!cstDate.getTime()>=start-1000&&cstDate.getTime()<end+1000
Method!!common
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!Level.FATAL
argumentName!!"Message "+++i
TypeName!!root
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!logger
argumentName!!Level.FATAL
argumentName!!"Message "+++i
argumentName!!e
Method!!testMDC2
TypeName!!root
argumentName!!appender
TypeName!!root
argumentName!!Level.DEBUG
MethodName!!clearMDC
TypeName!!root
argumentName!!"starting mdc pattern test"
TypeName!!layout
argumentName!!mdcMsgPattern1
TypeName!!layout
TypeName!!root
argumentName!!"empty mdc, no key specified in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern2
TypeName!!layout
TypeName!!root
argumentName!!"empty mdc, key1 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern3
TypeName!!layout
TypeName!!root
argumentName!!"empty mdc, key2 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern4
TypeName!!layout
TypeName!!root
argumentName!!"empty mdc, key3 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern5
TypeName!!layout
TypeName!!root
argumentName!!"empty mdc, key1, key2, and key3 in pattern"
TypeName!!MDC
argumentName!!"key1"
argumentName!!"value1"
TypeName!!MDC
argumentName!!"key2"
argumentName!!"value2"
TypeName!!layout
argumentName!!mdcMsgPattern1
TypeName!!layout
TypeName!!root
argumentName!!"filled mdc, no key specified in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern2
TypeName!!layout
TypeName!!root
argumentName!!"filled mdc, key1 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern3
TypeName!!layout
TypeName!!root
argumentName!!"filled mdc, key2 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern4
TypeName!!layout
TypeName!!root
argumentName!!"filled mdc, key3 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern5
TypeName!!layout
TypeName!!root
argumentName!!"filled mdc, key1, key2, and key3 in pattern"
TypeName!!MDC
argumentName!!"key1"
TypeName!!MDC
argumentName!!"key2"
TypeName!!layout
argumentName!!"%m%n"
TypeName!!layout
TypeName!!root
argumentName!!"finished mdc pattern test"
TypeName!!Transformer
argumentName!!OUTPUT_FILE
argumentName!!FILTERED
argumentName!!newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,WITNESS_FILE)
Method!!testThrowable
TypeName!!root
argumentName!!appender
TypeName!!root
argumentName!!Level.DEBUG
TypeName!!root
argumentName!!"starting throwable pattern test"
TypeName!!root
argumentName!!"plain pattern, no exception"
TypeName!!root
argumentName!!"plain pattern, with exception"
argumentName!!ex
TypeName!!layout
argumentName!!"%m%n%throwable"
TypeName!!layout
TypeName!!root
argumentName!!"%throwable, no exception"
TypeName!!root
argumentName!!"%throwable, with exception"
argumentName!!ex
TypeName!!layout
argumentName!!"%m%n%throwable{short}"
TypeName!!layout
TypeName!!root
argumentName!!"%throwable{short}, no exception"
TypeName!!root
argumentName!!"%throwable{short}, with exception"
argumentName!!ex
TypeName!!layout
argumentName!!"%m%n%throwable{none}"
TypeName!!layout
TypeName!!root
argumentName!!"%throwable{none}, no exception"
TypeName!!root
argumentName!!"%throwable{none}, with exception"
argumentName!!ex
TypeName!!layout
argumentName!!"%m%n%throwable{0}"
TypeName!!layout
TypeName!!root
argumentName!!"%throwable{0}, no exception"
TypeName!!root
argumentName!!"%throwable{0}, with exception"
argumentName!!ex
TypeName!!layout
argumentName!!"%m%n%throwable{1}"
TypeName!!layout
TypeName!!root
argumentName!!"%throwable{1}, no exception"
TypeName!!root
argumentName!!"%throwable{1}, with exception"
argumentName!!ex
TypeName!!layout
argumentName!!"%m%n%throwable{100}"
TypeName!!layout
TypeName!!root
argumentName!!"%throwable{100}, no exception"
TypeName!!root
argumentName!!"%throwable{100}, with exception"
argumentName!!ex
TypeName!!layout
argumentName!!"%m%n%throwable{"+(2-trace.length)+"}"
TypeName!!layout
TypeName!!root
argumentName!!"%throwable{-n}, no exception"
TypeName!!root
argumentName!!"%throwable{-n}, with exception"
argumentName!!ex
TypeName!!Transformer
argumentName!!OUTPUT_FILE
argumentName!!FILTERED
argumentName!!newFilter[]{newEnhancedLineNumberFilter(),newSunReflectFilter(),newEnhancedJunitTestRunnerFilter(),newMDCOrderFilter()}
MethodName!!assertTrue
argumentName!!compare(FILTERED,WITNESS_FILE)
Class!!EnhancedThrowableRendererTest
Method!!testEnhancedRender
MethodName!!assertNotNull
argumentName!!strRep
MethodName!!assertTrue
argumentName!!strRep.length>0
MethodName!!assertNotNull
argumentName!!strRep[i]
Class!!FileAppenderTest
Method!!testDirectoryCreation
TypeName!!newFile
TypeName!!newDir
TypeName!!wa
argumentName!!"output/newdir/temp.log"
TypeName!!wa
argumentName!!newPatternLayout("%m%n")
TypeName!!wa
MethodName!!assertTrue
argumentName!!newFile("output/newdir/temp.log").exists()
Method!!testGetThresholdReturnType
MethodName!!assertTrue
argumentName!!method.getReturnType()==Priority.class
Method!!testgetSetThreshold
MethodName!!assertNull
argumentName!!appender.getThreshold()
TypeName!!appender
argumentName!!debug
MethodName!!assertTrue
argumentName!!appender.getThreshold()==debug
Method!!testIsAsSevereAsThreshold
MethodName!!assertTrue
argumentName!!appender.isAsSevereAsThreshold(debug)
Class!!BoundedFIFOTestCase
Method!!setUp
Method!!test1
MethodName!!assertEquals
argumentName!!bf.getMaxSize()
argumentName!!size
MethodName!!assertNull
argumentName!!bf.get()
TypeName!!bf
argumentName!!e[j]
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!j<size?j+1:size
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!max-k>0?max-k:0
MethodName!!assertNull
argumentName!!r
MethodName!!assertEquals
argumentName!!r
argumentName!!e[k]
Method!!test2
TypeName!!bf
argumentName!!e[0]
MethodName!!assertEquals
argumentName!!bf.get()
argumentName!!e[0]
MethodName!!assertNull
argumentName!!bf.get()
TypeName!!bf
argumentName!!e[1]
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!1
TypeName!!bf
argumentName!!e[2]
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!2
TypeName!!bf
argumentName!!e[3]
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!3
MethodName!!assertEquals
argumentName!!bf.get()
argumentName!!e[1]
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!2
MethodName!!assertEquals
argumentName!!bf.get()
argumentName!!e[2]
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!1
MethodName!!assertEquals
argumentName!!bf.get()
argumentName!!e[3]
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!0
MethodName!!assertNull
argumentName!!bf.get()
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!0
Method!!min
Method!!testResize1
TypeName!!bf
argumentName!!e[f]
TypeName!!bf
argumentName!!n
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!expectedSize
MethodName!!assertEquals
argumentName!!bf.get()
argumentName!!e[c]
Method!!testResize2
TypeName!!bf
argumentName!!e[p]
TypeName!!bf
TypeName!!bf
argumentName!!n
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!expectedSize
MethodName!!assertEquals
argumentName!!bf.get()
argumentName!!e[c+d]
MethodName!!assertNull
argumentName!!bf.get()
Method!!testResize3
TypeName!!bf
argumentName!!e[p0]
TypeName!!bf
TypeName!!bf
argumentName!!e[i+p1]
TypeName!!bf
argumentName!!n
MethodName!!assertEquals
argumentName!!bf.length()
argumentName!!expectedSize
MethodName!!assertEquals
argumentName!!bf.get()
argumentName!!e[c+d]
Method!!suite
TypeName!!suite
argumentName!!newBoundedFIFOTestCase("test1")
TypeName!!suite
argumentName!!newBoundedFIFOTestCase("test2")
TypeName!!suite
argumentName!!newBoundedFIFOTestCase("testResize1")
TypeName!!suite
argumentName!!newBoundedFIFOTestCase("testResize2")
TypeName!!suite
argumentName!!newBoundedFIFOTestCase("testResize3")
Class!!CyclicBufferTestCase
Method!!setUp
Method!!test0
MethodName!!assertEquals
argumentName!!cb.getMaxSize()
argumentName!!size
TypeName!!cb
argumentName!!e[0]
MethodName!!assertEquals
argumentName!!cb.length()
argumentName!!1
MethodName!!assertEquals
argumentName!!cb.get()
argumentName!!e[0]
MethodName!!assertEquals
argumentName!!cb.length()
argumentName!!0
MethodName!!assertNull
argumentName!!cb.get()
MethodName!!assertEquals
argumentName!!cb.length()
argumentName!!0
TypeName!!cb
argumentName!!e[0]
TypeName!!cb
argumentName!!e[1]
MethodName!!assertEquals
argumentName!!cb.length()
argumentName!!2
MethodName!!assertEquals
argumentName!!cb.get()
argumentName!!e[0]
MethodName!!assertEquals
argumentName!!cb.length()
argumentName!!1
MethodName!!assertEquals
argumentName!!cb.get()
argumentName!!e[1]
MethodName!!assertEquals
argumentName!!cb.length()
argumentName!!0
MethodName!!assertNull
argumentName!!cb.get()
MethodName!!assertEquals
argumentName!!cb.length()
argumentName!!0
Method!!test1
MethodName!!doTest1
argumentName!!bufSize
Method!!doTest1
MethodName!!assertEquals
argumentName!!cb.getMaxSize()
argumentName!!size
MethodName!!assertNull
argumentName!!cb.get(i)
TypeName!!cb
argumentName!!e[i]
MethodName!!assertEquals
argumentName!!cb.get(j)
argumentName!!e[i-(limit-j)]
MethodName!!assertNull
argumentName!!cb.get(-1)
MethodName!!assertNull
argumentName!!cb.get(limit+1)
Method!!testResize
MethodName!!doTestResize
argumentName!!isize
argumentName!!isize/2+1
argumentName!!isize/2+1
MethodName!!doTestResize
argumentName!!isize
argumentName!!isize/2+1
argumentName!!isize+10
MethodName!!doTestResize
argumentName!!isize
argumentName!!isize+10
argumentName!!isize/2+1
MethodName!!doTestResize
argumentName!!isize
argumentName!!isize+10
argumentName!!isize+10
Method!!doTestResize
TypeName!!cb
argumentName!!e[i]
TypeName!!cb
argumentName!!newSize
MethodName!!assertEquals
argumentName!!cb.get(j)
argumentName!!e[offset+j]
Method!!suite
TypeName!!suite
argumentName!!newCyclicBufferTestCase("test0")
TypeName!!suite
argumentName!!newCyclicBufferTestCase("test1")
TypeName!!suite
argumentName!!newCyclicBufferTestCase("testResize")
Class!!DateLayoutTest
Method!!createLayout
Method!!testNullDateFormat
MethodName!!assertEquals
argumentName!!"NULL"
argumentName!!DateLayout.NULL_DATE_FORMAT
Method!!testRelativeTimeDateFormat
MethodName!!assertEquals
argumentName!!"RELATIVE"
argumentName!!DateLayout.RELATIVE_TIME_DATE_FORMAT
Method!!testDateFormatOption
MethodName!!assertEquals
argumentName!!"DateFormat"
argumentName!!DateLayout.DATE_FORMAT_OPTION
Method!!testTimeZoneOption
MethodName!!assertEquals
argumentName!!"TimeZone"
argumentName!!DateLayout.TIMEZONE_OPTION
Method!!testGetOptionStrings
MethodName!!assertEquals
argumentName!!2
argumentName!!options.length
Method!!testSetOptionDateFormat
TypeName!!layout
argumentName!!"dAtefOrmat"
argumentName!!"foobar"
MethodName!!assertEquals
argumentName!!"FOOBAR"
argumentName!!layout.getDateFormat()
Method!!testSetOptionTimeZone
TypeName!!layout
argumentName!!"tImezOne"
argumentName!!"+05:00"
MethodName!!assertEquals
argumentName!!"+05:00"
argumentName!!layout.getTimeZone()
Method!!testSetDateFormat
TypeName!!layout
argumentName!!"ABSOLUTE"
MethodName!!assertEquals
argumentName!!"ABSOLUTE"
argumentName!!layout.getDateFormat()
Method!!testSetTimeZone
TypeName!!layout
argumentName!!"+05:00"
MethodName!!assertEquals
argumentName!!"+05:00"
argumentName!!layout.getTimeZone()
Method!!testSetDateFormatNull
TypeName!!layout
argumentName!!(String)null
argumentName!!null
Method!!testSetDateFormatNullString
TypeName!!layout
argumentName!!"NuLL"
argumentName!!null
Method!!testSetDateFormatRelative
TypeName!!layout
argumentName!!"rElatIve"
argumentName!!TimeZone.getDefault()
Method!!testSetDateFormatAbsolute
TypeName!!layout
argumentName!!"aBsolUte"
argumentName!!TimeZone.getDefault()
Method!!testSetDateFormatDateTime
TypeName!!layout
argumentName!!"dAte"
argumentName!!TimeZone.getDefault()
Method!!testSetDateFormatISO8601
TypeName!!layout
argumentName!!"iSo8601"
argumentName!!TimeZone.getDefault()
Method!!testSetDateFormatSimple
TypeName!!layout
argumentName!!"HH:mm:ss"
argumentName!!TimeZone.getDefault()
Method!!testActivateOptions
TypeName!!layout
argumentName!!"HH:mm:ss"
TypeName!!layout
argumentName!!"+05:00"
TypeName!!layout
Method!!testSetDateFormatWithFormat
TypeName!!layout
argumentName!!format
argumentName!!TimeZone.getDefault()
Method!!testISO8601Format
TypeName!!calendar
TypeName!!calendar
argumentName!!1970
argumentName!!0
argumentName!!1
argumentName!!0
argumentName!!0
argumentName!!0
MethodName!!assertEquals
argumentName!!"1970-01-01 00:00:00,000"
argumentName!!actual
Method!!testDateTimeFormat
TypeName!!calendar
TypeName!!calendar
argumentName!!1970
argumentName!!0
argumentName!!1
argumentName!!0
argumentName!!0
argumentName!!0
MethodName!!assertEquals
argumentName!!expected
argumentName!!actual
Class!!MockLayout
MethodName!!assertNotNull
argumentName!!pos
MethodName!!assertNotNull
argumentName!!date
MethodName!!assertNull
argumentName!!dateFormat
Method!!format
Method!!activateOptions
Method!!ignoresThrowable
Class!!LogLogTest
Method!!testDebugKey
MethodName!!assertEquals
argumentName!!"log4j.debug"
argumentName!!LogLog.DEBUG_KEY
Method!!testConfigDebugKey
MethodName!!assertEquals
argumentName!!"log4j.configDebug"
argumentName!!LogLog.CONFIG_DEBUG_KEY
Class!!OptionConverterTestCase
Method!!setUp
TypeName!!props
argumentName!!"TOTO"
argumentName!!"wonderful"
TypeName!!props
argumentName!!"key1"
argumentName!!"value1"
TypeName!!props
argumentName!!"key2"
argumentName!!"value2"
TypeName!!props
argumentName!!"line.separator"
argumentName!!System.getProperty("line.separator")
TypeName!!props
argumentName!!"java.home"
argumentName!!System.getProperty("java.home")
TypeName!!System
argumentName!!props
Method!!tearDown
TypeName!!LogManager
Method!!varSubstTest1
MethodName!!assertEquals
argumentName!!"hello world."
argumentName!!r
MethodName!!assertEquals
argumentName!!"hello wonderful world."
argumentName!!r
Method!!varSubstTest2
MethodName!!assertEquals
argumentName!!"Test2 value1 mid value2 end."
argumentName!!r
Method!!varSubstTest3
MethodName!!assertEquals
argumentName!!"Test3  mid value1 end."
argumentName!!r
Method!!varSubstTest4
TypeName!!OptionConverter
argumentName!!val
argumentName!!null
MethodName!!assertEquals
argumentName!!'"'+val+"\" has no closing brace. Opening brace at position 6."
argumentName!!errorMsg
Method!!varSubstTest5
TypeName!!props
argumentName!!"p1"
argumentName!!"x1"
TypeName!!props
argumentName!!"p2"
argumentName!!"${p1}"
TypeName!!System.out
argumentName!!"Result is ["+res+"]."
MethodName!!assertEquals
argumentName!!res
argumentName!!"x1"
Method!!testInputStream
MethodName!!assertTrue
argumentName!!file.exists()
TypeName!!OptionConverter
argumentName!!inputStream
argumentName!!null
argumentName!!LogManager.getLoggerRepository()
TypeName!!inputStream
PrimaryName!!newPropertyConfiguratorTest(this.getClass().getName())
Method!!toLevelTest1
MethodName!!assertEquals
argumentName!!p
lk;sdkafhj;kargumentName!!Level.INFO
Method!!toLevelTest2
MethodName!!assertEquals
argumentName!!p
argumentName!!Level.INFO
Method!!toLevelTest3
MethodName!!assertEquals
argumentName!!p
argumentName!!XLevel.TRACE
Method!!toLevelTest4
MethodName!!assertEquals
argumentName!!p
argumentName!!null
Method!!toLevelTest5
MethodName!!assertEquals
argumentName!!p
argumentName!!null
Method!!suite
TypeName!!suite
argumentName!!newOptionConverterTestCase("varSubstTest5")
TypeName!!suite
argumentName!!newOptionConverterTestCase("varSubstTest1")
TypeName!!suite
argumentName!!newOptionConverterTestCase("varSubstTest2")
TypeName!!suite
argumentName!!newOptionConverterTestCase("varSubstTest3")
TypeName!!suite
argumentName!!newOptionConverterTestCase("varSubstTest4")
TypeName!!suite
argumentName!!newOptionConverterTestCase("testInputStream")
TypeName!!suite
argumentName!!newOptionConverterTestCase("toLevelTest1")
TypeName!!suite
argumentName!!newOptionConverterTestCase("toLevelTest2")
TypeName!!suite
argumentName!!newOptionConverterTestCase("toLevelTest3")
TypeName!!suite
argumentName!!newOptionConverterTestCase("toLevelTest4")
TypeName!!suite
argumentName!!newOptionConverterTestCase("toLevelTest5")
Class!!PatternParserTestCase
Method!!setUp
TypeName!!root
Method!!tearDown
PrimaryName!!root.getLoggerRepository()
Method!!mdcPattern
TypeName!!root
argumentName!!appender
TypeName!!root
argumentName!!Level.DEBUG
TypeName!!root
argumentName!!"starting mdc pattern test"
TypeName!!layout
argumentName!!mdcMsgPattern1
TypeName!!root
argumentName!!"empty mdc, no key specified in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern2
TypeName!!root
argumentName!!"empty mdc, key1 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern3
TypeName!!root
argumentName!!"empty mdc, key2 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern4
TypeName!!root
argumentName!!"empty mdc, key3 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern5
TypeName!!root
argumentName!!"empty mdc, key1, key2, and key3 in pattern"
TypeName!!MDC
argumentName!!"key1"
argumentName!!"value1"
TypeName!!MDC
argumentName!!"key2"
argumentName!!"value2"
TypeName!!layout
argumentName!!mdcMsgPattern1
TypeName!!root
argumentName!!"filled mdc, no key specified in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern2
TypeName!!root
argumentName!!"filled mdc, key1 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern3
TypeName!!root
argumentName!!"filled mdc, key2 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern4
TypeName!!root
argumentName!!"filled mdc, key3 in pattern"
TypeName!!layout
argumentName!!mdcMsgPattern5
TypeName!!root
argumentName!!"filled mdc, key1, key2, and key3 in pattern"
TypeName!!MDC
argumentName!!"key1"
TypeName!!MDC
argumentName!!"key2"
TypeName!!layout
argumentName!!msgPattern
TypeName!!root
argumentName!!"finished mdc pattern test"
MethodName!!assertTrue
argumentName!!Compare.compare(OUTPUT_FILE+"_mdc",WITNESS_FILE+"_mdc")
Method!!suite
TypeName!!suite
argumentName!!newPatternParserTestCase("mdcPattern")
Class!!UtilLoggingLevelTest
Method!!testToLevelFINEST
MethodName!!assertSame
argumentName!!UtilLoggingLevel.FINEST
argumentName!!UtilLoggingLevel.toLevel("fiNeSt")
Class!!HierarchyThresholdTestCase
Method!!setUp
Method!!tearDown
TypeName!!System.out
argumentName!!"Tearing down test case."
PrimaryName!!logger.getLoggerRepository()
Method!!test1
TypeName!!PropertyConfigurator
argumentName!!"input/hierarchyThreshold1.properties"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/hierarchyThreshold.1")
Method!!test2
TypeName!!PropertyConfigurator
argumentName!!"input/hierarchyThreshold2.properties"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/hierarchyThreshold.2")
Method!!test3
TypeName!!PropertyConfigurator
argumentName!!"input/hierarchyThreshold3.properties"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/hierarchyThreshold.3")
Method!!test4
TypeName!!PropertyConfigurator
argumentName!!"input/hierarchyThreshold4.properties"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/hierarchyThreshold.4")
Method!!test5
TypeName!!PropertyConfigurator
argumentName!!"input/hierarchyThreshold5.properties"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/hierarchyThreshold.5")
Method!!test6
TypeName!!PropertyConfigurator
argumentName!!"input/hierarchyThreshold6.properties"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/hierarchyThreshold.6")
Method!!test7
TypeName!!PropertyConfigurator
argumentName!!"input/hierarchyThreshold7.properties"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/hierarchyThreshold.7")
Method!!test8
TypeName!!PropertyConfigurator
argumentName!!"input/hierarchyThreshold8.properties"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/hierarchyThreshold.8")
Method!!common
PrimaryName!!Thread.currentThread()
argumentName!!"main"
TypeName!!logger
argumentName!!XLevel.TRACE
argumentName!!"m0"
TypeName!!logger
argumentName!!"m1"
TypeName!!logger
argumentName!!"m2"
TypeName!!logger
argumentName!!"m3"
TypeName!!logger
argumentName!!"m4"
TypeName!!logger
argumentName!!"m5"
PrimaryName!!Thread.currentThread()
argumentName!!oldThreadName
Method!!suite
TypeName!!suite
argumentName!!newHierarchyThresholdTestCase("test1")
TypeName!!suite
argumentName!!newHierarchyThresholdTestCase("test2")
TypeName!!suite
argumentName!!newHierarchyThresholdTestCase("test3")
TypeName!!suite
argumentName!!newHierarchyThresholdTestCase("test4")
TypeName!!suite
argumentName!!newHierarchyThresholdTestCase("test5")
TypeName!!suite
argumentName!!newHierarchyThresholdTestCase("test6")
TypeName!!suite
argumentName!!newHierarchyThresholdTestCase("test7")
TypeName!!suite
argumentName!!newHierarchyThresholdTestCase("test8")
Class!!HTMLLayoutTest
Method!!createLayout
Method!!parse
TypeName!!factory
argumentName!!false
TypeName!!factory
argumentName!!true
Method!!testFormat
TypeName!!NDC
argumentName!!"NDC goes here"
TypeName!!layout
argumentName!!true
TypeName!!NDC
MethodName!!parse
argumentName!!src
Method!!testGetHeader
MethodName!!assertEquals
argumentName!!"<!DOCTYPE"
argumentName!!createLayout().getHeader().substring(0,9)
Method!!testGetHeaderWithLocation
TypeName!!layout
argumentName!!true
MethodName!!assertEquals
argumentName!!"<!DOCTYPE"
argumentName!!layout.getHeader().substring(0,9)
Method!!testGetFooter
MethodName!!assertEquals
argumentName!!"</table>"
argumentName!!createLayout().getFooter().substring(0,8)
Method!!testGetSetLocationInfo
MethodName!!assertEquals
argumentName!!false
argumentName!!layout.getLocationInfo()
TypeName!!layout
argumentName!!true
MethodName!!assertEquals
argumentName!!true
argumentName!!layout.getLocationInfo()
TypeName!!layout
argumentName!!false
MethodName!!assertEquals
argumentName!!false
argumentName!!layout.getLocationInfo()
Method!!testActivateOptions
TypeName!!layout
Method!!testGetSetTitle
MethodName!!assertEquals
argumentName!!"Log4J Log Messages"
argumentName!!layout.getTitle()
TypeName!!layout
argumentName!!null
MethodName!!assertNull
argumentName!!layout.getTitle()
TypeName!!layout
argumentName!!newTitle
MethodName!!assertEquals
argumentName!!newTitle
argumentName!!layout.getTitle()
Method!!testFormatResize
TypeName!!NDC
TypeName!!layout
argumentName!!true
MethodName!!assertEquals
argumentName!!Layout.LINE_SEP+"<tr>"
argumentName!!result.substring(0,Layout.LINE_SEP.length()+4)
Class!!ProblemLevel
Method!!testProblemCharacters
PrimaryName!!Thread.currentThread()
argumentName!!problemName
TypeName!!NDC
argumentName!!problemName
TypeName!!mdcMap
TypeName!!MDC
argumentName!!problemName
argumentName!!problemName
TypeName!!mdcMap
PrimaryName!!Thread.currentThread()
argumentName!!threadName
TypeName!!buf
argumentName!!result
TypeName!!buf
argumentName!!"</table>"
TypeName!!buf
argumentName!!i
argumentName!!i+4
argumentName!!"<br/>"
MethodName!!parse
argumentName!!buf.toString()
Class!!Last
Method!!test1
Method!!suite
TypeName!!suite
argumentName!!newLast("test1")
Class!!LayoutTest
Method!!testLineSep
MethodName!!assertEquals
argumentName!!System.getProperty("line.separator")
argumentName!!Layout.LINE_SEP
Method!!testLineSepLen
MethodName!!assertEquals
argumentName!!Layout.LINE_SEP.length()
argumentName!!Layout.LINE_SEP_LEN
Method!!createLayout
Method!!testGetContentType
MethodName!!assertEquals
argumentName!!contentType
argumentName!!createLayout().getContentType()
Method!!testIgnoresThrowable
MethodName!!assertEquals
argumentName!!ignoresThrowable
argumentName!!createLayout().ignoresThrowable()
Method!!testGetHeader
MethodName!!assertEquals
argumentName!!header
argumentName!!createLayout().getHeader()
Method!!testGetFooter
MethodName!!assertEquals
argumentName!!footer
argumentName!!createLayout().getFooter()
Method!!testFormat
MethodName!!assertEquals
argumentName!!"Mock"
argumentName!!result
Class!!MockLayout
Method!!format
Method!!activateOptions
Method!!ignoresThrowable
Class!!LevelTest
Method!!testSerializeINFO
TypeName!!SerializationTestHelper
argumentName!!"witness/serialization/info.bin"
argumentName!!Level.INFO
argumentName!!skip
argumentName!!Integer.MAX_VALUE
Method!!testDeserializeINFO
MethodName!!assertTrue
argumentName!!objinstanceofLevel
MethodName!!assertEquals
argumentName!!"INFO"
argumentName!!info.toString()
MethodName!!assertTrue
argumentName!!obj==Level.INFO
Method!!testCustomLevelSerialization
MethodName!!assertTrue
argumentName!!objinstanceofCustomLevel
MethodName!!assertEquals
argumentName!!Level.INFO.level
argumentName!!clone.level
MethodName!!assertEquals
argumentName!!Level.INFO.levelStr
argumentName!!clone.levelStr
MethodName!!assertEquals
argumentName!!Level.INFO.syslogEquivalent
argumentName!!clone.syslogEquivalent
Class!!CustomLevel
Method!!testTraceInt
MethodName!!assertEquals
argumentName!!5000
argumentName!!Level.TRACE_INT
Method!!testTrace
MethodName!!assertEquals
argumentName!!"TRACE"
argumentName!!Level.TRACE.toString()
MethodName!!assertEquals
argumentName!!5000
argumentName!!Level.TRACE.toInt()
MethodName!!assertEquals
argumentName!!7
argumentName!!Level.TRACE.getSyslogEquivalent()
Method!!testIntToTrace
MethodName!!assertEquals
argumentName!!"TRACE"
argumentName!!trace.toString()
Method!!testStringToTrace
MethodName!!assertEquals
argumentName!!"TRACE"
argumentName!!trace.toString()
Method!!testLevelExtendsPriority
MethodName!!assertTrue
argumentName!!Priority.class.isAssignableFrom(Level.class)
Method!!testOFF
MethodName!!assertTrue
argumentName!!Level.OFFinstanceofLevel
Method!!testFATAL
MethodName!!assertTrue
argumentName!!Level.FATALinstanceofLevel
Method!!testERROR
MethodName!!assertTrue
argumentName!!Level.ERRORinstanceofLevel
Method!!testWARN
MethodName!!assertTrue
argumentName!!Level.WARNinstanceofLevel
Method!!testINFO
MethodName!!assertTrue
argumentName!!Level.INFOinstanceofLevel
Method!!testDEBUG
MethodName!!assertTrue
argumentName!!Level.DEBUGinstanceofLevel
Method!!testTRACE
MethodName!!assertTrue
argumentName!!Level.TRACEinstanceofLevel
Method!!testALL
MethodName!!assertTrue
argumentName!!Level.ALLinstanceofLevel
Method!!testSerialVersionUID
MethodName!!assertEquals
argumentName!!3491141966387921974L
argumentName!!Level.serialVersionUID
Method!!testIntToAll
MethodName!!assertEquals
argumentName!!"ALL"
argumentName!!level.toString()
Method!!testIntToFatal
MethodName!!assertEquals
argumentName!!"FATAL"
argumentName!!level.toString()
Method!!testIntToOff
MethodName!!assertEquals
argumentName!!"OFF"
argumentName!!level.toString()
Method!!testToLevelUnrecognizedInt
MethodName!!assertEquals
argumentName!!"FATAL"
argumentName!!level.toString()
Method!!testToLevelNull
MethodName!!assertEquals
argumentName!!"FATAL"
argumentName!!level.toString()
Method!!testDotlessLowerI
MethodName!!assertEquals
argumentName!!"INFO"
argumentName!!level.toString()
Method!!testDottedLowerI
TypeName!!Locale
argumentName!!turkey
TypeName!!Locale
argumentName!!defaultLocale
MethodName!!assertEquals
argumentName!!"INFO"
argumentName!!level.toString()
Class!!LogCapture
TypeName!!root
argumentName!!appender
Method!!getMessage
TypeName!!Assert
argumentName!!event
TypeName!!Assert
argumentName!!level
argumentName!!event.getLevel()
TypeName!!Assert
argumentName!!"More than one request captured"
Class!!LoggerTestCase
Method!!setUp
MethodName!!assertNotNull
argumentName!!rbUS
MethodName!!assertNotNull
argumentName!!"Got a null resource bundle."
argumentName!!rbFR
MethodName!!assertNotNull
argumentName!!"Got a null resource bundle."
argumentName!!rbCH
Method!!tearDown
TypeName!!BasicConfigurator
Method!!testAppender1
TypeName!!a1
argumentName!!"testAppender1"
TypeName!!logger
argumentName!!a1
MethodName!!assertEquals
argumentName!!a1
argumentName!!aHat
Method!!testAppender2
TypeName!!a1
argumentName!!"testAppender2.1"
TypeName!!a2
argumentName!!"testAppender2.2"
TypeName!!logger
argumentName!!a1
TypeName!!logger
argumentName!!a2
TypeName!!logger
argumentName!!"testAppender2.1"
MethodName!!assertEquals
argumentName!!a2
argumentName!!aHat
MethodName!!assertTrue
argumentName!!!enumeration.hasMoreElements()
Method!!testAdditivity1
TypeName!!a
argumentName!!ca
MethodName!!assertEquals
argumentName!!ca.counter
argumentName!!0
TypeName!!ab
argumentName!!MSG
MethodName!!assertEquals
argumentName!!ca.counter
argumentName!!1
TypeName!!ab
argumentName!!MSG
MethodName!!assertEquals
argumentName!!ca.counter
argumentName!!2
TypeName!!ab
argumentName!!MSG
MethodName!!assertEquals
argumentName!!ca.counter
argumentName!!3
TypeName!!ab
argumentName!!MSG
MethodName!!assertEquals
argumentName!!ca.counter
argumentName!!4
Method!!testAdditivity2
TypeName!!a
argumentName!!ca1
TypeName!!abc
argumentName!!ca2
MethodName!!assertEquals
argumentName!!ca1.counter
argumentName!!0
MethodName!!assertEquals
argumentName!!ca2.counter
argumentName!!0
TypeName!!ab
argumentName!!MSG
MethodName!!assertEquals
argumentName!!ca1.counter
argumentName!!1
MethodName!!assertEquals
argumentName!!ca2.counter
argumentName!!0
TypeName!!abc
argumentName!!MSG
MethodName!!assertEquals
argumentName!!ca1.counter
argumentName!!2
MethodName!!assertEquals
argumentName!!ca2.counter
argumentName!!1
TypeName!!x
argumentName!!MSG
MethodName!!assertEquals
argumentName!!ca1.counter
argumentName!!2
MethodName!!assertEquals
argumentName!!ca2.counter
argumentName!!1
Method!!testAdditivity3
TypeName!!root
argumentName!!caRoot
TypeName!!a
argumentName!!caA
TypeName!!abc
argumentName!!caABC
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!0
MethodName!!assertEquals
argumentName!!caA.counter
argumentName!!0
MethodName!!assertEquals
argumentName!!caABC.counter
argumentName!!0
TypeName!!ab
argumentName!!false
TypeName!!a
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!1
MethodName!!assertEquals
argumentName!!caA.counter
argumentName!!1
MethodName!!assertEquals
argumentName!!caABC.counter
argumentName!!0
TypeName!!ab
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!1
MethodName!!assertEquals
argumentName!!caA.counter
argumentName!!1
MethodName!!assertEquals
argumentName!!caABC.counter
argumentName!!0
TypeName!!abc
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!1
MethodName!!assertEquals
argumentName!!caA.counter
argumentName!!1
MethodName!!assertEquals
argumentName!!caABC.counter
argumentName!!1
Method!!testDisable1
TypeName!!root
argumentName!!caRoot
TypeName!!h
argumentName!!(Level)Level.INFO
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!0
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!0
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!1
TypeName!!root
argumentName!!Level.WARN
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!2
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!3
TypeName!!h
argumentName!!(Level)Level.WARN
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!3
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!3
TypeName!!root
argumentName!!Level.WARN
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!4
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!5
TypeName!!root
argumentName!!Level.ERROR
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!h
argumentName!!Level.OFF
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!root
argumentName!!Level.WARN
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!root
argumentName!!Level.FATAL
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!root
argumentName!!Level.FATAL
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!h
argumentName!!Level.OFF
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!root
argumentName!!Level.WARN
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!root
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!root
argumentName!!Level.ERROR
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
TypeName!!root
argumentName!!Level.FATAL
argumentName!!MSG
MethodName!!assertEquals
argumentName!!caRoot.counter
argumentName!!6
Method!!testRB1
TypeName!!root
argumentName!!rbUS
MethodName!!assertSame
argumentName!!t
argumentName!!rbUS
MethodName!!assertSame
argumentName!!t
argumentName!!rbUS
MethodName!!assertSame
argumentName!!t
argumentName!!rbUS
MethodName!!assertSame
argumentName!!t
argumentName!!rbUS
Method!!testRB2
TypeName!!root
argumentName!!rbUS
MethodName!!assertSame
argumentName!!t
argumentName!!rbUS
TypeName!!x_y
argumentName!!rbFR
MethodName!!assertSame
argumentName!!t
argumentName!!rbUS
MethodName!!assertSame
argumentName!!t
argumentName!!rbFR
MethodName!!assertSame
argumentName!!t
argumentName!!rbFR
Method!!testRB3
TypeName!!root
argumentName!!rbUS
MethodName!!assertSame
argumentName!!t
argumentName!!rbUS
TypeName!!x_y
argumentName!!rbFR
TypeName!!x_y_z
argumentName!!rbCH
MethodName!!assertSame
argumentName!!t
argumentName!!rbUS
MethodName!!assertSame
argumentName!!t
argumentName!!rbFR
MethodName!!assertSame
argumentName!!t
argumentName!!rbCH
Method!!testExists
MethodName!!assertNull
argumentName!!t
MethodName!!assertSame
argumentName!!a
argumentName!!t
MethodName!!assertSame
argumentName!!a_b
argumentName!!t
MethodName!!assertSame
argumentName!!a_b_c
argumentName!!t
Method!!testHierarchy1
MethodName!!assertEquals
argumentName!!"a"
argumentName!!a0.getName()
MethodName!!assertNull
argumentName!!a0.getLevel()
MethodName!!assertSame
argumentName!!Level.ERROR
argumentName!!a0.getEffectiveLevel()
MethodName!!assertSame
argumentName!!a0
argumentName!!a1
Method!!testTrace
TypeName!!appender
TypeName!!root
argumentName!!appender
TypeName!!root
argumentName!!Level.INFO
TypeName!!tracer
argumentName!!Level.TRACE
TypeName!!tracer
argumentName!!"Message 1"
TypeName!!root
argumentName!!"Discarded Message"
TypeName!!root
argumentName!!"Discarded Message"
MethodName!!assertEquals
argumentName!!1
argumentName!!msgs.size()
MethodName!!assertEquals
argumentName!!Level.TRACE
argumentName!!event.getLevel()
MethodName!!assertEquals
argumentName!!"Message 1"
argumentName!!event.getMessage()
Method!!testTraceWithException
TypeName!!appender
TypeName!!root
argumentName!!appender
TypeName!!root
argumentName!!Level.INFO
TypeName!!tracer
argumentName!!Level.TRACE
TypeName!!tracer
argumentName!!"Message 1"
argumentName!!ex
TypeName!!root
argumentName!!"Discarded Message"
argumentName!!ex
TypeName!!root
argumentName!!"Discarded Message"
argumentName!!ex
MethodName!!assertEquals
argumentName!!1
argumentName!!msgs.size()
MethodName!!assertEquals
argumentName!!Level.TRACE
argumentName!!event.getLevel()
MethodName!!assertEquals
argumentName!!"Message 1"
argumentName!!event.getMessage()
Method!!testIsTraceEnabled
TypeName!!appender
TypeName!!root
argumentName!!appender
TypeName!!root
argumentName!!Level.INFO
TypeName!!tracer
argumentName!!Level.TRACE
MethodName!!assertTrue
argumentName!!tracer.isTraceEnabled()
MethodName!!assertFalse
argumentName!!root.isTraceEnabled()
Class!!CountingHierarchyEventListener
Method!!addAppenderEvent
Method!!removeAppenderEvent
Method!!getAddEventCount
Method!!getRemoveEventCount
Method!!testAppenderEvent1
PrimaryName!!LogManager.getLoggerRepository()
argumentName!!listener
TypeName!!root
argumentName!!appender
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getAddEventCount()
MethodName!!assertEquals
argumentName!!0
argumentName!!listener.getRemoveEventCount()
TypeName!!root
argumentName!!appender
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getAddEventCount()
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getRemoveEventCount()
Method!!testAppenderEvent2
PrimaryName!!LogManager.getLoggerRepository()
argumentName!!listener
TypeName!!appender
argumentName!!"A1"
TypeName!!root
argumentName!!appender
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getAddEventCount()
MethodName!!assertEquals
argumentName!!0
argumentName!!listener.getRemoveEventCount()
TypeName!!root
argumentName!!appender.getName()
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getAddEventCount()
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getRemoveEventCount()
Method!!testAppenderEvent3
PrimaryName!!LogManager.getLoggerRepository()
argumentName!!listener
TypeName!!root
argumentName!!appender
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getAddEventCount()
MethodName!!assertEquals
argumentName!!0
argumentName!!listener.getRemoveEventCount()
TypeName!!root
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getAddEventCount()
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getRemoveEventCount()
Method!!testAppenderEvent4
PrimaryName!!LogManager.getLoggerRepository()
argumentName!!listener
TypeName!!root
argumentName!!appender
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getAddEventCount()
MethodName!!assertEquals
argumentName!!0
argumentName!!listener.getRemoveEventCount()
TypeName!!LogManager
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getAddEventCount()
MethodName!!assertEquals
argumentName!!1
argumentName!!listener.getRemoveEventCount()
Class!!CountingAppender
Method!!close
Method!!append
Method!!requiresLayout
Class!!LogManagerTest
Method!!testDefaultConfigurationFile
MethodName!!assertEquals
argumentName!!"log4j.properties"
argumentName!!LogManager.DEFAULT_CONFIGURATION_FILE
Method!!testDefaultXmlConfigurationFile
MethodName!!assertEquals
argumentName!!"log4j.xml"
argumentName!!LogManager.DEFAULT_XML_CONFIGURATION_FILE
Method!!testDefaultConfigurationKey
MethodName!!assertEquals
argumentName!!"log4j.configuration"
argumentName!!LogManager.DEFAULT_CONFIGURATION_KEY
Method!!testConfiguratorClassKey
MethodName!!assertEquals
argumentName!!"log4j.configuratorClass"
argumentName!!LogManager.CONFIGURATOR_CLASS_KEY
Method!!testDefaultInitOverrideKey
MethodName!!assertEquals
argumentName!!"log4j.defaultInitOverride"
argumentName!!LogManager.DEFAULT_INIT_OVERRIDE_KEY
Class!!MDCOrderFilter
Method!!filter
Class!!MDCTestCase
Method!!setUp
TypeName!!MDC
Method!!tearDown
TypeName!!MDC
Method!!testPut
TypeName!!MDC
argumentName!!"key"
argumentName!!"some value"
MethodName!!assertEquals
argumentName!!"some value"
argumentName!!MDC.get("key")
MethodName!!assertEquals
argumentName!!1
argumentName!!MDC.getContext().size()
Method!!testRemoveLastKey
TypeName!!MDC
argumentName!!"key"
argumentName!!"some value"
TypeName!!MDC
argumentName!!"key"
MethodName!!checkThreadLocalsForLeaks
Method!!checkThreadLocalsForLeaks
TypeName!!threadLocalsField
argumentName!!true
TypeName!!inheritableThreadLocalsField
argumentName!!true
TypeName!!tableField
argumentName!!true
MethodName!!checkThreadLocalMapForLeaks
argumentName!!threadLocalMap
argumentName!!tableField
MethodName!!checkThreadLocalMapForLeaks
argumentName!!threadLocalMap
argumentName!!tableField
Method!!checkThreadLocalMapForLeaks
MethodName!!fail
argumentName!!"Found a ThreadLocal with key of type ["+keyClassName+"]"
Class!!MinimumTestCase
Method!!setUp
TypeName!!root
Method!!tearDown
PrimaryName!!root.getLoggerRepository()
Method!!simple
TypeName!!root
argumentName!!appender
MethodName!!common
TypeName!!Transformer
argumentName!!"output/simple"
argumentName!!FILTERED
argumentName!!newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/simple")
Method!!ttcc
TypeName!!root
argumentName!!appender
PrimaryName!!Thread.currentThread()
argumentName!!"main"
MethodName!!common
PrimaryName!!Thread.currentThread()
argumentName!!oldName
TypeName!!Transformer
argumentName!!"output/ttcc"
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/ttcc")
Method!!common
TypeName!!ERR
argumentName!!Level.ERROR
TypeName!!INF
argumentName!!Level.INFO
TypeName!!INF_ERR
argumentName!!Level.ERROR
TypeName!!DEB
argumentName!!Level.DEBUG
TypeName!!TRC
argumentName!!Level.TRACE
TypeName!!ERR
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!ERR
argumentName!!"Message "+i
TypeName!!INF
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!INF
argumentName!!"Message "+i
TypeName!!INF
argumentName!!"Message "+i
TypeName!!INF
argumentName!!"Message "+i
TypeName!!INF_UNDEF
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!INF_UNDEF
argumentName!!"Message "+i
TypeName!!INF_UNDEF
argumentName!!"Message "+i
TypeName!!INF_UNDEF
argumentName!!"Message "+i
TypeName!!INF_ERR
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!INF_ERR
argumentName!!"Message "+i
TypeName!!INF_ERR_UNDEF
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!INF_ERR_UNDEF
argumentName!!"Message "+i
TypeName!!DEB
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!DEB
argumentName!!"Message "+i
TypeName!!DEB
argumentName!!"Message "+i
TypeName!!DEB
argumentName!!"Message "+i
TypeName!!DEB
argumentName!!"Message "+i
TypeName!!TRC
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!TRC
argumentName!!"Message "+i
TypeName!!TRC
argumentName!!"Message "+i
TypeName!!TRC
argumentName!!"Message "+i
TypeName!!TRC
argumentName!!"Message "+i
TypeName!!TRC
argumentName!!"Message "+i
TypeName!!UNDEF
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!UNDEF
argumentName!!"Message "+i
TypeName!!UNDEF
argumentName!!"Message "+i
TypeName!!UNDEF
argumentName!!"Message "+i
TypeName!!UNDEF
argumentName!!"Message "+i
argumentName!!newException("Just testing.")
TypeName!!ERR
argumentName!!"Message "+i
TypeName!!ERR
argumentName!!"Message "+i
TypeName!!ERR
argumentName!!"Message "+i
TypeName!!INF
argumentName!!"Message "+i
TypeName!!INF_UNDEF
argumentName!!"Message "+i
TypeName!!INF_ERR
argumentName!!"Message "+i
TypeName!!INF_ERR
argumentName!!"Message "+i
TypeName!!INF_ERR
argumentName!!"Message "+i
TypeName!!INF_ERR_UNDEF
argumentName!!"Message "+i
TypeName!!INF_ERR_UNDEF
argumentName!!"Message "+i
TypeName!!INF_ERR_UNDEF
argumentName!!"Message "+i
TypeName!!UNDEF
argumentName!!"Message "+i
argumentName!!newException("Just testing.")
TypeName!!INF
argumentName!!"Messages should bear numbers 0 through "+printCount+"."
Method!!suite
TypeName!!suite
argumentName!!newMinimumTestCase("simple")
TypeName!!suite
argumentName!!newMinimumTestCase("ttcc")
Class!!MyPatternLayout
Method!!createPatternParser
Method!!main
TypeName!!logger
argumentName!!newConsoleAppender(layout,ConsoleAppender.SYSTEM_OUT)
TypeName!!logger
argumentName!!"Hello, log"
TypeName!!logger
argumentName!!"Hello again..."
Class!!MyPatternParser
Method!!finalizeConverter
MethodName!!addConverter
argumentName!!newUserDirPatternConverter(formattingInfo)
TypeName!!currentLiteral
argumentName!!0
Class!!UserDirPatternConverter
Method!!convert
Class!!ShortSocketServer
Method!!main
MethodName!!usage
argumentName!!"Wrong number of arguments."
TypeName!!LogLog
argumentName!!"Listening on port "+SocketServerTestCase.PORT
TypeName!!MDC
argumentName!!"hostID"
argumentName!!"shortSocketServer"
TypeName!!PropertyConfigurator
argumentName!!prefix+i+".properties"
TypeName!!LogLog
argumentName!!"Waiting to accept a new client."
TypeName!!LogLog
argumentName!!"Connected to client at "+socket.getInetAddress()
TypeName!!LogLog
argumentName!!"Starting new socket node."
TypeName!!t
TypeName!!t
Method!!usage
TypeName!!System.err
argumentName!!msg
TypeName!!System.err
argumentName!!"Usage: java "+ShortSocketServer.class.getName()+" totalTests configFilePrefix"
TypeName!!System
argumentName!!1
Class!!SMTPAppenderTest
Method!!tearDown
TypeName!!LogManager
Class!!MockTriggeringEventEvaluator
Method!!isTriggeringEvent
Method!!testTrigger
TypeName!!DOMConfigurator
argumentName!!"input/xml/smtpAppender1.xml"
MethodName!!assertTrue
argumentName!!evaluatorinstanceofMockTriggeringEventEvaluator
Class!!SocketAppenderTest
Method!!setUp
TypeName!!DOMConfigurator
argumentName!!"input/xml/SocketAppenderTestConfig.xml"
Method!!tearDown
Method!!testFallbackErrorHandlerWhenStarting
TypeName!!logger
argumentName!!msg
MethodName!!assertEquals
argumentName!!"SocketAppender with FallbackErrorHandler"
argumentName!!msg
argumentName!!secondary.getLastMessage()
Class!!LastOnlyAppender
Method!!append
Method!!requiresLayout
Method!!close
Method!!getLastMessage
Class!!SocketServerTestCase
Method!!setUp
TypeName!!System.out
argumentName!!"Setting up test case."
Method!!tearDown
TypeName!!System.out
argumentName!!"Tearing down test case."
TypeName!!rootLogger
Method!!test1
TypeName!!rootLogger
argumentName!!socketAppender
MethodName!!common
argumentName!!"T1"
argumentName!!"key1"
argumentName!!"MDC-TEST1"
MethodName!!delay
argumentName!!1
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/socketServer.1")
Method!!test2
TypeName!!rootLogger
argumentName!!socketAppender
MethodName!!common
argumentName!!"T2"
argumentName!!"key2"
argumentName!!"MDC-TEST2"
MethodName!!delay
argumentName!!1
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/socketServer.2")
Method!!test3
TypeName!!socketAppender
argumentName!!true
TypeName!!rootLogger
argumentName!!socketAppender
MethodName!!common
argumentName!!"T3"
argumentName!!"key3"
argumentName!!"MDC-TEST3"
MethodName!!delay
argumentName!!1
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/socketServer.3")
Method!!test4
TypeName!!socketAppender
argumentName!!true
TypeName!!rootLogger
argumentName!!socketAppender
TypeName!!NDC
argumentName!!"some"
MethodName!!common
argumentName!!"T4"
argumentName!!"key4"
argumentName!!"MDC-TEST4"
TypeName!!NDC
MethodName!!delay
argumentName!!1
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/socketServer.4")
Method!!test5
TypeName!!socketAppender
argumentName!!true
TypeName!!asyncAppender
argumentName!!true
TypeName!!asyncAppender
argumentName!!socketAppender
TypeName!!rootLogger
argumentName!!asyncAppender
TypeName!!NDC
argumentName!!"some5"
MethodName!!common
argumentName!!"T5"
argumentName!!"key5"
argumentName!!"MDC-TEST5"
TypeName!!NDC
MethodName!!delay
argumentName!!2
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/socketServer.5")
Method!!test6
TypeName!!socketAppender
argumentName!!true
TypeName!!asyncAppender
argumentName!!true
TypeName!!asyncAppender
argumentName!!socketAppender
TypeName!!rootLogger
argumentName!!asyncAppender
TypeName!!NDC
argumentName!!"some6"
TypeName!!MDC
argumentName!!"hostID"
argumentName!!"client-test6"
MethodName!!common
argumentName!!"T6"
argumentName!!"key6"
argumentName!!"MDC-TEST6"
TypeName!!NDC
TypeName!!MDC
argumentName!!"hostID"
MethodName!!delay
argumentName!!2
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/socketServer.6")
Method!!test7
TypeName!!socketAppender
argumentName!!true
TypeName!!rootLogger
argumentName!!socketAppender
TypeName!!NDC
argumentName!!"some7"
TypeName!!MDC
argumentName!!"hostID"
argumentName!!"client-test7"
MethodName!!common
argumentName!!"T7"
argumentName!!"key7"
argumentName!!"MDC-TEST7"
TypeName!!NDC
TypeName!!MDC
argumentName!!"hostID"
MethodName!!delay
argumentName!!2
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/socketServer.7")
Method!!test8
TypeName!!socketAppender
argumentName!!true
TypeName!!rootLogger
argumentName!!socketAppender
TypeName!!NDC
argumentName!!"some8"
TypeName!!MDC
argumentName!!"hostID"
argumentName!!"shortSocketServer"
MethodName!!common
argumentName!!"T8"
argumentName!!"key8"
argumentName!!"MDC-TEST8"
TypeName!!NDC
MethodName!!delay
argumentName!!2
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/socketServer.8")
Method!!common
PrimaryName!!Thread.currentThread()
argumentName!!"main"
TypeName!!NDC
argumentName!!dc
TypeName!!MDC
argumentName!!key
argumentName!!o
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!rootLogger
argumentName!!Level.DEBUG
TypeName!!logger
argumentName!!XLevel.TRACE
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!Level.TRACE
TypeName!!rootLogger
argumentName!!Level.TRACE
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!XLevel.LETHAL
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!root
argumentName!!"Message "+++i
argumentName!!e
TypeName!!NDC
TypeName!!MDC
argumentName!!key
PrimaryName!!Thread.currentThread()
argumentName!!oldThreadName
Method!!delay
TypeName!!Thread
argumentName!!secs*1000
Method!!suite
TypeName!!suite
argumentName!!newSocketServerTestCase("test1")
TypeName!!suite
argumentName!!newSocketServerTestCase("test2")
TypeName!!suite
argumentName!!newSocketServerTestCase("test3")
TypeName!!suite
argumentName!!newSocketServerTestCase("test4")
TypeName!!suite
argumentName!!newSocketServerTestCase("test5")
TypeName!!suite
argumentName!!newSocketServerTestCase("test6")
TypeName!!suite
argumentName!!newSocketServerTestCase("test7")
TypeName!!suite
argumentName!!newSocketServerTestCase("test8")
Class!!SyslogAppenderTest
Method!!tearDown
TypeName!!LogManager
Method!!testDefaultConstructor
MethodName!!assertEquals
argumentName!!"user"
argumentName!!appender.getFacility()
MethodName!!assertEquals
argumentName!!false
argumentName!!appender.getFacilityPrinting()
MethodName!!assertNull
argumentName!!appender.getLayout()
MethodName!!assertNull
argumentName!!appender.getSyslogHost()
MethodName!!assertTrue
argumentName!!appender.requiresLayout()
Method!!testTwoParamConstructor
MethodName!!assertEquals
argumentName!!"daemon"
argumentName!!appender.getFacility()
MethodName!!assertEquals
argumentName!!false
argumentName!!appender.getFacilityPrinting()
MethodName!!assertEquals
argumentName!!layout
argumentName!!appender.getLayout()
MethodName!!assertNull
argumentName!!appender.getSyslogHost()
MethodName!!assertTrue
argumentName!!appender.requiresLayout()
Method!!testTwoParamConstructorBadFacility
MethodName!!assertEquals
argumentName!!"user"
argumentName!!appender.getFacility()
MethodName!!assertEquals
argumentName!!false
argumentName!!appender.getFacilityPrinting()
MethodName!!assertEquals
argumentName!!layout
argumentName!!appender.getLayout()
MethodName!!assertNull
argumentName!!appender.getSyslogHost()
MethodName!!assertTrue
argumentName!!appender.requiresLayout()
Method!!testThreeParamConstructor
MethodName!!assertEquals
argumentName!!"daemon"
argumentName!!appender.getFacility()
MethodName!!assertEquals
argumentName!!false
argumentName!!appender.getFacilityPrinting()
MethodName!!assertEquals
argumentName!!layout
argumentName!!appender.getLayout()
MethodName!!assertEquals
argumentName!!"syslog.example.org"
argumentName!!appender.getSyslogHost()
MethodName!!assertTrue
argumentName!!appender.requiresLayout()
Method!!testGetFacilityString
TypeName!!actual
argumentName!!SyslogAppender.getFacilityString(i<<3)
TypeName!!actual
argumentName!!' '
TypeName!!actual
argumentName!!SyslogAppender.getFacilityString(i<<3)
TypeName!!actual
argumentName!!' '
MethodName!!assertEquals
argumentName!!expected
argumentName!!actual.toString()
Method!!testGetFacilityStringUnexpected
MethodName!!assertNull
argumentName!!SyslogAppender.getFacilityString(1)
MethodName!!assertNull
argumentName!!SyslogAppender.getFacilityString(12<<3)
Method!!testGetFacilityBogus
MethodName!!assertEquals
argumentName!!-1
argumentName!!SyslogAppender.getFacility("bogus")
Method!!testGetFacilityNull
MethodName!!assertEquals
argumentName!!-1
argumentName!!SyslogAppender.getFacility(null)
Method!!testGetFacilitySystemNames
MethodName!!assertEquals
argumentName!!i<<3
argumentName!!SyslogAppender.getFacility(names[i])
Method!!testGetFacilityLocalNames
MethodName!!assertEquals
argumentName!!(16+i)<<3
argumentName!!SyslogAppender.getFacility(names[i])
Method!!testSetFacilityPrinting
MethodName!!assertFalse
argumentName!!appender.getFacilityPrinting()
TypeName!!appender
argumentName!!true
MethodName!!assertTrue
argumentName!!appender.getFacilityPrinting()
TypeName!!appender
argumentName!!false
MethodName!!assertFalse
argumentName!!appender.getFacilityPrinting()
Method!!testConstants
MethodName!!assertEquals
argumentName!!0<<3
argumentName!!SyslogAppender.LOG_KERN
MethodName!!assertEquals
argumentName!!1<<3
argumentName!!SyslogAppender.LOG_USER
MethodName!!assertEquals
argumentName!!2<<3
argumentName!!SyslogAppender.LOG_MAIL
MethodName!!assertEquals
argumentName!!3<<3
argumentName!!SyslogAppender.LOG_DAEMON
MethodName!!assertEquals
argumentName!!4<<3
argumentName!!SyslogAppender.LOG_AUTH
MethodName!!assertEquals
argumentName!!5<<3
argumentName!!SyslogAppender.LOG_SYSLOG
MethodName!!assertEquals
argumentName!!6<<3
argumentName!!SyslogAppender.LOG_LPR
MethodName!!assertEquals
argumentName!!7<<3
argumentName!!SyslogAppender.LOG_NEWS
MethodName!!assertEquals
argumentName!!8<<3
argumentName!!SyslogAppender.LOG_UUCP
MethodName!!assertEquals
argumentName!!9<<3
argumentName!!SyslogAppender.LOG_CRON
MethodName!!assertEquals
argumentName!!10<<3
argumentName!!SyslogAppender.LOG_AUTHPRIV
MethodName!!assertEquals
argumentName!!11<<3
argumentName!!SyslogAppender.LOG_FTP
MethodName!!assertEquals
argumentName!!16<<3
argumentName!!SyslogAppender.LOG_LOCAL0
MethodName!!assertEquals
argumentName!!17<<3
argumentName!!SyslogAppender.LOG_LOCAL1
MethodName!!assertEquals
argumentName!!18<<3
argumentName!!SyslogAppender.LOG_LOCAL2
MethodName!!assertEquals
argumentName!!19<<3
argumentName!!SyslogAppender.LOG_LOCAL3
MethodName!!assertEquals
argumentName!!20<<3
argumentName!!SyslogAppender.LOG_LOCAL4
MethodName!!assertEquals
argumentName!!21<<3
argumentName!!SyslogAppender.LOG_LOCAL5
MethodName!!assertEquals
argumentName!!22<<3
argumentName!!SyslogAppender.LOG_LOCAL6
MethodName!!assertEquals
argumentName!!23<<3
argumentName!!SyslogAppender.LOG_LOCAL7
Method!!testSetFacilityKern
TypeName!!appender
argumentName!!"kern"
TypeName!!appender
argumentName!!null
MethodName!!assertEquals
argumentName!!"kern"
argumentName!!appender.getFacility()
Method!!testSetFacilityNull
TypeName!!appender
argumentName!!"kern"
TypeName!!appender
argumentName!!null
MethodName!!assertEquals
argumentName!!"kern"
argumentName!!appender.getFacility()
Method!!testSetFacilityBogus
TypeName!!appender
argumentName!!"kern"
TypeName!!appender
argumentName!!"bogus"
MethodName!!assertEquals
argumentName!!"user"
argumentName!!appender.getFacility()
Method!!testSetFacilityAfterActivation
TypeName!!appender
argumentName!!"foo"
TypeName!!appender
argumentName!!Level.INFO
TypeName!!appender
argumentName!!"localhost"
TypeName!!appender
argumentName!!"user"
TypeName!!appender
argumentName!!newPatternLayout("%m%n")
TypeName!!appender
argumentName!!errorHandler
TypeName!!appender
TypeName!!appender
argumentName!!"kern"
MethodName!!assertEquals
argumentName!!"kern"
argumentName!!appender.getFacility()
Method!!testAppendBelowThreshold
TypeName!!appender
argumentName!!Level.ERROR
TypeName!!appender
TypeName!!logger
argumentName!!appender
TypeName!!logger
argumentName!!"Should not be logged by SyslogAppenderTest.testAppendBelowThreshold."
Method!!testAppendNoHost
TypeName!!appender
argumentName!!"foo"
TypeName!!appender
argumentName!!Level.INFO
TypeName!!appender
argumentName!!errorHandler
TypeName!!appender
argumentName!!newPatternLayout("%m%n")
TypeName!!appender
TypeName!!logger
argumentName!!appender
TypeName!!logger
argumentName!!"Should not be logged by SyslogAppenderTest.testAppendNoHost."
MethodName!!assertEquals
argumentName!!1
argumentName!!errorHandler.size()
MethodName!!assertEquals
argumentName!!"No syslog host is set for SyslogAppedender named \"foo\"."
argumentName!!errorHandler.getMessage(0)
Method!!testAppend
TypeName!!appender
argumentName!!"foo"
TypeName!!appender
argumentName!!Level.INFO
TypeName!!appender
argumentName!!"localhost"
TypeName!!appender
argumentName!!"user"
TypeName!!appender
argumentName!!newPatternLayout("%m%n")
TypeName!!appender
argumentName!!errorHandler
TypeName!!appender
TypeName!!asyncAppender
argumentName!!appender
TypeName!!asyncAppender
TypeName!!logger
argumentName!!asyncAppender
TypeName!!logger
argumentName!!"Expected message from log4j unit test SyslogAppenderTest.testAppend."
argumentName!!e
MethodName!!assertEquals
argumentName!!0
argumentName!!errorHandler.size()
Method!!testIPv6
TypeName!!appender
argumentName!!"::1"
Method!!testIPv6InBrackets
TypeName!!appender
argumentName!!"[::1]"
Method!!testIPv6AndPort
TypeName!!appender
argumentName!!"[::1]:1514"
Method!!testHostNameAndPort
TypeName!!appender
argumentName!!"localhost:1514"
Method!!testIPv4AndPort
TypeName!!appender
argumentName!!"127.0.0.1:1514"
Method!!log
TypeName!!ds
argumentName!!2000
TypeName!!appender
argumentName!!"localhost:"+ds.getLocalPort()
TypeName!!appender
argumentName!!"name"
TypeName!!appender
argumentName!!header
TypeName!!appender
argumentName!!pl
TypeName!!appender
TypeName!!l
argumentName!!appender
TypeName!!l
argumentName!!msg
TypeName!!l
argumentName!!msg
argumentName!!ex
TypeName!!appender
TypeName!!ds
argumentName!!p
TypeName!!ds
Method!!testActualLogging
MethodName!!assertEquals
argumentName!!"14"
argumentName!!st.nextToken()
MethodName!!assertEquals
argumentName!!"greetings"
argumentName!!st.nextToken()
Class!!MishandledException
Method!!printStackTrace
TypeName!!w
argumentName!!"Mishandled stack trace follows:"
TypeName!!w
argumentName!!""
TypeName!!w
argumentName!!"No tab here"
TypeName!!w
argumentName!!"\ttab here"
TypeName!!w
argumentName!!"\t"
Method!!testBadTabbing
MethodName!!assertEquals
argumentName!!"11"
argumentName!!st.nextToken()
MethodName!!assertEquals
argumentName!!"greetings"
argumentName!!st.nextToken()
MethodName!!assertEquals
argumentName!!"<11>Mishandled stack trace follows:"
argumentName!!s[1]
MethodName!!assertEquals
argumentName!!"<11>"
argumentName!!s[2]
MethodName!!assertEquals
argumentName!!"<11>No tab here"
argumentName!!s[3]
MethodName!!assertEquals
argumentName!!"<11>"+SyslogAppender.TAB+"tab here"
argumentName!!s[4]
MethodName!!assertEquals
argumentName!!"<11>"+SyslogAppender.TAB
argumentName!!s[5]
Method!!testHeaderLogging
MethodName!!assertEquals
argumentName!!"<14>"
argumentName!!s.substring(0,4)
TypeName!!cal
argumentName!!syslogDate
MethodName!!assertEquals
argumentName!!' '
argumentName!!syslogDateStr.charAt(4)
TypeName!!cal
argumentName!!preDate
TypeName!!cal
argumentName!!Calendar.MILLISECOND
argumentName!!0
TypeName!!cal
argumentName!!postDate
TypeName!!cal
argumentName!!syslogDate
TypeName!!cal
argumentName!!Calendar.YEAR
argumentName!!syslogYear
MethodName!!assertTrue
argumentName!!syslogDate.compareTo(preDate)>=0
MethodName!!assertTrue
argumentName!!syslogDate.compareTo(postDate)<=0
Method!!testLayoutHeader
TypeName!!ds
argumentName!!2000
TypeName!!appender
argumentName!!"localhost:"+ds.getLocalPort()
TypeName!!appender
argumentName!!"name"
TypeName!!appender
argumentName!!false
TypeName!!appender
argumentName!!pl
TypeName!!appender
TypeName!!l
argumentName!!appender
TypeName!!l
argumentName!!"Hello, World"
TypeName!!appender
TypeName!!ds
argumentName!!p
TypeName!!ds
MethodName!!assertEquals
argumentName!!"<14><!DOCTYPE"
argumentName!!s[0].substring(0,13)
MethodName!!assertEquals
argumentName!!"<14></table>"
argumentName!!s[2].substring(0,12)
Method!!testBigPackets
TypeName!!ds
argumentName!!2000
TypeName!!appender
argumentName!!"localhost:"+ds.getLocalPort()
TypeName!!appender
argumentName!!"name"
TypeName!!appender
argumentName!!false
TypeName!!appender
argumentName!!pl
TypeName!!appender
TypeName!!l
argumentName!!appender
TypeName!!msgbuf
argumentName!!"0123456789"
TypeName!!l
argumentName!!msg
TypeName!!appender
TypeName!!ds
argumentName!!p
MethodName!!assertTrue
argumentName!!p.getLength()<=1024
TypeName!!ds
TypeName!!rcvbuf
argumentName!!0
argumentName!!4
TypeName!!rcvbuf
argumentName!!rcvbuf.length()-3
TypeName!!rcvbuf
argumentName!!s[i].substring(s[i].indexOf("...")+3)
MethodName!!assertEquals
argumentName!!msg.length()
argumentName!!rcvbuf.length()
MethodName!!assertEquals
argumentName!!msg
argumentName!!rcvbuf.toString()
Class!!TelnetAppenderTest
Class!!ReadThread
Method!!run
TypeName!!bo
argumentName!!c
TypeName!!s
TypeName!!e
Method!!testIt
TypeName!!ta
argumentName!!"ta"
TypeName!!ta
argumentName!!port
TypeName!!ta
argumentName!!newPatternLayout("%p - %m")
TypeName!!ta
TypeName!!l
argumentName!!ta
TypeName!!t
TypeName!!Thread
argumentName!!200
TypeName!!l
argumentName!!"hi"
TypeName!!Thread
argumentName!!1000
TypeName!!ta
TypeName!!Thread
argumentName!!200
TypeName!!t
TypeName!!t
MethodName!!assertTrue
argumentName!!s.endsWith("INFO - hi")
MethodName!!assertEquals
argumentName!!oldActive
argumentName!!Thread.activeCount()
Class!!NTEventLogAppenderTest
Method!!tearDown
TypeName!!LogManager
Method!!testSimple
TypeName!!BasicConfigurator
argumentName!!newNTEventLogAppender()
TypeName!!logger
argumentName!!"Message "+i++
TypeName!!logger
argumentName!!"Message "+i++
TypeName!!logger
argumentName!!"Message "+i++
TypeName!!logger
argumentName!!"Message "+i++
TypeName!!logger
argumentName!!Level.FATAL
argumentName!!"Message "+i++
TypeName!!logger
argumentName!!"Message "+i++
argumentName!!newException("Just testing.")
Class!!ORTestCase
Method!!setUp
Method!!test1
MethodName!!assertEquals
argumentName!!r
argumentName!!dr
Method!!test2
TypeName!!map
argumentName!!Integer.class
argumentName!!ior
MethodName!!assertEquals
argumentName!!r
argumentName!!ior
Method!!test3
TypeName!!map
argumentName!!Number.class
argumentName!!ior
MethodName!!assertEquals
argumentName!!r
argumentName!!ior
Method!!test4
TypeName!!map
argumentName!!Object.class
argumentName!!oor
MethodName!!assertEquals
argumentName!!r
argumentName!!oor
Method!!test5
TypeName!!map
argumentName!!Object.class
argumentName!!oor
TypeName!!map
argumentName!!Number.class
argumentName!!nor
TypeName!!map
argumentName!!Integer.class
argumentName!!ior
MethodName!!assertEquals
argumentName!!r
argumentName!!ior
Method!!test6
TypeName!!map
argumentName!!Object.class
argumentName!!oor
TypeName!!map
argumentName!!Number.class
argumentName!!nor
MethodName!!assertEquals
argumentName!!r
argumentName!!nor
Method!!test7
TypeName!!map
argumentName!!comparable
argumentName!!cor
MethodName!!assertEquals
argumentName!!r
argumentName!!cor
Method!!test8
TypeName!!map
argumentName!!Serializable.class
argumentName!!sor
MethodName!!assertEquals
argumentName!!r
argumentName!!sor
Method!!test9
TypeName!!map
argumentName!!Y.class
argumentName!!yor
MethodName!!assertEquals
argumentName!!r
argumentName!!yor
Method!!test10
TypeName!!map
argumentName!!X.class
argumentName!!xor
MethodName!!assertEquals
argumentName!!r
argumentName!!xor
Method!!suite
TypeName!!suite
argumentName!!newORTestCase("test1")
TypeName!!suite
argumentName!!newORTestCase("test2")
TypeName!!suite
argumentName!!newORTestCase("test3")
TypeName!!suite
argumentName!!newORTestCase("test4")
TypeName!!suite
argumentName!!newORTestCase("test5")
TypeName!!suite
argumentName!!newORTestCase("test6")
TypeName!!suite
argumentName!!newORTestCase("test7")
TypeName!!suite
argumentName!!newORTestCase("test8")
TypeName!!suite
argumentName!!newORTestCase("test9")
TypeName!!suite
argumentName!!newORTestCase("test10")
Class!!UTObjectRenderer
Method!!doRender
Method!!toString
Class!!A
Class!!B
Class!!CachedDateFormatTest
Method!!createAbsoluteTimeDateFormat
TypeName!!df
argumentName!!timeZone
Method!!test1
MethodName!!assertEquals
argumentName!!"00:00:00,000"
argumentName!!gmtFormat.format(jul1)
MethodName!!assertEquals
argumentName!!"00:00:00,008"
argumentName!!gmtFormat.format(plus8ms)
MethodName!!assertEquals
argumentName!!"00:00:00,017"
argumentName!!gmtFormat.format(plus17ms)
MethodName!!assertEquals
argumentName!!"00:00:00,237"
argumentName!!gmtFormat.format(plus237ms)
MethodName!!assertEquals
argumentName!!"00:00:01,415"
argumentName!!gmtFormat.format(plus1415ms)
Method!!test2
MethodName!!assertEquals
argumentName!!"00:00:00,000"
argumentName!!gmtFormat.format(jul2)
MethodName!!assertEquals
argumentName!!"19:00:00,000"
argumentName!!chicagoFormat.format(jul2)
MethodName!!assertEquals
argumentName!!"00:00:00,000"
argumentName!!gmtFormat.format(jul2)
Method!!test3
MethodName!!assertEquals
argumentName!!"00:00:00,008"
argumentName!!gmtFormat.format(jul1)
MethodName!!assertEquals
argumentName!!"00:00:00,016"
argumentName!!gmtFormat.format(plus8ms)
MethodName!!assertEquals
argumentName!!"00:00:00,023"
argumentName!!gmtFormat.format(plus17ms)
MethodName!!assertEquals
argumentName!!"00:00:00,245"
argumentName!!gmtFormat.format(plus237ms)
MethodName!!assertEquals
argumentName!!"00:00:01,423"
argumentName!!gmtFormat.format(plus1415ms)
Method!!test4
MethodName!!assertEquals
argumentName!!baseFormat.format(jul1)
argumentName!!cachedFormat.format(jul1)
TypeName!!baseFormat
argumentName!!plus8ms
TypeName!!cachedFormat
argumentName!!plus8ms
MethodName!!assertEquals
argumentName!!baseFormat.format(plus8ms)
argumentName!!cachedFormat.format(plus8ms)
MethodName!!assertEquals
argumentName!!baseFormat.format(plus17ms)
argumentName!!cachedFormat.format(plus17ms)
MethodName!!assertEquals
argumentName!!baseFormat.format(plus237ms)
argumentName!!cachedFormat.format(plus237ms)
MethodName!!assertEquals
argumentName!!baseFormat.format(plus1415ms)
argumentName!!cachedFormat.format(plus1415ms)
Method!!test5
TypeName!!System.out
argumentName!!baseFormat.format(jul1)
TypeName!!System.out
argumentName!!sx
MethodName!!assertEquals
argumentName!!baseFormat.format(jul1)
argumentName!!sx
TypeName!!System.out
argumentName!!baseFormat.format(jul1)
TypeName!!System.out
argumentName!!sx
MethodName!!assertEquals
argumentName!!baseFormat.format(jul1)
argumentName!!sx
TypeName!!System.out
argumentName!!baseFormat.format(plus8ms)
TypeName!!System.out
argumentName!!sx
MethodName!!assertEquals
argumentName!!baseFormat.format(plus8ms)
argumentName!!sx
MethodName!!assertEquals
argumentName!!baseFormat.format(plus17ms)
argumentName!!cachedFormat.format(plus17ms)
MethodName!!assertEquals
argumentName!!baseFormat.format(plus237ms)
argumentName!!cachedFormat.format(plus237ms)
MethodName!!assertEquals
argumentName!!baseFormat.format(plus1415ms)
argumentName!!cachedFormat.format(plus1415ms)
Method!!test6
MethodName!!assertNotNull
argumentName!!newCachedDateFormat(newSimpleDateFormat(),1000).getNumberFormat()
Method!!test8
TypeName!!baseFormat
argumentName!!GMT
MethodName!!assertEquals
argumentName!!"2004-07-04 00:00:00,000"
argumentName!!cachedFormat.format(jul4)
TypeName!!cachedFormat
argumentName!!TimeZone.getTimeZone("GMT-6")
MethodName!!assertEquals
argumentName!!"2004-07-03 18:00:00,000"
argumentName!!cachedFormat.format(jul4)
Method!!test9
TypeName!!cachedFormat
argumentName!!cet
TypeName!!c
argumentName!!2004
argumentName!!Calendar.DECEMBER
argumentName!!12
argumentName!!20
argumentName!!0
TypeName!!c
argumentName!!Calendar.SECOND
argumentName!!37
TypeName!!c
argumentName!!Calendar.MILLISECOND
argumentName!!23
TypeName!!c
argumentName!!cet
MethodName!!assertEquals
argumentName!!expected
argumentName!!s
TypeName!!c
argumentName!!2005
argumentName!!Calendar.JANUARY
argumentName!!1
argumentName!!0
argumentName!!0
TypeName!!c
argumentName!!Calendar.SECOND
argumentName!!13
TypeName!!c
argumentName!!Calendar.MILLISECOND
argumentName!!905
MethodName!!assertEquals
argumentName!!expected
argumentName!!s
Method!!test10
TypeName!!cachedFormat
argumentName!!cet
TypeName!!c
argumentName!!2004
argumentName!!Calendar.OCTOBER
argumentName!!5
argumentName!!20
argumentName!!0
TypeName!!c
argumentName!!Calendar.SECOND
argumentName!!37
TypeName!!c
argumentName!!Calendar.MILLISECOND
argumentName!!23
TypeName!!c
argumentName!!cet
MethodName!!assertEquals
argumentName!!expected
argumentName!!s
TypeName!!c
argumentName!!2004
argumentName!!Calendar.NOVEMBER
argumentName!!1
argumentName!!0
argumentName!!0
TypeName!!c
argumentName!!Calendar.MILLISECOND
argumentName!!23
MethodName!!assertEquals
argumentName!!expected
argumentName!!s
TypeName!!c
argumentName!!Calendar.MILLISECOND
argumentName!!984
MethodName!!assertEquals
argumentName!!expected
argumentName!!s
Method!!test11
TypeName!!gmtFormat
argumentName!!GMT
TypeName!!baseFormat
argumentName!!GMT
MethodName!!assertEquals
argumentName!!expected
argumentName!!gmtFormat.format(jul2)
TypeName!!jul2
argumentName!!ticks+87
MethodName!!assertEquals
argumentName!!expected
argumentName!!gmtFormat.format(jul2)
Method!!test12
MethodName!!assertEquals
argumentName!!20
argumentName!!millisecondStart
Method!!test13
MethodName!!assertEquals
argumentName!!CachedDateFormat.NO_MILLISECONDS
argumentName!!millisecondStart
Method!!test14
MethodName!!assertEquals
argumentName!!9
argumentName!!millisecondStart
Method!!test15
MethodName!!assertEquals
argumentName!!CachedDateFormat.UNRECOGNIZED_MILLISECONDS
argumentName!!millisecondStart
Method!!test16
MethodName!!assertEquals
argumentName!!CachedDateFormat.UNRECOGNIZED_MILLISECONDS
argumentName!!millisecondStart
Method!!test17
TypeName!!simpleFormat
argumentName!!GMT
MethodName!!assertEquals
argumentName!!"00:00:00,000 00:00:00,000"
argumentName!!s
TypeName!!jul2
argumentName!!jul2.getTime()+120
MethodName!!assertEquals
argumentName!!"00:00:00,120 00:00:00,120"
argumentName!!simpleFormat.format(jul2)
MethodName!!assertEquals
argumentName!!1
argumentName!!maxValid
Method!!xsuite
TypeName!!suite
argumentName!!newCachedDateFormatTest("test5")
Class!!FormattingInfoTest
Method!!testGetDefault
MethodName!!assertNotNull
argumentName!!field
MethodName!!assertEquals
argumentName!!0
argumentName!!field.getMinLength()
MethodName!!assertEquals
argumentName!!Integer.MAX_VALUE
argumentName!!field.getMaxLength()
MethodName!!assertEquals
argumentName!!false
argumentName!!field.isLeftAligned()
Method!!testConstructor
MethodName!!assertNotNull
argumentName!!field
MethodName!!assertEquals
argumentName!!3
argumentName!!field.getMinLength()
MethodName!!assertEquals
argumentName!!6
argumentName!!field.getMaxLength()
MethodName!!assertEquals
argumentName!!true
argumentName!!field.isLeftAligned()
Method!!testTruncate
TypeName!!field
argumentName!!2
argumentName!!buf
MethodName!!assertEquals
argumentName!!"fobar"
argumentName!!buf.toString()
Method!!testPadLeft
TypeName!!field
argumentName!!2
argumentName!!buf
MethodName!!assertEquals
argumentName!!"fo obar"
argumentName!!buf.toString()
Method!!testPadRight
TypeName!!field
argumentName!!2
argumentName!!buf
MethodName!!assertEquals
argumentName!!"foobar "
argumentName!!buf.toString()
Class!!NameAbbreviatorTest
Method!!testGetDefault
MethodName!!assertNotNull
argumentName!!abbrev
Method!!testZero
TypeName!!buf
argumentName!!"org.example.foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - "
argumentName!!buf.toString()
Method!!testBlank
MethodName!!assertTrue
argumentName!!abbrev==defaultAbbrev
Method!!testOne
TypeName!!buf
argumentName!!"org.example.foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - "
argumentName!!buf.toString()
Method!!testBlankOne
TypeName!!buf
argumentName!!"org.example.foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - "
argumentName!!buf.toString()
Method!!testTwo
TypeName!!buf
argumentName!!"org.example.foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - foo.bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - foo.bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - bar"
argumentName!!buf.toString()
Method!!testOneDot
TypeName!!buf
argumentName!!"org.example.foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - o.e.f.bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"org.example.foo."
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - o.e.f."
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - f.bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - "
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"."
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - ."
argumentName!!buf.toString()
Method!!testOneTildeDot
TypeName!!buf
argumentName!!"org.example.foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - o~.e~.f~.bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"org.example.foo."
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - o~.e~.f~."
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - f~.bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - "
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"."
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - ."
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"o.e.f.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - o.e.f.bar"
argumentName!!buf.toString()
Method!!testMulti
TypeName!!buf
argumentName!!"org.example.foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - o.example.fo.bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"org.example.foo."
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - o.example.fo."
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - f.bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - "
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"."
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - ."
argumentName!!buf.toString()
Method!!testMinusOne
TypeName!!buf
argumentName!!"org.example.foo.bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - example.foo.bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"bar"
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - bar"
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - "
argumentName!!buf.toString()
TypeName!!buf
argumentName!!0
TypeName!!buf
argumentName!!"DEBUG - "
TypeName!!buf
argumentName!!"."
TypeName!!abbrev
argumentName!!fieldStart
argumentName!!buf
MethodName!!assertEquals
argumentName!!"DEBUG - "
argumentName!!buf.toString()
Class!!Num343PatternConverter
Method!!newInstance
Method!!format
TypeName!!toAppendTo
argumentName!!"343"
Class!!PatternParserTest
Method!!convert
TypeName!!PatternParser
argumentName!!pattern
argumentName!!converters
argumentName!!fields
argumentName!!registry
argumentName!!PatternParser.getPatternLayoutRules()
MethodName!!assertEquals
argumentName!!converters.size()
argumentName!!fields.size()
PrimaryName!!((PatternConverter)converterIter.next())
argumentName!!event
argumentName!!buf
PrimaryName!!((FormattingInfo)fieldIter.next())
argumentName!!fieldStart
argumentName!!buf
Method!!testNewWord
TypeName!!ruleRegistry
argumentName!!"z343"
argumentName!!Num343PatternConverter.class.getName()
MethodName!!assertEquals
argumentName!!"343"
argumentName!!result
Method!!testNewWord2
TypeName!!ruleRegistry
argumentName!!"n343"
argumentName!!Num343PatternConverter.class.getName()
MethodName!!assertEquals
argumentName!!"343"
argumentName!!result
Method!!testBogusWord1
MethodName!!assertEquals
argumentName!!"%, foobar"
argumentName!!result
Method!!testBogusWord2
MethodName!!assertEquals
argumentName!!"xyz %, foobar"
argumentName!!result
Method!!testBasic1
MethodName!!assertEquals
argumentName!!"hello INFO  - msg 1"+Layout.LINE_SEP
argumentName!!result
Method!!testBasic2
MethodName!!assertEquals
argumentName!!expectedRelativeTime+" INFO  [main] "+logger.getName()+" - msg 1"+Layout.LINE_SEP
argumentName!!result
Method!!testMultiOption
TypeName!!dateFormat
argumentName!!TimeZone.getTimeZone("GMT")
TypeName!!buf
argumentName!!' '
TypeName!!buf
argumentName!!localTime
TypeName!!buf
argumentName!!" org.foobar  - msg 1"
MethodName!!assertEquals
argumentName!!buf.toString()
argumentName!!result
Method!!testBogus
MethodName!!assertEquals
argumentName!!"%bogus"
argumentName!!result
Method!!testMore
MethodName!!assertEquals
argumentName!!"msg 1ore"
argumentName!!result
Method!!testMalformedOption
MethodName!!assertEquals
argumentName!!"foomsg 1{yyyy.MM.dd"
argumentName!!result
Method!!assertFactories
MethodName!!assertTrue
argumentName!!rules.size()>0
MethodName!!assertTrue
argumentName!!converter!=null
Method!!testPatternLayoutFactories
MethodName!!assertFactories
argumentName!!PatternParser.getPatternLayoutRules()
Method!!testFileNamePatternFactories
MethodName!!assertFactories
argumentName!!PatternParser.getFileNamePatternRules()
Class!!PatternLayoutTest
Method!!createLayout
Method!!testFormat
TypeName!!buf
argumentName!!'['
TypeName!!buf
argumentName!!event.getThreadName()
TypeName!!buf
argumentName!!"] "
TypeName!!buf
argumentName!!event.getLevel().toString()
TypeName!!buf
argumentName!!' '
TypeName!!buf
argumentName!!event.getLoggerName()
TypeName!!buf
argumentName!!" - "
TypeName!!buf
argumentName!!event.getMessage()
TypeName!!buf
argumentName!!System.getProperty("line.separator")
MethodName!!assertEquals
argumentName!!buf.toString()
argumentName!!result
Method!!testGetPatternFormat
MethodName!!assertEquals
argumentName!!"[%t] %p %c - %m%n"
argumentName!!layout.getConversionPattern()
Method!!testDefaultConversionPattern
MethodName!!assertEquals
argumentName!!"%m%n"
argumentName!!PatternLayout.DEFAULT_CONVERSION_PATTERN
Method!!testTTCCConversionPattern
MethodName!!assertEquals
argumentName!!"%r [%t] %p %c %x - %m%n"
argumentName!!PatternLayout.TTCC_CONVERSION_PATTERN
Method!!testFormatResize
TypeName!!NDC
MethodName!!assertEquals
argumentName!!"["
argumentName!!result.substring(0,1)
Class!!DerivedPatternLayout
Method!!getBufSize
Method!!getMaxCapacity
Class!!PatternLayoutTestCase
Method!!setUp
Method!!tearDown
PrimaryName!!root.getLoggerRepository()
Method!!test1
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout1.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.1")
Method!!test2
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout2.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.2")
Method!!test3
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout3.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.3")
Method!!test4
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout4.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.4")
Method!!test5
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout5.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newAbsoluteDateAndTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.5")
Method!!test6
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout6.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.6")
Method!!test7
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout7.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newAbsoluteTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.7")
Method!!test8
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout8.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newRelativeTimeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.8")
Method!!test9
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout9.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.9")
Method!!test10
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout10.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.10")
Method!!test11
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout11.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.11")
Method!!test12
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout12.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.12")
Method!!test13
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout13.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.13")
Method!!test14
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout14.properties"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/patternLayout.14")
Method!!testMDC1
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout.mdc.1.properties"
TypeName!!MDC
argumentName!!"key1"
argumentName!!"va11"
TypeName!!MDC
argumentName!!"key2"
argumentName!!"va12"
TypeName!!logger
argumentName!!"Hello World"
TypeName!!MDC
argumentName!!"key1"
TypeName!!MDC
argumentName!!"key2"
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/patternLayout.mdc.1")
Method!!testMDCClear
TypeName!!PropertyConfigurator
argumentName!!"input/patternLayout.mdc.1.properties"
TypeName!!MDC
argumentName!!"key1"
argumentName!!"va11"
TypeName!!MDC
argumentName!!"key2"
argumentName!!"va12"
TypeName!!logger
argumentName!!"Hello World"
TypeName!!MDC
TypeName!!logger
argumentName!!"Hello World"
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/patternLayout.mdc.clear")
Method!!common
PrimaryName!!Thread.currentThread()
argumentName!!"main"
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!Level.FATAL
argumentName!!"Message "+++i
TypeName!!root
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!logger
argumentName!!Level.FATAL
argumentName!!"Message "+++i
argumentName!!e
PrimaryName!!Thread.currentThread()
argumentName!!oldThreadName
Class!!PriorityTest
Method!!testOffInt
MethodName!!assertEquals
argumentName!!Integer.MAX_VALUE
argumentName!!Priority.OFF_INT
Method!!testFatalInt
MethodName!!assertEquals
argumentName!!50000
argumentName!!Priority.FATAL_INT
Method!!testErrorInt
MethodName!!assertEquals
argumentName!!40000
argumentName!!Priority.ERROR_INT
Method!!testWarnInt
MethodName!!assertEquals
argumentName!!30000
argumentName!!Priority.WARN_INT
Method!!testInfoInt
MethodName!!assertEquals
argumentName!!20000
argumentName!!Priority.INFO_INT
Method!!testDebugInt
MethodName!!assertEquals
argumentName!!10000
argumentName!!Priority.DEBUG_INT
Method!!testAllInt
MethodName!!assertEquals
argumentName!!Integer.MIN_VALUE
argumentName!!Priority.ALL_INT
Method!!testFatal
MethodName!!assertTrue
argumentName!!Priority.FATALinstanceofLevel
Method!!testERROR
MethodName!!assertTrue
argumentName!!Priority.ERRORinstanceofLevel
Method!!testWARN
MethodName!!assertTrue
argumentName!!Priority.WARNinstanceofLevel
Method!!testINFO
MethodName!!assertTrue
argumentName!!Priority.INFOinstanceofLevel
Method!!testDEBUG
MethodName!!assertTrue
argumentName!!Priority.DEBUGinstanceofLevel
Method!!testEqualsNull
MethodName!!assertFalse
argumentName!!Priority.DEBUG.equals(null)
Method!!testEqualsLevel
MethodName!!assertTrue
argumentName!!Priority.DEBUG.equals(Level.DEBUG)
Method!!testGetAllPossiblePriorities
MethodName!!assertEquals
argumentName!!5
argumentName!!priorities.length
Method!!testToPriorityString
MethodName!!assertTrue
argumentName!!Priority.toPriority("DEBUG")==Level.DEBUG
Method!!testToPriorityInt
MethodName!!assertTrue
argumentName!!Priority.toPriority(Priority.DEBUG_INT)==Level.DEBUG
Method!!testToPriorityStringPriority
MethodName!!assertTrue
argumentName!!Priority.toPriority("foo",Priority.DEBUG)==Priority.DEBUG
Method!!testToPriorityIntPriority
MethodName!!assertTrue
argumentName!!Priority.toPriority(17,Priority.DEBUG)==Priority.DEBUG
Method!!testDotlessLowerI
MethodName!!assertEquals
argumentName!!"INFO"
argumentName!!level.toString()
Method!!testDottedLowerI
TypeName!!Locale
argumentName!!turkey
TypeName!!Locale
argumentName!!defaultLocale
MethodName!!assertEquals
argumentName!!"INFO"
argumentName!!level.toString()
Class!!PropertyConfiguratorTest
Method!!testBadUnicodeEscape
TypeName!!writer
argumentName!!"log4j.rootLogger=\\uXX41"
TypeName!!writer
TypeName!!PropertyConfigurator
argumentName!!fileName
MethodName!!assertTrue
argumentName!!file.delete()
MethodName!!assertFalse
argumentName!!file.exists()
Method!!testURL
TypeName!!writer
argumentName!!"log4j.rootLogger=debug"
TypeName!!writer
TypeName!!PropertyConfigurator
argumentName!!url
MethodName!!assertTrue
argumentName!!file.delete()
MethodName!!assertFalse
argumentName!!file.exists()
Method!!testURLBadEscape
TypeName!!writer
argumentName!!"log4j.rootLogger=\\uXX41"
TypeName!!writer
TypeName!!PropertyConfigurator
argumentName!!url
MethodName!!assertTrue
argumentName!!file.delete()
MethodName!!assertFalse
argumentName!!file.exists()
Method!!testInputStream
MethodName!!assertTrue
argumentName!!file.exists()
TypeName!!PropertyConfigurator
argumentName!!inputStream
TypeName!!inputStream
PrimaryName!!this
TypeName!!LogManager
Method!!validateNested
MethodName!!assertEquals
argumentName!!"filterBase-test1.log"
argumentName!!rollingPolicy.getActiveFileName()
MethodName!!assertEquals
argumentName!!"filterBased-test1.%i"
argumentName!!rollingPolicy.getFileNamePattern()
MethodName!!assertEquals
argumentName!!0
argumentName!!rollingPolicy.getMinIndex()
MethodName!!assertTrue
argumentName!!rollingPolicy.isActivated()
MethodName!!assertTrue
argumentName!!Level.INFO.equals(filter.getLevelMin())
Method!!testJarURL
TypeName!!dir
TypeName!!zos
argumentName!!newZipEntry(LogManager.DEFAULT_CONFIGURATION_FILE)
TypeName!!zos
argumentName!!"log4j.rootLogger=debug".getBytes()
TypeName!!zos
TypeName!!zos
TypeName!!PropertyConfigurator
argumentName!!url
MethodName!!assertTrue
argumentName!!file.delete()
MethodName!!assertFalse
argumentName!!file.exists()
Method!!testReset
TypeName!!appender
argumentName!!"A1"
PrimaryName!!Logger.getRootLogger()
argumentName!!appender
TypeName!!props
argumentName!!"log4j.reset"
argumentName!!"true"
TypeName!!PropertyConfigurator
argumentName!!props
MethodName!!assertNull
argumentName!!Logger.getRootLogger().getAppender("A1")
TypeName!!LogManager
Class!!RollingPolicy
Method!!activateOptions
Method!!isActivated
Class!!FixedWindowRollingPolicy
Method!!getActiveFileName
Method!!setActiveFileName
Method!!getFileNamePattern
Method!!setFileNamePattern
Method!!getMinIndex
Method!!setMinIndex
Class!!TriggeringPolicy
Method!!activateOptions
Method!!isActivated
Class!!FilterBasedTriggeringPolicy
Method!!setFilter
Method!!getFilter
Class!!RollingFileAppender
Method!!getRollingPolicy
Method!!setRollingPolicy
Method!!getTriggeringPolicy
Method!!setTriggeringPolicy
Method!!getAppend
Method!!setAppend
Method!!close
Method!!requiresLayout
Method!!append
Method!!testNested
TypeName!!PropertyConfigurator
argumentName!!"input/filter1.properties"
PrimaryName!!this
TypeName!!LogManager
Class!!MockThrowableRenderer
Method!!activateOptions
Method!!isActivated
Method!!doRender
Method!!setShowVersion
Method!!getShowVersion
Method!!testThrowableRenderer
TypeName!!props
argumentName!!"log4j.throwableRenderer"
argumentName!!"org.apache.log4j.PropertyConfiguratorTest$MockThrowableRenderer"
TypeName!!props
argumentName!!"log4j.throwableRenderer.showVersion"
argumentName!!"false"
TypeName!!PropertyConfigurator
argumentName!!props
TypeName!!LogManager
MethodName!!assertNotNull
argumentName!!renderer
MethodName!!assertEquals
argumentName!!true
argumentName!!renderer.isActivated()
MethodName!!assertEquals
argumentName!!false
argumentName!!renderer.getShowVersion()
Class!!RewriteAppenderTest
Method!!setUp
PrimaryName!!LogManager.getLoggerRepository()
TypeName!!context
Method!!tearDown
PrimaryName!!LogManager.getLoggerRepository()
Method!!configure
TypeName!!factory
argumentName!!false
TypeName!!DOMConfigurator
argumentName!!doc.getDocumentElement()
Method!!testMapPolicy
MethodName!!configure
argumentName!!"map.xml"
TypeName!!logger
argumentName!!"Message 0"
TypeName!!MDC
argumentName!!"p1"
argumentName!!"Hola"
TypeName!!msg
argumentName!!"p1"
argumentName!!"Hello"
TypeName!!msg
argumentName!!"p2"
argumentName!!"World"
TypeName!!msg
argumentName!!"x1"
argumentName!!"Mundo"
TypeName!!logger
argumentName!!msg
TypeName!!msg
argumentName!!"message"
argumentName!!"Message 1"
TypeName!!logger
argumentName!!msg
MethodName!!assertTrue
argumentName!!Compare.compare(RewriteAppenderTest.class,"temp","map.log")
Class!!BaseBean
Method!!getP2
Method!!getX1
Method!!toString
Class!!MessageBean
Method!!getMessage
Method!!testReflectionPolicy
MethodName!!configure
argumentName!!"reflection.xml"
TypeName!!logger
argumentName!!"Message 0"
TypeName!!logger
argumentName!!newBaseBean("Hello","World")
TypeName!!MDC
argumentName!!"p1"
argumentName!!"Hola"
TypeName!!MDC
argumentName!!"p2"
argumentName!!"p2"
TypeName!!logger
argumentName!!newMessageBean("Welcome to The Hub","Hello","World")
MethodName!!assertTrue
argumentName!!Compare.compare(RewriteAppenderTest.class,"temp","reflection.log")
Method!!testPropertyPolicy
MethodName!!configure
argumentName!!"property.xml"
TypeName!!logger
argumentName!!"Message 0"
TypeName!!MDC
argumentName!!"p1"
argumentName!!"Hola"
TypeName!!logger
argumentName!!"Message 1"
MethodName!!assertTrue
argumentName!!Compare.compare(RewriteAppenderTest.class,"temp","property.log")
Class!!RFATestCase
Method!!tearDown
TypeName!!LogManager
Method!!test1
TypeName!!PropertyConfigurator
argumentName!!"input/RFA1.properties"
TypeName!!logger
argumentName!!"Hello---"+i
TypeName!!logger
argumentName!!"Hello--"+i
MethodName!!assertTrue
argumentName!!newFile("output/RFA-test1.log").exists()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-test1.log.1").exists()
Method!!test2
TypeName!!rfa
argumentName!!"ROLLING"
TypeName!!rfa
argumentName!!layout
TypeName!!rfa
argumentName!!false
TypeName!!rfa
argumentName!!3
TypeName!!rfa
argumentName!!100
TypeName!!rfa
argumentName!!"output/RFA-test2.log"
TypeName!!rfa
TypeName!!root
argumentName!!rfa
TypeName!!logger
argumentName!!"Hello---"+i
TypeName!!logger
argumentName!!"Hello--"+i
MethodName!!assertTrue
argumentName!!newFile("output/RFA-test2.log").exists()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-test2.log.1").exists()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-test2.log.2").exists()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-test2.log.3").exists()
MethodName!!assertFalse
argumentName!!newFile("output/RFA-test2.log.4").exists()
Method!!test2ParamConstructor
MethodName!!assertEquals
argumentName!!1
argumentName!!appender.getMaxBackupIndex()
MethodName!!assertEquals
argumentName!!10*1024*1024
argumentName!!appender.getMaximumFileSize()
Method!!test3ParamConstructor
MethodName!!assertEquals
argumentName!!1
argumentName!!appender.getMaxBackupIndex()
Method!!testLockDotOne
TypeName!!rfa
argumentName!!"ROLLING"
TypeName!!rfa
argumentName!!layout
TypeName!!rfa
argumentName!!false
TypeName!!rfa
argumentName!!10
TypeName!!rfa
argumentName!!100
TypeName!!rfa
argumentName!!"output/RFA-dot1.log"
TypeName!!rfa
TypeName!!root
argumentName!!rfa
PrimaryName!!newFile("output/RFA-dot1.log.2")
TypeName!!dot1
argumentName!!"Locked file"
TypeName!!dot5
argumentName!!"Unlocked file"
TypeName!!dot5
TypeName!!logger
argumentName!!"Hello---"+i
TypeName!!logger
argumentName!!"Hello--"+i
TypeName!!dot1
TypeName!!logger
argumentName!!"Hello--"+i
TypeName!!rfa
MethodName!!assertTrue
argumentName!!newFile("output/RFA-dot1.log.7").exists()
MethodName!!assertEquals
argumentName!!50
argumentName!!newFile("output/RFA-dot1.log").length()
MethodName!!assertEquals
argumentName!!200
argumentName!!newFile("output/RFA-dot1.log.1").length()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-dot1.log").exists()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-dot1.log.1").exists()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-dot1.log.2").exists()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-dot1.log.3").exists()
MethodName!!assertFalse
argumentName!!newFile("output/RFA-dot1.log.4").exists()
Method!!testLockDotThree
TypeName!!rfa
argumentName!!"ROLLING"
TypeName!!rfa
argumentName!!layout
TypeName!!rfa
argumentName!!false
TypeName!!rfa
argumentName!!10
TypeName!!rfa
argumentName!!100
TypeName!!rfa
argumentName!!"output/RFA-dot3.log"
TypeName!!rfa
TypeName!!root
argumentName!!rfa
PrimaryName!!newFile("output/RFA-dot3.log.1")
PrimaryName!!newFile("output/RFA-dot3.log.2")
PrimaryName!!newFile("output/RFA-dot3.log.4")
TypeName!!dot3
argumentName!!"Locked file"
TypeName!!dot5
argumentName!!"Unlocked file"
TypeName!!dot5
TypeName!!logger
argumentName!!"Hello---"+i
TypeName!!logger
argumentName!!"Hello--"+i
TypeName!!dot3
TypeName!!logger
argumentName!!"Hello--"+i
TypeName!!rfa
MethodName!!assertTrue
argumentName!!newFile("output/RFA-dot3.log.8").exists()
MethodName!!assertEquals
argumentName!!50
argumentName!!newFile("output/RFA-dot3.log").length()
MethodName!!assertEquals
argumentName!!100
argumentName!!newFile("output/RFA-dot3.log.1").length()
MethodName!!assertEquals
argumentName!!200
argumentName!!newFile("output/RFA-dot3.log.2").length()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-dot3.log").exists()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-dot3.log.1").exists()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-dot3.log.2").exists()
MethodName!!assertTrue
argumentName!!newFile("output/RFA-dot3.log.3").exists()
MethodName!!assertFalse
argumentName!!newFile("output/RFA-dot3.log.4").exists()
Class!!LocationInfoTest
Method!!testFourParamConstructor
MethodName!!assertEquals
argumentName!!className
argumentName!!li.getClassName()
MethodName!!assertEquals
argumentName!!methodName
argumentName!!li.getMethodName()
MethodName!!assertEquals
argumentName!!fileName
argumentName!!li.getFileName()
MethodName!!assertEquals
argumentName!!lineNumber
argumentName!!li.getLineNumber()
MethodName!!assertEquals
argumentName!!className+"."+methodName+"("+fileName+":"+lineNumber+")"
argumentName!!li.fullInfo
Class!!NameSubstring
Method!!getInfo
Class!!NameSubstringCaller
Method!!getInfo
Method!!testLocationInfo
MethodName!!assertEquals
argumentName!!NameSubstringCaller.class.getName()
argumentName!!li.getClassName()
MethodName!!assertEquals
argumentName!!"getInfo"
argumentName!!li.getMethodName()
Class!!LoggingEventTest
Method!!testSerializationSimple
TypeName!!SerializationTestHelper
argumentName!!"witness/serialization/simple.bin"
argumentName!!event
argumentName!!skip
argumentName!!237
Method!!testSerializationWithException
TypeName!!SerializationTestHelper
argumentName!!"witness/serialization/exception.bin"
argumentName!!event
argumentName!!skip
argumentName!!237
Method!!testSerializationWithLocation
TypeName!!event
TypeName!!SerializationTestHelper
argumentName!!"witness/serialization/location.bin"
argumentName!!event
argumentName!!skip
argumentName!!237
Method!!testSerializationNDC
TypeName!!NDC
argumentName!!"ndc test"
TypeName!!SerializationTestHelper
argumentName!!"witness/serialization/ndc.bin"
argumentName!!event
argumentName!!skip
argumentName!!237
Method!!testSerializationMDC
TypeName!!MDC
argumentName!!"mdckey"
argumentName!!"mdcvalue"
TypeName!!SerializationTestHelper
argumentName!!"witness/serialization/mdc.bin"
argumentName!!event
argumentName!!skip
argumentName!!237
Method!!testDeserializationSimple
MethodName!!assertTrue
argumentName!!objinstanceofLoggingEvent
MethodName!!assertEquals
argumentName!!"Hello, world."
argumentName!!event.getMessage()
MethodName!!assertEquals
argumentName!!Level.INFO
argumentName!!event.getLevel()
Method!!testDeserializationWithException
MethodName!!assertTrue
argumentName!!objinstanceofLoggingEvent
MethodName!!assertEquals
argumentName!!"Hello, world."
argumentName!!event.getMessage()
MethodName!!assertEquals
argumentName!!Level.INFO
argumentName!!event.getLevel()
Method!!testDeserializationWithLocation
MethodName!!assertTrue
argumentName!!objinstanceofLoggingEvent
MethodName!!assertEquals
argumentName!!"Hello, world."
argumentName!!event.getMessage()
MethodName!!assertEquals
argumentName!!Level.INFO
argumentName!!event.getLevel()
Method!!testFQNOfCategoryClass
MethodName!!assertEquals
argumentName!!catName
argumentName!!event.fqnOfCategoryClass
Method!!testLevel
MethodName!!assertEquals
argumentName!!Level.ERROR
argumentName!!event.level
Method!!testLocationInfoNoFQCN
MethodName!!assertNotNull
argumentName!!info
MethodName!!assertEquals
argumentName!!"?"
argumentName!!info.getLineNumber()
MethodName!!assertEquals
argumentName!!"?"
argumentName!!info.getClassName()
MethodName!!assertEquals
argumentName!!"?"
argumentName!!info.getFileName()
MethodName!!assertEquals
argumentName!!"?"
argumentName!!info.getMethodName()
Class!!BadMessage
Method!!toString
Method!!testBadMessage
TypeName!!event
Class!!ThrowableInformationTest
Class!!OverriddenThrowable
Method!!printStackTrace
TypeName!!s
argumentName!!(Object)"print(Object)"
TypeName!!s
argumentName!!"print(char[])".toCharArray()
TypeName!!s
argumentName!!"print(String)"
TypeName!!s
argumentName!!(Object)"println(Object)"
TypeName!!s
argumentName!!"println(char[])".toCharArray()
TypeName!!s
argumentName!!"println(String)"
TypeName!!s
argumentName!!"write(char[])".toCharArray()
TypeName!!s
argumentName!!"write(char[], int, int)".toCharArray()
argumentName!!2
argumentName!!8
TypeName!!s
argumentName!!"write(String, int, int)"
argumentName!!2
argumentName!!8
Method!!testOverriddenBehavior
MethodName!!assertEquals
argumentName!!4
argumentName!!rep.length
MethodName!!assertEquals
argumentName!!"print(Object)print(char[])print(String)println(Object)"
argumentName!!rep[0]
MethodName!!assertEquals
argumentName!!"println(char[])"
argumentName!!rep[1]
MethodName!!assertEquals
argumentName!!"println(String)"
argumentName!!rep[2]
MethodName!!assertEquals
argumentName!!"write(char[])ite(charite(Stri"
argumentName!!rep[3]
Class!!NotOverriddenThrowable
Method!!printStackTrace
TypeName!!s
argumentName!!true
TypeName!!s
argumentName!!'a'
TypeName!!s
argumentName!!1
TypeName!!s
argumentName!!2L
TypeName!!s
argumentName!!Float.MAX_VALUE
TypeName!!s
argumentName!!Double.MIN_VALUE
TypeName!!s
argumentName!!true
TypeName!!s
argumentName!!'a'
TypeName!!s
argumentName!!1
TypeName!!s
argumentName!!2L
TypeName!!s
argumentName!!Float.MAX_VALUE
TypeName!!s
argumentName!!Double.MIN_VALUE
TypeName!!s
argumentName!!'C'
Method!!testNotOverriddenBehavior
MethodName!!assertEquals
argumentName!!7
argumentName!!rep.length
TypeName!!buf
argumentName!!'a'
TypeName!!buf
argumentName!!String.valueOf(1)
TypeName!!buf
argumentName!!String.valueOf(2L)
TypeName!!buf
argumentName!!String.valueOf(Float.MAX_VALUE)
TypeName!!buf
argumentName!!String.valueOf(Double.MIN_VALUE)
TypeName!!buf
argumentName!!String.valueOf(true)
MethodName!!assertEquals
argumentName!!buf.toString()
argumentName!!rep[0]
MethodName!!assertEquals
argumentName!!"a"
argumentName!!rep[1]
MethodName!!assertEquals
argumentName!!String.valueOf(1)
argumentName!!rep[2]
MethodName!!assertEquals
argumentName!!String.valueOf(2L)
argumentName!!rep[3]
MethodName!!assertEquals
argumentName!!String.valueOf(Float.MAX_VALUE)
argumentName!!rep[4]
MethodName!!assertEquals
argumentName!!String.valueOf(Double.MIN_VALUE)
argumentName!!rep[5]
MethodName!!assertEquals
argumentName!!"C"
argumentName!!rep[6]
Class!!NullThrowable
Method!!printStackTrace
TypeName!!s
argumentName!!(Object)null
TypeName!!s
argumentName!!(String)null
TypeName!!s
argumentName!!(Object)null
TypeName!!s
argumentName!!(String)null
Method!!testNull
MethodName!!assertEquals
argumentName!!2
argumentName!!rep.length
MethodName!!assertEquals
argumentName!!nullStr+nullStr+nullStr
argumentName!!rep[0]
MethodName!!assertEquals
argumentName!!nullStr
argumentName!!rep[1]
Class!!EmptyThrowable
Method!!printStackTrace
Method!!testEmpty
MethodName!!assertEquals
argumentName!!0
argumentName!!rep.length
Class!!StringThrowable
Method!!printStackTrace
TypeName!!s
argumentName!!stackTrace
Method!!testLineFeed
MethodName!!assertEquals
argumentName!!1
argumentName!!rep.length
MethodName!!assertEquals
argumentName!!""
argumentName!!rep[0]
Method!!testCarriageReturn
MethodName!!assertEquals
argumentName!!1
argumentName!!rep.length
MethodName!!assertEquals
argumentName!!""
argumentName!!rep[0]
Method!!testParsing
MethodName!!assertEquals
argumentName!!6
argumentName!!rep.length
MethodName!!assertEquals
argumentName!!"Line1"
argumentName!!rep[0]
MethodName!!assertEquals
argumentName!!"Line2"
argumentName!!rep[1]
MethodName!!assertEquals
argumentName!!"Line3"
argumentName!!rep[2]
MethodName!!assertEquals
argumentName!!"Line4"
argumentName!!rep[3]
MethodName!!assertEquals
argumentName!!""
argumentName!!rep[4]
MethodName!!assertEquals
argumentName!!"Line6"
argumentName!!rep[5]
Method!!testLineFeedBlank
MethodName!!assertEquals
argumentName!!2
argumentName!!rep.length
MethodName!!assertEquals
argumentName!!""
argumentName!!rep[0]
MethodName!!assertEquals
argumentName!!" "
argumentName!!rep[1]
Method!!testGetThrowable
MethodName!!assertSame
argumentName!!t
argumentName!!ti.getThrowable()
Method!!testIsolation
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!rep[0]
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!rep2[0]
Class!!NastyThrowable
Method!!printStackTrace
TypeName!!s
argumentName!!"NastyException"
Method!!testNastyException
MethodName!!assertEquals
argumentName!!"NastyException"
argumentName!!rep[0]
Class!!StressCategory
Method!!main
TypeName!!System.err
argumentName!!"Usage: java "+StressCategory.class.getName()+" name1 ... nameN\n."
TypeName!!System
argumentName!!1
TypeName!!System.err
argumentName!!"This stress test suffers from combinatorial explosion.\n"+"Invoking with seven arguments takes about 90 minutes even on fast machines"
MethodName!!permute
argumentName!!0
Method!!permute
MethodName!!createLoop
argumentName!!0
MethodName!!swap
argumentName!!names
argumentName!!n
argumentName!!i
MethodName!!permute
argumentName!!n+1
MethodName!!swap
argumentName!!names
argumentName!!n
argumentName!!i
Method!!swap
Method!!permutationDump
TypeName!!System.out
argumentName!!"Current permutation is - "
TypeName!!System.out
argumentName!!names[i]+" "
TypeName!!System.out
Method!!createLoop
PrimaryName!!cat[i]
argumentName!!ct[i].level
MethodName!!test
TypeName!!h
MethodName!!createLoop
argumentName!!n+1
MethodName!!createLoop
argumentName!!n+1
MethodName!!createLoop
argumentName!!n+1
Method!!test
TypeName!!System.out
argumentName!!"Failed stress test."
MethodName!!permutationDump
MethodName!!ctDump
MethodName!!catDump
TypeName!!System
argumentName!!1
Method!!ctDump
TypeName!!System.out
argumentName!!"ct ["+j+"] = ("+ct[j].catstr+","+ct[j].level+")"
TypeName!!System.out
argumentName!!"ct ["+j+"] = undefined"
Method!!catDump
TypeName!!System.out
argumentName!!"cat["+j+"] = ("+cat[j].name+","+cat[j].getLevel()+")"
TypeName!!System.out
argumentName!!"cat["+j+"] = undefined"
Method!!checkCorrectness
TypeName!!System.out
argumentName!!"Expected level for "+localCT.catstr+" is "+expected
TypeName!!System.out
argumentName!!"Purported level for "+cat[i].name+" is "+purported
Method!!getExpectedPrioriy
Class!!CT
Class!!TestLogMF
Method!!getTraceLevel
Method!!tearDown
TypeName!!LogManager
Method!!testClassName
TypeName!!appender
PrimaryName!!Logger.getRootLogger()
argumentName!!appender
TypeName!!LogMF
argumentName!!logger
argumentName!!null
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!TestLogMF.class.getName()
argumentName!!writer.toString()
Method!!testTraceNullPattern
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!null
argumentName!!Math.PI
MethodName!!assertNull
argumentName!!capture.getMessage()
Method!!testTraceNoArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, World"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testTraceBadPattern
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {."
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testTraceMissingArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}World"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {0}World"
argumentName!!capture.getMessage()
Method!!testTraceString
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testTraceNull
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testTraceInt
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testTraceByte
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testTraceShort
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testTraceLong
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testTraceChar
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testTraceBoolean
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testTraceFloat
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration "+format.format(val)
argumentName!!capture.getMessage()
Method!!testTraceDouble
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration "+format.format(val)
argumentName!!capture.getMessage()
Method!!testTraceTwoArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}, {0}."
argumentName!!"World"
argumentName!!"Hello"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testTraceThreeArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}."
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testTraceFourArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}{3}"
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
argumentName!!"."
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testTraceArrayArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}{3}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testTraceNullArrayArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}{3}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"{1}{2} {0}{3}"
argumentName!!capture.getMessage()
Method!!testDebugNullPattern
TypeName!!LogMF
argumentName!!logger
argumentName!!null
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!null
argumentName!!capture.getMessage()
Method!!testDebugNoArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, World"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testDebugBadPattern
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {."
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testDebugMissingArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}World"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {0}World"
argumentName!!capture.getMessage()
Method!!testDebugString
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testDebugNull
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testDebugInt
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testDebugByte
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testDebugShort
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testDebugLong
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testDebugChar
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testDebugBoolean
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testDebugFloat
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!(float)Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testDebugDouble
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testDebugTwoArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}, {0}."
argumentName!!"World"
argumentName!!"Hello"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testDebugThreeArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}."
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testDebugFourArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}{3}"
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
argumentName!!"."
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testDebugArrayArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}{3}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testDebugDate
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!epoch
MethodName!!assertEquals
argumentName!!expected
argumentName!!actual
MethodName!!assertEquals
argumentName!!expected2
argumentName!!actual
Method!!testDebugNullArrayArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}{3}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"{1}{2} {0}{3}"
argumentName!!capture.getMessage()
Method!!testDebugPercent
TypeName!!LogMF
argumentName!!logger
argumentName!!"{0, number, percent}"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testDebugFullPrecisionAndPercent
TypeName!!LogMF
argumentName!!logger
argumentName!!"{0}{0, number, percent}"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testDebugQuoted
TypeName!!LogMF
argumentName!!logger
argumentName!!"'{0}'"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"{0}"
argumentName!!capture.getMessage()
Method!!testInfoNullPattern
TypeName!!LogMF
argumentName!!logger
argumentName!!null
argumentName!!Math.PI
MethodName!!assertNull
argumentName!!capture.getMessage()
Method!!testInfoNoArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, World"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testInfoBadPattern
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {."
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testInfoMissingArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}World"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {0}World"
argumentName!!capture.getMessage()
Method!!testInfoString
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testInfoNull
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testInfoInt
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testInfoByte
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testInfoShort
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testInfoLong
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testInfoChar
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testInfoBoolean
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testInfoFloat
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!(float)Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testInfoDouble
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testInfoTwoArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}, {0}."
argumentName!!"World"
argumentName!!"Hello"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testInfoThreeArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}."
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testInfoFourArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}{3}"
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
argumentName!!"."
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testInfoArrayArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}{3}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testWarnNullPattern
TypeName!!LogMF
argumentName!!logger
argumentName!!null
argumentName!!Math.PI
MethodName!!assertNull
argumentName!!capture.getMessage()
Method!!testWarnNoArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, World"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testWarnBadPattern
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {."
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testWarnMissingArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}World"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {0}World"
argumentName!!capture.getMessage()
Method!!testWarnString
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testWarnNull
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {0}"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testWarnInt
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testWarnByte
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testWarnShort
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testWarnLong
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testWarnChar
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testWarnBoolean
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testWarnFloat
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!(float)Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testWarnDouble
TypeName!!LogMF
argumentName!!logger
argumentName!!"Iteration {0}"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testWarnTwoArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}, {0}."
argumentName!!"World"
argumentName!!"Hello"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testWarnThreeArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}."
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testWarnFourArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}{3}"
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
argumentName!!"."
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testWarnArrayArg
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}{2} {0}{3}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogNullPattern
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!null
argumentName!!Math.PI
MethodName!!assertNull
argumentName!!capture.getMessage()
Method!!testLogNoArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Hello, World"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testLogBadPattern
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Hello, {."
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testLogMissingArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Hello, {0}World"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {0}World"
argumentName!!capture.getMessage()
Method!!testLogString
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Hello, {0}"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testLogNull
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Hello, {0}"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testLogInt
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogByte
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogShort
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogLong
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogChar
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testLogBoolean
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {0}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testLogFloat
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {0}"
argumentName!!(float)Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testLogDouble
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {0}"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testLogTwoArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"{1}, {0}."
argumentName!!"World"
argumentName!!"Hello"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogThreeArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"{1}{2} {0}."
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogFourArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"{1}{2} {0}{3}"
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
argumentName!!"."
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogArrayArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"{1}{2} {0}{3}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogrbNullBundle
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!null
argumentName!!"Iteration0"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Iteration0"
argumentName!!capture.getMessage()
Method!!testLogrbNullKey
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!null
argumentName!!Math.PI
MethodName!!assertNull
argumentName!!capture.getMessage()
Method!!testLogrbNoArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello1"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testLogrbBadPattern
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Malformed"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testLogrbMissingArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello2"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {0}World"
argumentName!!capture.getMessage()
Method!!testLogrbString
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello3"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testLogrbNull
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello3"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testLogrbInt
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogrbByte
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogrbShort
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogrbLong
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogrbChar
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testLogrbBoolean
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testLogrbFloat
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!(float)Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testLogrbDouble
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testLogrbTwoArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello4"
argumentName!!"World"
argumentName!!"Hello"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogrbThreeArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello5"
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogrbFourArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello6"
argumentName!!"World"
argumentName!!"Hello"
argumentName!!","
argumentName!!"."
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogrbArrayArg
TypeName!!LogMF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello6"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testInfo1ParamBrace9
TypeName!!LogMF
argumentName!!logger
argumentName!!"Hello, {9}{0}"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, {9}World"
argumentName!!capture.getMessage()
Method!!testInfo2ParamBrace9
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}, {9}{0}"
argumentName!!"World"
argumentName!!"Hello"
MethodName!!assertEquals
argumentName!!"Hello, {9}World"
argumentName!!capture.getMessage()
Method!!testInfo10ParamBrace9
TypeName!!LogMF
argumentName!!logger
argumentName!!"{1}, {9}{0}"
argumentName!!newObject[]{"World","Hello",null,null,null,null,null,null,null,"New "}
MethodName!!assertEquals
argumentName!!"Hello, New World"
argumentName!!capture.getMessage()
Method!!testInfo1ParamBraceSlashColon
TypeName!!LogMF
argumentName!!logger
argumentName!!pattern
argumentName!!"World"
MethodName!!assertEquals
argumentName!!pattern
argumentName!!capture.getMessage()
Class!!TestLogSF
Method!!getTraceLevel
Method!!tearDown
TypeName!!LogManager
Method!!testClassName
TypeName!!appender
PrimaryName!!Logger.getRootLogger()
argumentName!!appender
TypeName!!LogSF
argumentName!!logger
argumentName!!null
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!TestLogSF.class.getName()
argumentName!!writer.toString()
Method!!testTraceNullPattern
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!null
argumentName!!Math.PI
MethodName!!assertNull
argumentName!!capture.getMessage()
Method!!testTraceNoArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, World"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testTraceBadPattern
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {."
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testTraceMissingArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}World"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {}World"
argumentName!!capture.getMessage()
Method!!testTraceString
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testTraceNull
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testTraceInt
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testTraceByte
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testTraceShort
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testTraceLong
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testTraceChar
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testTraceBoolean
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testTraceFloat
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration "+String.valueOf(val)
argumentName!!capture.getMessage()
Method!!testTraceDouble
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration "+String.valueOf(val)
argumentName!!capture.getMessage()
Method!!testTraceTwoArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}, {}."
argumentName!!"Hello"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testTraceThreeArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}."
argumentName!!"Hello"
argumentName!!","
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testTraceFourArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}{}"
argumentName!!"Hello"
argumentName!!","
argumentName!!"World"
argumentName!!"."
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testTraceArrayArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}{}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testTraceNullArrayArg
TypeName!!logger
argumentName!!TRACE
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}{}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"{}{} {}{}"
argumentName!!capture.getMessage()
Method!!testDebugNullPattern
TypeName!!LogSF
argumentName!!logger
argumentName!!null
argumentName!!Math.PI
MethodName!!assertNull
argumentName!!capture.getMessage()
Method!!testDebugNoArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, World"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testDebugBadPattern
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {."
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testDebugMissingArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}World"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {}World"
argumentName!!capture.getMessage()
Method!!testDebugString
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testDebugNull
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testDebugInt
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testDebugByte
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testDebugShort
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testDebugLong
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testDebugChar
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testDebugBoolean
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testDebugFloat
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration "+String.valueOf(val)
argumentName!!capture.getMessage()
Method!!testDebugDouble
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration "+String.valueOf(val)
argumentName!!capture.getMessage()
Method!!testDebugTwoArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}, {}."
argumentName!!"Hello"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testDebugThreeArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}."
argumentName!!"Hello"
argumentName!!","
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testDebugFourArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}{}"
argumentName!!"Hello"
argumentName!!","
argumentName!!"World"
argumentName!!"."
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testDebugArrayArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}{}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testDebugNullArrayArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}{}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"{}{} {}{}"
argumentName!!capture.getMessage()
Method!!testInfoNullPattern
TypeName!!LogSF
argumentName!!logger
argumentName!!null
argumentName!!Math.PI
MethodName!!assertNull
argumentName!!capture.getMessage()
Method!!testInfoNoArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, World"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testInfoBadPattern
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {."
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testInfoMissingArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}World"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {}World"
argumentName!!capture.getMessage()
Method!!testInfoString
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testInfoNull
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testInfoInt
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testInfoByte
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testInfoShort
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testInfoLong
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testInfoChar
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testInfoBoolean
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testInfoFloat
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration "+String.valueOf(val)
argumentName!!capture.getMessage()
Method!!testInfoDouble
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration "+String.valueOf(val)
argumentName!!capture.getMessage()
Method!!testInfoTwoArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}, {}."
argumentName!!"Hello"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testInfoThreeArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}."
argumentName!!"Hello"
argumentName!!","
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testInfoArrayArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}{}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testWarnNullPattern
TypeName!!LogSF
argumentName!!logger
argumentName!!null
argumentName!!Math.PI
MethodName!!assertNull
argumentName!!capture.getMessage()
Method!!testWarnNoArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, World"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testWarnBadPattern
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {."
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testWarnMissingArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}World"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {}World"
argumentName!!capture.getMessage()
Method!!testWarnString
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testWarnNull
TypeName!!LogSF
argumentName!!logger
argumentName!!"Hello, {}"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testWarnInt
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testWarnByte
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testWarnShort
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testWarnLong
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testWarnChar
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testWarnBoolean
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testWarnFloat
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration "+String.valueOf(val)
argumentName!!capture.getMessage()
Method!!testWarnDouble
TypeName!!LogSF
argumentName!!logger
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration "+String.valueOf(val)
argumentName!!capture.getMessage()
Method!!testWarnTwoArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}, {}."
argumentName!!"Hello"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testWarnThreeArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}."
argumentName!!"Hello"
argumentName!!","
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testWarnFourArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}{}"
argumentName!!"Hello"
argumentName!!","
argumentName!!"World"
argumentName!!"."
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testWarnArrayArg
TypeName!!LogSF
argumentName!!logger
argumentName!!"{}{} {}{}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogNullPattern
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!null
argumentName!!Math.PI
MethodName!!assertNull
argumentName!!capture.getMessage()
Method!!testLogNoArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Hello, World"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testLogBadPattern
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Hello, {."
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testLogMissingArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Hello, {}World"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {}World"
argumentName!!capture.getMessage()
Method!!testLogString
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Hello, {}"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testLogNull
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Hello, {}"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testLogInt
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogByte
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogShort
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogLong
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogChar
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testLogBoolean
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {}"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testLogFloat
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {}"
argumentName!!(float)Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testLogDouble
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"Iteration {}"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testLogTwoArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"{}, {}."
argumentName!!"Hello"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogThreeArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"{}{} {}."
argumentName!!"Hello"
argumentName!!","
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogFourArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"{}{} {}{}"
argumentName!!"Hello"
argumentName!!","
argumentName!!"World"
argumentName!!"."
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogArrayArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!"{}{} {}{}"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogrbNullBundle
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!null
argumentName!!"Iteration0"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Iteration0"
argumentName!!capture.getMessage()
Method!!testLogrbNullKey
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!null
argumentName!!Math.PI
MethodName!!assertNull
argumentName!!capture.getMessage()
Method!!testLogrbNoArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello1"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testLogrbBadPattern
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Malformed"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!"Hello, {."
argumentName!!capture.getMessage()
Method!!testLogrbMissingArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello2"
argumentName!!newObject[0]
MethodName!!assertEquals
argumentName!!"Hello, {}World"
argumentName!!capture.getMessage()
Method!!testLogrbString
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello3"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World"
argumentName!!capture.getMessage()
Method!!testLogrbNull
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello3"
argumentName!!(Object)null
MethodName!!assertEquals
argumentName!!"Hello, null"
argumentName!!capture.getMessage()
Method!!testLogrbInt
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogrbByte
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogrbShort
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogrbLong
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration 42"
argumentName!!capture.getMessage()
Method!!testLogrbChar
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration C"
argumentName!!capture.getMessage()
Method!!testLogrbBoolean
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!val
MethodName!!assertEquals
argumentName!!"Iteration true"
argumentName!!capture.getMessage()
Method!!testLogrbFloat
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!(float)Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testLogrbDouble
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Iteration0"
argumentName!!Math.PI
MethodName!!assertEquals
argumentName!!expected
argumentName!!capture.getMessage()
Method!!testLogrbTwoArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello4"
argumentName!!"Hello"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogrbThreeArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello5"
argumentName!!"Hello"
argumentName!!","
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogrbFourArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello6"
argumentName!!"Hello"
argumentName!!","
argumentName!!"World"
argumentName!!"."
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testLogrbArrayArg
TypeName!!LogSF
argumentName!!logger
argumentName!!Level.ERROR
argumentName!!BUNDLE_NAME
argumentName!!"Hello6"
argumentName!!args
MethodName!!assertEquals
argumentName!!"Hello, World."
argumentName!!capture.getMessage()
Method!!testEscapeOneParam
TypeName!!LogSF
argumentName!!logger
argumentName!!"\\{}\\{{}}, World}\\{"
argumentName!!"Hello"
MethodName!!assertEquals
argumentName!!"{}{Hello}, World}{"
argumentName!!capture.getMessage()
Method!!testEscapeTwoParam
TypeName!!LogSF
argumentName!!logger
argumentName!!"\\{}\\{{}}, {}}{}\\{"
argumentName!!"Hello"
argumentName!!"World"
MethodName!!assertEquals
argumentName!!"{}{Hello}, World}{}{"
argumentName!!capture.getMessage()
Class!!TestLogXF
Method!!tearDown
TypeName!!LogManager
Class!!BadStringifier
Method!!toString
Method!!testEnteringNullNull
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!null
argumentName!!null
MethodName!!assertEquals
argumentName!!"null.null ENTRY"
argumentName!!capture.getMessage()
Method!!testEnteringNullNullNull
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!null
argumentName!!null
argumentName!!(String)null
MethodName!!assertEquals
argumentName!!"null.null ENTRY null"
argumentName!!capture.getMessage()
Method!!testEnteringNullNullNullArray
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!null
argumentName!!null
argumentName!!(Object[])null
MethodName!!assertEquals
argumentName!!"null.null ENTRY {}"
argumentName!!capture.getMessage()
Method!!testEntering
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!"SomeClass"
argumentName!!"someMethod"
MethodName!!assertEquals
argumentName!!"SomeClass.someMethod ENTRY"
argumentName!!capture.getMessage()
Method!!testEnteringWithParam
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!"SomeClass"
argumentName!!"someMethod"
argumentName!!"someParam"
MethodName!!assertEquals
argumentName!!"SomeClass.someMethod ENTRY someParam"
argumentName!!capture.getMessage()
Method!!testEnteringWithBadParam
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!"SomeClass"
argumentName!!"someMethod"
argumentName!!BadStringifier.INSTANCE
MethodName!!assertEquals
argumentName!!"SomeClass.someMethod ENTRY ?"
argumentName!!capture.getMessage()
Method!!testEnteringWithBadParams
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!"SomeClass"
argumentName!!"someMethod"
argumentName!!newObject[]{"param1",BadStringifier.INSTANCE}
MethodName!!assertEquals
argumentName!!"SomeClass.someMethod ENTRY {param1,?}"
argumentName!!capture.getMessage()
Method!!testExitingNullNull
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!null
argumentName!!null
MethodName!!assertEquals
argumentName!!"null.null RETURN"
argumentName!!capture.getMessage()
Method!!testExitingNullNullNull
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!null
argumentName!!null
argumentName!!(String)null
MethodName!!assertEquals
argumentName!!"null.null RETURN null"
argumentName!!capture.getMessage()
Method!!testExiting
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!"SomeClass"
argumentName!!"someMethod"
MethodName!!assertEquals
argumentName!!"SomeClass.someMethod RETURN"
argumentName!!capture.getMessage()
Method!!testExitingWithValue
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!"SomeClass"
argumentName!!"someMethod"
argumentName!!"someValue"
MethodName!!assertEquals
argumentName!!"SomeClass.someMethod RETURN someValue"
argumentName!!capture.getMessage()
Method!!testExitingWithBadValue
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!"SomeClass"
argumentName!!"someMethod"
argumentName!!BadStringifier.INSTANCE
MethodName!!assertEquals
argumentName!!"SomeClass.someMethod RETURN ?"
argumentName!!capture.getMessage()
Method!!testThrowingNullNullNull
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!null
argumentName!!null
argumentName!!null
MethodName!!assertEquals
argumentName!!"null.null THROW"
argumentName!!capture.getMessage()
Method!!testThrowing
TypeName!!logger
argumentName!!Level.DEBUG
TypeName!!LogXF
argumentName!!logger
argumentName!!"SomeClass"
argumentName!!"someMethod"
argumentName!!newIllegalArgumentException()
MethodName!!assertEquals
argumentName!!"SomeClass.someMethod THROW"
argumentName!!capture.getMessage()
Class!!TTCCLayoutTest
Method!!createLayout
Method!!testFormat
TypeName!!NDC
TypeName!!NDC
argumentName!!"NDC goes here"
TypeName!!NDC
TypeName!!layout
argumentName!!buf
argumentName!!event
TypeName!!buf
argumentName!!'['
TypeName!!buf
argumentName!!event.getThreadName()
TypeName!!buf
argumentName!!"] "
TypeName!!buf
argumentName!!event.getLevel().toString()
TypeName!!buf
argumentName!!' '
TypeName!!buf
argumentName!!event.getLoggerName()
TypeName!!buf
argumentName!!' '
TypeName!!buf
argumentName!!"NDC goes here"
TypeName!!buf
argumentName!!" - "
TypeName!!buf
argumentName!!event.getMessage()
TypeName!!buf
argumentName!!System.getProperty("line.separator")
MethodName!!assertEquals
argumentName!!buf.toString()
argumentName!!result
Method!!testGetSetThreadPrinting
MethodName!!assertEquals
argumentName!!true
argumentName!!layout.getThreadPrinting()
TypeName!!layout
argumentName!!false
MethodName!!assertEquals
argumentName!!false
argumentName!!layout.getThreadPrinting()
TypeName!!layout
argumentName!!true
MethodName!!assertEquals
argumentName!!true
argumentName!!layout.getThreadPrinting()
Method!!testGetSetCategoryPrefixing
MethodName!!assertEquals
argumentName!!true
argumentName!!layout.getCategoryPrefixing()
TypeName!!layout
argumentName!!false
MethodName!!assertEquals
argumentName!!false
argumentName!!layout.getCategoryPrefixing()
TypeName!!layout
argumentName!!true
MethodName!!assertEquals
argumentName!!true
argumentName!!layout.getCategoryPrefixing()
Method!!testGetSetContextPrinting
MethodName!!assertEquals
argumentName!!true
argumentName!!layout.getContextPrinting()
TypeName!!layout
argumentName!!false
MethodName!!assertEquals
argumentName!!false
argumentName!!layout.getContextPrinting()
TypeName!!layout
argumentName!!true
MethodName!!assertEquals
argumentName!!true
argumentName!!layout.getContextPrinting()
Class!!AbsoluteDateAndTimeFilter
Method!!filter
Class!!AbsoluteTimeFilter
Method!!filter
Class!!Compare
Method!!compare
TypeName!!System.out
argumentName!!"Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter
TypeName!!System.out
argumentName!!"One reads:  ["+s1+"]."
TypeName!!System.out
argumentName!!"Other reads:["+s2+"]."
TypeName!!System.out
argumentName!!"File ["+file2+"] longer than file ["+file1+"]."
Method!!open
Method!!compare
TypeName!!in1
TypeName!!in2
Method!!compare
TypeName!!System.out
argumentName!!"Files ["+file1+"] and ["+file2+"] differ on line "+lineCounter
TypeName!!System.out
argumentName!!"One reads:  ["+s1+"]."
TypeName!!System.out
argumentName!!"Other reads:["+s2+"]."
MethodName!!outputFile
argumentName!!testClass
argumentName!!file1
MethodName!!outputFile
argumentName!!testClass
argumentName!!file2
TypeName!!System.out
argumentName!!"File ["+file2+"] longer than file ["+file1+"]."
MethodName!!outputFile
argumentName!!testClass
argumentName!!file1
MethodName!!outputFile
argumentName!!testClass
argumentName!!file2
Method!!outputFile
TypeName!!System.out
argumentName!!"--------------------------------"
TypeName!!System.out
argumentName!!"Contents of "+file+":"
TypeName!!System.out
argumentName!!lineCounter
TypeName!!System.out
argumentName!!"   : "
TypeName!!System.out
argumentName!!"  : "
TypeName!!System.out
argumentName!!" : "
TypeName!!System.out
argumentName!!": "
TypeName!!System.out
argumentName!!s1
TypeName!!in1
Class!!ControlFilter
Method!!filter
Class!!EnhancedJunitTestRunnerFilter
Method!!filter
Class!!EnhancedLineNumberFilter
Method!!filter
Method!!filter
Class!!ISO8601Filter
Method!!filter
Class!!JunitTestRunnerFilter
Method!!filter
Class!!LineNumberFilter
Method!!filter
Class!!RelativeTimeFilter
Method!!filter
Class!!SerializationTestHelper
Method!!serializeClone
TypeName!!objOut
argumentName!!obj
TypeName!!objOut
Method!!deserializeStream
Method!!assertSerializationEquals
TypeName!!objOut
argumentName!!obj
TypeName!!objOut
MethodName!!assertStreamEquals
argumentName!!witness
argumentName!!memOut.toByteArray()
argumentName!!skip
argumentName!!endCompare
Method!!assertStreamEquals
TypeName!!is
TypeName!!TestCase
argumentName!!bytesRead
argumentName!!actual.length
TypeName!!TestCase
argumentName!!"Difference at offset "+i
argumentName!!expected[i]
argumentName!!actual[i]
TypeName!!os
argumentName!!actual
TypeName!!os
TypeName!!TestCase
argumentName!!"Writing witness file "+witness
Class!!SunReflectFilter
Method!!filter
Class!!Transformer
Method!!transform
TypeName!!output
argumentName!!line
Method!!transform
TypeName!!output
argumentName!!line
Class!!UnexpectedFormatException
Class!!XMLLineAttributeFilter
Method!!filter
Class!!XMLTimestampFilter
Method!!filter
Class!!ERFATestCase
Method!!tearDown
TypeName!!LogManager
Method!!testConstructor
MethodName!!assertEquals
argumentName!!0
argumentName!!appender.getPort()
Method!!sendMessage
TypeName!!writer
argumentName!!msg
MethodName!!assertEquals
argumentName!!expectedResponse
argumentName!!response
TypeName!!reader
TypeName!!writer
TypeName!!socket
Method!!testRollover
TypeName!!erfa
argumentName!!layout
TypeName!!erfa
argumentName!!false
TypeName!!erfa
argumentName!!2
TypeName!!erfa
argumentName!!port
TypeName!!erfa
argumentName!!"output/ERFA-test2.log"
TypeName!!erfa
TypeName!!Thread
argumentName!!100
TypeName!!root
argumentName!!erfa
TypeName!!logger
argumentName!!"Hello---"+i
TypeName!!logger
argumentName!!"Hello--"+i
MethodName!!sendMessage
argumentName!!port
argumentName!!"RollOver"
argumentName!!"OK"
MethodName!!sendMessage
argumentName!!port
argumentName!!"That's all folks."
argumentName!!"Expecting [RollOver] string."
MethodName!!assertTrue
argumentName!!newFile("output/ERFA-test2.log").exists()
MethodName!!assertTrue
argumentName!!newFile("output/ERFA-test2.log.1").exists()
MethodName!!assertTrue
argumentName!!newFile("output/ERFA-test2.log.2").exists()
MethodName!!assertFalse
argumentName!!newFile("output/ERFA-test2.log.3").exists()
Class!!ErrorHandlerTestCase
Method!!setUp
Method!!tearDown
PrimaryName!!root.getLoggerRepository()
Method!!test1
TypeName!!DOMConfigurator
argumentName!!"input/xml/fallback1.xml"
MethodName!!assertNotNull
argumentName!!eh
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/fallback1")
Method!!test2
TypeName!!PropertyConfigurator
argumentName!!"input/fallback1.properties"
MethodName!!assertNotNull
argumentName!!eh
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{cf,newLineNumberFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/fallback1")
Method!!common
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!Level.FATAL
argumentName!!"Message "+++i
TypeName!!root
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!root
argumentName!!"Message "+i
argumentName!!e
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!root
argumentName!!"Message "+i
argumentName!!e
Class!!LevelMatchFilterTestCase
Method!!setUp
TypeName!!root
Method!!tearDown
PrimaryName!!root.getLoggerRepository()
Method!!accept
TypeName!!appender
argumentName!!matchFilter
TypeName!!appender
argumentName!!newDenyAllFilter()
TypeName!!root
argumentName!!appender
TypeName!!root
argumentName!!Level.TRACE
TypeName!!matchFilter
argumentName!!levelArray[x].toString()
MethodName!!common
argumentName!!"pass "+x+"; filter set to accept only "+levelArray[x].toString()+" msgs"
TypeName!!Transformer
argumentName!!ACCEPT_FILE
argumentName!!ACCEPT_FILTERED
argumentName!!newLineNumberFilter()
MethodName!!assertTrue
argumentName!!Compare.compare(ACCEPT_FILTERED,ACCEPT_WITNESS)
Method!!deny
TypeName!!matchFilter
argumentName!!false
TypeName!!appender
argumentName!!matchFilter
TypeName!!root
argumentName!!appender
TypeName!!root
argumentName!!Level.TRACE
TypeName!!matchFilter
argumentName!!levelArray[x].toString()
MethodName!!common
argumentName!!"pass "+x+"; filter set to deny only "+levelArray[x].toString()+" msgs"
TypeName!!Transformer
argumentName!!DENY_FILE
argumentName!!DENY_FILTERED
argumentName!!newLineNumberFilter()
MethodName!!assertTrue
argumentName!!Compare.compare(DENY_FILTERED,DENY_WITNESS)
Method!!common
TypeName!!logger
argumentName!!msg
TypeName!!logger
argumentName!!msg
TypeName!!logger
argumentName!!msg
TypeName!!logger
argumentName!!msg
TypeName!!logger
argumentName!!msg
TypeName!!logger
argumentName!!msg
Method!!suite
TypeName!!suite
argumentName!!newLevelMatchFilterTestCase("accept")
TypeName!!suite
argumentName!!newLevelMatchFilterTestCase("deny")
Class!!VectorAppender
Method!!activateOptions
Method!!append
TypeName!!Thread
argumentName!!100
TypeName!!vector
argumentName!!event
Method!!getVector
Method!!close
Method!!isClosed
Method!!requiresLayout
Class!!VectorErrorHandler
Method!!setLogger
Method!!getLogger
Method!!activateOptions
Method!!error
MethodName!!error
argumentName!!message
argumentName!!e
argumentName!!errorCode
argumentName!!null
Method!!error
MethodName!!error
argumentName!!message
argumentName!!null
argumentName!!-1
argumentName!!null
Method!!error
TypeName!!errors
argumentName!!newObject[]{message,e,newInteger(errorCode),event}
Method!!getMessage
Method!!getException
Method!!getErrorCode
Method!!getEvent
Method!!size
Method!!setAppender
Method!!getAppender
Method!!setBackupAppender
Method!!getBackupAppender
Class!!CustomLevelTestCase
Method!!setUp
Method!!tearDown
PrimaryName!!root.getLoggerRepository()
Method!!test1
TypeName!!DOMConfigurator
argumentName!!"input/xml/customLevel1.xml"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/customLevel.1")
Method!!test2
TypeName!!DOMConfigurator
argumentName!!"input/xml/customLevel2.xml"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/customLevel.2")
Method!!test3
TypeName!!DOMConfigurator
argumentName!!"input/xml/customLevel3.xml"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/customLevel.3")
Method!!test4
TypeName!!DOMConfigurator
argumentName!!"input/xml/customLevel4.xml"
MethodName!!common
MethodName!!assertTrue
argumentName!!Compare.compare(TEMP,"witness/customLevel.4")
Method!!common
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!logger
argumentName!!XLevel.TRACE
argumentName!!"Message "+++i
Method!!suite
TypeName!!suite
argumentName!!newCustomLevelTestCase("test1")
TypeName!!suite
argumentName!!newCustomLevelTestCase("test2")
TypeName!!suite
argumentName!!newCustomLevelTestCase("test3")
TypeName!!suite
argumentName!!newCustomLevelTestCase("test4")
Class!!DOMTestCase
Method!!setUp
Method!!tearDown
PrimaryName!!root.getLoggerRepository()
Method!!test1
TypeName!!DOMConfigurator
argumentName!!"input/xml/DOMTestCase1.xml"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP_A1
argumentName!!FILTERED_A1
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
TypeName!!Transformer
argumentName!!TEMP_A2
argumentName!!FILTERED_A2
argumentName!!newFilter[]{cf2,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED_A1,"witness/dom.A1.1")
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED_A2,"witness/dom.A2.1")
Method!!test4
TypeName!!DOMConfigurator
argumentName!!"input/xml/DOMTest4.xml"
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP_A1+".4"
argumentName!!FILTERED_A1+".4"
argumentName!!newFilter[]{cf1,newLineNumberFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
TypeName!!Transformer
argumentName!!TEMP_A2+".4"
argumentName!!FILTERED_A2+".4"
argumentName!!newFilter[]{cf2,newLineNumberFilter(),newISO8601Filter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED_A1+".4","witness/dom.A1.4")
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED_A2+".4","witness/dom.A2.4")
Method!!common
PrimaryName!!Thread.currentThread()
argumentName!!"main"
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!Level.FATAL
argumentName!!"Message "+++i
TypeName!!root
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!root
argumentName!!"Message "+i
argumentName!!e
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!root
argumentName!!"Message "+i
argumentName!!e
PrimaryName!!Thread.currentThread()
argumentName!!oldThreadName
Class!!CustomLogger
Class!!CustomLoggerFactory
Method!!makeNewLoggerInstance
MethodName!!assertFalse
argumentName!!additivity
Method!!setAdditivity
Class!!CustomErrorHandler
Method!!activateOptions
Method!!setLogger
Method!!error
Method!!error
Method!!error
Method!!setAppender
Method!!setBackupAppender
Method!!testCategoryFactory1
TypeName!!DOMConfigurator
argumentName!!"input/xml/categoryfactory1.xml"
MethodName!!assertTrue
argumentName!!logger1instanceofCustomLogger
MethodName!!assertFalse
argumentName!!logger2instanceofCustomLogger
Method!!testCategoryFactory2
TypeName!!DOMConfigurator
argumentName!!"input/xml/categoryfactory2.xml"
MethodName!!assertTrue
argumentName!!logger1instanceofCustomLogger
MethodName!!assertFalse
argumentName!!logger2instanceofCustomLogger
Method!!testLoggerFactory1
TypeName!!DOMConfigurator
argumentName!!"input/xml/loggerfactory1.xml"
MethodName!!assertTrue
argumentName!!logger1instanceofCustomLogger
MethodName!!assertFalse
argumentName!!logger2instanceofCustomLogger
Method!!testReset
TypeName!!appender
argumentName!!"V1"
PrimaryName!!Logger.getRootLogger()
argumentName!!appender
TypeName!!DOMConfigurator
argumentName!!"input/xml/testReset.xml"
MethodName!!assertNull
argumentName!!Logger.getRootLogger().getAppender("V1")
Method!!testConfigureAndWatch
TypeName!!DOMConfigurator
argumentName!!"input/xml/DOMTestCase1.xml"
MethodName!!assertNotNull
argumentName!!Logger.getRootLogger().getAppender("A1")
Method!!testOverrideSubst
Method!!subst
TypeName!!configurator
argumentName!!"input/xml/DOMTestCase1.xml"
argumentName!!LogManager.getLoggerRepository()
MethodName!!assertEquals
argumentName!!"output/subst-test.A1"
argumentName!!file
Class!!MockThrowableRenderer
Method!!activateOptions
Method!!isActivated
Method!!doRender
Method!!setShowVersion
Method!!getShowVersion
Method!!testThrowableRenderer1
TypeName!!DOMConfigurator
argumentName!!"input/xml/throwableRenderer1.xml"
TypeName!!LogManager
MethodName!!assertNotNull
argumentName!!renderer
MethodName!!assertEquals
argumentName!!true
argumentName!!renderer.isActivated()
MethodName!!assertEquals
argumentName!!false
argumentName!!renderer.getShowVersion()
Method!!testJarURL
TypeName!!System.out
argumentName!!input.getAbsolutePath()
TypeName!!dir
TypeName!!zos
argumentName!!newZipEntry("log4j.xml")
TypeName!!zos
argumentName!!buf
argumentName!!0
argumentName!!len
TypeName!!zos
TypeName!!zos
TypeName!!DOMConfigurator
argumentName!!url
MethodName!!assertTrue
argumentName!!file.delete()
MethodName!!assertFalse
argumentName!!file.exists()
Class!!XLevel
Method!!toLevel
Method!!toLevel
Method!!toLevel
Class!!XMLLayoutTest
Method!!setUp
TypeName!!NDC
PrimaryName!!MDC.getContext()
Method!!tearDown
MethodName!!setUp
Method!!createLayout
Method!!parse
TypeName!!factory
argumentName!!false
TypeName!!factory
argumentName!!true
Method!!checkEventElement
MethodName!!assertEquals
argumentName!!"log4j:event"
argumentName!!element.getTagName()
MethodName!!assertEquals
argumentName!!event.getLoggerName()
argumentName!!element.getAttribute("logger")
MethodName!!assertEquals
argumentName!!Long.toString(event.timeStamp)
argumentName!!element.getAttribute("timestamp")
MethodName!!assertEquals
argumentName!!event.getLevel().toString()
argumentName!!element.getAttribute("level")
MethodName!!assertEquals
argumentName!!event.getThreadName()
argumentName!!element.getAttribute("thread")
Method!!checkMessageElement
MethodName!!assertEquals
argumentName!!"log4j:message"
argumentName!!element.getTagName()
MethodName!!assertNotNull
argumentName!!messageNode
MethodName!!assertEquals
argumentName!!Node.TEXT_NODE
argumentName!!messageNode.getNodeType()
MethodName!!assertEquals
argumentName!!message
argumentName!!messageNode.getNodeValue()
MethodName!!assertNull
argumentName!!messageNode.getNextSibling()
Method!!checkNDCElement
MethodName!!assertEquals
argumentName!!"log4j:NDC"
argumentName!!element.getTagName()
MethodName!!assertNotNull
argumentName!!messageNode
MethodName!!assertEquals
argumentName!!Node.TEXT_NODE
argumentName!!messageNode.getNodeType()
MethodName!!assertEquals
argumentName!!message
argumentName!!messageNode.getNodeValue()
MethodName!!assertNull
argumentName!!messageNode.getNextSibling()
Method!!checkThrowableElement
MethodName!!assertEquals
argumentName!!"log4j:throwable"
argumentName!!element.getTagName()
MethodName!!assertNotNull
argumentName!!messageNode
MethodName!!assertEquals
argumentName!!Node.TEXT_NODE
argumentName!!messageNode.getNodeType()
MethodName!!assertEquals
argumentName!!msg
argumentName!!messageNode.getNodeValue().substring(0,msg.length())
MethodName!!assertNull
argumentName!!messageNode.getNextSibling()
Method!!checkPropertiesElement
MethodName!!assertEquals
argumentName!!"log4j:properties"
argumentName!!element.getTagName()
MethodName!!assertEquals
argumentName!!"log4j:data"
argumentName!!child.getNodeName()
MethodName!!assertEquals
argumentName!!key
argumentName!!childElement.getAttribute("name")
MethodName!!assertEquals
argumentName!!value
argumentName!!childElement.getAttribute("value")
MethodName!!assertEquals
argumentName!!1
argumentName!!childNodeCount
Method!!testFormat
MethodName!!checkEventElement
argumentName!!parsedResult
argumentName!!event
MethodName!!checkMessageElement
argumentName!!(Element)node
argumentName!!"Hello, World"
MethodName!!fail
argumentName!!"Unexpected node type"
MethodName!!assertEquals
argumentName!!1
argumentName!!childElementCount
Method!!testFormatWithException
MethodName!!checkEventElement
argumentName!!parsedResult
argumentName!!event
MethodName!!checkMessageElement
argumentName!!(Element)node
argumentName!!"Hello, World"
MethodName!!checkThrowableElement
argumentName!!(Element)node
argumentName!!ex
MethodName!!fail
argumentName!!"Unexpected node type"
MethodName!!assertEquals
argumentName!!2
argumentName!!childElementCount
Method!!testFormatWithNDC
TypeName!!NDC
argumentName!!"NDC goes here"
TypeName!!NDC
MethodName!!checkEventElement
argumentName!!parsedResult
argumentName!!event
MethodName!!checkMessageElement
argumentName!!(Element)node
argumentName!!"Hello, World"
MethodName!!checkNDCElement
argumentName!!(Element)node
argumentName!!"NDC goes here"
MethodName!!fail
argumentName!!"Unexpected node type"
MethodName!!assertEquals
argumentName!!2
argumentName!!childElementCount
Method!!testGetSetLocationInfo
MethodName!!assertEquals
argumentName!!false
argumentName!!layout.getLocationInfo()
TypeName!!layout
argumentName!!true
MethodName!!assertEquals
argumentName!!true
argumentName!!layout.getLocationInfo()
TypeName!!layout
argumentName!!false
MethodName!!assertEquals
argumentName!!false
argumentName!!layout.getLocationInfo()
Method!!testActivateOptions
TypeName!!layout
Class!!ProblemLevel
Method!!testProblemCharacters
PrimaryName!!Thread.currentThread()
argumentName!!problemName
TypeName!!NDC
argumentName!!problemName
TypeName!!mdcMap
TypeName!!MDC
argumentName!!problemName
argumentName!!problemName
TypeName!!layout
argumentName!!true
TypeName!!mdcMap
PrimaryName!!Thread.currentThread()
argumentName!!threadName
MethodName!!checkEventElement
argumentName!!parsedResult
argumentName!!event
MethodName!!checkMessageElement
argumentName!!(Element)node
argumentName!!problemName
MethodName!!checkNDCElement
argumentName!!(Element)node
argumentName!!problemName
MethodName!!checkThrowableElement
argumentName!!(Element)node
argumentName!!ex
MethodName!!checkPropertiesElement
argumentName!!(Element)node
argumentName!!problemName
argumentName!!problemName
MethodName!!fail
argumentName!!"Unexpected element"
MethodName!!fail
argumentName!!"Unexpected node type"
Method!!testNDCWithCDATA
TypeName!!NDC
argumentName!!ndcMessage
TypeName!!NDC
MethodName!!assertEquals
argumentName!!1
argumentName!!ndcs.getLength()
TypeName!!buf
argumentName!!child.getNodeValue()
MethodName!!assertEquals
argumentName!!ndcMessage
argumentName!!buf.toString()
Method!!testExceptionWithCDATA
MethodName!!assertEquals
argumentName!!1
argumentName!!throwables.getLength()
TypeName!!buf
argumentName!!child.getNodeValue()
MethodName!!assertTrue
argumentName!!buf.toString().indexOf(exceptionMessage)!=-1
Class!!XMLLayoutTestCase
Method!!setUp
TypeName!!root
argumentName!!Level.TRACE
TypeName!!logger
argumentName!!Level.TRACE
Method!!tearDown
PrimaryName!!root.getLoggerRepository()
Method!!basic
TypeName!!root
argumentName!!newFileAppender(xmlLayout,TEMP,false)
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/xmlLayout.1")
Method!!locationInfo
TypeName!!xmlLayout
argumentName!!true
TypeName!!root
argumentName!!newFileAppender(xmlLayout,TEMP,false)
MethodName!!common
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/xmlLayout.2")
Method!!testCDATA
TypeName!!xmlLayout
argumentName!!true
TypeName!!root
argumentName!!newFileAppender(xmlLayout,TEMP,false)
PrimaryName!!Thread.currentThread()
argumentName!!"main"
TypeName!!logger
argumentName!!"Message with embedded <![CDATA[<hello>hi</hello>]]>."
TypeName!!logger
argumentName!!"Message with embedded <![CDATA[<hello>hi</hello>]]>."
PrimaryName!!Thread.currentThread()
argumentName!!oldThreadName
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter(),newSunReflectFilter(),newJunitTestRunnerFilter()}
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newXMLLineAttributeFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/xmlLayout.3")
Method!!testNull
TypeName!!root
argumentName!!newFileAppender(xmlLayout,TEMP,false)
PrimaryName!!Thread.currentThread()
argumentName!!"main"
TypeName!!logger
argumentName!!"hi"
TypeName!!logger
argumentName!!null
TypeName!!logger
argumentName!!"hi"
argumentName!!e
PrimaryName!!Thread.currentThread()
argumentName!!oldThreadName
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{newLineNumberFilter(),newXMLTimestampFilter(),newJunitTestRunnerFilter(),newSunReflectFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/xmlLayout.null")
Method!!testMDC
TypeName!!xmlLayout
argumentName!!true
TypeName!!root
argumentName!!newFileAppender(xmlLayout,TEMP,false)
TypeName!!context
TypeName!!MDC
argumentName!!"key1"
argumentName!!"val1"
TypeName!!MDC
argumentName!!"key2"
argumentName!!"val2"
TypeName!!logger
argumentName!!"Hello"
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{newLineNumberFilter(),newJunitTestRunnerFilter(),newXMLTimestampFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/xmlLayout.mdc.1")
Method!!testMDCEscaped
TypeName!!xmlLayout
argumentName!!true
TypeName!!root
argumentName!!newFileAppender(xmlLayout,TEMP,false)
TypeName!!context
TypeName!!MDC
argumentName!!"blahAttribute"
argumentName!!"<blah value='blah'>"
TypeName!!MDC
argumentName!!"<blahKey value='blah'/>"
argumentName!!"blahValue"
TypeName!!logger
argumentName!!"Hello"
TypeName!!Transformer
argumentName!!TEMP
argumentName!!FILTERED
argumentName!!newFilter[]{newLineNumberFilter(),newJunitTestRunnerFilter(),newXMLTimestampFilter()}
MethodName!!assertTrue
argumentName!!Compare.compare(FILTERED,"witness/xmlLayout.mdc.2")
Method!!common
PrimaryName!!Thread.currentThread()
argumentName!!"main"
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
TypeName!!root
argumentName!!"Message "+i
TypeName!!logger
argumentName!!Level.FATAL
argumentName!!"Message "+++i
TypeName!!root
argumentName!!Level.FATAL
argumentName!!"Message "+i
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!root
argumentName!!"Message "+i
argumentName!!e
TypeName!!logger
argumentName!!"Message "+++i
argumentName!!e
TypeName!!root
argumentName!!"Message "+i
argumentName!!e
PrimaryName!!Thread.currentThread()
argumentName!!oldThreadName
Method!!suite
TypeName!!suite
argumentName!!newXMLLayoutTestCase("basic")
TypeName!!suite
argumentName!!newXMLLayoutTestCase("locationInfo")
TypeName!!suite
argumentName!!newXMLLayoutTestCase("testCDATA")
TypeName!!suite
argumentName!!newXMLLayoutTestCase("testNull")
TypeName!!suite
argumentName!!newXMLLayoutTestCase("testMDC")
TypeName!!suite
argumentName!!newXMLLayoutTestCase("testMDCEscaped")
Class!!X
TypeName!!logger
argumentName!!"in X() constructor"
